{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Understand the 'vsCAPTCHA' app written in TypeScript and Deno."
            },
            {
                "StepNumber": 2,
                "StepString": "Interpret that 'b1' and 'b2' are initialized with a random number from 0-500."
            },
            {
                "StepNumber": 3,
                "StepString": "Understand that the app works by listening to 'POST' requests in '/captcha'."
            },
            {
                "StepNumber": 4,
                "StepString": "Check if the Header 'x-captcha-state' is set."
            },
            {
                "StepNumber": 5,
                "StepString": "Check if the body JSON value 'solution' is equal to the expected CAPTCHA."
            },
            {
                "StepNumber": 6,
                "StepString": "Understand that if the expected value does not match 'solution', the JWT field 'failed' is set to 'true'."
            },
            {
                "StepNumber": 7,
                "StepString": "Understand that if the expected value does match, a new CAPTCHA is generated."
            },
            {
                "StepNumber": 8,
                "StepString": "Realize that the flag can be attained with more than 1000 CAPTCHA solves."
            },
            {
                "StepNumber": 9,
                "StepString": "Understand the CAPTCHA generating code, which uses random numbers to make the CAPTCHA text."
            },
            {
                "StepNumber": 10,
                "StepString": "Attempt a brute-forcing approach by trying out all remaining expected values."
            },
            {
                "StepNumber": 11,
                "StepString": "Identify the problem with brute force: JWT success counter is reset to 0 if the old token is invalid and expiry was not extended for failed solving attempts."
            },
            {
                "StepNumber": 12,
                "StepString": "Work out bugs in the Python code."
            },
            {
                "StepNumber": 13,
                "StepString": "Attempt to refactor the code and limit the try range."
            },
            {
                "StepNumber": 14,
                "StepString": "Consider another solution of predicting the random numbers generated since they are not cryptographically secure."
            }
        ]
    }
}