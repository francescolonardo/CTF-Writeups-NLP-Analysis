{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Identify that the challenge consists of 3 services - Traefik (a HTTP proxy), a Python microservice, and a Go microservice",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Identify that the challenge consists of 3 services - Traefik (a HTTP proxy)"
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Identify that the challenge consists of 3 services - a Python microservice"
                    },
                    {
                        "SubstepNumber": 1.3,
                        "SubstepString": "Identify that the challenge consists of 3 services - a Go microservice"
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Observe the configuration file of the Traefik service, note that it acts as a reverse proxy for the Go microservice, and only accepts the POST, GET, OPTIONS, DELETE and PATCH methods",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Observe the configuration file of the Traefik service"
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Note that the Traefik service acts as a reverse proxy for the Go microservice"
                    },
                    {
                        "SubstepNumber": 2.3,
                        "SubstepString": "Note that the Traefik service only accepts the POST, GET, OPTIONS, DELETE and PATCH methods"
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Examine the Go microservice and note that it uses the Beego web framework, acting as a reverse proxy for the Python microservice when the PUT method is used",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Examine the Go microservice"
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Note that the Go microservice uses the Beego web framework"
                    },
                    {
                        "SubstepNumber": 3.3,
                        "SubstepString": "Note that the Go microservice acts as a reverse proxy for the Python microservice when the PUT method is used"
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Evaluate the Python microservice, note that it allows the running of arbitrary commands when the GET method is used",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Evaluate the Python microservice"
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Note that the Python microservice allows the running of arbitrary commands when the GET method is used"
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Realize the challenge of reaching the Python microservice that only accepts the PUT method while the Traefik proxy only allows the POST, GET, OPTIONS, DELETE and PATCH methods",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Realize the challenge of reaching the Python microservice that only accepts the PUT method"
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Realize the challenge of reaching the Python microservice while the Traefik proxy only allows the POST, GET, OPTIONS, DELETE and PATCH methods"
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Inspect the Beego source code to find a way of issuing a pseudo PUT request by using a POST request with a '_method' query parameter set to PUT",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Inspect the Beego source code"
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Find a way of issuing a pseudo PUT request by using a POST request with a '_method' query parameter set to PUT"
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Make a request to the Go microservice using a POST method with a '_method=PUT' query to reach the 'Put()' handler",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Make a request to the Go microservice using a POST method"
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Include a '_method=PUT' query parameter in the request"
                    },
                    {
                        "SubstepNumber": 7.3,
                        "SubstepString": "Reach the 'Put()' handler of the Go microservice"
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Identify that the Python microservice runs on Flask's built-in server which, by its insecure nature can be susceptible to HTTP request smuggling attacks",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Identify that the Python microservice runs on Flask's built-in server"
                    },
                    {
                        "SubstepNumber": 8.2,
                        "SubstepString": "Note that Flask's built-in server can be susceptible to HTTP request smuggling attacks due to its insecure nature"
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Navigate the HTTP request smuggling attack by noting that the Flask server treats underscores ('_') as hyphens ('-') and allows duplicate 'Content-Length' headers",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Navigate the HTTP request smuggling attack"
                    },
                    {
                        "SubstepNumber": 9.2,
                        "SubstepString": "Note that the Flask server treats underscores ('_') as hyphens ('-')"
                    },
                    {
                        "SubstepNumber": 9.3,
                        "SubstepString": "Note that the Flask server allows duplicate 'Content-Length' headers"
                    }
                ]
            },
            {
                "StepNumber": 10,
                "StepString": "Setup a request, with differing 'Content-Length' header values, taking advantage of the Flask server's failure to comply with RFC norms",
                "Substeps": [
                    {
                        "SubstepNumber": 10.1,
                        "SubstepString": "Setup a request"
                    },
                    {
                        "SubstepNumber": 10.2,
                        "SubstepString": "Include differing 'Content-Length' header values in the request"
                    },
                    {
                        "SubstepNumber": 10.3,
                        "SubstepString": "Take advantage of the Flask server's failure to comply with RFC norms"
                    }
                ]
            },
            {
                "StepNumber": 11,
                "StepString": "Cause a GET request to the Python microservice to be executed by smuggling it inside a POST request made to the Go microservice, using HTTP request smuggling",
                "Substeps": [
                    {
                        "SubstepNumber": 11.1,
                        "SubstepString": "Cause a GET request to the Python microservice to be executed"
                    },
                    {
                        "SubstepNumber": 11.2,
                        "SubstepString": "Smuggle the GET request inside a POST request made to the Go microservice"
                    },
                    {
                        "SubstepNumber": 11.3,
                        "SubstepString": "Use HTTP request smuggling techniques"
                    }
                ]
            },
            {
                "StepNumber": 12,
                "StepString": "Get a reverse shell on the Python microservice to obtain the flag",
                "Substeps": [
                    {
                        "SubstepNumber": 12.1,
                        "SubstepString": "Get a reverse shell on the Python microservice"
                    },
                    {
                        "SubstepNumber": 12.2,
                        "SubstepString": "Obtain the flag"
                    }
                ]
            }
        ]
    }
}