{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Analyzed 'http://35.207.189.79/pyserver/server.py' to find that the code seems to have a vulnerable functionality that doesn't sanitize query parameters properly"
            },
            {
                "StepNumber": 2,
                "StepString": "Found that you need to login as an 'admin' user to get a 'token' "
            },
            {
                "StepNumber": 3,
                "StepString": "Found that the 'DB_SECRET' which holds the flag is stored in another table by examining the 'init_db' function"
            },
            {
                "StepNumber": 4,
                "StepString": "Created a SQL injection payload to extract flag data from the server"
            },
            {
                "StepNumber": 5,
                "StepString": "Communicated with the server using a complete request with the SQL injection payload to extract data"
            },
            {
                "StepNumber": 6,
                "StepString": "Checked the server response to find the flag"
            }
        ]
    }
}