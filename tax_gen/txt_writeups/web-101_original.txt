Web 101
There is a blacklist filter for # and =. Using test' or 1-- - gives us account credentials, but logging in with these does not give us the flag.
We could use a UNION based injection to dump the database and get the flag.
username=test' or 1 UNION SELECT *, null from flag-- -&password=test' or 1 UNION SELECT *, null from flag-- -
Find the Malicious Attacks by Revo Force
We were given CSV files containing network traffic data, as well as a shapefile containing cameras in Singapore. We are tasked to find where most of the attacks are originating from, and the number of cameras within a 1.3km radius.
First, we obtain the most common src_ip, and find its corresponding latitude and longitude.
```python
import os, csv
SRCIPCOL = 9
LABEL_COL = 14
files = [x for x in os.listdir() if x.endswith('.csv')]
results = {}
for file in files:
    with open(file, newline='') as csvfile:
        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
        for row in reader:
            srcip, label = row[SRCIPCOL], row[LABELCOL]
            # print(src_ip, label)
        if label == 'malicious':
            print(file)
            if src_ip in results:
                results[src_ip] += 1
            else:
                results[src_ip] = 1

print(results)
print(max(results.items(), key=lambda x: x[1]))
```
After, we can parse the shapefile using geopandas, and use the haversine formula to determine the  great-circle distance between each camera and the src_ip location based on the latitude and longitudes.
```python
import geopandas as gpd
from math import radians, cos, sin, asin, sqrt
def haversine(lon1, lat1, lon2, lat2):
    """
    Calculate the great circle distance between two points 
    on the earth (specified in decimal degrees)
    """
    # convert decimal degrees to radians 
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])
# haversine formula 
dlon = lon2 - lon1 
dlat = lat2 - lat1 
a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
c = 2 * asin(sqrt(a)) 
r = 6371 # Radius of earth in kilometers. Use 3956 for miles
return c * r

LAT = 1.327187
LONG = 103.946316
RADIUS = 1.3
shapefile = gpd.readfile("SPFDTRLS.shp")
print(shapefile)
count = 0
for row in shapefile.itertuples():
    lat2, long2 = row.LATITUDE, row.LONGITUDE
    a = haversine(LONG, LAT, long2, lat2)
print('Distance (km) : ', a)
if a <= RADIUS:
    count += 1

print(count)
```
