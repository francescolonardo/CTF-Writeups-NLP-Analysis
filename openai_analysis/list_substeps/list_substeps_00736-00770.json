[
    "Find 'flag.file'",
    "Understand that the challenge involves investigating an unintentionally exposed internal API and finding a flag.",
    "Observe that the payload returns 'true'.",
    "Open the www.zip file.",
    "Reinspect the source code with attention to the user authentication process.",
    "Created an XML HTTP request that references the /etc/flag.txt directory",
    "Create a file of 1024 bytes with a random name ending in '.txt'.",
    "Display the iframe in the screenshotting service.",
    "Confirmed buttons trigger standard Linux commands.",
    "Find a formula",
    "Decide to use the same strategy to make admin accept the follow request.",
    "Identify additional pages: upload.php and photos.php",
    "Observe the HTTP response header",
    "Identify 'cat' command execution in GET request parameter 'f'.",
    "Run arbitrary javascript with the 'outputFunctionName' option",
    "Download the file named configs.zip.",
    "Attempted the SQL injection on the authentication form.",
    "Construct another GET request",
    "Observe the result of the exploit leading to '/etc/passwd'.",
    "Aim to access internal files",
    "Noted SQL errors",
    "Observe the interface to a router with a ping functionality.",
    "Create a zip file.",
    "Designed a URL payload",
    "Notice a redirection with 302 Found to /index.php.",
    "Discover that Apache2 is restrictive towards parsing the HTTP request.",
    "Verified that 'link' and 'style' tags are explicitly permitted during sanitization.",
    "Triggered the `api_post` event.",
    "Access the website.",
    "Used provided hexadecimal values.",
    "Read the response from FD 4.",
    "Send the POST request to change the status of the services.",
    "After unsuccessful attempts searching for YouTube's JSONP endpoints.",
    "Test the character '\"'",
    "Generate customized versions of the `User` and `Login` objects that allow bypassing the MFA token check."
]