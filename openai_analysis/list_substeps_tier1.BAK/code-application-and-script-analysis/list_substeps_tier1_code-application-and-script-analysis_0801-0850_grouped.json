{
    "DOMPurify and Sanitization": [
        "Take note that the data is sanitized by DOMPurify"
    ],
    "Bypassing iframe Script": [
        "Understand that the challenge is to bypass a script inside the iframe",
        "Understand that the script validates the origin and ID of the message",
        "Understand that the script prevents rendering of the body content",
        "Acknowledge that the bypass involves forcing a 'null' origin"
    ],
    "Manipulating Pop-up Attributes": [
        "Cause the pop-up to inherit the sandboxed attributes",
        "Set the origin as the target URL"
    ],
    "Script Analysis and Exploitation": [
        "Inspect the visible scripts",
        "Explore the source code files",
        "Find the flag in the source code",
        "Use the script on the prepared website",
        "Read the window variable using JavaScript"
    ],
    "Understanding XSS and DOMValidator": [
        "Identify that the <script>alert('pwned')</script> won't be executed.",
        "Identify that the reason for the script not being executed is the DOMValidator.js script.",
        "Realize that this JS file calculates some sort of document's hash.",
        "Realize that the JS file compares the calculated hash with the original hash.",
        "Note that the page wasn't setting any X-XSS-Protection header.",
        "Note that the XSS-Auditor in Chrome 74 is set to mode=filter.",
        "Note that mode=filter means any reflected XSS will be filtered and not executed.",
        "Realize that the filtering of sha512.js will cause the DOMValidator.js to crash.",
        "Understand that the crash of DOMValidator.js will allow the execution of <script>alert('pwned')</script>."
    ],
    "Code Inspection and Exploitation": [
        "Inspect the code in the /redirect.",
        "Understand that the potential XSS injection is blocked by the Content-Security-Policy header.",
        "Identify the anchor element that allows for a 'ping' attribute.",
        "Insert code into the /redirect that will change the password of the admin when the admin clicks the URL."
    ],
    "Exploiting Template Injection": [
        "Interpreted a template string",
        "Used Python's format function",
        "Determined that the string {args} returns ImmutableMultiDict([])",
        "Discovered that the goal was to read the 'app.secret_key' value",
        "Used the script from https://github.com/PequalsNP-team/pequalsnp-team.github.io/blob/master/assets/search.py",
        "Found the chain of properties",
        "Used the found object",
        "Accessed the 'app.secret_key' value",
        "In the 'Flask.current_app' module"
    ],
    "Analyzing Nonces for XSS": [
        "Include multiple script tags",
        "Expect that one of the nonces will work"
    ],
    "NoSQL Injection Techniques": [
        "Begin using the payload: {\"username\": \"admin\", \"password\": {\"$gt\": \"a\"}}",
        "Try the payload: {\"username\": \"admin\", \"password\": {\"$gt\": \"z\"}}",
        "Infer that fetching passwords is possible by comparing password characters to the alphabet in the payload",
        "Compare all characters in a possible range."
    ],
    "Server-side Template Injection Analysis": [
        "Identified the challenge as a NoSQL Injection task",
        "Take note of suspect templates in the webpage's code, such as an 'update store description' template.",
        "Recognize the problem could be related to Server-side Template Injection.",
        "Assess the function of the 'handlebars' library within the system.",
        "Continue the investigation by exploring the scope of the Template Injection vulnerability.",
        "Identify a token structure.",
        "Identify how the 'id' in the token is created.",
        "Analyze the structure of the store object.",
        "Recall if there are any properties that are not defined initially but used later.",
        "Locate where 'store.key' is defined using 'crypto.randomBytes'."
    ]
}