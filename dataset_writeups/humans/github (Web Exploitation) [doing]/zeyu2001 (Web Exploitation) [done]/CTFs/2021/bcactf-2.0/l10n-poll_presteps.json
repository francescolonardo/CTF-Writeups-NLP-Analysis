[
    "Reviewed the problem statement and noticed that the target application had a dependency on 'jsonwebtoken' 3.2.2",
    "Realized that 'jsonwebtoken' 3.2.2 had a known authentication bypass vulnerability",
    "Examined the application's server code and noticed that the JWT token is checked in the response for '/localisation-file'",
    "Understood that the JWT token is essentially encoded JSON data which are signed and verified on the server-side",
    "Noticed that the public key used for the JWT token handling is stored in the '__dirname' directory",
    "Discovered that the server generates a JWT token with the 'language' field set according to the parameter passed via the POST handler for '/localization-language'",
    "Realized that the GET handler for '/localisation-file' allows the reading of arbitrary files given the input 'language' in the JWT token",
    "Understood the constraints of the language input due to a regex check",
    "Tested the theory by sending a POST request to the '/localization-language' endpoint with the JSON data where 'language' is set to 'key'",
    "Set the 'language' parameter to 'key' in the JWT token",
    "Sent a GET request to '/localisation-file' to retrieve the key file",
    "Signed the token using the retrieved public key which the server misconstrued as an HMAC private key due to the vulnerability",
    "Created a script to generate the JWT payload with 'language' parameter set to 'flag.txt' and the token signed using the public key",
    "Verified that the token is successfully signed and the 'language' parameter was indeed changed to 'flag.txt'",
    "Used the server's own mechanism against it by setting the 'lion-token' cookie to the generated token to read the contents of 'flag.txt'"
]