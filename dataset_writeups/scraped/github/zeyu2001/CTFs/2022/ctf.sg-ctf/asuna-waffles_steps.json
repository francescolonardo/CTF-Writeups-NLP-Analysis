{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Visit the URL http://asuna.nullsession.pw."
            },
            {
                "StepNumber": 2,
                "StepString": "Observe HTTP response and try using /search as per instructions in response."
            },
            {
                "StepNumber": 3,
                "StepString": "Test with some classic SQL Injection payloads."
            },
            {
                "StepNumber": 4,
                "StepString": "Receive 403 Forbidden, page indicating SQL Injection attacks are blocked."
            },
            {
                "StepNumber": 5,
                "StepString": "Notice the 'Server' header in HTTP response - application is behind AWS ELB and likely AWS WAF."
            },
            {
                "StepNumber": 6,
                "StepString": "Review AWS WAF documentation, particularly for rules blocking longer payloads."
            },
            {
                "StepNumber": 7,
                "StepString": "Test a trivial payload with a length over 8kB and confirm it is not blocked."
            },
            {
                "StepNumber": 8,
                "StepString": "Write an SQLMap tamper script to prepend 'a' characters to the payload to exceed 8kB."
            },
            {
                "StepNumber": 9,
                "StepString": "Use the tamper script with SQLMap to dump the database."
            },
            {
                "StepNumber": 10,
                "StepString": "Find flag in the database dump: 'CTFSG{A_Cru3l_Summ3r_W1th_SAO_RELEASE_RECOLLECTION}'."
            },
            {
                "StepNumber": 11,
                "StepString": "Review AWS managed rules changelog and corresponding documentation for mitigation strategies."
            }
        ]
    }
}