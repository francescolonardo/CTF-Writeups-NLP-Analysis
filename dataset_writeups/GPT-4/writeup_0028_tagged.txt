Title: Command Injection via Unsanitized User Input
Primary topic: Web Exploitation
Secondary topic: Command Injection
Tools used: None
Keywords: command injection, payload, flag, server-side actions, user input

#overview
The author describes how they discovered and exploited a command injection vulnerability in a web application during a CTF competition. They were able to execute arbitrary commands on the server by entering commands through a form, which was not properly validated or sanitized.

#analysis
To test for command injection vulnerability, the author tried appending additional commands to the input field using common command separators such as ;, &&, or ||. They were able to execute both the ping command and display the content of the /etc/passwd file, confirming the presence of a command injection vulnerability.

To exploit the command injection vulnerability and retrieve the flag for the Web Exploitation challenge, the author crafted a payload that would search for the flag within the server's file system. After submitting the payload, the web application executed the commands, and the content of the flag file was displayed, allowing the author to obtain the flag needed to complete the challenge.

#attack_execution
The author used the following input to exploit the command injection vulnerability and retrieve the flag: ping 127.0.0.1; find / -name "flag.txt" -exec cat {} \;. By submitting this payload, they were able to execute arbitrary commands on the server and obtain the flag needed to complete the challenge.

The author emphasizes the importance of properly validating and sanitizing user input in web applications to prevent command injection vulnerabilities. By exploiting the command injection vulnerability, they were able to execute arbitrary commands on the server and obtain the flag needed to complete the challenge.

[CODE_REMOVED]

Note: I made minor punctuation and formatting changes to improve readability.