You have to read the `flag.php` file. Connecting to the URL you can see the following source code.

[PHP code that checks if the "view-source" or "warmup" parameters are present in the URL query string. If "view-source" is present, the script outputs the contents of the current file. If "warmup" is present and contains only non-alphabetic characters and is less than or equal to 60 characters in length, the script executes the contents of the "warmup" parameter using the eval() function. Otherwise, the script outputs "Try harder!" or "No param given" depending on whether the "warmup" parameter is missing or invalid.]

There is an `eval` execution over the `warmup` GET parameter, but this parameter is checked in a very strict way, so there is no possibility to invoke functions directly.

Luckily, some techniques to bypass this kind of checks exist.

The best way to attack the endpoint is to read another HTTP GET parameter, with non-alfanumeric name, e.g. `_`.

I found two interesting websites:
[Bypass WAF - Php webshell without numbers and letters]
[`preg_match` Code Execution]

In the second website, there is the same scenario of the challenge, so I used it to craft my payload.

Using bitwise XOR operation in PHP, you can craft `_GET` string using non-alfanumeric chars and assign this value to a variable with a non-alfanumeric name.

[PHP code that assigns the string "GET" to the variable named "_" using bitwise XOR.]

Then you can specify the execution of the content of a GET parameter with the following code.

[PHP code that executes a function specified in the value of the "_GET" variable.]

So the payload that will be executed by the `eval` instruction will be the following.

Using a payload like the following, will let you to execute the `phpinfo` page.

The complete payload is the following.

The result of the attack will be the flag.