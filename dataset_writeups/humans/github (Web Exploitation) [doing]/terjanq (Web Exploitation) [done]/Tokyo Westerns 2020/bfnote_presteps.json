[
    "Identified the application was protected by DOMPurify in version 2.0.16.",
    "Learned of an existing bypass in Chrome for the version of DOMPurify the application was using, which abused strange behaviors of `<math>` elements.",
    "Used the provided bypass and attempted to mutate the element in order to bypass the sanitizer.",
    "Ran a JavaScript snippet to test different elements for vulnerabilities with the DOMPurify sanitizer and `<math>` element bypass.",
    "Identified a mutation with the `<table>` element that could be simplified to create the exploit.",
    "Created a payload to leak cookies to the server by utilizing the mutation found earlier.",
    "Identified that the challenge seemed to involve reCAPTCHA, indicating the previous solution may not have been intended and deciding to look for another way to solve the challenge.",
    "Realized the application was simulating a Brainf*ck decompiler, which had protection against `<` and `>` characters with a `replaceAll` function.",
    "Understood that the `writeOutput` function could potentially be invoked while the program was still running, which could lead to unreplaced `<` and `>` characters provided the function was not called.",
    "Used DOM Clobbering to bypass the `CONFIG.unsafeRender` check.",
    "Injected two `reCAPTCHA` buttons to manipulate the `statusCode`.",
    "Implemented a trick to bypass `innerText` resetting the prepared CONFIG clobbering in the payload.",
    "Crafted a final payload that exploits the bypass and rewrites the document to `/terjanq/`."
]