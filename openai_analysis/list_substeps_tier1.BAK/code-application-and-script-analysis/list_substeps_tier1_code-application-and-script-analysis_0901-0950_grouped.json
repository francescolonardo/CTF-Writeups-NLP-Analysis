{
    "Code-level Manipulation and Bypass": [
        "Obtained index.php source code from source code.",
        "Gain full control of the $whoareyou variable.",
        "Hijack the $whoareyou variable.",
        "Managed to control $whoareyou variable.",
        "Abused the type attribute.",
        "Created a reverse shell script using only non-alpha chars.",
        "Ran the shell script by visiting the URL 'http://138.68.228.12/alien_message/super_secret_shell.php?_=system&__=rgrep MeePwn /var/www/'."
    ],
    "Web Application Analysis and Reconnaissance": [
        "Discover that Apache2 is restrictive towards parsing the HTTP request.",
        "Find information on Angular's secondary segments in paths.",
        "Investigate Angular's source code.",
        "Discover a 'primary' segment in Angular."
    ],
    "Endpoint and API Exploitation": [
        "Used %-decodes strings to match the '/debug/answer' endpoint.",
        "Performed a simple curl request to '/\\%64ebug/answer'.",
        "Determined the challenge requires bypassing an Angular application setup behind an Nginx reverse proxy.",
        "Recognized first flag hidden in angular endpoint /debug/answer restricted by Nginx and application.",
        "Recognized second flag hidden in express endpoint /api/true-answer accessible only from localhost.",
        "Analyzed server-side JavaScript handling requests to '/api/true-answer'.",
        "Realized the IP address couldn't be overridden as a result.",
        "Understood this was done server-side."
    ],
    "Exploiting DOMPurify and Sanitization": [
        "Identified 'this.service.getAnswer()' command in the Angular application.",
        "Understood it led to 'this.http.get('/api/answer')'.",
        "Identified the application was protected by DOMPurify in version 2.0.16.",
        "Learned of an existing bypass in Chrome for the version of DOMPurify the application was using.",
        "Abused strange behaviors of `<math>` elements.",
        "Attempted to mutate the element in order to bypass the sanitizer.",
        "Ran a JavaScript snippet to test different elements for vulnerabilities with the DOMPurify sanitizer.",
        "Tested different elements for vulnerabilities with the `<math>` element bypass.",
        "Identified a mutation with the `<table>` element."
    ],
    "Bypassing Application Logic and Exploiting Brainfck Decompiler": [
        "Realized the application was simulating a Brainf*ck decompiler.",
        "Discovered `<` and `>` characters were protected using a `replaceAll` function.",
        "Understood that the `writeOutput` function could potentially be invoked while the program was still running.",
        "Realized this could lead to unreplaced `<` and `>` characters.",
        "Recognized that the condition for this to occur was the function not being called.",
        "Used DOM Clobbering to bypass the `CONFIG.unsafeRender` check.",
        "Manipulated the `statusCode` using the injected buttons.",
        "Implemented a trick to bypass `innerText` resetting the prepared CONFIG clobbering in the payload."
    ],
    "Server-side Analysis and Exploitation": [
        "Study the provided Python script.",
        "Identify that the program attempts to validate IP addresses.",
        "Identify that the program checks if IP matches certain values to confirm it's a valid non-private IP.",
        "Note the condition within the 'admin_status' function.",
        "Identify that the condition only returns the flag if the request is coming from a '127.0.0.1' IP address.",
        "Recognize that the 'valid_ip' function restricts usage of certain IP addresses.",
        "Identify the possibility of representing the localhost (127.0.0.1) in a different notation.",
        "Identify the restrictions set in the 'valid_ip' function.",
        "Identify that representing the localhost (127.0.0.1) in a different notation can bypass the restrictions.",
        "Understand the provided code.",
        "Check if the IP is a private IP using the ipaddress library.",
        "Observe the code structure.",
        "Identify that input sanitization is only implemented on the front end via JavaScript.",
        "Search for 'ip/_ignition/execute-solution' in the Laravel panel"
    ]
}