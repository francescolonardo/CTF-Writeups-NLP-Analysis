{
    "Authentication and Session Management": [
        "Realize that the endpoint can be accessed without authentication.",
        "Reveal that session data is stored as a serialized pickle python object.",
        "Create a script to modify the sessionID to valid lua.",
        "Refresh the CSRF token.",
        "Log in using user credentials",
        "Enter new user_id and password",
        "Log in using new user_id and password",
        "Inject Carriage Return Line Feed (CRLF) in the username field",
        "Identify the presence of a tripcode",
        "Identify the correct matching tripcodes",
        "Log in as admin",
        "Set 'flagConverted' on the previously set sessionID.",
        "Decode the jwt cookie",
        "Set up a request with malicious cookie data",
        "Bypassed duration check",
        "Used leaked secret key",
        "Faked session with 'is_admin' privileges",
        "Utilize hardcoded key",
        "Enter an empty username and arbitrary password.",
        "Successfully log in to the system.",
        "Notice the particular cookie"
    ],
    "Data Leakage and Exploitation": [
        "Leak data byte-by-byte by hashing it and using as password for new account",
        "Bruteforce password at :7777 to determine the leaked byte",
        "Cycle between accounts due to 1 minute delay in database reset on new site",
        "Access unauthorized data or perform unauthorized actions.",
        "Target only admin endpoint."
    ],
    "Web Application Security": [
        "Control 'Version' in cookie.",
        "Bypass the X-Real-IP protection.",
        "Used the website functionality to get the uploaded PDF file signed.",
        "The server recognized the signature and provided the flag.",
        "Log into the website.",
        "Log in to investigate any intermediate requests.",
        "Submitted the flag.",
        "Acknowledge that the challenge involves bypassing origin check",
        "Steal the identifier from the pop-up",
        "Recognize that the challenge focuses on hacking the JWT cookie",
        "Understand that to obtain the flag, the secretid must match the length of the secrets array and the permissions must be set to 'admin'",
        "Identify that the server adds a new secret to the secrets array every time a cookie is signed",
        "Note that the server does not perform security checks on the alg or secretid fields in the JWT",
        "Create a JWT with the permissions set to 'admin' and the secretid set to a string that does not exist in the secrets array",
        "Send the malicious JWT to the server",
        "Note that the server will retrieve a value of 'undefined' for secret['randomstr'] and will not attempt to verify the JWT because the algorithm is 'none'",
        "Observe that this allows the server to pass the security checks and flag the token as true"
    ],
    "Web Application Penetration Testing": [
        "Identify the received flag as a cookie in the HTTP GET request",
        "Injected Carriage Return Line Feed (CRLF) in the username field",
        "Find the input box.",
        "Click the submit button.",
        "Identify the need to steal the identifier",
        "Identify the need to use a valid identifier to steal the data",
        "Observe from user session that the identifier is stored",
        "Observe from user session that the session cookie was set to Lax",
        "Notice that the server will retrieve a value of 'undefined' for secret['randomstr'] and will not attempt to verify the JWT because the algorithm is 'none'",
        "Notice the particular cookie"
    ]
}