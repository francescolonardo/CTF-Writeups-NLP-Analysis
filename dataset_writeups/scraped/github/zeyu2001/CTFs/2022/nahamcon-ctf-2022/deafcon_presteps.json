[
    "Identified the challenge as involving wkhtmltopdf, a tool that translates HTML content into a PDF.",
    "Understood that the input had to satisfy certain constraints, chiefly that 'name' could only contain alphanumeric characters, and 'email' had to pass RFC5322 validation.",
    "Used knowledge of these constraints to aim exploitation efforts at the more forgiving 'email' parameter.",
    "Examined the documentation for RFC5322 to understand what characters are allowed in the email parameter.",
    "Discovered that it allows for a domain-literal format, which permits just about any printable ASCII character.",
    "Crafted a URL that appended an HTML header tag to the domain part of the email parameter, thereby exploiting the lax character restriction.",
    "Found the server endpoint was also vulnerable to Server-Side Template Injection (SSTI).",
    "Tested the SSTI vulnerability by crafting a URL that performed simple arithmetic in the email parameter using Jinja2 template syntax.",
    "Further exploited the SSTI vulnerability by crafting a URL that would read the contents of a 'flag.txt' file on the server using built-in Python functions within the Jinja2 template."
]