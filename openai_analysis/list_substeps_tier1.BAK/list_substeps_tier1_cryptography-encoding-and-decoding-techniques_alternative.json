[
    "Decode the JWT at jwt.io.",
    "Take note of the 'username' from the form inputs.",
    "Observe that the decoded value of 'admin' is 'false'.",
    "Have the intention to alter the 'admin' value.",
    "Have the intention to alter the JWT 'username'.",
    "Use the JWT secret and the altered payload for the new token.",
    "Understand that brute forcing is not a viable option.",
    "Revealed and identified a string",
    "Find a cookie that contains a JWT hashed with HS256.",
    "Use rockyou.txt as the wordlist.",
    "Find that the content is retrieved from the URL in base64 format.",
    "Identify the content of the page is used to generate the base64 encoded URL.",
    "Assume a Local File Inclusion (LFI) exploitation is required",
    "Identify the 'secret key' as '1234'.",
    "Understand implications for encoding and decoding JWT tokens.",
    "Modify the 'role' field to 'Admin'.",
    "Discover that the code uses a blacklist Regex.",
    "Check if the body JSON value 'solution' exists.",
    "Understand that if the expected value does match.",
    "Identify that the code uses random numbers to make the CAPTCHA text.",
    "Identify that the JWT success counter is reset to 0 if the old token is invalid.",
    "Choose JWT.io or jwt_tool.py as the decoding tool.",
    "Inspect the decoded JWT.",
    "Identify the encoded public key in the JWT.",
    "Extract the flag from the '/flag' file.",
    "Use CrackStation to decrypt the hashed passwords.",
    "Notice the use of Python's eval() function.",
    "Perform XOR operation between the uploaded file and `cipher + 0xd34db33f`.",
    "Set the values of 'user' and 'pass' as 'karma'",
    "Note that the token uses the RS256 algorithm",
    "Built an HMAC(HS256) token.",
    "Deduce the need for brute-forcing the secret key.",
    "Receive in response an 'image' encoded in base64.",
    "Reveals the flag '35c3_this_flag_is_the_be5t_fl4g'.",
    "Find a cookie with the name 'flag'.",
    "Reveal the flag within the decoded value.",
    "URL-encoded the payload.",
    "Read source code via base64 encoding.",
    "URL-encoded the new payload.",
    "Executed the new URL.",
    "Obtained the flag.",
    "Used provided hexadecimal values.",
    "URL encoded the first binary string.",
    "URL encoded the second binary string.",
    "Observe the encoded string returned by the event",
    "Find the `login` cookie with base64 content",
    "Decode the base64 content",
    "Encode the malicious payload in base64",
    "Convert the Base64 string into hexadecimal format.",
    "Identify the hexadecimal string.",
    "Compress the malicious Java serialized object",
    "Find a base64 encoded value.",
    "Execute the exploit to retrieve the flag ('flag{npm_devs_are_pretty_bad_at_fixing_bugs}').",
    "Identify the involved keys - 'key' and 'key2'.",
    "Understand that this keylogger sends each pressed key to an external server as an encoded message.",
    "Briefly analyze the encoding function to get the basic idea for decoding messages.",
    "Leverage dual hexing technique to transform the flag.",
    "Encode the flag.png file using Base64 encoding.",
    "Encode the solution string using base64 to generate the 'userdata' parameter.",
    "Create a base64-encoded payload.",
    "Serialize the created object and encode it in base64 format.",
    "Reconstruct the user data from the encoded string.",
    "Encode the serialized object with base64",
    "Decoded the base64 encoded payload",
    "Decode the base64 data.",
    "Obtain the flag from the decoded string.",
    "Designed a payload to retrieve cookies and encode them in base64."
]