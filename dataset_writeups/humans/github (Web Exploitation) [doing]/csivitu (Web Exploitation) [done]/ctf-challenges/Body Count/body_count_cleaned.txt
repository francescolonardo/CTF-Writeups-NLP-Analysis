When you visit the website, you get redirected to `/?file=wc.php`. This might indicate that you can include files from the server, such as `/?file=/etc/passwd`. You can see in this file that there's a user called `ctf`, but that's not useful yet.

Moving on, you can find out that there's a `robots.txt` file at `?file=robots.txt`.
In it there is the `/?file=checkpass.php` file disallowed.

Visiting that URL, you get redirected back to `/wc.php`. However, it maybe that there's some code in `checkpass.php` that might be important. If you request it in `python` using `requests`, you can see that the response text says: "IMPORTANT!!! The page is still under development. This has a secret, do not push this page."

We can try to view the source of this page with the help of `php://filter`. Visit the website a base64 encoded string.

When you base64 decode this, you get some PHP code:
[This code shows the password as hardcoded, and that it's a cookie password. The page also contains an advice to not to push this page. The last line of the code redirects you to the homepage.]

Let's also check the source for `wc.php`. 

Here, you can see that a `password` cookie is being checked. Enter the password from the `$password` variable as the cookie (`w0rdc0unt123`), then you can see the webpage.

You also see in the source of `wc.php` that the input `$text` is obtained from the get param `text`, and is passed into `exec`. 
So, we can get remote code execution from here! Try with the payload: `'; ls #`

You can see the following output: "The Character Count is: wc.php"

But, we know for a fact that there's also `robots.txt` and `checkpass.php` in this folder. You then findout that `echo exec(...)` returns only the last line of the output. We have 2 choices from here. Either we do `'; <command> | tr '\n' '' #` to replace all new-lines with spaces, throughout the rest of the exploit. Otherwise, you can try to spawn a reverse shell, and then use your server to navigate through the directories. I'm going to use the `reverse shell` method.
[Reverse shell payload: Execute a command to establish a reverse shell connection to your server]

Once you pass this in the input, you get a shell on your server!

Let's navigate through the file system and see if there's something interesting. You can see there's a folder `/ctf`. Inside that, there are a lot of folders.

There's also a a bash script called`findaas`, which you can be used to locate the file `flag.txt`. Alternatively, you can use the find command directly.

Now that you know where the flag is located, you can try to read the contents of the file using the cat command. However, when you try to read the flag file, you get a "Permission denied" error.

But there's a catch. You don't have permission to cat the flag. However, when you see the `README` file, it says that the password hash for `ctf` is `6f246c872cbf0b7fd7530b7aa235e67e`. You can bruteforce that using offline tools or using [crackstation.net], and find out that the password is `csictf` (maybe you could've guessed it too).

Now, you can switch to the `ctf` user using the `su` command with the password `csictf`.
Finally, you can print the flag by using the cat command with the flag file path.
