{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Followed the challenge description and noted the use of the 'flask_caching' module for the app"
            },
            {
                "StepNumber": 2,
                "StepString": "Researched and found that the 'flask_caching' module can optionally store a python pickle in redis with a prepended '!'"
            },
            {
                "StepNumber": 3,
                "StepString": "Learned that python pickles can be used for Remote Code Execution when the caching modules use 'pickle.load()' to load the cached data"
            },
            {
                "StepNumber": 4,
                "StepString": "Set up a netcat listener on my server"
            },
            {
                "StepNumber": 5,
                "StepString": "Wrote a script which: constructs a command to be executed, creates a payload using python pickle containing a command execution statement, sleeps for half a second, reads the just created payload, and then sends it to the challenge webpage URL using a POST request"
            },
            {
                "StepNumber": 6,
                "StepString": "Used a GET request to access the cache data that triggers the command execution on the server side"
            },
            {
                "StepNumber": 7,
                "StepString": "Observed the output on my netcat listener, which included the CTF flag"
            }
        ]
    }
}