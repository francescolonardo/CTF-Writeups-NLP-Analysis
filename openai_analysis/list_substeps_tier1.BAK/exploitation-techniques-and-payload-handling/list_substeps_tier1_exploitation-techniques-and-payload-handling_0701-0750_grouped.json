{
    "XSS Vulnerabilities": [
        "Triggered the payload through an iframe by entering that into the webpage's input field",
        "The payload executed successfully",
        "Understand that the XSS vulnerability can enable CSRF attacks on the admin.",
        "Exploit the XSS vulnerability to send a POST request.",
        "Target the admin as the victim of the CSRF attack.",
        "Aim to steal the admin's secrets through the POST request.",
        "Implemented the attack using 'Lazy-loading' property.",
        "Discovered that any timing attack with 'performance.now()' would have worked.",
        "Executed the timing attack.",
        "Realized that this allows loading of a CSS file from the exploit domain."
    ],
    "Code Execution": [
        "Understood the process of flag brute-forcing.",
        "Realized that all possible characters are guessed for each position of the flag.",
        "Build Remote Code Execution (RCE) payload using '().__class__.__subclasses__.__getitem__(x)' method.",
        "Bruteforce the value of 'x' by submitting RCE payload with different 'x' values until a shell is received.",
        "Use a similar approach to bypass '.' character for callback domain.",
        "Use a similar approach to bypass '\"' character for bash command.",
        "Create final payload using all the methods of bypassing and injecting discovered.",
        "Submit the final payload to complete the challenge."
    ],
    "HTTP Request Smuggling": [
        "Realized the existence of a HTTP request smuggling vulnerability.",
        "Included 'GET /flag HTTP/1.1' in the request body.",
        "Included a dummy value as the request body.",
        "Fooled HAProxy into treating the request body as part of the first request.",
        "Sent the specially constructed requests to the server."
    ],
    "Cross-Site Scripting": [
        "Write a script that creates an 'img' element with src set to contain the 'document.cookie' value.",
        "Discovered the possibility of using an oracle.",
        "Identified the exploitation of a 302 redirect.",
        "Noted the flag leakage due to Fetch API redirect limit.",
        "Exploited the limit of 20 redirects using Fetch API.",
        "Bruteforced the flag letter by letter.",
        "Recognized that 'text/xsl' can potentially allow Cross-Site Scripting.",
        "Developed a payload utilizing 'x:script' to exploit the vulnerability.",
        "Designed a payload to retrieve cookies and encode them in base64.",
        "Constructed the payload to send encoded cookies to a pre-defined URL controlled by the attacker.",
        "Realized the input was being reflected into an XSL document.",
        "Noted that 'text/xsl' indicated potential for Cross-Site Scripting.",
        "Investigated methods for exploiting XSS attacks.",
        "Focused on exploiting XSS attacks accessing XSL document.",
        "Constructed a payload.",
        "Utilized 'x:script' to exploit the vulnerability.",
        "Propose escalation of vulnerability to Remote Code Execution (RCE)."
    ],
    "Command Injection": [
        "Identify attribute that can be polluted to spawn a new process or execute a command.",
        "Note the possibility of command injection in the 'execSync' call.",
        "Decide to pollute 'process.argv[2]' with a command injection payload.",
        "Test the creation of a reverse shell.",
        "Expect the execution to result in a reverse shell.",
        "Gain access to the application."
    ],
    "HTML Markup Injection": [
        "Find a HTTP request smuggling issue with incorrect parsing of chunk extensions.",
        "Recognize that HTML markup injection is allowed.",
        "Use this method to bruteforce the admin token one character at a time."
    ],
    "Application Exploitation": [
        "Exploit: apply negative price when selling a flag"
    ]
}