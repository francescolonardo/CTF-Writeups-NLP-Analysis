[
    {
        "Web Interaction and Navigation": [
            "Confirmed server-side file inclusion.",
            "Use only the first five elements of the array to create the file name",
            "The file name resolves to flag.txt after the process",
            "Read the information about 'Brobot' in the 'index.html' file",
            "Add a JSON object '{\"foo\":\"bar\"}' to the body.",
            "Identified the new flag value in the response",
            "Identified a different flag value in the response",
            "The data content for the request is constructed dynamically with a key-value pair.",
            "The value for the key-value pair is the payload.",
            "Used a known attribute in the object",
            "Identify a meta tag with the name attribute 'redpwnctf2020' in the HTML source code.",
            "Retrieve the value of the content attribute from the identified meta tag.",
            "Inject a random '<h1>Hello</h1>' tag.",
            "Assign the document's cookie to the query parameter of a specified URL.",
            "Receive a gif in response",
            "Identify the id of the newly created user from the received user list.",
            "Confirm the ability to upload TPL files.",
            "Retrieve the flag using the customized request.",
            "Revealed current directory as '/var/www/html'.",
            "Listed environment variables.",
            "Select the generated barcode file for upload.",
            "Locate the flag within the results.",
            "Input {{ state }}",
            "Discovered a suspicious 'data' parameter in the URL.",
            "Found a public key in the `/robots.txt` file.",
            "Retrieve the flag.",
            "Use each character as the value for both 'pass' and the User-Agent header",
            "Observe the flag after refreshing the page",
            "Extract the flag from the HTML content of the response",
            "Observe within the content of the page.",
            "Identify the 'secret' tag which contains the flag.",
            "Set the value of the header 'answer' as 'Fear the Old Blood'",
            "Include a calculation statement in the request",
            "Note that the number of pages is shown",
            "Check the cookies being set.",
            "Observe that comments under a picture can be inserted.",
            "Step 1: Insert the comment as a preview.",
            "Flag found: 'OOO{did you see my dog}'.",
            "Examined the functionality endpoint '/files/'.",
            "Found an interesting comment in the HTML source code: '?sauce'.",
            "Inspect how the website stores the 'name' parameter",
            "Retrieve the flag from the refreshed webpage",
            "Discover the usage of XML envelopes",
            "Identify the use of a productId value",
            "Observe the server reflecting the productId value in the response",
            "Observe that the server reflects the passed productId value in the response.",
            "Retrieved the PHP source code.",
            "Retrieved the PHP source code.",
            "Tried to enumerate DB tables.",
            "Noticed that an idea can be posted with an assigned ID.",
            "Include the payload in the request.",
            "Observe the presence of three files on the webpage.",
            "The encoded XMLHttpRequest retrieves document's cookie.",
            "Analyse the given hyperlinks.",
            "Used the profile picture upload feature",
            "Observe that the system environment flag is displayed when the response contains the specific IP address (119.29.29.29).",
            "Uploaded the first created PDF file to the website.",
            "Realized SQL queries can be dispatched to this open FD to read responses.",
            "Display current cookies",
            "Use 'flag.flag' as the 'id' to purchase the flag from the store for $1.",
            "Observed the application displaying contents of '/api/answer'.",
            "Successfully extract the user.",
            "Successfully extract the password token.",
            "The introspection query returns all the content of a graphql schema.",
            "Visualize the data structure using the graphql voyager tool.",
            "Retrieve the flag from the server's response",
            "Reviewed the XML return from the 'view XML' tab.",
            "Successfully extracted the flag from /var/www.",
            "Receive a list of pumps and their IDs.",
            "Submit an integer value as the input in the web application.",
            "Note the showcasing of uploaded photos.",
            "Set the 'language' parameter to 'key' in the JSON data.",
            "Access the subclass information",
            "Observe that 'admin' is replaced in the username field.",
            "Deduce that the '$ne' filter checks if the body of the notes is not empty.",
            "Construct the URL 'http://10.8.201.87:5000/checkbalance?amount=${num}' using the queried amount.",
            "The iframe source is /demo",
            "Data is POST-ed to the /api/filter endpoint",
            "Identify the request parameters of the /find endpoint: condition, startsWith, endsWith, and debug.",
            "Noticed the presence of file upload capability.",
            "Analyze the data being displayed",
            "Uploaded the .php16 file.",
            "Look for a value for 'confidential_documents'.",
            "Uploaded the final payload to the server.",
            "Used the same request to read the flag from the '/readflag' binary.",
            "Verified it returns data for user ID 1.",
            "Analyze the form submission structure",
            "Notice that files with commonly used extensions are downloaded.",
            "Payload 1: Obtained the full URL of the browsing context.",
            "Payload 2: Obtained the page contents.",
            "The task of this payload is to exfiltrate the content from `http://localhost:5000/admin`",
            "Identified the 'data-last' attribute of the '#note-text-area' element.",
            "Insert '__proto__' attribute in the request payload.",
            "Find the public key in '/signature/key.pub' as indicated in the hint.",
            "Observe that the fetched resources are inserted into the 'ajax-load' element.",
            "Capture the request, including the Admin-Key."
        ]
    },
    {
        "Code, Application, and Script Analysis": [
            "Identified that the user input '$text' from get param 'text' was being used.",
            "Observe that the server script takes user input as the 'icecream' value.",
            "Successfully change the website content from the original message to the target flag value 'csictf{h3r3_i_4m}'.",
            "Realized that caching modules use 'pickle.load()' to load cached data",
            "If it does, append guessed character to 'flag' and continue process",
            "Para meters and values such as 'domain', 'check', 'key', and 'column' are initialized.",
            "Noticed that body-parser is set to allow arrays and objects",
            "Observe a visible SQL query for the login request.",
            "Execute the query '123' UNION SELECT 1, sqlite_version(), 3;--'.",
            "Access the template files on the server.",
            "Obtain the content of the template files.",
            "Identify that the flag is in the same database as the toys, but its approved value is set to 0.",
            "The application connects to a sqlite database ('const db = new Database('toy_workshop.db');'), so inspect 'database.js'.",
            "This function adds our user provided query to the database and then calls 'bot.readQueries(db)'.",
            "Identify the first part of the flag within a comment",
            "Observe the usage of MySQL",
            "Utilize the group_concat() function",
            "Extracted the flag from the response",
            "Read the content of the /etc/flag.txt file",
            "Discover that the 'DB_SECRET' is stored in another table.",
            "Identify that the code is using the HTTP header to construct a file path.",
            "Replace any 'secret' tags with the word 'Protected'.",
            "Print contents of 'flag.file'",
            "Included a calculation statement in the request.",
            "Script composes the flag using the loop.",
            "Make an educated guess on the numbers at the beginning of the MD5 string",
            "Read the file 'flag210d9f88fd1db71b947fbdce22871b57.php' using the same technique applied during reading of 'config.php'",
            "Upload the new PHP exploit",
            "Replace the email value in the intercepted Post Request with a controlled one.",
            "Updated the '$url' attribute in the serialized object.",
            "Extract the flag from the server response.",
            "Opened 'last-revision', revealing the last update to the directory.",
            "Obtain the process ID as the result of executing the PHP command",
            "Determine that the 'counter' cookie string ends with a changing base64 encoded string",
            "Retrieve the JavaScript file from the webpage.",
            "Find commit IDs within the log.",
            "Using the constructed base, tried to enumerate DB tables.",
            "Discovered a connection being made to a MySQL server prior to shellcode execution.",
            "Use the SQL function 'max(A, B)' to sort through the concatenated 152-digit number.",
            "Search for a script.js file.",
            "Identify that the formula points to another sheet's labeled 'Source'",
            "Identify the flag in the response section of that response.",
            "Inspect webpage response.",
            "Used 'shell' as the setting name in the POST request",
            "Verify that the 'language' parameter is indeed changed to 'flag.txt'.",
            "Identify the index of `<class 'subprocess.Popen'>` as 258",
            "Identify the code normalizes file paths.",
            "Reveal mapping in the Apache configuration file.",
            "Described the 'words' table using the `1'; DESCRIBE tablename;` command.",
            "Described the '1919810931114514' table using the `1'; DESCRIBE tablename;` command.",
            "Used `1';EXECUTE IMMEDIATE CONCAT('SEL', 'ECT * FROM words');` to retrieve data from the 'words' table.",
            "Used ``1';EXECUTE IMMEDIATE CONCAT('SEL', 'ECT * FROM `1919810931114514`');`` to retrieve data from the '1919810931114514' table.",
            "Read the 'flag.txt' file using the root shell",
            "Use a POST request to request 'file:///code/app.py'.",
            "Check if the value of <userID>_isAdmin key in Redis database is 'yes'.",
            "Retrieved data from 'R34L_F14G' column in 'users_data' table.",
            "Identify the exposed '.git' directory",
            "Identify the flag exposed within 'app.py'",
            "Identified parameters in the WebSocket message.",
            "Recognized that the parameters in the WebSocket message could be modified.",
            "Extract 'P4s5_w0Rd' string using regex pattern.",
            "Index characters of 'P4s5_w0Rd' string.",
            "Check the 6th character of the flag in the SQL database",
            "Convert items in a dictionary to a list using 'list'.",
            "Mutable objects within namedtuple and tuple can still be modified.",
            "Fetch the flag using 'innerHTML'."
        ]
    },
    {
        "Information Gathering and Security Analysis": [
            "Discovered a folder '/ctf'.",
            "Inspect the downloaded file and find a GitHub URL.",
            "Recognize that the response text contains the flag.",
            "Search for the flag format",
            "Access the book in which the flag is contained.",
            "Notice settings related to a calendar.",
            "Identify the `database.sql` file in the source code.",
            "Use only characters from a-z and A-Z in the note.",
            "Identify that 'flag.txt' can be read.",
            "Determine that the website is an online calculator",
            "Another part of the flag provided.",
            "Get the flag by reading from a file in the '/etc' directory",
            "Discover POST requests sent to '/forgotpassword.html' page.",
            "Discover files in the directory, including the 'flag' file, amongst others.",
            "Search the entire file system for files named 'flag'",
            "Access the environment file.",
            "Find the flag inside the environment file.",
            "Read the flag from '/var/secret'",
            "Identify the list of banned words and special characters that the injection string must not contain.",
            "Identify the components of the encrypted string: remote IP address, a seed (IDSEED), and current date",
            "Observed the expected output - 'Content-type: text/html' cgi header.",
            "Predict the next 'nonces'",
            "Extract the 'id' of the user (attacker) from the decoded JWT token.",
            "Explored further based on the directory path.",
            "Assign the string 'Hello_Rules' to a variable.",
            "Use regular expressions to find specific fields.",
            "Read the contents of 'flag.txt'.",
            "Recognize that 10 records are created by tar utility by default.",
            "Retrieve the flag.",
            "Explore the file system to find the flag 'MetaCTF{wh4t??lfi_1s_ev0lv1ng??}'.",
            "Confirmed the existence of an additional table.",
            "Noticed the absence of legitimate ownership verification during file retrieval.",
            "Discover the .phtml extension.",
            "Generate a URL-encoded string.",
            "Retrieve required strings for password.",
            "Search for 'child_process' in all files of '/usr/local/lib/node_modules'.",
            "Discovered interesting information in the 'iam list-roles' response",
            "Discovered interesting information in the 'iam list-instance-profiles' response",
            "Compare the resulting origins of the pages",
            "Extract the first flag from the decoded field."
        ]
    },
    {
        "Tools, Scripting, and System Interactions": [
            "Located 'flag.txt'.",
            "Add 'messi' as a key in the JSON object in the HTTP request.",
            "Change the value of the 'messi' key to 'psg'.",
            "Open the final.txt file in the path",
            "Extract the source code from /src.tgz.",
            "Search for the flag within the script's output.",
            "Script retrieves all characters.",
            "Calculate the 'passcode'.",
            "Include /var/www/html/flag.php in the POST request",
            "Updated length of URL string according to the previous string replacement.",
            "Retrieve the flag from the file \"flag.txt\".",
            "Use the 'strings' command to extract the flag from the binary data in the 'print-flag' file.",
            "Use S3Scanner to dump the contents of the suspect S3 bucket",
            "Download the provided PHP files",
            "Find the flag file in the current working directory.",
            "Generate more base64 cookies.",
            "Pull multiple .git files such as `.git/index`, `.git/config`, `.git/HEAD` etc., from the server.",
            "The script reads from '/mydank'",
            "Provide an empty array for 'variables'",
            "Export or send the content of flag.txt.",
            "Utilize the observed character set.",
            "Combine it with the input of three commas to meet the requirement.",
            "Assign 'triton' as the rocket name in the POST request body.",
            "Append the current character to the password string.",
            "Trim a section of the server response using slicing.",
            "Observe the received Base64 encoded string.",
            "Create a file 'shell.txt'.",
            "Add the desired payload to 'shell.txt'.",
            "Create a file of 1024 bytes with a random name ending in '.txt'.",
            "Wrote a Python script to extract the most commonly occurring source IP (src_ip) from the CSV files",
            "Include the cleaned, manipulated PDF data in 'collision1.pdf'.",
            "Include the cleaned, manipulated PDF data in 'collision2.pdf'.",
            "Discover list of created books hosted on the server.",
            "Stored the '__proto__' key as ['__proto__'].",
            "Convert the image to text using OCR.",
            "Filter output using '/etc/alternatives/nawk'.",
            "Added the CSS and generated CSS to a GitHub repository.",
            "Craft a file upload request with specific HTML content.",
            "Downloaded files from the 'palindromecloudynekos' S3 bucket",
            "Set 'user.code' to a random 4-digit number.",
            "Unpack the tar archives"
        ]
    },
    {
        "Authentication, Session, and User Management": [
            "Inspect the decoded payload.",
            "Identify the route as '/getFile?file=admins'.",
            "Download the '.env' file.",
            "Realize the split parts were stored against assigned keys",
            "Get the value from the cookie",
            "Retrieve the value of AUTH_SECRET from the .env file",
            "Identify the flag in the 'X-Localhost-Token' header in the received server response.",
            "Find the file named configs.zip on the webpage.",
            "Set a 'flag' variable based on the response of the previous POST request.",
            "Step 2: Validate and insert into the database.",
            "Use the database credentials for authentication.",
            "Check the value of the cookie 'not_admin'",
            "Identify the username and password values.",
            "Sent the SQL query to FD 4 (MySQL server).",
            "Read the response from FD 4.",
            "Wrote the received response to the intended output.",
            "Note the presence of 'username', 'cnonce', and 'hash' parameters.",
            "Contain the password.",
            "Note the MongoDB storage of a password with username 'admin'.",
            "Revealed the 'username', 'uid', and 'iat' from the decoded JWT token.",
            "Line shows: '+ /.env: .env file found. The .env file may contain credentials.'",
            "Note that it includes the ability to upload photos.",
            "Sensitive, user-specific data could be read if /api/filter endpoint returns based on these cookies",
            "View files using the 'file://' protocol.",
            "Change the 'account[role]' attribute to 'admin'",
            "Extracted the 'secret' cookie value from the request.",
            "Observe that the end-point returns base64-encoded result of each ping request.",
            "Used the new AWS credentials to access DynamoDB"
        ]
    },
    {
        "Debugging, Monitoring, and Troubleshooting": [
            "Replace 'admins' with '.env' in the route.",
            "Or replace 'admins' with '../.env' in the route.",
            "Analyze and review the Dirb scan results",
            "Find the flag in the backup/b/a/c/flag.txt file.",
            "Submitted a malformed statement.",
            "Analyze the cookies",
            "Print the content of the environment file.",
            "Read the flag using the '< ../flag.txt' command.",
            "Submit a value for 'n' that is larger than 8 characters.",
            "Exclude common words from the search."
        ]
    },
    {
        "N/A": [
            "Identify the conditions for file retrieval",
            "Note that spaces or slashes in the filename are not allowed",
            "Note that filename length must be five or less",
            "Note that only js, ts, cpp, c files are allowed",
            "Infer that the flag is inside a `flag.txt`",
            "Note that an array passed in 'file' GET parameter gets converted and concatenated into a string",
            "Note that comma separation is added between each element of the array in the string format",
            "Translate the hex-encoded list, var _0x575c, into a more readable format",
            "Combine all password parts into a single string",
            "Enter a color",
            "Retrieve the cookie_secret value 'MangoDB'.",
            "Notice that to match the value of 'hash' and 'target', the 'hash' param cannot equal '10932435112'.",
            "Intend to use the crafted payload as the filename of the uploaded gif file.",
            "Conduct an analysis on the resulting PNG file.",
            "Discover that the flag is written on the resulting PNG file.",
            "Receive the flag in the body of the returned page",
            "These parameters are set up to be manipulated later.",
            "Understood that objects are converted",
            "Understood that converted attributes are comma separated",
            "Find the file named 'flag.txt'.",
            "Inspect the returned data",
            "Copy the value of the content attribute: 'flag{1nspector_g3n3ral_at_w0rk}'",
            "Decide to print all file contents",
            "Find a lot of printed information",
            "Find the flag 'zh3r0{h3y_d1d_y0u_upl04d_php_c0rr3ct1y???_84651320}'",
            "Obtain the 'userId' from the decoded information.",
            "Test various SQL queries to deduce the type of database in use.",
            "Determine from the result that the site uses SQLite as its database.",
            "Execute the query '123' UNION SELECT name, sql, null from sqlite_master;--'.",
            "Review the results to list all tables.",
            "Retrieve the flag from the returned results.",
            "Upload a file.",
            "Set the file extension as .tpl.",
            "Generate random content for the file.",
            "Submit the file for identification.",
            "Observe the uploaded file triggering a POST to /upload.php.",
            "Confirm that the file content is displayed.",
            "Upload a different file.",
            "Submit the file for observation.",
            "Note the changes in the displayed content.",
            "Connected to the database using the credentials from the JavaScript code.",
            "Examined the different database schemas and tables: accounts, config, env, innodb, sys, users.",
            "Found a flag in the 'users' schema.",
            "Discovered various other important details in other schemas.",
            "Downloaded the contents of an Amazon S3 bucket.",
            "Noted the creation of a 'storage.db' file",
            "Opened the 'storage.db' file with a SQLite database reader",
            "Viewed the stored data",
            "Identify the functionality of storing the request body object into a database.",
            "Discover the 'schema.prism' file.",
            "Identify the 'User' model within the file.",
            "Identify the 'isAdmin' field within the 'User' model.",
            "Identify the default value of 'false' for the 'isAdmin' field.",
            "Attempted to list the contents of '/etc/passwd'.",
            "Only 'index.php' was returned from the directory listing.",
            "Revealed a 'flag.txt' file.",
            "Identify a list of toys and some other properties.",
            "Attempt to read the required file.",
            "Read the flag.",
            "Create a 8 byte file equivalent to the data in `cipher + 0xd34db33f`.",
            "Upload the created file.",
            "Locate the style.css file within the website files",
            "Open the style.css file",
            "Identify the third part of the flag within the file contents",
            "Noticed that three successful purchases of 'cheap' had the same prefix.",
            "Observed that the prefix changed in the unsuccessful purchase.",
            "Inferred that the suffixes contain information about the product name and the purchase status.",
            "Combined portions of failed and successful purchase data strings.",
            "Plan to obtain information from MySQL special tables",
            "Obtain all entries in a column as a single row",
            "Test each column value",
            "Obtain table names from information_schema.tables",
            "Obtain column names from information_schema.columns",
            "Execute a final SQL query",
            "Retrieve the flag from the 'flag' column in the 'flag' table",
            "Analyzed the response",
            "Assign user value as 'admin'.",
            "Use the obtained token to perform a readfile operation",
            "Read the content of the `68696e742e747874` file, which is the hex representation of hint.txt",
            "Confirm that the password length is `22`",
            "Identify that query parameters are not properly sanitized.",
            "Inspect the server response.",
            "Search for the flag within the server response.",
            "Download the .DS_Store file.",
            "Extract hidden data from the .DS_Store file.",
            "Include spaces in the note.",
            "Receive a note ID.",
            "Identify that the source code is located at /src.tgz.",
            "Retrieve 'flag.txt'.",
            "Found the first part of the flag 'accessdenied{1_w3nt_thr0ug' in an HTML comment",
            "Recognize the first position in the JSON array as the winning position.",
            "Extract the flag from the provided string",
            "Extract the configs.zip file.",
            "Recognized from the error that the website is likely reading XML data from a database.",
            "Analyzed the results from the SQLmap.",
            "Concluded from the SQLmap results that there are two databases available: 'ASISCTF' and 'information_schema'.",
            "Continued to interpret the results from SQLmap.",
            "Discovered in the SQLmap results that the 'ASISCTF' database has one table termed 'books'.",
            "Evaluated the structure of the 'books' table.",
            "Noticed that the 'books' table has two columns: 'id' and 'info'.",
            "Conducted a remote file read operation.",
            "Successfully read the remote files.",
            "Retrieve the flag from the response of the previous POST request.",
            "Find 'flag.file'",
            "Identify 'flag.file' contents",
            "Recognize it as a GZip archive",
            "Recreate GZip archive",
            "Extract 'flag.txt' from the GZip archive",
            "Retrieved the flag in the response",
            "Retrieve user information",
            "Retrieve directory listing",
            "Identified that 'transmissions' had a fixed part at the beginning and end.",
            "Identified that 'transmissions' had a variable part in the middle.",
            "Script composes the flag.",
            "Appended unique transmission values to a list.",
            "Received a PDF file from the '/circle/one/' endpoint.",
            "Received a PNG image from the 'CONNECT /two/' request.",
            "Received a PDF file from '/circle/one/' endpoint.",
            "Received a PNG image from 'CONNECT /two/' request.",
            "Received a PNG image with a crossword puzzle from '/square/' endpoint.",
            "Identify 'login.php' and 'login.php.bak' files",
            "Realised that the generated PDF had the flag inside",
            "Analyzed the generated PDF.",
            "Collect the list of subclasses returned as a result",
            "Use the identified class (subprocess.Popen) to read the content of 'flag.txt'",
            "Discover a file named 'flag210d9f88fd1db71b947fbdce22871b57.php'",
            "Find the flag file 'flag.jpg'.",
            "Upload a PHP shell",
            "Contained the database name.",
            "Used the database name to compose the flag.",
            "Identify that the form only allows the uploading of PDF and DOCX files",
            "Upload a DOCX file",
            "Understand that DOCX files are actually a collection of XML files",
            "Create a new DOCX file",
            "Alter the file 'app.xml' inside the new DOCX file",
            "Modify the number of pages stored in 'app.xml'",
            "Identified the specific query string parameters needed according to the code.",
            "Checked the equality of generated data from both the hexadecimal values.",
            "Checked if both md5 hashes matched.",
            "Got two different URL encoded strings.",
            "Identify the flag hidden in the retrieved response: 'DawgCTF{cl!3nt_s1d3_v@l!d@t!0n_1s_d@ng3r0u5}'.",
            "Analyze the PCAP file.",
            "Filter for POST requests passing 'passcode' values.",
            "Analyze the encoded string",
            "Obtain the flag from the decoded text",
            "Find the database credentials in the output.",
            "Credentials: 'dogooo' for 'db_user' and 'dogZgoneWild' for 'db_pass'.",
            "Submitted a text content to a remote S3 bucket.",
            "Retrieved the text content.",
            "Received the final flag in the response.",
            "Recognize the challenge requires locating a flag in /var/www/html/flag.php on a web server",
            "Understood that data is packed in 'username:password:admin' format.",
            "Retrieved the flag after successful login.",
            "Identified the target 'config.php' file.",
            "Adjusted payload produced from serialization operation.",
            "Identify that 6 parameters are read from the server response",
            "Recognize the parameters as 'author', 'hidden', 'id', 'postDate', 'text', 'title'",
            "Received fire-place[0].html e4a4c2321d18246d027184605ca52866 as the challenge.",
            "Downloaded the provided HTML file.",
            "Observed that the HTML file establishes a connection to a Firestore environment.",
            "Observed that colored pixels on the canvas get stored into Firestore repository.",
            "Retrieved data from each document in the Firestore database using the code snippet.",
            "Verified the contents of the retrieved data.",
            "Found that the data are structures that contain all the RGB values for pixels.",
            "Tried accessing a document called 'flag' in the Firestore database.",
            "Verified the contents of the 'flag' document.",
            "Located the flag within the 'flag' document data.",
            "Received SQL query result and examined the output.",
            "Discovered that the 'users' table had 3 columns.",
            "Identified that the second column contains usernames.",
            "Exfiltrate the output of executed commands.",
            "Craft serialized input",
            "Enumerate the characters that are converted to underscores.",
            "Identify a file 'flag_for_this_INFERNO.txt' in the listed contents.",
            "Retrieve the flag.",
            "Use the directory listing to identify a 'print-flag' file.",
            "Observe message indicating the ability to upload, list, and view LaTeX documents",
            "Upload a LaTeX document",
            "Upload another LaTeX document",
            "Download the unlinked source file",
            "Receive the contents of the 'flag' file in the HTTP response.",
            "Interpreted the returned error message to infer the use of an SQLite database.",
            "Determined the position of the column used to return data, it was found to be the last one.",
            "Discovered the presence of only two tables - nxf8_users and nxf8_sessions.",
            "Enumerated the columns of the user table.",
            "Analyzed the composition of the sessions table.",
            "Retrieved the 'id' of Maria from the user table.",
            "Queried the 'nxf8_sessions' table for session IDs where 'user_id' is 5.",
            "Use the 'cat' command to display the contents of youfoundme-asd897kjm.txt",
            "Analyzed the requested pages",
            "Observe images displayed in a gallery",
            "Duplicate an image file",
            "Rename duplicated file to indicate shell",
            "Find the renamed file path of the uploaded image",
            "List directories in the root location",
            "Display the content of the flag.txt file",
            "Retrieve the flag from file content",
            "Observe different messages based on query results",
            "Create a SQL query to extract the data",
            "Specify the different IP address in the SQL query",
            "Retrieve the flag",
            "Identify an interesting file: require dirname(__DIR__).'/config/bootstrap.php';",
            "Find the entire path to an environment file.",
            "Pull the details of the user with the proper role",
            "Download the 'last-revision' file from the target server.",
            "Download the 'dirstate' file from the target server.",
            "Download the 'pack-names' file from the target server.",
            "Use the BZR Check command to find any missing files.",
            "Identify the Hexadecimal string.",
            "Accessed 'README' file within '.bzr' directory.",
            "Created 'foo.txt' file within the 'ctf-bzr' directory.",
            "Added 'foo.txt' file to the Bazaar repository.",
            "Removed 'foo.txt' from the 'ctf-bzr' directory.",
            "Downloaded the 'last-revision' file from the target server.",
            "Replaced the current 'last-revision' file with the downloaded one.",
            "Downloaded the 'dirstate' file from 'checkout' folder on the target server.",
            "Replaced the current 'dirstate' file with the newly downloaded one.",
            "Downloaded the 'pack-names' file from 'repository' folder on the target server.",
            "Understand that TODO notes of users can be read by enumerating URLs in a certain format.",
            "Enter '1' for 2 + 2 - 3 = ?",
            "Obtain the flag from the webpage which reads: MCA{sms_2fa_is_bad_also}",
            "Analyze the read files page",
            "Locate the 'name' parameter in the '/proc/self/fd/9' file",
            "Execute the 'ls -al' command",
            "Retrieve the list of files in the directory",
            "Scan the contents of the 'flag_is_here' directory",
            "Discover the presence of a 'flag.txt' file",
            "Retrieve and examine the contents of the 'flag.txt' file",
            "Enumerate the folder content.",
            "Find a 'flag' file.",
            "Perform a basic analysis of the cookies.",
            "Identify two JavaScript files",
            "Observe the returned data.",
            "Identify the flag utflag{n3xt_y3ar_go1ng_bl1nd} in the returned data.",
            "Identified a flag table in the database.",
            "Enumerated the columns of the flag table.",
            "Discovered a column named 'whatsthis'.",
            "Extracted the content of the 'whatsthis' table.",
            "Identified a flag table in the database.",
            "Discovered a column named 'whatsthis'.",
            "Executed another HTTP request to extract the content of the 'whatsthis' table.",
            "Retrieved the flag from the table content.",
            "Open one of the files.",
            "Locate the file named '(wtf.mp4)'.",
            "Received the cookies",
            "Find a www.zip file using dirsearch.",
            "Open the www.zip file.",
            "Structure the payload in JSON format.",
            "The filename used in the request was 'lol.txt'",
            "The content written in the request was 'HACKED'",
            "Explored files that could be overwritten",
            "Cannot modify anything in '/home/manhndd/.ssh/'",
            "Write the flag to '/opt/mydank'",
            "Access the 'user' directory.",
            "Find a flag.txt file in the '/admin' directory.",
            "Return the real flag in the 'uberadmin' directory.",
            "Ensure that a valid graph can be created using a specific format",
            "Analyze the form provided to upload images.",
            "Examine the source.zip file.",
            "Host a document type definition (DTD).",
            "Retrieve the flag.",
            "Injected email queue in rabbitmq",
            "Triggered an email with the flag as content",
            "Initiate data leaking process",
            "Dump all tables and columns",
            "Use sessionID as the first parameter.",
            "Discover the possibility of using a \"CREATE TABLE ... SELECT\" SQL statement.",
            "Set IDSEED with 'id\u306e\u7a2e'",
            "Overwrite the index.html file",
            "Read the file 'satellite.txt'.",
            "Return the content of 'satellite.txt'.",
            "Extract the system flag from the response.",
            "Open the file using an appropriate application or viewer.",
            "Read and retrieve the flag from the displayed contents.",
            "Inputted negative 'rate' value",
            "Access the 'target_credentials' database.",
            "Identify the 'secret_key' column within the database.",
            "Discover the flag 'rwctf{t0-h4ck-$kynet-0r-f1ask_that-Is-th3-questi0n}' in the 'secret_key' column of the database.",
            "Uploaded a larage number of valid files.",
            "Read the file 'apache.conf'.",
            "Retrieved the signature from the first signed PDF.",
            "Identified that the input is copied to a mmap-ed memory region within the function.",
            "Wrote the received response as the final output.",
            "Found a JSON response.",
            "Read the message in the JSON response.",
            "Used the flag present in the JSON response.",
            "Identify the need to steal the saved note",
            "Use the admin's cookie to retrieve the flag",
            "Inspect the contents of the accessed page.",
            "Edit the user's name",
            "Edit the user's own name",
            "Remove unwanted characters from the decoded message.",
            "Extract the final flag.",
            "Downloaded the src.zip file",
            "Extracted the contents of the zip file",
            "Found the bundle.js file",
            "Found the index.html file",
            "Download the provided 'src.zip' file from the challenge description.",
            "Download the provided 'flag.png.encrypted' file from the challenge description.",
            "Unzip 'src.zip'.",
            "Inspect the unzipped contents of 'src.zip'.",
            "Analyze the results from the SQL payload tests.",
            "Observe that the new representation of the flag is a 152-digit long number.",
            "Pass a range of data values to test the properties of the number casting in the database.",
            "Determine that integer values exceeding '9223372036854775807' will be converted into floating numbers.",
            "Attempt to concatenate large integers in SQLite.",
            "Find that SQLite treats large integers the same way it treats strings during concatenation.",
            "Manage to access the admin's note.",
            "Retrieve the flag.",
            "Identify the octal notation of 127.0.0.1 IP address is 0177.0.0.1.",
            "Found a part of the flag: CHTB{",
            "Found another part of the flag: us3full_1nf0rm4tion}",
            "Found the last piece of the flag: 1nsp3ction_",
            "Note the Json response upon attempted logins.",
            "Obtain the complete flag.",
            "Extract the understanding of the possibility to upload an image.",
            "Conduct experiments with uploading images.",
            "Manipulate RGB values in the uploaded images.",
            "Successfully read the flag.txt file using the manipulated RGB value.",
            "Examined the 'package.json' file in the site source.",
            "Identified the dependencies 'md-to-pdf' and 'nunjucks' in the 'package.json' file.",
            "Redirected the flag to a file in the invoices directory.",
            "Determine that the website is running on a MySQL database.",
            "Discover the config.py file.",
            "Find database information within the file.",
            "Deduce that the database logic requires password token.",
            "Attempt to extract database details.",
            "Observed the status report of the combat robot and a command prompt.",
            "Found database config info in config.py.",
            "Relocated flag name from 'flag.txt' to 'signal_sleuth_firmware' in root.",
            "Receive a full introspection response from the /graphql endpoint.",
            "Identify that the service lists all the items in the mentioned directory.",
            "Find the 'flag.txt' file.",
            "Navigate to the '/home/user' directory.",
            "Discover that the captured screenshot is of a submitted webpage URL",
            "Find a formula",
            "Identify a specific range 'A:B'",
            "Unhide hidden sheets",
            "Call a range from the document",
            "Realize that a hidden sheet's full range can be accessed",
            "Flag is inside the hidden sheet",
            "Try various inputs.",
            "Include special characters in the inputs.",
            "Increase the number of commas in the input to three.",
            "Modified the JSON body by removing the 'name' key value pair",
            "Realized that the 'name' key value pair is required",
            "Noticed that the 'salt' and 'hash' values are extracted from the JSON request body",
            "Discover that HTML files are uploaded successfully despite checks for images.",
            "Understand that HTML files are downloaded with random filenames.",
            "Upload the HTML file to the user profile.",
            "Execute the 'ls' command to list files in the current directory.",
            "Execute the 'cat' command to view the contents of a file.",
            "Include the Base64 encoded data as part of the request payload.",
            "Receive the Base64 encoded png file on the local machine.",
            "Followed directory path indicated in the scan result.",
            "Populate entry in /out/save.txt.",
            "Include var1 and var2 parameters in the request.",
            "Fetch headers from /out/save.txt.",
            "Fetch PHP session ID from /out/save.txt.",
            "Successfully extract a password from the database",
            "Observe the extracted password is very long and alphanumeric",
            "Found a PHP object in the decoded cookie.",
            "Identified attributes: 'username', 'admin', and 'profile_img'.",
            "Retrieve user and read permissions from the injected command.",
            "List the files using the backtick-enclosed 'ls' command.",
            "Identify the presence of 'index.php' file in the results.",
            "Identify the presence of 'flag.txt' file in the parent directory.",
            "Knew that the flag was located in /var/www.",
            "Uploaded the XML payload.",
            "Discover a text file named flag.txt",
            "Access the flag.txt file.",
            "Notice three endpoints (/status, /rocketLaunch, /fuel) in the response.",
            "Add a random pump ID from earlier /fuel endpoint response.",
            "Dump file contents of websites.",
            "Dump the '.git' directory.",
            "Use an extractor tool.",
            "Get files from the dump.",
            "Locate 2 'users.db' files.",
            "Confirm that both files are sqlite3 databases.",
            "Identify the database containing 'bcrypt' hashes.",
            "Identify the database containing 'md5' hashes.",
            "Crack the md5 hashes.",
            "Identify 3 log file links.",
            "Use curl to search for 'sdctf' in the logs.",
            "Retrieve all logs for further analysis.",
            "Identify leaks of bash history in the logs.",
            "Inferred from the challenge that grades are uploaded through a json file",
            "Added more semesters to the json file",
            "Set the production value to true in the json file",
            "Used the following json to upload the updated grades",
            "Compile a list of emails",
            "Identify fields that need to be extracted.",
            "Extract the response text (HTML).",
            "Convert flag images to base64 data.",
            "Split the large image data into three parts.",
            "Send base64 encoded image data to the requestbin.",
            "Take note of the directory contents returned by the server.",
            "Append each character to an initial flag string.",
            "Retrieve the output",
            "Identify a key called 'likeCookie' with a value of false.",
            "Discovered that '/lib/db/user.db' and '/lib/db/passcode.db' can be directly accessed from the server.",
            "Notice server-rendered pages.",
            "Retrieve the received private key.",
            "Set 'shell=true' for all objects",
            "Realize that the GET handler for '/localisation-file' allows the reading of arbitrary files.",
            "Retrieve the key file.",
            "Read the flag file",
            "Fuzz the username input with various inputs.",
            "Observe that anything after a whitespace is removed.",
            "Identify that data is being fetched from a MongoDB backend.",
            "Determine the code checks file extensions for uploaded files.",
            "Identify the allowed file extensions: 'txt', 'pdf', 'doc', 'docx', 'xls', 'xlsx'.",
            "Understand that each record consists of 20 blocks of 512 bytes each.",
            "Create a tar archive with all the uploaded files.",
            "Check if the combined size of uploaded files exceeds the size of 10 tar records.",
            "Retrieve the flag.",
            "Successfully added 1337 coins to the account.",
            "Caused an SQL error.",
            "Dumped the database.",
            "Located the flag.",
            "Flag was located within the public news_article table of the database dump.",
            "Deduced the number of columns based on error return.",
            "Used `1'; SHOW DATABASES;`.",
            "Used `1'; SHOW TABLES;`.",
            "Used `1'; USE information_schema; SHOW TABLES;`.",
            "Went to the '/tmp' directory",
            "Understand that the history length can be used to approximate the user's balance.",
            "Received a collection of CSV files containing network traffic data",
            "Received a shapefile with information about cameras in Singapore",
            "Discovered the latitude and longitude of the most frequently occurring src_ip",
            "Parsed the shapefile using geopandas",
            "Used the formula to calculate the great-circle distance between locations",
            "Looped through each camera location in the shapefile",
            "Checked if each camera location is within the specified distance from the point of interest",
            "Counted the number of cameras within the specified distance using the haversine formula",
            "Received the /api/flag contents",
            "Extract the flag from the response received on the callback URL.",
            "Recognize that a Redis database was being utilized.",
            "Set the <userID>_isAdmin value to 'yes'.",
            "Recognize the requirement of having write access to a file on the server.",
            "Identify the predictable storage location of PHP sessions as '/tmp/sess_<PHPSESSID>'.",
            "Recognized the platform as SQLite database.",
            "Retrieved table names.",
            "Identified the additional table holding the flag.",
            "Noted the appending of an entry to a log file.",
            "Observed the entry in the log file containing the cookies and value of 'X-Access' header.",
            "Obtained the flag from 'private.php'.",
            "Scanned each discovered username for potential files associated with them.",
            "Located the flag at `/users/employee/files/fileadmin`.",
            "Examine the registration fields",
            "Identify the 'account' object",
            "Identify the 'username' and 'password' attributes",
            "Assign the value 'true' to the cookie.",
            "Downloaded the flag.",
            "Search for `flag.txt` in the root directory.",
            "Send a request to read the content of the `flag.txt` file.",
            "Create 'first.pdf' using the chosen input PDF.",
            "Create 'second.pdf' using the chosen input PDF.",
            "Read and store the content of the merged PDF file.",
            "Read and store the content of the initial PDF files.",
            "Extract the count of PDF pages from the merged PDF file.",
            "Extract the count of PDF pages from the initial PDF files.",
            "Identify the list of references to the PDF pages in the merged PDF file.",
            "Exclude the reference to the dummy page from the list of PDF pages.",
            "Create a separate PDF page list for the first input PDF.",
            "Create a separate PDF page list for the second input PDF.",
            "Ensure the template holds identical initial content and MD5 hashes.",
            "Use the page count and PDFs list to write a manipulated 'hacked.pdf' file.",
            "Replace a specific string in the cleaned PDF data.",
            "Read the 'pdf1.bin' file.",
            "Read the 'pdf2.bin' file.",
            "Check the MD5 hash of 'collision1.pdf' using the hashlib library.",
            "Check the MD5 hash of 'collision2.pdf' using the hashlib library.",
            "Remove the intermediate 'merged.pdf' file.",
            "Remove the intermediate 'hacked.pdf' file.",
            "Confirmed the use of SQLite version 3.22.0.",
            "Retrieved table names from the database by manipulating the SQL query using 'moneys=' parameter.",
            "Used GROUP_CONCAT function to concatenate all retrieved table names into a single string.",
            "Retrieved column names of 'startup_users' table from the database using the SQL query.",
            "Used GROUP_CONCAT function to concatenate all retrieved column names into a single string.",
            "Dumped data from 'startup_users' table by using the SQL query and concatenating usernames using the GROUP_CONCAT function.",
            "Retrieved the flag by dumping data from 'startup_users' table again, this time concatenating 'wordpass' values using the GROUP_CONCAT function.",
            "The '__toString()' function can return the contents of a file",
            "The log_file of the 'access_log' object is set to '../flag'",
            "Noticed the feature using SQLite through filters and SQL statements",
            "Understood that trim(string, character) will remove `character` from `string`.",
            "Realized finally that both SQL statements are identical to 'SELECT username, password FROM users WHERE username='admin''",
            "The form contains an XML part.",
            "Included the final payload as part of form data.",
            "Received the flag as part of HTML response.",
            "Retrieved the flag at `/flag.txt`.",
            "Found some encoded payload",
            "Noted that incoming data was saved into HTML files",
            "Found that http://s0pq6slfaunwbtmysg62yzmoddaw7ppj.ctf.sg:18926/data.php lists all HTML files",
            "Observed data containing usernames and card numbers.",
            "Initiated a database dump.",
            "Observed the 'users_data' database structure.",
            "Identified a column labeled 'R34L_F14G'.",
            "Noted that queries to this column return blank results.",
            "Discovered that the app uses local storage to save notes.",
            "Understood that the admin bot stores a flag as a note on the challenge server before visiting the URL.",
            "Test different file extensions.",
            "Send the encoded payload through the cookie header.",
            "Read the first flag.",
            "Read the second flag.",
            "Extract the flag from the converted text.",
            "Dump the database.",
            "Find flag in the database dump.",
            "Retrieve the flag from the response.",
            "Select two strings from the 'magic hash' list that have a length of 15 or more characters",
            "Found a mechanism to fetch the poll options.",
            "Fetched the flag.",
            "Enumerate the 'id' range between '18446744073709551463' to '18446744073709551615'.",
            "Append the decoded result to a file.",
            "Perform a string search on the 'out.bin' file.",
            "Realize that the buffer length can be less than the number of characters written into it.",
            "List permitted characters.",
            "Access '/etc/hosts' file.",
            "Read binary '/readflag'.",
            "Retrieve only 'P4s5_w0Rd' string.",
            "Reconstruct into 'sRPd45w_0' string.",
            "Access the requirements.txt file",
            "The response text contains the secrets.",
            "Realized that the 'data-last' attribute contains the victim's saved note.",
            "Realized that the 'data-last' attribute should start with the correct string for it to be fetched.",
            "Saved the generated CSS in 'exploit.css'.",
            "Capture the requests received by the server logs, thereby obtaining the admin's cookie.",
            "Extract the contents of 'poc.odt' to access the 'content.xml' file.",
            "Compress the modified files back into a zip archive named 'modified.odt'.",
            "Identified the Content-Type.",
            "The payload utilized was designed to fetch cookies.",
            "Increase loyalty point history minimum of 1337 times.",
            "Use the workaround to parse the contents of '/etc/passwd' to the results",
            "Read '/proc/self/environ' to retrieve the flag.",
            "Notice vulnerability occurs when merging request data.",
            "Include JSON payload in the request body.",
            "Read the flag.",
            "Identified an S3 bucket in the HTML source",
            "Found a passcode in the downloaded files",
            "Scanned the 'flag_db' DynamoDB table",
            "Retrieved the flag from the 'flag_db' DynamoDB table",
            "Understand that the mysqljs/mysql package is used without the option stringifyObjects: true.",
            "Exfiltrate data.",
            "Print the content of the final page.",
            "Set the number of 'boops' in the token to 1501.",
            "Collect the flag from the server's response.",
            "The render2.asm file contains a hash table of commands used by the templating engine",
            "Extract the second flag from the decoded field.",
            "View '/etc/passwd' using LFI vulnerability.",
            "Attempt to display the flag within the response body",
            "Manipulate the 'accessGranted' attribute to bypass Access Denied error.",
            "Conduct an extraction of the flag character by character.",
            "Check if 'length' query parameter exists.",
            "Verify if 'length' query parameter is a string of length 0."
        ]
    },
    {
        "Exploitation Techniques and Payload Handling": [
            "Construct a parameter that meets the conditions and requests the flag file",
            "Found that the 'flask_caching' module can store a python pickle in redis",
            "Perform the action of uploading the gif.",
            "Use the crafted filename for the uploaded gif.",
            "Include 'payload' as the data",
            "Realized it gives the possibility to pass an object in the query statement",
            "Targeted the /etc/passwd file in the payload.",
            "Captured the flag from the response.",
            "Attempt to upload a valid PHP file.",
            "'database.js' lets you add and read items from the database. The query variable control is possible via the website, but SQL injection is unsuccessful.",
            "Configure the SQL injection to return all rows in the database.",
            "Retrieve the flag successfully",
            "Use the payload to extract flag data from the server.",
            "Extract data from the server.",
            "Test single characters from '0' to 'f'",
            "Discovered that a '<flag>' XML element is hidden in the 'books' table but not in the entry with 'id = 1'.",
            "Found that 'POST' and 'PUT' returned a different result.",
            "Included a reference to the /etc/flag.txt directory in the request.",
            "Discover '?lmao' in the robots.txt file",
            "Point 'xxe' to the required file 'file:///flag.txt'",
            "Website displays the content of the '/flag.txt' file",
            "Find the flag on the accessed page",
            "Identify the URL parameter labelled 'flag'",
            "Read the created item from the request smuggling.",
            "Manipulated the IP address parameter in the SQL query.",
            "Created a UNION SQL operation with 'null'.",
            "Structure the XML code to expose data from the /etc/passwd file.",
            "Decide to use the SQL LIKE clause.",
            "Attempt to read a file from the server",
            "Observe the data from the /etc/passwd file in the response",
            "Attempt reading a file from the server using the crafted payload.",
            "Observe that the response contains data from the /etc/passwd file.",
            "Used the SQL injection to enumerate the columns of the flag table.",
            "Exclude the existing private key from the payload.",
            "Force the debugging private key in the payload.",
            "Download the nginx.conf file successfully.",
            "Retrieve the corresponding IP address",
            "Capture the response from the server.",
            "'src' set to local files",
            "Leaked secret key '19eb794c831f30f099a31b1c095a17d6' from 'config.py'",
            "Fetch data using the manipulated query.",
            "Uploaded .htaccess file.",
            "Read the file '/etc/passwd'.",
            "Prepared the SQL query to send to File Descriptor (FD) 4, which is the MySQL server.",
            "In the password field of the JSON body, use NoSQL's $gt operator to bypass password check by typing {\"$gt\": \"a\"}.",
            "Use a length of '32 bytes' for the payload",
            "Further reduce the payload character count by poking around and using different functions",
            "Identify that 'eval' is used on data from the POST request.",
            "Replace one of the RGB values in the 'background' parameter.",
            "Utilized path traversal to access /etc/passwd file.",
            "Access the desired file using the exploited vulnerabilities.",
            "Used directory traversal (../) to access the flag",
            "Aim to access internal files",
            "The XML payload was designed to extract information from /var/www.",
            "Use a wildcard pattern and append the current character to check if the password starts with the current guessed string.",
            "Check if 'True' is present in the response.",
            "If 'True' is present, append the flag string character to the flag.",
            "Check if the response text contains 'LITCTF{' to identify a CTF flag.",
            "Use path traversal to get the SSH key.",
            "Get the SSH key to the attacker site.",
            "Set the 'language' parameter to 'flag.txt' in the payload.",
            "Understand that 'notes.count' applies a filter.",
            "Understand that 'notes.count' returns the count of notes that pass the filter.",
            "Recognize the use of wildcards in tar utility.",
            "Upload enough bytes to exceed 10 records.",
            "Added a special character (') to the end of the username.",
            "Appended a payload to the back of the signup date.",
            "Understood the goal to read the 'flag.txt' file that requires root access",
            "Objective is to dump the database and retrieve the flag",
            "Extracted the flag from the identified table.",
            "Assume that the input fields are not properly sanitizing special characters.",
            "Specify 'http://localhost:20011/admin' as the value for the 'galleryUrl' parameter.",
            "Received a list of users as a response.",
            "Attempted to replace 'card_num' with 'R34L_F14G' in SQLMAP query.",
            "Note that it executes file_get_contents('../flag.txt')",
            "Realized that the search function checks if a given fragment identifier substring is part of the flag.",
            "Exfiltrate the contents of the 'flag' file in the POST request.",
            "Prepend 'a' characters to the payload.",
            "Identify that /sakura allows interaction with the Redis cache.",
            "Exfiltrate the data to 'http://ATTACKER_URL'.",
            "Exfiltrated each character using the updated CSS.",
            "Obtained the flag in the response of the smuggled request.",
            "Submit the 'modified.odt' file with the payload to the server as a file upload."
        ]
    },
    {
        "Documentation, Strategy, and Miscellaneous Techniques": [
            "Concluded the phrase to be a flag after concatenating the chunks",
            "Look for elements in the '/home' directory.",
            "Identify the exposed methods as 'notes.count', 'notes.add', and 'notes.remove'."
        ]
    },
    {
        "Network and System Analysis": [
            "Select and observe the local storage.",
            "Specify that files with the name 'flag' are of particular interest",
            "Read the contents of 'flag.txt'.",
            "Noticed the user's IP address being attributed to an SQL query.",
            "Uploaded a file to the FTP server",
            "Inspect parameters in the request.",
            "Instructed to calculate the number of cameras within 1.3km radius of the origin point"
        ]
    },
    {
        "Cryptography, Encoding, and Decoding Techniques": [
            "Find that the content is retrieved from the URL in base64 format.",
            "Identify the content of the page is used to generate the base64 encoded URL.",
            "Check if the body JSON value 'solution' exists.",
            "Extract the flag from the '/flag' file.",
            "Receive in response an 'image' encoded in base64.",
            "URL-encoded the payload.",
            "Read source code via base64 encoding.",
            "URL-encoded the new payload.",
            "Observe the encoded string returned by the event",
            "Find the `login` cookie with base64 content",
            "Decode the base64 content",
            "Encode the malicious payload in base64",
            "Convert the Base64 string into hexadecimal format.",
            "Identify the hexadecimal string.",
            "Compress the malicious Java serialized object",
            "Find a base64 encoded value.",
            "Understand that this keylogger sends each pressed key to an external server as an encoded message.",
            "Encode the flag.png file using Base64 encoding.",
            "Serialize the created object and encode it in base64 format.",
            "Reconstruct the user data from the encoded string.",
            "Encode the serialized object with base64",
            "Decoded the base64 encoded payload",
            "Decode the base64 data.",
            "Obtain the flag from the decoded string."
        ]
    }
]