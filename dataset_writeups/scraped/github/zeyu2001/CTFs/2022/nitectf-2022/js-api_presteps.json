[
    "Analyzed the JavaScript source provided in the challenge.",
    "Identified the use of a message event handler that had to be exploited in tandem with a '.jsapi.tech' subdomain takeover.",
    "Recognized the ability to 'preview' HTML without saving it in this challenge. The HTML input however is sanitized through DOMPurify.",
    "Identified a loophole where the 'search' feature originally using 'this.noteData' could be bypassed since 'this.noteData' remained the same even after sanitizing HTML input via 'preview' feature.",
    "Ran into an issue with the 'search' feature checking for 'window.enable_experimental_features', which did not originally exist.",
    "Used DOM clobbering as DOMPurify doesn't protect against it to override 'window.enable_experimental_features' property.",
    "Inserted HTML through 'preview' feature to demonstrate DOM clobbering, thereby enabling 'enable_experimental_features'.",
    "Unintended solution used the property 'Lazy-loading' of an image to check if an extra div is rendered when search is correct.",
    "If no request is received for a particular character, it is concluded the extra div was rendered and search was a correct guess.",
    "A script was written to implement the attack involving 'Lazy-loading' property.",
    "A different intended solution involved the use of 'PerformanceLongTaskTiming API' to identify if the search was taking more than 50ms.",
    "Learned that any timing attack with 'performance.now()' would had worked too due to the JavaScript event loop being single-threaded.",
    "A script using 'setTimeout' function was written to execute the timing attack."
]