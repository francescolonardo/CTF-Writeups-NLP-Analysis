{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Load the CTF challenge and look into the provided source code to understand how the application works"
            },
            {
                "StepNumber": 2,
                "StepString": "Notice that the application is a 'screenshotter' service that allows users to enter arbitrary URLs to be rendered by a Chromium instance"
            },
            {
                "StepNumber": 3,
                "StepString": "Observe that the service doesn't allow for file:// protocol as it validates the URL to be HTTP(S)"
            },
            {
                "StepNumber": 4,
                "StepString": "Read the function getBrowserWithTimeout and note that a remote debugging port is exposed which normally allows commands to be sent to the browser through the DevTools protocol"
            },
            {
                "StepNumber": 5,
                "StepString": "Consider that the debugging port is randomized from the getRandomPort function"
            },
            {
                "StepNumber": 6,
                "StepString": "Formulate a strategy to leak the debugging port, understanding that the port scan needs to be completed within 30 seconds before the browser instance is closed"
            },
            {
                "StepNumber": 7,
                "StepString": "Code a web page that uses a Promise to try and load a URL, if the URL loads, the port is open and the script logs it and attempts to send this information to a remote server set up for this purpose"
            },
            {
                "StepNumber": 8,
                "StepString": "Deploy this page on a server and point the 'screenshotter' service to it, allowing you to detect open debugging ports"
            },
            {
                "StepNumber": 9,
                "StepString": "Create the server script to receive the port number from the exfiltration attempt, writing the port number used to a file to keep track"
            },
            {
                "StepNumber": 10,
                "StepString": "Request Chromium to open a new webpage, targeting the URL file:///tmp/flag.txt with the port number obtained causing the flag to be displayed in the browser instance"
            },
            {
                "StepNumber": 11,
                "StepString": "Fetch the screenshotter service and put the result in an iframe to display in the screenshotting service"
            },
            {
                "StepNumber": 12,
                "StepString": "Take the screenshot of the flag and convert the image to text using OCR (Optical Character Recognition) to extract the flag"
            },
            {
                "StepNumber": 13,
                "StepString": "Build a second-stage exploit that creates a WebSocket connection to the DevTools of the browser instance and sends JavaScript code to the browser instance using the Runtime.evaluate method"
            },
            {
                "StepNumber": 14,
                "StepString": "The JavaScript sends a POST request to the remote server, exfiltrating the contents of the 'flag' file"
            }
        ]
    }
}