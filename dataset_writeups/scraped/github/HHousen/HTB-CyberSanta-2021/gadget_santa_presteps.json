[
    "The website allows us to view some properties about a Linux system. The output looks just like standard Linux commands. The output of the 'List Storage' command seems to be executing 'df -h'.",
    "Guessed that this was a command injection challenge and tried accessing 'http://IP:PORT/?command=ls' to see if could list the contents of the current directory. This confirmed that it was indeed a command injection challenge.",
    "In the source code, observed that 'shell_exec' is used to run the 'santa_mon.sh' script. Our input in the 'command' URL parameter is then appended to '/santa_mon.sh' so that the final command looks like '/santa_mon.sh [COMMAND PARAMETER INPUT]'. Noted that the 'sanitize' function is called on our input, which removes spaces.",
    "Viewed the source code of the 'santa_mon.sh' program. Observed that the buttons in the web interface do indeed run standard Linux commands. Also saw that if there is an argument to the program, it is executed as a command.",
    "Discovered that 'ups_status' and 'restart_ups' commands return the output from a local web server using curl. Checked the output of the 'List Processes' command and found 'python3 /root/ups_manager.py'. Reviewed the source code for 'config/ups_manager.py'. This file runs an HTTP server with the two endpoints accessed by the 'ups_status' and 'restart_ups' commands - it also has a '/get_flag' endpoint that prints the flag.",
    "Decided to craft a command injection payload without using spaces to run 'curl http://localhost:3000/get_flag' which in turn will return the output to us through the webpage.",
    "Double quoted the payload for PHP to treat our payload as a single string argument, resulting in '/santa_mon.sh \"curl http://localhost:3000/get_flag\"', consequently executing the desired command and getting the flag output from the server.",
    "The final payload was `http://IP:PORT/?command=%22curl${IFS}http://localhost:3000/get_flag%22`."
]