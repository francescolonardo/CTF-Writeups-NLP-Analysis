{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Identify that the goal of this CTF problem is to bypass WAF protection to access local resources",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Identify the goal of this CTF problem is to bypass WAF protection."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Identify the goal of this CTF problem is to access local resources."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Study the provided Python script and identify that the program attempts to validate IP addresses and checks if IP matches certain values to confirm its a valid non-private IP",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Study the provided Python script."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Identify that the program attempts to validate IP addresses."
                    },
                    {
                        "SubstepNumber": 2.3,
                        "SubstepString": "Identify that the program checks if IP matches certain values to confirm it's a valid non-private IP."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Note the condition within the 'admin_status' function that only returns the flag if the request is coming from a '127.0.0.1' IP address",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Note the condition within the 'admin_status' function."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Identify that the condition only returns the flag if the request is coming from a '127.0.0.1' IP address."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Recognize that the 'valid_ip' function restricts usage of 0, 10, 127, certain ranges of 172, 169, and 192 IPs which includes the localhost (127.0.0.1)",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Recognize that the 'valid_ip' function restricts usage of certain IP addresses."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Identify the IP addresses that are restricted."
                    },
                    {
                        "SubstepNumber": 4.3,
                        "SubstepString": "Identify that the restrictions include the localhost (127.0.0.1)."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Identify the possibility of representing the localhost (127.0.0.1) in a different notation to bypass the restrictions set in the 'valid_ip' function",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Identify the possibility of representing the localhost (127.0.0.1) in a different notation."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Identify the restrictions set in the 'valid_ip' function."
                    },
                    {
                        "SubstepNumber": 5.3,
                        "SubstepString": "Identify that representing the localhost (127.0.0.1) in a different notation can bypass the restrictions."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Use the octal notation of 127.0.0.1 IP address which is 0177.0.0.1 to bypass the restrictions",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Use the octal notation of 127.0.0.1 IP address."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Identify the octal notation of 127.0.0.1 IP address is 0177.0.0.1."
                    },
                    {
                        "SubstepNumber": 6.3,
                        "SubstepString": "Identify that using the octal notation can bypass the restrictions."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Make a HTTP request to 'http://0177.0.0.1/admin-status' from the localhost",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Make a HTTP request."
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Specify the target URL as 'http://0177.0.0.1/admin-status'."
                    },
                    {
                        "SubstepNumber": 7.3,
                        "SubstepString": "Ensure the request is made from the localhost."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Observe the returned flag",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Observe the returned flag."
                    }
                ]
            }
        ]
    }
}