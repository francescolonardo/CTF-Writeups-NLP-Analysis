# Overview
It is a little bit different and harder than the previous challenge, in fact it is a local file inclusion exploit.

# Analysis
The problem was that the server appended .php after the name of the file parameter on the url, so you could only use a php wrapper to encode in base64 the content of some php pages; we encoded admin.php and cookie.php with a php wrapper called filter.

I got tired of my php sessions expiring, so I just put all my useful information in a serialized cookie

After a brief check on the source code of cookie.php, I found that the legacy object was exploitable with a blind sql injection!
The query is: "SELECT admin FROM pico_ch2.users WHERE admin = 1 AND username = 'this.username' AND password = 'this.password'"
so you could easily login as admin, but to get the flag you had to know the admin's password, so to get it you had to do a blind sql injection

with the string "password= a' or SUBSTRING(password, 1, 60) LIKE 'p%'" you can trigger a true or false response, in fact if the first character of the password is equal to the character you use as input, it will login as admin an print the admin welcome page

So you just have to try each letter of the alphabet plus the number and some char that can be on the flag, for each letter of the flag, and check if you get the admin page;
To send the request you have to create a cookie called user_info and set it with a base64 encoded serialized object.

# Attack Execution
I wrote a quick exploit in python with the requests library to get the flag.
After running it it returned the flag
