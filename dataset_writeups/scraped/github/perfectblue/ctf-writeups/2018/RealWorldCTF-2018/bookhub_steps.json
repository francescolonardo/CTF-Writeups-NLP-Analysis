{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Started the challenge by finding the /login/ endpoint and a www.zip file using dirsearch"
            },
            {
                "StepNumber": 2,
                "StepString": "Opened the www.zip file to find the source code of the web app"
            },
            {
                "StepNumber": 3,
                "StepString": "Identified the login process in the file bookhub/forms.user.py"
            },
            {
                "StepNumber": 4,
                "StepString": "Noticed the login occurs only if the user's IP address is one of the whitelisted IP addresses or when the debug mode is enabled. Found that the get_remote_addr() function from the file bookhub/helper.py is used to get the user's IP address"
            },
            {
                "StepNumber": 5,
                "StepString": "Added the header X-Forwarded-For, but got an error message that the IP address was not in the whitelist"
            },
            {
                "StepNumber": 6,
                "StepString": "Suspected a reverse proxy might be stripping the X-Forwarded-For header"
            },
            {
                "StepNumber": 7,
                "StepString": "Did a nmap scan on IP 18.213.16.123 which was not a local IP"
            },
            {
                "StepNumber": 8,
                "StepString": "Opened http://18.213.16.123:5000/ and found out the web app run in the debug mode"
            },
            {
                "StepNumber": 9,
                "StepString": "Identified some extra code for the debug mode in the bookhub/views/user.py file"
            },
            {
                "StepNumber": 10,
                "StepString": "Discovered a bug in the /admin/system/refresh_session/ endpoint which could be accessed without authentication"
            },
            {
                "StepNumber": 11,
                "StepString": "Identified there is a potential for a redis injection flaw in the refresh_session() function, where the user's sessionID is used in a redis eval() call with a lua script"
            },
            {
                "StepNumber": 12,
                "StepString": "Duplicated the server environment and set up a redis server to construct an exploit"
            },
            {
                "StepNumber": 13,
                "StepString": "Revealed that session data is stored as a serialized pickle python object, which could potentially be exploited for a pickle deserialization vulnerability"
            },
            {
                "StepNumber": 14,
                "StepString": "Created a script which modified sessionID to valid lua, refreshed the CSRF token and sent a POST request to the /admin/system/refresh_session/ endpoint"
            },
            {
                "StepNumber": 15,
                "StepString": "Constructed a payload to do a redis.call() to set the serialized object with the sessionID and made a GET request to /login/ to trigger the deserialization"
            },
            {
                "StepNumber": 16,
                "StepString": "Created a final script to send the command for flag extraction to the server"
            }
        ]
    }
}