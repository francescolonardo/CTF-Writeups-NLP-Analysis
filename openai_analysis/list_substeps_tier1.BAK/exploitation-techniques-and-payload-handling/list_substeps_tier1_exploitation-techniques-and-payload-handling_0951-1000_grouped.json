{
    "Deserialization Vulnerabilities": [
        "Make a GET request to /login/ to trigger the deserialization."
    ],
    "Directory Traversal": [
        "Confirmed the existence of a directory traversal vulnerability"
    ],
    "File Injection": [
        "The vulnerability is present in the POST filename",
        "The objective is to overwrite '.bashrc' file with their payload",
        "Disguise the phar file as a JPEG image.",
        "Bypassed strip_tags using the PHP bug."
    ],
    "Burp Suite": [
        "Used Burp's repeater to spam 'Go'"
    ],
    "Scripting": [
        "Simultaneously wrote a Python script",
        "Run brute.py script to output arbitrary SQL queries"
    ],
    "File Download": [
        "Download the nginx.conf file successfully."
    ],
    "Code Injection": [
        "Find a potential Off-by-Slash bug.",
        "Inject a double quote to break out of the alt tag.",
        "Add a JavaScript event handler for the XSS attack.",
        "The statement indicates that using the sanitized HTML with jQuery's insecure elm.html() method without the SAFE_FOR_JQUERY flag could lead to XSS.",
        "Use the PHP /// uri.",
        "Injected Carriage Return Line Feed (CRLF) in the username field",
        "Bot clicking our link gave us the flag.",
        "Compile the modified injection query.",
        "Execute the compiled query.",
        "Choose the vulnerable points in the script to perform the injection.",
        "Execute '/bin/sh' with an argument to read the flag file and redirect the output to '/tmp/jizz'.",
        "Exploit the vulnerability in the 'query_login_attempt' function.",
        "Encode the payload into 'multipart/form-data'.",
        "Use the encoded payload to bypass the WAF 'Skynet'.",
        "Prepared the SQL query to send to File Descriptor (FD) 4, which is the MySQL server.",
        "Understand that the crash of DOMValidator.js will allow the execution of <script>alert('pwned')</script>.",
        "Fetch data using the manipulated query.",
        "Uploaded .htaccess file.",
        "Read the file '/etc/passwd'."
    ],
    "XXE Vulnerabilities": [
        "Identify XML External Entity (XXE) vulnerability when loading SVG files."
    ],
    "Input Manipulation": [
        "Bypassed input validation",
        "'src' set to local files"
    ],
    "File Leaks": [
        "Leak data byte-by-byte by hashing it and using as password for new account",
        "Bruteforce password at :7777 to determine the leaked byte",
        "Infer that fetching passwords is possible by comparing password characters to the alphabet in the payload",
        "Find that the password is 'congratsyouwin' via the bruteforcing method.",
        "Read the file '/etc/passwd'."
    ],
    "IP Address Manipulation": [
        "Retrieve the corresponding IP address",
        "Craft another request and set the remote_addr to the required fake address."
    ],
    "Cookie Manipulation": [
        "Capture the response from the server.",
        "Set up a request with malicious cookie data"
    ],
    "Identifying Vulnerabilities": [
        "Bypassing Input Validation Using PHP Bug",
        "Identify the vulnerability (CVE-2022-26377)."
    ],
    "DOM Manipulation": [
        "Understand that the crash of DOMValidator.js will allow the execution of <script>alert('pwned')</script>."
    ],
    "Password Bruteforcing": [
        "Try the payload: {\"username\": \"admin\", \"password\": {\"$gt\": \"z\"}}",
        "Find that the password is 'congratsyouwin' via the bruteforcing method."
    ],
    "NoSQL Injection": [
        "Identified the challenge as a NoSQL Injection task"
    ]
}