{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Observed website which presented a login page with no additional information present or in the source code"
            },
            {
                "StepNumber": 2,
                "StepString": "Checked the docker configuration file for additional information"
            },
            {
                "StepNumber": 3,
                "StepString": "Determined that the website is a Flask application running on a MySQL database, suspected possible SQL Injection"
            },
            {
                "StepNumber": 4,
                "StepString": "Discovered database information contained within the config.py file"
            },
            {
                "StepNumber": 5,
                "StepString": "Review of the database.py file revealed a hint suggesting input was not sanitized"
            },
            {
                "StepNumber": 6,
                "StepString": "Deduced that the database logic requires the token of the password for successful login"
            },
            {
                "StepNumber": 7,
                "StepString": "Captured the login request to utilize in a SQL Injection attempt"
            },
            {
                "StepNumber": 8,
                "StepString": "Used sqlmap on the saved login request to attempt to extract database details"
            },
            {
                "StepNumber": 9,
                "StepString": "Successfully extracted the user and corresponding password token via SQL Injection"
            },
            {
                "StepNumber": 10,
                "StepString": "Logged in using the extracted credentials to successfully obtain the flag from the challenge"
            }
        ]
    }
}