{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Identified a heavily filtered error-based blind sql injection",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Analyze the web application/database setup's behavior."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Identified a heavily filtered error-based blind sql injection."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Created an SQL payload to get the length of the flag by trying out different lengths in place of '$LENGTH$'",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Develop an SQL payload that determines the length of the intended data ('flag')."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Test the SQL payload by iteratively substituting different lengths for '$LENGTH$'."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Found out that the length of the flag is 38 characters",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Analyze the results from the SQL payload tests."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Determine that the length of the flag is 38 characters."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Double hexed the flag to obtain a 152-digit long number that only consisted of digits",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Leverage dual hexing technique to transform the flag."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Observe that the new representation of the flag is a 152-digit long number."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Discovered that passing integers larger than 9223372036854775807 will get them cast into floating numbers",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Pass a range of data values to test the properties of the number casting in the database."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Determine that integer values exceeding '9223372036854775807' will be converted into floating numbers."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Leverage the property of SQLite that it can concatenate large integers as they were strings, such as '9223372036854775807||9223372036854775807' to give '92233720368547758079223372036854775807'",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Attempt to concatenate large integers in SQLite."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Find that SQLite treats large integers the same way it treats strings during concatenation."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Iterated over all composited 152-digit long '$NUMBER$' using the 'max(A, B)' SQL function which returns the larger one",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Use the SQL function 'max(A, B)' to sort through the concatenated 152-digit number."
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Identify all instances of the 152-digit number."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Assembled the identified parts of the double hexed flag to get the final flag: 343836313732363536423631374136353433353434363742333433313644354633373330354636323333354633343546333537313643333133373333354636443334333533373333373237430 which is 'HarekazeCTF{41m_70_b3_4_5ql173_m4573r|'",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Assemble the migrated instances of the 152-digit number."
                    },
                    {
                        "SubstepNumber": 8.2,
                        "SubstepString": "Identify the final flag from the assembled digits."
                    }
                ]
            }
        ]
    }
}