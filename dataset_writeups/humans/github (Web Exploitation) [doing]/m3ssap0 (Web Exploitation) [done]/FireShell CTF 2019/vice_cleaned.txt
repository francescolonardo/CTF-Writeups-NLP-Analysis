The challenge will give you a PHP script.

[PHP code implementing a class named "SHITS" that can make HTTP requests using the cURL library. The code contains a vulnerability that allows arbitrary code execution via an unserialize() call on the "gg" GET parameter.]

The flag is probably stored into `config.php` file, hence it must be printed via the *curl* execution.

To perform this, the `doit` method must be executed. That method is invoked into `__destruct()` function if present in the `$method` attribute of the destructed object.

The `unserialize` method must be abused to craft an object with desired parameters.

To serialize an object that can be used for the exploit, the following script can be executed.

[PHP code defining a class called "SHITS" with private properties, and then using the "serialize()" function to output a serialized representation of an instance of that class.]

It will print the serialized PHP object.

Now you have to customize the script in order to exploit the challenge.

First of all, the `$method` attribute must be set to `doit`.

The next attribute to set is `$url`. Analyzing the script, you can discover the presence of a check on localhost address. To bypass this check, the URL could be crafted based on the default path for web sites on Apache servers.

At this point, another check present in the script must be bypassed. The second checks is referred to the file extension; in particular, the extension `.php` will be blocked.

Luckily, the check is performed via `strpos` and there is a well-known strange behavior, based on which double URL-encoded chars are not considered by `strpos` but are considered valid by *curl*. So it is sufficient to replace the `.` char with `%252e`.

The produced payload will be the following.

After this operation the payload must be modified according to the `str_replace`.

The string `file:///var/www/html/config.php` is composed by 31 chars, with the replace operation it will become `file:///var/www/html/config%252ephp`; the GET operation performed server side will automatically perform a URL decode translating `%25` to `%`, hence the string will be `file:///var/www/html/config%2ephp` composed by 33 chars.

The length of the string into the payload must be updated accordingly.

At this point, the payload can be URL-encoded.

The server will reply to the GET request with the flag.