Title: Capturing Flags with XPath Injection in XML-Based Web Applications
Primary topic: Web Exploitation
Secondary topic: XPath Injection
Tools used: None
Keywords: XML, search box, vulnerability, payload, flag

#overview
In this CTF writeup, I describe how I exploited an XPath Injection vulnerability in a web application that used XML to store and process data. By submitting crafted input through the search box, I was able to access sensitive data stored in the XML documents and retrieve the flag needed to complete the challenge.

#analysis
To test for an XPath Injection vulnerability, I submitted various XPath expressions through the search box to see if the application would evaluate them. Upon submitting the crafted input, the web application displayed all the data from the XML documents, confirming the presence of an XPath Injection vulnerability.

To exploit the vulnerability and retrieve the flag for the Web Exploitation challenge, I crafted a more specific XPath expression that would search for the flag within the XML documents. After submitting the payload, the web application displayed the content of the flag element, allowing me to obtain the flag needed to complete the challenge.

#attack_execution
I used the following XPath expression to exploit the vulnerability: ' or '1'='1. And I used the following expression to search for the flag: //flag[contains(text(), 'FLAG')].

In conclusion, this CTF writeup highlights the importance of properly validating and sanitizing user input in web applications that utilize XML and XPath to prevent XPath Injection vulnerabilities.