A post in the home page says the following.

```
I finally upgraded my blog to use the tech of the future! I'm now using state of the art protection to defend from those pesky spammers... however, I still have to replace my database software to be truly able to call my blog "futuristic". :/
```

Doing some recon, a robots.txt can be found.

So you can discover an administration page at `/admin` endpoint.

Despite the interesting HTML comment, even changing the input field from `password` to `totp` will show that the authentication form is not vulnerable to SQL injection.

You can only discover that the username is `bob`, because for nonexistent user, the authentication answers `User not found`, otherwise it answers `Login failed`.

Analyzing the websockets traffic, you can discover that posts are retrieved with a packet like the following.

The second part of the packet is the post ID passed using the value specified like URL fragment (i.e. after `#`). 

Analyzing the code in the client side, you can discover that 6 parameters are read form the server response:

You can try a SQL injection on data passed using fragment values.

[URL containing SQL code injection attempt, trying to union select null values from a database table.]

Users can be read with the following.

[URL that may be used to perform a SQL injection attack by attempting to retrieve information from a database. The URL contains a union select statement that is used to combine information from two or more database tables.]

And the flag can be discovered reading all posts.

[URL containing a SQL injection attack payload that selects certain data from a "posts" table in a database.]