{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "There is a Use After Free (UAF) when deleting a node, with the HEAD never updating if the first index is removed.",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Identified a Use After Free (UAF) vulnerability."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Noticed that the HEAD never updates if the first index is removed."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "We can control `HEAD->name` by overwriting it in the next `malloc()` call in `insertSorted()`.",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Realized that `HEAD->name` can be controlled."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Identified the next `malloc()` call in `insertSorted()` where the overwrite can happen."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "In WASM, ASLR doesn't exist. We can therefore predict the address where our XSS payload will be inserted - this information can be obtained by debugging with Chrome DevTools.",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Noted the absence of ASLR in WASM."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Determined that the address of the XSS payload can be predicted."
                    },
                    {
                        "SubstepNumber": 3.3,
                        "SubstepString": "Realized that Chrome DevTools can be used for debugging and obtaining the required information."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "The `name` is written to memory, regardless of whether it passes the XSS check in `validateJared()`. We can exploit this by first 'inserting' our XSS payload then overwriting the `HEAD->name` to the address the XSS payload. `getNameAtIndex(0)` will then return the XSS payload when displaying the table.",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Noticed that the `name` is written to memory regardless of XSS check."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Identified the possibility of 'inserting' and overwriting the XSS payload in the `HEAD->name`."
                    },
                    {
                        "SubstepNumber": 4.3,
                        "SubstepString": "Realized that `getNameAtIndex(0)` will return the XSS payload when displaying the table."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "We can set a breakpoint after the `malloc` call and before the `strcpy` call. `$var8` is set immediately after `call $dlmalloc` - this would be the pointer to the newly allocated memory where the payload will be stored.",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Identified a suitable breakpoint after the `malloc` call and before the `strcpy` call."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Noticed that `$var8` is set immediately after `call $dlmalloc`."
                    },
                    {
                        "SubstepNumber": 5.3,
                        "SubstepString": "Understood that `$var8` represents the pointer to the newly allocated memory for the payload."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "The index is randomized, giving us a 10% chance of success. We could simply execute this multiple times until the index is 0.",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Noted that the index is randomized."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Recognized the 10% chance of success."
                    },
                    {
                        "SubstepNumber": 6.3,
                        "SubstepString": "Understood the strategy of executing multiple times until the index is 0."
                    }
                ]
            }
        ]
    }
}