[
    {
        "N/A": [
            "Discovered the password 'w0rdc0unt123'.",
            "Plugged the password ('w0rdc0unt123') from '$password' variable to the cookie.",
            "Found password 'csictf'.",
            "Switched to the user 'ctf'.",
            "Authenticated using the password 'csictf'.",
            "Recognize that altering the 'admin' value requires the JWT secret.",
            "Examine the request route for '/adminNames'.",
            "Recognize that the '.env' file contains the JWT secret.",
            "Create a new token.",
            "Recognize the need for an 'Authorization' header.",
            "Identify that the 'Authorization' header should contain a JWT.",
            "Note that this method of passing an array satisfies the filename restrictions",
            "Visit the disallowed route",
            "Note that the password for the portal is being checked by the script",
            "Enter the combined password into the portal",
            "Guess combinations of characters",
            "Reveal the entire password",
            "Replace the original signed cookie with the new one generated.",
            "Assign specific values to variables if challenge is 'Gate keeper'",
            "Check if guessed character is in password",
            "Continue script until full password is discovered",
            "A valid login has been achieved.",
            "Inferred the username to be michelle",
            "Attempted to pass an object in place of password",
            "Extracted the session cookie",
            "Used the session cookie to visit /flag",
            "Discover the secret to be 'supersecret'.",
            "Create a JWT with 'username: admin'.",
            "Add the new JWT to the cookie.",
            "Impersonate an admin.",
            "Identify that the 'member' field within the token object is currently set to 0.",
            "Capture the Admin Bot's cookies.",
            "Extract the flag from the Admin Bot's cookies.",
            "Retrieve the flag stored in the intercepted cookie.",
            "Copy the JWT token from the payload.",
            "Navigate to the user creation interface on the site.",
            "Create a new user as the default user role is immutable.",
            "Prepare a PATCH request for the new user\u2019s role.",
            "Send the request to modify the new user's role to 'Admin'.",
            "Login using the credentials of the newly promoted 'Admin' user.",
            "Attempted to login with 'admin', 'admin' as username and password.",
            "Failed to login with the provided credentials.",
            "Used the AWS credentials found in the 'config' schema.",
            "Ensured the crafted session cookie matches the expected format used by the application",
            "Successfully retrieved the flag",
            "Set the 'isAdmin' field to 'true' in the request body.",
            "Note that we can leave a comment on this page.",
            "Determine that it is unusable due to requiring authentication.",
            "Identify the disallowed path '/g00d_old_mus1c.php'.",
            "Understand that if the expected value does not match 'solution'.",
            "Identify that the JWT field 'failed' is set to 'true'.",
            "Identify the problem with brute force.",
            "Identify that the JWT expiry was not extended for failed solving attempts.",
            "Create an account on the website.",
            "Copy the 'session' cookie.",
            "Gain access as an admin user.",
            "Gain admin access.",
            "The website is a simple login page.",
            "Verify the obtained credentials: `manager:bigsanta!` and `admin:tryharder`.",
            "Try logging in using `manager:bigsanta!` credentials.",
            "Try logging in using `admin:tryharder` credentials.",
            "Realize that logging in as admin is necessary to access the flag.",
            "Log in using the working payload and reveal the hidden flag: `HTB{1nj3cti0n_1s_in3v1t4bl3}`.",
            "Create account at ngrok, download the application, and login.",
            "Finally, input the payload into the frontend for the application.",
            "Use the previously hardcoded auth cookie value",
            "Evaluate the if statement `0 == 'whatever the password is'`.",
            "Input {{ state.flag }}",
            "Type a random base username and password for the login.",
            "See a page notifying about an incorrect login.",
            "Identify the 'secret key' for the site's cookies: flour_sugar_chocolate_and_lotsalove.",
            "Get the cookie's value.",
            "Identify that you need change the 'admin' field to 'true'.",
            "Inspect the cookie.",
            "Identify the 'admin' field and its value.",
            "Change the value of the 'admin' field to 'true'.",
            "Identified that 'Cheap' can be bought by entering a valid credit card.",
            "Realize that the login site has filters applied to the quotation marks",
            "Log in again with the deduced password to get the flag",
            "Received the response",
            "Extracted the jwt token from the response",
            "Decrypted the jwt token using jwt.io",
            "Obtained the payload from the decrypted jwt token",
            "Noted the payload as {'user':'guest'}",
            "Passed the earlier jwt token as parameter",
            "Identified the need for admin credentials",
            "Edited the existing jwt token",
            "Changed the payload to {'user':'admin'} using jwt.io",
            "Submit the form with random user credentials",
            "Check the cookies of the webpage",
            "Find a 'token' key in the cookies",
            "Verify that the 'token' key contains a JWT",
            "Locate the private key",
            "Create a token",
            "Apply the signature to the token",
            "Set the 'user' payload to 'admin'",
            "Use the retrieved private key for signing",
            "Specify the 'RS256' algorithm for signing",
            "Logged in with a random value.",
            "Concluded that a JWT confusion attack is required.",
            "Crafted a token with 'admin' as the user.",
            "Used the crafted token as a cookie.",
            "Enter junk value to log in.",
            "Inspect browser cookies.",
            "Open jwt.io website.",
            "Enter token value.",
            "Verify token using jwt.io.",
            "Retrieve the found secret_key 'redraider'.",
            "Create a new token using HS256 algorithm.",
            "Identify that the web application has registration, login, and readfile functionalities",
            "Perform a login using the web application",
            "Obtain a token after successful login",
            "Discover the requirement to login as an 'admin' user.",
            "Identify the need for a 'token' to perform certain actions.",
            "Realize that a user can be registered",
            "Realize that the 'magic code' needed to login won't be received via email",
            "Use the retrieved 'magic code' to complete the login",
            "Identify that a cookie is set after login",
            "Identify that the cookie is set with the flag '35C3_LOG_ME_IN_LIKE_ONE_OF_YOUR_FRENCH_GIRLS'",
            "Receive a note PW.",
            "Find opportunity to bypass the second 'If' statement",
            "Note that 'warmup' GET parameter is strictly checked for.",
            "Discover the requirement of the 'otadmin' cookie",
            "Craft a value for the cookie",
            "Ensure the value is {\"hash\": \"T35T\"}",
            "Use the crafted cookie value",
            "Use the discovered cookie",
            "Retrieved the CTF flag.",
            "Was presented with an authentication form displaying the user's IP.",
            "Revealed default credentials.",
            "Used the default credentials.",
            "Logged in.",
            "Identify JWT 'identity' cookie as '31337'",
            "Identify JWT 'secret' cookie as 'dawgCTF?heckin#bamboozle'",
            "Observe a login page with two authentication options: username and password, or WifiKey.",
            "Discover that 'passcode' values are the first 8 characters of the hashed 'nonce' value.",
            "Apply the same process to the challenge's 'nonce' value.",
            "Enter a common password, e.g., 'password'.",
            "Identify functionalities accessed by authenticated users.",
            "Authenticate into the system.",
            "Create new users upon successful authentication.",
            "Verify authentication to the system.",
            "Create a new user.",
            "Observed the user registration process.",
            "Discovered that the value 'false' is forced into the admin field during the normal registration process.",
            "Successfully created an admin account.",
            "Used the created admin account to register with the username 'm3ssap0' and password 'pwnd:true'.",
            "Logged in using the newly created admin account.",
            "Attempt to change the input field from 'password' to 'totp'",
            "Observe the authentication response for a nonexistent user",
            "Observe the authentication response for an existing user with the wrong password",
            "Logged into the authentication form successfully, but noticed the flag didn't print.",
            "Got authenticated as 'flagman69'.",
            "Choose 'discord' as the OAuth2 Identity Provider upon redirection.",
            "Identify the need to bypass server checks",
            "Ensure the user's name and password are equal to the secret",
            "Identify what server-side checks are being done.",
            "Obtain the real flag within the FLAG cookie",
            "Register a user",
            "Escalate privileges",
            "Replace the existing `login` cookie",
            "Located Maria's session ID.",
            "Impersonated Maria.",
            "Each page had one letter for the name",
            "Decode the JWT.",
            "Understand its format.",
            "Find out that it has only user privileges.",
            "Use the obtained JWT to authenticate using the /api/normal endpoint.",
            "Receive a message stating flags are not for normal users.",
            "Attempt to use the /api/admin endpoint using the obtained JWT.",
            "Receive a message that the user is not an admin.",
            "Create a new JWT.",
            "Realize the limitations on the maximum attempts from the same IP address",
            "Understand that the IP address used to generate the token cannot be used to extract it",
            "Decide to generate the token from one IP address",
            "Reset the session",
            "Retrieve the discovered full token",
            "Find the usage of the username after authentication",
            "Register a user with the malicious username input",
            "Log in with the found user 'root'",
            "Enter the password 'jjLLgTGk3uif2rKBVwqH'",
            "Enter the username and password",
            "Determine the correct answers to the security questions",
            "Check if the password is the flag",
            "Receive a page showing successful entry and the flag",
            "Observe the cookie 'not_admin' after form submission",
            "Alter the value of the 'not_admin' cookie",
            "Pass the encoded content into the cookie.",
            "After logging in, retrieve the flag 'TUCTF{H1gh_S0urc3_3qu4ls_L0ng_F4ll}' from the site.",
            "Identify incoming cookies from the victim's browser.",
            "Observe cookies carrying the 'secret' cookie.",
            "Note that the 'secret' cookie contains the flag.",
            "Realize that the password is the flag.",
            "Ensured the voting process continues until more than 250 votes are cast in the same PHP session.",
            "Note that the username is 'backd00r' and the password is 'catsrcool'.",
            "Notice that the login occurs only if the user's IP address is one of the whitelisted IP addresses or when the debug mode is enabled.",
            "Reveal that session data is stored as a serialized pickle python object.",
            "Refresh the CSRF token.",
            "Log in using user credentials",
            "Enter new user_id and password",
            "Log in using new user_id and password",
            "Cycle between accounts due to 1 minute delay in database reset on new site",
            "Set 'flagConverted' on the previously set sessionID.",
            "Identify the correct matching tripcodes",
            "Log in as admin",
            "Decode the jwt cookie",
            "Used leaked secret key",
            "Faked session with 'is_admin' privileges",
            "Enter an empty username and arbitrary password.",
            "Successfully log in to the system.",
            "The server recognized the signature and provided the flag.",
            "Log into the website.",
            "Observe from user session that the identifier is stored",
            "Observe from user session that the session cookie was set to Lax",
            "Acknowledge that the challenge involves bypassing origin check",
            "Recognize that the challenge focuses on hacking the JWT cookie",
            "Understand that to obtain the flag, the secretid must match the length of the secrets array and the permissions must be set to 'admin'",
            "Identify that the server adds a new secret to the secrets array every time a cookie is signed",
            "Note that the server does not perform security checks on the alg or secretid fields in the JWT",
            "Create a JWT with the permissions set to 'admin' and the secretid set to a string that does not exist in the secrets array",
            "Send the malicious JWT to the server",
            "Note that the server will retrieve a value of 'undefined' for secret['randomstr'] and will not attempt to verify the JWT because the algorithm is 'none'",
            "Observe that this allows the server to pass the security checks and flag the token as true",
            "Notice the particular cookie",
            "Find admin cookie",
            "Capture admin's cookie",
            "Submit the admin's cookie",
            "Decide on the challenge to change the admin's password.",
            "Log in using the newly changed credentials of the admin account.",
            "Retrieved the flag: actf{traversed_the_world_and_the_seven_seas}",
            "Obtain the admin's cookie",
            "Understand that the goal is to fetch all of the password's characters.",
            "Use the retrieved password to get the flag: actf{still_no_sql_in_the_sequel}.",
            "Compose a JSON body with 'username': 'admin'.",
            "Check the response of the POST request for a session cookie.",
            "Identify and store the authenticated session cookie for 'admin' from the response.",
            "Devise a strategy involving acquiring the secret key from the store object.",
            "Plan to sign a 'jwt' with a controlled object to purchase a 'flag' for $1.",
            "Create a token with the overridden '[object Object]' as the secret key.",
            "Both 'profile.php' and 'manage.php' are protected by a 'hidden token'",
            "these tokens are associated with the current session",
            "Attempted to change status to 'premium'",
            "Received 'Permission Denied!' message",
            "Determine the purpose of the 'manage.php' page: changing 'user status' to 'premium'",
            "Identify the 'hidden token' protection",
            "Note that the tokens are associated with the current session",
            "Attempt to change status to 'premium'",
            "Note that the only missing piece is the 'token'",
            "Identify that an attacker has set up a keylogger.",
            "Identified the task as finding the correct password",
            "Gain admin access.",
            "Face a password prompt.",
            "Notice that clicking on 'Facebook', 'Google' or 'Twitter' buttons attaches the note id and password to the shared URL.",
            "Try to implement a similar mechanism to the CSRF mechanism used earlier.",
            "Grab the password.",
            "Attempt to log in the admin to a dummy Twitter account.",
            "Authenticate on behalf of the admin without success.",
            "Try to generate 'oauth tokens' for the flag note.",
            "Intercept 'oauth tokens' by stopping the request from 'twitter' to 'yeunote'.",
            "Managed to bypass the 'strpos(urldecode($remote),'..')' condition.",
            "Managed to bypass the 'parse_url($remote, PHP_URL_HOST)' condition.",
            "Found a way to bypass the Angular application.",
            "Successfully obtained the flag {you-have-to-eat-tomato-yume-chan!} as a result of the bypass.",
            "Used the provided bypass.",
            "Decide to use burpsuite to bypass the front-end input sanitization.",
            "Aim to extract the password serving as the flag.",
            "Confirm presence of characters in the password.",
            "Confirm that the flag begins with 'CHTB{'.",
            "Check successful log-in messages to determine correct characters.",
            "Observed login page.",
            "Decoded the JWT token.",
            "Sent a request to update the password via XHR.",
            "Logged in with the new password.",
            "Logged back in with escalated privileges.",
            "Log in using extracted credentials.",
            "Noticed password verification with passwordVerify.",
            "Logged in with the obtained credentials.",
            "The 'Mutation' query allows change of a user password.",
            "Use the 'UpdatePassword' mutation.",
            "Change the admin account's password.",
            "Log into the admin account.",
            "Use the new password.",
            "Enter the correct pin.",
            "Enter the username 'admin'",
            "Enter the password 'admin'",
            "Submit the authorization request",
            "Discover the existence of an admin login page",
            "Discover the login credentials in the logs",
            "Enter an apostrophe in both the username and password fields.",
            "Enter blank input enclosed in two apostrophes in the username field.",
            "Enter a single apostrophe in the password field.",
            "Enter blank input enclosed in two apostrophes in both the username and password fields.",
            "Enter username 'admin' and password 'admin' to login.",
            "Log in using the provided credentials.",
            "Observe the presence of a cookie named userData with userID and username.",
            "Discover that the correct user id is required for admin access, not the password.",
            "Constructed a JSON body with username and password",
            "Understood that it is possible to set custom values for 'salt' and 'hash'",
            "Recognized that any values can be used for 'username', 'password', and 'salt' as long as the if condition is met",
            "Login into the system.",
            "Attempt to follow admin.",
            "Locate the JWT token within the session cookie.",
            "Send the POST request to '/profile/request' with the 'id' of the attacker's user to gain admin's acceptance as a follower.",
            "Verify admin privilege.",
            "Performed the action of claiming the Free Flag.",
            "Face an obstacle due to the password length exceeding the character limit of the login page",
            "Discover an alternative approach to bypass authentication",
            "Identify the password field as the entry point for bypassing authentication",
            "Identify User Registration section.",
            "Identify User Login section.",
            "Identify Admin Login section.",
            "Proceed with user registration.",
            "Inspect the cookies.",
            "Locate the admin cookie.",
            "Locate the authenticated-user cookie.",
            "Locate the made-an-account cookie.",
            "Locate the visited-main-page cookie.",
            "Modify the value of the admin cookie.",
            "Notice that one gallery is set to private.",
            "Realize that the private gallery cannot be unnecessarily accessed.",
            "Try to access the admin panel of the website.",
            "Successfully log into the admin panel.",
            "Receive an error for missing launch time.",
            "Receive an error message indicating pumpId was missing.",
            "Submit a blank value for the 'n' parameter in the web application.",
            "Verify that the web application does not reject the submission of duplicate 'n' parameters.",
            "Locate a valid credential.",
            "Use the located credential.",
            "Acquire the flag upon login.",
            "Identify the presence of a potential password.",
            "Logged in as dennisb@uupeye.edu",
            "Tried to bruteforce the admin portal without success",
            "Successfully bypassed login and accessed the admin portal",
            "Identify that students may have weak passwords",
            "Access all accounts with the obtained credentials",
            "Initialize an empty password string.",
            "Check the response for the text 'No such person'.",
            "If the text is found, the guess was incorrect.",
            "If the text is not found, the guess was correct.",
            "Log in to the website using the username 'jack' and the discovered password.",
            "Notice a 'session_id' stored in a cookie.",
            "Change the hashed value to correspond to different usernames.",
            "Discover the security question answer from one of the images.",
            "Use the discovered security question answer to bypass the security check and log in as the 'admin' user",
            "Identify that the cookie 'token' has the httpOnly attribute.",
            "Recognize that the httpOnly attribute prevents retrieval of the cookie by XSS.",
            "Refer to the PHP manual to obtain the bcrypt hash and identify the password as 'rasmuslerdorf'.",
            "Add the encoded 'userdata' as a request parameter for the mfa service.",
            "Retrieve the flag as confirmation of successful authentication.",
            "Figured out the need of a passcode to perform admin functions.",
            "Realize that 'jsonwebtoken' 3.2.2 has a known authentication bypass vulnerability.",
            "Understand that the JWT token is essentially encoded JSON data.",
            "Understand that the JWT token is signed and verified on the server-side.",
            "Notice that the public key used for the JWT token handling is stored in the '__dirname' directory.",
            "Discover that the server generates a JWT token.",
            "Set the 'language' parameter to 'key' in the JWT token.",
            "Sign the token using the retrieved public key.",
            "Verify that the token is successfully signed.",
            "Use the server's own mechanism against it.",
            "Set the 'lion-token' cookie to the generated token.",
            "Submit an authentication request with a username.",
            "Fail the authentication.",
            "Change session username to 'root' using client-side cookies.",
            "Sign the Flask cookie with the desired username to authenticate as 'root'",
            "Separate user accounts were used.",
            "Messages were signed using ED25519.",
            "Signing was done to prevent tampering.",
            "Messages and signatures were verified by the frontend.",
            "GET query parameters were added to the messages before verification.",
            "Created new user with username 'FRONTEND_USERNAMEamount1337' to manipulate the message format.",
            "Server was able to provide signature for this manipulated message.",
            "Signed up on the website.",
            "The bash script would only spawn the shell if the caller is root",
            "If the history length is not three, the balance is exceeded.",
            "Discovered that using 'test' or 1-- - can obtain possible account credentials",
            "Server code for /api/filter endpoint returns the hash of the user's token in the response",
            "Received the admin's hash on the exploit server",
            "Admin's token access is required to access the flag",
            "Recognize the XSS prevention methods implemented by the site.",
            "Preserve the original admin's ID.",
            "Discover the PHP sessions are file-based.",
            "Understand the possibility of accessing the session file through the LFI vulnerability.",
            "Given login credentials for an online portal with MFA and Captcha code protection.",
            "Notice a 'login_session_token' is received upon login attempt.",
            "Identify that the 'login_session_token' is used when making a query to 'mfa_service.php'.",
            "Discover that there is no limit to the number of attempts made with the same token, as long as correct CAPTCHA code is provided.",
            "Successfully use the same CAPTCHA code to test two different MFA tokens by sending them both in the same HTTP request.",
            "Understand that MFA token is only 4 digits and take advantage of this limited search space by sending batches of thousands of queries together, thereby reducing the number of required CAPTCHA responses.",
            "Found a successful login attempt among the batched requests.",
            "Obtained the flag `MetaCTF{if_brute_force_doesnt_work_use_more_brute_forceeeeeeee}`.",
            "Recognized the presence of admin's 'Cookie' and 'X-Access' headers.",
            "Viewed the admin's cookie and 'X-Access' headers.",
            "Used the admin's cookies to visit 'private.php'.",
            "Registration process was completed in the system.",
            "Utilized two accounts for user enumeration.",
            "Successfully established the ability to enumerate usernames at `/users/<username>`.",
            "Observed server side validation for valid user during file retrieval at `/users/<username>/files/<filename>`.",
            "Log into the application",
            "Submit the registration form",
            "Escalate privileges",
            "Verify that the role was changed to 'admin'",
            "Recognize the challenge.",
            "Note the challenge is related to cookie manipulation.",
            "Notice the cookies.",
            "Observe cookies being set at every stage of authentication.",
            "Recognize the necessity.",
            "Note certain cookies are required.",
            "Understand the goal is to gain access to '/admin'.",
            "Inject another cookie.",
            "Inject a further cookie.",
            "Name the cookie 'made-an-account'.",
            "Assign the value 'true' to the cookie.",
            "Understand the requirements to pass the login authentication that includes correct username, password, and a Multi-factor Authentication (MFA) token.",
            "Identify the hardcoded username.",
            "Confirm the password from a known resource.",
            "Realize that initialization of the 'mfa' attribute as a reference to the '_correctValue' attribute allows to bypass the MFA check.",
            "Verify the user data.",
            "Use the dumped admin credentials to login to the first webpage.",
            "Use the remaining dumped credentials to login to the Admin page and access the flag.",
            "Check the cookies.",
            "Find that the '/display' page checks the session cookie.",
            "Identify the `very_auth` session variable that needs to be set to `admin`.",
            "Discover that the Flask session secret key is hardcoded into the source code.",
            "Notice that the remainder of the session cookie is a signature.",
            "Understand that the signature is checked server-side to prevent tampering.",
            "Realize that the secret key needs to be cracked.",
            "Discover that the secret key is 'butter'.",
            "Craft a new session cookie with the `very_auth` variable set to 'admin'.",
            "Utilize the secret key for crafting the new session cookie.",
            "Place the newly crafted cookie back into the application using Burpsuite.",
            "The flag retrieval is possible due to the deserialization of the 'login' cookie",
            "Decide to add the base64-encoded serialized object as a 'login' cookie in the browser",
            "Logged in as admin using the discovered SQL injection",
            "If identified, manipulated the XPath query to bypass authentication mechanisms of the application.",
            "Set up a server to catch the redirected request with admin cookies",
            "Hypothesized that the login page might be filtering requests by the user's IP address.",
            "Set the 'X-Forwarded-For' header to '192.168.3.16'.",
            "Bypassed authentication.",
            "Logged in as the admin.",
            "Noted that the site does not require proof of domain ownership.",
            "Create two user accounts",
            "Bypassed filter.",
            "Endpoint had been inaccessible due to lack of the appropriate cookie.",
            "Revisited the page with the newly acquired 'admin' cookie.",
            "Perform the action with `nobody` user permissions.",
            "Increase the privileges.",
            "Claim the flag.",
            "Obtained knowledge of the 'secret' token.",
            "Learned that the backend server checks for the 'secret' cookie.",
            "Discovered that the flag is returned by the backend server only if the 'secret' cookie is present.",
            "Note that the JWT token needs to have the role attribute changed to admin.",
            "Study the registration and login process.",
            "Note that a JWT key is created for each new user during registration.",
            "Understand that the JWT key is used to sign the token during login.",
            "Identify the caching mechanism for user JWT keys.",
            "Note that each user's JWT key is stored in a Redis cache.",
            "Observe that the JWT key is only stored for 2 seconds.",
            "Understand that the SSRF request must be made immediately after login.",
            "Use the JWT secret to create a JWT with the admin role.",
            "Make a request to /flag using the new admin JWT token.",
            "Used the obtained OTP for verification and login.",
            "Obtained the admin's token.",
            "Submitting the generated token to retrieve the flag.",
            "Check if the client has the correct 'auth' cookie set.",
            "Understand that the correct 'auth' cookie is set at the '/auth' endpoint.",
            "Confirm that the request to the '/auth' endpoint is made locally by the admin bot.",
            "Realize that there is no vulnerability in the ws.origin.",
            "Identify that CSRF token is not being checked.",
            "Understood that the input had to satisfy certain constraints, chiefly that 'name' could only contain alphanumeric characters, and 'email' had to pass RFC5322 validation.",
            "Aim to reset the admin's 2FA code through the POST request.",
            "Include 'credentials: include' in the request to bypass same-origin policy restrictions.",
            "Decode the 2FA token received from the previous step.",
            "Obtain the admin 2FA code from the decoded token.",
            "Use the 2FA token on an authenticator application.",
            "Generate the admin 2FA codes with the authenticator application.",
            "Include the stolen 2FA codes in the request.",
            "Include 'otp' and 'secretId' in the request body.",
            "Use 'request.args' to bypass banned characters.",
            "Confirmed the SameSite attribute of the cookies.",
            "Understand that customer eligibility is based on fame and point history.",
            "The bug is in the unauthenticated index page.",
            "Register as a new user.",
            "Unlock and buy the 'flagsword'.",
            "Obtained AWS credentials from the response",
            "Identified privileged permissions to create AWS Lambda functions",
            "Identified privileged permissions to invoke AWS Lambda functions",
            "Obtained new AWS credentials",
            "Authenticate successfully.",
            "Create separate account",
            "Establish session.",
            "Print the session cookies.",
            "Discover that the website uses JWT tokens.",
            "Understand the JWT processing by the server.",
            "Realize that the server signs new RS256 tokens with the private key, signKey.",
            "Understand that we can generate our own HS256 token since we know the public key.",
            "Sign a token with the public key verifyKey.",
            "Registered a new user.",
            "Attempted to login which returns 'User not active' error.",
            "Requested an OTP at '/request_code'.",
            "Identified that the rate limiting limits the number of OTP attempts to 3.",
            "Attempted to bypass `is_valid_email(email)` function.",
            "Gained access by passing the OTP check.",
            "Steal the admin's cookie.",
            "Create a policy that only allows form submissions to a specific domain",
            "Upon granting admin privileges",
            "Use the credentials for `http://app/` in the fetch request",
            "Provide authentication to view the server logs.",
            "Use 'Host: app@ATTACKER_URL' to bypass the validation",
            "The first response is designed to pass the SSRF check.",
            "Identify that if the request token is wrong, then the 'request.accessGranted' attribute would not be set."
        ]
    },
    {
        "Information Gathering and Security Analysis": [
            "Look for a JWT in the 'token' header of the responses.",
            "Find a message containing a 'secret key' for the cookies.",
            "Identify that the website can't send double opt-in emails",
            "Obtain the fake flag and the admin's PHP Session ID",
            "Attempt to discover the generated token",
            "Security questions are related to Alan Turing's account recovery",
            "Understood the voting system of the webpage.",
            "Target only admin endpoint.",
            "Steal the identifier from the pop-up",
            "Provide 'Link to profile' and 'Message' in the selected message type",
            "Identify that the re-writing and forwarding occurs when the `User-Agent` header is of the web crawlers.",
            "Determine that the 'notes.count' function is unauthenticated.",
            "Make a callback to our server with the data.",
            "Notice that the 'screenshotter' service allows users to enter arbitrary URLs.",
            "Note that the cached secret is only available for 2 seconds after logging in.",
            "Examined how the OTP verification is performed."
        ]
    },
    {
        "Cryptography, Encoding, and Decoding Techniques": [
            "Decode the JWT at jwt.io.",
            "Take note of the 'username' from the form inputs.",
            "Have the intention to alter the 'admin' value.",
            "Have the intention to alter the JWT 'username'.",
            "Use the JWT secret and the altered payload for the new token.",
            "Find a cookie that contains a JWT hashed with HS256.",
            "Use rockyou.txt as the wordlist.",
            "Identify the 'secret key' as '1234'.",
            "Understand implications for encoding and decoding JWT tokens.",
            "Modify the 'role' field to 'Admin'.",
            "Understand that if the expected value does match.",
            "Identify that the JWT success counter is reset to 0 if the old token is invalid.",
            "Choose JWT.io or jwt_tool.py as the decoding tool.",
            "Inspect the decoded JWT.",
            "Identify the encoded public key in the JWT.",
            "Use CrackStation to decrypt the hashed passwords.",
            "Note that the token uses the RS256 algorithm",
            "Built an HMAC(HS256) token.",
            "Find a cookie with the name 'flag'."
        ]
    },
    {
        "Debugging, Monitoring, and Troubleshooting": [
            "Identify headers that require a token.",
            "'check' is a predefined string expected in the response of a successful login.",
            "Determine current user is 'www-data'",
            "Receive an error message that the IP address was not in the whitelist.",
            "Identify the received flag as a cookie in the HTTP GET request",
            "Give SUID and SGID permissions to the binary."
        ]
    },
    {
        "Web Interaction and Navigation": [
            "Include the correct 'Authorization' header.",
            "Use the new token for authentication.",
            "Create a signed cookie in the browser.",
            "Set the cookie as 'user=root'.",
            "Set the cookie to a given string",
            "Intercept the bot's browser cookie.",
            "Site has a login screen.",
            "Identified /login and /forgotpassword.html as especially interesting.",
            "Identify the presence of a form to create users.",
            "Identify the indication of whether users are admins.",
            "Our malicious script grabs the current cookies and redirects to our webpage with these cookies as parameters in the request.",
            "Encounter a login page.",
            "Use the new session cookie to log into the site.",
            "Input the new cookie.",
            "Discover admin login page.",
            "Perform login.",
            "Receive cookie as a result of successful login.",
            "Read the information about logging in via POST and using json request",
            "Included the newly edited admin jwt token in the request",
            "View the login form",
            "Use the newly generated token as a cookie",
            "Found a `token` cookie.",
            "Checked the value of the `token` cookie on jwt.io.",
            "Set the token as a cookie.",
            "Observe the presence of a login form",
            "Identify a cookie named 'admin_id : 0'",
            "Locate the 'admin_id' cookie",
            "Craft a valid JWT with '31337' identity",
            "Include the crafted JWT in the `Authorization` header",
            "Recognize the potential CSRF vulnerability based on the CSRF token.",
            "Ensure the known username 'true.grit@umbccd.io' remains intact in the manipulated request.",
            "Attempt authentication with the user created.",
            "Bypassed localhost address checks by setting the '$url' attribute to 'file:///var/www/html/config.php'.",
            "Identified an authentication form on the webpage.",
            "Note the session info",
            "Use the modified cookie",
            "Receive a message that this page is for authentication with an API located at port 4000.",
            "Receive an error: Forbidden, missing JWT authorization.",
            "Receive a JWT(token).",
            "Attempt to access common pages like foo.php.",
            "Recognize that the username taken from the session is not properly sanitized",
            "Login with the registered user once",
            "Logout",
            "Re-login",
            "Received a 'HTTP 403 Forbidden' error, suggesting the '.bzr' directory's presence.",
            "Determine that the certificate seems invalid.",
            "Web page performs a password reset function using security questions",
            "Login using the found password.",
            "Realize that the endpoint can be accessed without authentication.",
            "The execution of '.bashrc' occurs when the user 'manhndd' SSH-es into the server",
            "Bypassed duration check",
            "Bypass the X-Real-IP protection.",
            "Used the website functionality to get the uploaded PDF file signed.",
            "Log in to investigate any intermediate requests.",
            "Submitted the flag.",
            "Query the protection of the website by CSRF tokens.",
            "Find out that the website isn't protected by CSRF tokens but employs SameSite=Lax cookies.",
            "Inject the authenticated session cookie into the browser or curl.",
            "Login to the website",
            "Register an account on the website",
            "Edit the user profile on the website",
            "In the 'Support' section, users can send two types of messages to the admin: 'Problems with Profile' and 'Get premium account', which needs 'Link to profile' and 'Message'",
            "Understand that the input format for the SQL injection should match the UUID format.",
            "Bypass the restriction caused by the referrer header.",
            "Add the attacker's email to the admin's shared list.",
            "Try different versions of the Twitter login page.",
            "Had the right PHPSESSID in cookies.",
            "Successfully bypassed restrictions.",
            "Identified that the challenge seemed to involve reCAPTCHA.",
            "Observe login page with no additional information.",
            "Notice an option to register a new account.",
            "Retrieve the flag value 'flag{th3_an5w3r_w4s_HSCTF_0bvi0us1y}'.",
            "Change the cookie values: userID to 768 and username to 'admin'.",
            "Start at a login/register page.",
            "Understand how to modify user's profile and upload images.",
            "Embed the 'id' of the attacker's user in the request body.",
            "Include session ID in the request.",
            "Fill out registration form.",
            "Add 'account[role]' parameter with value 'admin'.",
            "Receive a notice that the request body must be JSON.",
            "Experiment with the session_id.",
            "When faced with a security check.",
            "Observed that 'c' parameter in requests was used to manipulate the user session, either to sign in, sign up, or sign out.",
            "Identified that 'ctx.state.user' equals to the 'username' cookie",
            "Used '__proto__' as the username parameter",
            "Understand that \u2018SCRIPT_NAME\u2019 can be set through an HTTP header, which can bypass the '/admin' denial in Nginx configuration",
            "Message is only sent to the intended receiver",
            "Use the manipulated cookies to gain access.",
            "Unlock the flag and source code using the uploaded PDFs.",
            "Extract the text before the period (.) from the Flask session cookie.",
            "Authenticated as admin and explored login.php",
            "Received a 403 Forbidden error from the login.php page.",
            "Gained access to the login page.",
            "Identified fields labeled 'username' and 'password'.",
            "Found that JavaScript couldn't read any cookies from the output of the payloads.",
            "Received a `Set-Cookie` header from this page for a new cookie with HttpOnly flag set.",
            "Note that the process only permits requests from a client URL validated to be 127.0.0.1.",
            "Registered a new account.",
            "Noted that the `/api/token` endpoint returns the current authentication token.",
            "Verify that the WebSocket client's origin starts with 'http://localhost'.",
            "Set the authentication cookie for the victim using JavaScript.",
            "Understand that the Origin request header cannot be modified by JavaScript.",
            "Set the auth token by making the bot visit 'http://localhost:7070/auth'.",
            "Enabled 'enable_experimental_features'.",
            "Identified the allowance of loading stylesheets from '*.jsapi.tech'.",
            "Bypassed the validation by using a different case.",
            "Set 'Content-Length: 0' for the first request.",
            "Used the appropriate 'X-Cat-Header' in the request",
            "Discover that all other endpoints are protected by authenticationMiddleware.",
            "Noted that the post is only visible to the admin.",
            "Provided a callback parameter.",
            "Use the custom host header to target your own host"
        ]
    },
    {
        "Data Analysis, Manipulation, and Storage Interactions": [
            "Identify the cookie related to flavor",
            "Replace the existing flavor value in the cookie with 'chocolate'",
            "Replace the original cookie with the new base64 encoded 'chocolate' cookie on the website",
            "Understand that the password was split into various parts",
            "Identify the hidden field 'password'",
            "Extract the admin cookie 'password'",
            "Verify if all 5 captchas are collected",
            "Set the new flag value as the cookie",
            "The key for the key-value pair is retrieved from the 'key' variable.",
            "Understood that the function decodes a user's cookie",
            "Identify the presence of a 'username' attribute in the requests.",
            "Verify that the `database.sql` file contains password hashes for a manager and admin user.",
            "Identified the need for a valid jwt token",
            "Analyze the JWT",
            "Note that the password length is less than 30 characters",
            "Identify that the valid signature can be obtained from the .env file",
            "Analyze the browser cookies",
            "Analyze the browser cookies.",
            "Ensure the chosen parameter is non-alphanumeric.",
            "Discovered two strange cookies: 'frequency' and 'transmissions'.",
            "Find the correct value for the cookie 'otadmin' (\"hash\": 389)",
            "Identified the 'user_id' column as requiring a foreign key from the user table.",
            "Enter 'Stoney' for Mother's Maiden Name",
            "Enter 'St. Michael's' for First School Attended",
            "Enter 'Science' for Favorite Primary School Subject",
            "Enter 'Marathon' for Favorite Olympic Event",
            "Analyze the cookies.",
            "Access unauthorized data or perform unauthorized actions.",
            "Identify the need to steal the identifier",
            "Identify the need to use a valid identifier to steal the data",
            "Received a JWT session token.",
            "Untick the box to make the private gallery public.",
            "Examine the cookies in the HTTP request.",
            "Identified admin credentials and passcode from the accessed user database and passcode files.",
            "Realize that the input 'language' in the JWT token is used for reading the arbitrary files.",
            "Identify the input fields for the login function.",
            "Determine that the input fields for the login function are 'username' and 'password'.",
            "Realize that the secret key is selected randomly from an array of cookie names.",
            "Obtain a new session cookie as output.",
            "Identify USER_ID.",
            "Identify FILENAME.",
            "Payload 3: Obtained readable cookies.",
            "Identified that a 'secret' token is added to cookies in the request to the backend server.",
            "The response text contains the new 2FA token."
        ]
    },
    {
        "Code, Application, and Script Analysis": [
            "Observe that the server script uses a secure cookie for comparison to display a flag value.",
            "Pass the 'username' value as ','\"member\":\"1' to the function in order to change the value of 'member' to 1.",
            "Checked the forgot password feature.",
            "Discover that the 'auth' cookie was previously set in 'gethash.sh'",
            "To find the session cookie, set the session's 'admin' field to 'true'.",
            "Analyze the application's token verification process",
            "Identify the password check code.",
            "Observe the 'get_user_info' method during authentication in the User class.",
            "Discover a comment in the HTML source code referencing a potential vulnerability using TOTP",
            "Note that the conditional statement sets a cookie with the true flag if certain values are present",
            "Create a script to modify the sessionID to valid lua.",
            "Identify the presence of a tripcode",
            "Control 'Version' in cookie.",
            "Assign different nonce to each script tag",
            "Attempt password brute force for each email",
            "Notice that the JWT token is checked in the response for '/localisation-file'.",
            "Identified lack of validation for 'Content-Length' headers as the cause of the vulnerability.",
            "Recognize that the 'guest' cookie is base 64 decoded in the deserialization process.",
            "Weak point: negative flag price not validated in 'sellFlag' function",
            "Identified that a successful password reset would set 'user.active' to 'True', activating the user account.",
            "'smtp_exec' variable is used in sending activation emails"
        ]
    },
    {
        "Exploitation Techniques and Payload Handling": [
            "Adjust the value of the secure cookie 'admin' to the desired comparison value 'true'.",
            "Understood that 'password' = 'username' evaluates to 0",
            "Used the exploit to log in",
            "Brute force the JWT secret with John The Ripper.",
            "Bypass authentication by making the conditional statement in the SQL query always true due to the SQL Injection.",
            "Understand that by adding the necessary characters to the 'username', it is possible to close the double-quote and manipulate the fields following it in the token.",
            "Send requests with the newly encoded 'Admin' JWT token to attempt user role update and flag access.",
            "Attempt to login using 'user' as both username and password.",
            "Enter the payload 'or 1=1;--' into the 'pass' field to attempt a bypass.",
            "Used a malicious cookie value for exploitation.",
            "Crafted the payload into a representation of a session cookie",
            "Delivered the payload via the crafted session cookie",
            "Recognize the potential JWT exploit (CVE-2016-5431/CVE-2016-10555).",
            "Edit the JWT.",
            "Add the RS256-to-HS256 exploit to the JWT.",
            "Execute the RS256-to-HS256 exploit using python3 jwt_tool.py.",
            "Identify a working payload with username `admin' -- ` and any password.",
            "Login as admin using SQL injection",
            "Identified the potential for a JWT key confusion attack.",
            "Understand that a valid signature is needed to exploit RCE",
            "Include the caught admin cookies in the request",
            "Focus on bypassing checks applied to 'warmup' GET parameter.",
            "Attempted to alter the User-Agent during authentication.",
            "Observe that it is accessed only by authenticated users.",
            "Crafted a record by setting a password with a ':' character.",
            "Understand that the goal is to exfiltrate the session cookies",
            "Attempted the SQL injection on the authentication form.",
            "Successful bypass of initial server checks",
            "Bypass further server checks",
            "Access flag",
            "Decide to forge the cookies",
            "Spoof the cookies",
            "Modified the PHPSESSIONID cookie in the browser to Maria's session ID.",
            "Alter the JWT's header to change the algorithm to HS256.",
            "Alter the JWT's payload to change the user type to admin.",
            "Aim to steal the VIP user's cookies.",
            "Injected Carriage Return Line Feed (CRLF) in the username field",
            "Leak data byte-by-byte by hashing it and using as password for new account",
            "Bruteforce password at :7777 to determine the leaked byte",
            "Set up a request with malicious cookie data",
            "Use the encoded payload to bypass the WAF 'Skynet'.",
            "Find that the password is 'congratsyouwin' via the bruteforcing method.",
            "Create a manipulated cookie for bypassing session-based authentication.",
            "Referrer different from 'web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one'",
            "Identified task to bypass countermeasures.",
            "Attempt authentication bypass with advanced payloads.",
            "Capture the login request.",
            "Enter an apostrophe in the username field.",
            "Enter an apostrophe in the password field.",
            "Replace the username with 'admin'.",
            "Understand the need to 'steal' an admin cookie and gain admin access.",
            "Recognize an alternative method to bypass the login via the username field",
            "Attempted SQL login bypass",
            "Attempt different passwords",
            "Set the loop condition to run until the password is fully determined using the SQL Injection.",
            "Change the hashed value in the session_id cookie to correspond to the username 'admin'.",
            "Obtain the flag",
            "User's cookies are sent along with the POST request",
            "Inject a Set-Cookie header to set the admin's ID cookie to your own session.",
            "Set malicious cookies.",
            "Identify the need to overwrite the <userID>_isAdmin value.",
            "Identify the capability of setting the 'theme' value in the session using the 'theme' GET query parameter.",
            "Identified the usage of 'Content-Length' header with 'Transfer-Encoding' header as a request smuggling vulnerability.",
            "Bypass the login function successfully due to successful SQL injection.",
            "Name the cookie 'authenticated-user'.",
            "Assign the value 'true' to the cookie.",
            "Confirmed the XXE vulnerability.",
            "Used the payload 'username=test&password=test' or 1=1 LIMIT 1;#'.",
            "Note that the Traefik service only accepts the POST, GET, OPTIONS, DELETE and PATCH methods",
            "Exploiting the fact that the token for id=0 is the same every time.",
            "Use the generated 2FA code for another CSRF attack.",
            "Bypass the access control implemented on ATS.",
            "Identified that the OTP code was validated using SQL 'LIKE' operator.",
            "Ensure the injected `style` element is readable by the attacker",
            "Use the known hash of an empty string as a token value for authentication."
        ]
    },
    {
        "Tools, Scripting, and System Interactions": [
            "Used a private SSH key retrieved from the database for cloning.",
            "Replace the JWT token with the admin token.",
            "Utilize hardcoded key.",
            "This page is the admin's tool for changing 'user status' to 'premium'",
            "Identify remote address and user agent checks as the reasons."
        ]
    },
    {
        "Network and System Analysis": [
            "Check if the Header 'x-captcha-state' is set.",
            "The '/debug/answer' endpoint was restricted by both Nginx and the application.",
            "Add the first A record to the DNS entry to resolve to 127.0.0.1.",
            "Add the second A record to the DNS entry to resolve to 51.38.138.162.",
            "Check the IP address against the whitelist."
        ]
    }
]