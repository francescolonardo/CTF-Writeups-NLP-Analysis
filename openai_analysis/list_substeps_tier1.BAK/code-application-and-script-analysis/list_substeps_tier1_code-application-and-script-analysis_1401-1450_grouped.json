{
    "Code Execution": [
        "Paste the copied output into the function body.",
        "Checked source code.",
        "Understood that 'JSON.parse' allows the '__proto__' key.",
        "Leveraged the prototype pollution to run 'require('./usage')'.",
        "Noticed that causing a TypeError triggers the 'require('./usage')'.",
        "Interpreted how 'pkg' and 'pkgPath' can be controlled.",
        "Controlled 'pkg' by polluting '__proto__.data'.",
        "Controlled 'pkgPath' by polluting '__proto__.path'.",
        "Found out that 'pkg' is an object containing the 'package.json' fields.",
        "Found out that 'pkgPath' is the path to this package.",
        "Found that we can load any JavaScript file.",
        "Polluted 'data' in '__proto__.data' to load the JavaScript file.",
        "Polluted 'exports' in '__proto__.path' to load the JavaScript file.",
        "Found '/opt/yarn-v1.22.19/preinstall.js' in the container.",
        "Identified that 'child_process.execFileSync' is being called in 'preinstall.js'",
        "Understood that to reach this code path, 'npm_config_global' needs to be polluted.",
        "Polluted 'npm_config_global' to a truthy value.",
        "Realized that 'process.env.npm_execpath' can be controlled.",
        "Set 'process.env.npm_execpath' to a controlled value.",
        "Figured out how to use '--eval' option to run inline JavaScript.",
        "Realized JSON payload cannot have spaces due to regex match.",
        "Used '${IFS}' to get around the regex match restriction."
    ],
    "Web Application Vulnerabilities": [
        "Guess that the server was using FastAPI.",
        "Understand the functionality of the `/new` endpoint.",
        "Check if the uploaded zip file should contain a `run` bash script.",
        "The `run` bash script gives a reverse shell.",
        "View the source code of the program.",
        "Discover that if a zip file with 'docker-entry' in its name is uploaded.",
        "The program will execute the script within a docker container with greater access (runs as `uploaded` user).",
        "As opposed to executing normally (runs as `nobody` user).",
        "Write a binary.",
        "Compile the binary.",
        "Set the effective user and group IDs to that of the SUID and SGID permissions.",
        "Run the binary inside the docker container."
    ],
    "Web Framework and Microservices": [
        "Observe the configuration file of the Traefik service",
        "Examine the Go microservice",
        "Note that the Go microservice uses the Beego web framework",
        "Note that the Go microservice acts as a reverse proxy for the Python microservice when the PUT method is used",
        "Evaluate the Python microservice",
        "Realize the challenge of reaching the Python microservice that only accepts the PUT method",
        "Inspect the Beego source code",
        "Reach the 'Put()' handler of the Go microservice",
        "Identify that the Python microservice runs on Flask's built-in server",
        "Note that the Flask server treats underscores ('_') as hyphens ('-')",
        "Note that the Flask server allows duplicate 'Content-Length' headers"
    ],
    "Software Analysis and Reverse Engineering": [
        "Spot an interesting behavior with 'RegExp.prototype.test()' used with regex containing the global flag.",
        "Find a way around the restrictive regex check.",
        "Understand the requirement of a 'Buffer' of 16 bytes.",
        "Go through the provided source code."
    ],
    "Flag Obtaining": [
        "Obtain the flag"
    ]
}