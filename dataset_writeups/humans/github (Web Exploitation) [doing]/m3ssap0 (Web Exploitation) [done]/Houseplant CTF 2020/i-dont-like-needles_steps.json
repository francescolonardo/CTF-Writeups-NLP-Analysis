{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Recognize the challenge name's relation to SQL injection."
            },
            {
                "StepNumber": 2,
                "StepString": "Explore the webpage containing an authentication form and note the interesting HTML comment."
            },
            {
                "StepNumber": 3,
                "StepString": "Connect to the `/?sauce` endpoint to view the source code."
            },
            {
                "StepNumber": 4,
                "StepString": "Identify that the website is vulnerable to SQL injection due to string concatenation in the query."
            },
            {
                "StepNumber": 5,
                "StepString": "Notice the additional control using `strpos` function to check for the character `1` in the password value."
            },
            {
                "StepNumber": 6,
                "StepString": "Attempt to bypass the password check with a SQL injection, but fail to retrieve the flag."
            },
            {
                "StepNumber": 7,
                "StepString": "Use the `UNION` clause to discover the `users` table structure and determine the second column contains the `username`."
            },
            {
                "StepNumber": 8,
                "StepString": "Craft a final UNION SQL injection using the `flagman69` username to bypass the last check."
            },
            {
                "StepNumber": 9,
                "StepString": "Obtain the flag."
            }
        ]
    }
}