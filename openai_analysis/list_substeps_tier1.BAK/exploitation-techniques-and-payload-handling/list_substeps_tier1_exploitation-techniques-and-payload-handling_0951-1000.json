[
    "Make a GET request to /login/ to trigger the deserialization.",
    "Confirmed the existence of a directory traversal vulnerability",
    "The vulnerability is present in the POST filename",
    "The objective is to overwrite '.bashrc' file with their payload",
    "Used Burp's repeater to spam 'Go'",
    "Simultaneously wrote a Python script",
    "Download the nginx.conf file successfully.",
    "Find a potential Off-by-Slash bug.",
    "Inject a double quote to break out of the alt tag.",
    "Add a JavaScript event handler for the XSS attack.",
    "The statement indicates that using the sanitized HTML with jQuery's insecure elm.html() method without the SAFE_FOR_JQUERY flag could lead to XSS.",
    "Submit the URL.",
    "Receive the flag.",
    "Identify XML External Entity (XXE) vulnerability when loading SVG files.",
    "Use the PHP /// uri.",
    "Disguise the phar file as a JPEG image.",
    "Injected Carriage Return Line Feed (CRLF) in the username field",
    "Leak data byte-by-byte by hashing it and using as password for new account",
    "Bruteforce password at :7777 to determine the leaked byte",
    "Run brute.py script to output arbitrary SQL queries",
    "Realized that the invalid characters in the payload can bypass the regex validation",
    "Constructed the final payload URL",
    "Sent the request to 'http://18.179.178.246:8003'",
    "Bypassed strip_tags using the PHP bug.",
    "Bot clicking our link gave us the flag.",
    "Compile the modified injection query.",
    "Execute the compiled query.",
    "Retrieve the corresponding IP address",
    "Choose the vulnerable points in the script to perform the injection.",
    "Execute '/bin/sh' with an argument to read the flag file and redirect the output to '/tmp/jizz'.",
    "Identify the vulnerability (CVE-2022-26377).",
    "Craft another request and set the remote_addr to the required fake address.",
    "Capture the response from the server.",
    "Set up a request with malicious cookie data",
    "Bypassed input validation",
    "'src' set to local files",
    "Leaked secret key '19eb794c831f30f099a31b1c095a17d6' from 'config.py'",
    "Inserted the payload into the target site's URL.",
    "Exploit the vulnerability in the 'query_login_attempt' function.",
    "Encode the payload into 'multipart/form-data'.",
    "Use the encoded payload to bypass the WAF 'Skynet'.",
    "Fetch data using the manipulated query.",
    "Uploaded .htaccess file.",
    "Read the file '/etc/passwd'.",
    "Prepared the SQL query to send to File Descriptor (FD) 4, which is the MySQL server.",
    "Understand that the crash of DOMValidator.js will allow the execution of <script>alert('pwned')</script>.",
    "Try the payload: {\"username\": \"admin\", \"password\": {\"$gt\": \"z\"}}",
    "Infer that fetching passwords is possible by comparing password characters to the alphabet in the payload",
    "Find that the password is 'congratsyouwin' via the bruteforcing method.",
    "Identified the challenge as a NoSQL Injection task"
]