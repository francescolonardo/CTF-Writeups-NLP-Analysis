The website contains a list of books with two actions available:
an excerpt to read an excerpt of the book;
read online which opens a link from another domain, not related to the challenge.

Analyzing the HTML source of the page a treasury.js file can be found; it is interesting to understand performed calls.

[Defines two functions: "anexcerpt" and "readonline" using JavaScript. The "anexcerpt" function creates a modal element and fetches an excerpt from a book using AJAX. The excerpt is then displayed in a text area inside the modal. The "readonline" function opens a new window with a link to read the book online.]

The home page is created with the following request.

[HTTP request to the server. The server responds with a 200 OK status code and returns a JSON array of books.]

The excerpt button performs a request like the following.

[HTTP GET request. The server responds with an HTTP 200 OK status code and returns a text/html response.]

The read online button simply opens a window redirecting to the link specified for the book.

A URL like the following will reveal that web application is vulnerable to SQL injection, because the result of the book with `id=1` will be printed.

[URL containing parameters for exploit SQL injection vulnerability]

The following URL will spawn a weird error.

[Warning messages indicating that there was an error in loading an XML string.]

It seems that the web application reads XML from a database.

You could use `sqlmap` to retrieve information.

[Output of a SQL injection test performed using the sqlmap tool]

So at this point you know that a `<flag>` XML element is hidden into `books` table, but not into book with `id = 1`; you can launch a custom query to exfiltrate only the `info` column for other books: `select info from ASISCTF.books where id > 1`.

[Command-line output of a successful SQL injection attack using the tool "sqlmap"]

The flag is the following.
