The target is to connect to `flags.php` with a user having the proper `role` value.

Analyzing the source files, a code vulnerable to SQL injection can be spotted into `index.php`.

The username taken from the session is not properly sanitized. This vulnerability could be triggered via the own username after the authentication.

The database is based on `create_db.sql`.

So, a possible malicious input for the username, in order to print the details of the user with the proper role, is the following.

[SQL injection attack string that tries to extract sensitive information from a database table named "users", where role is equal to 1.]

A user with this value for the username must be registered. After the first automatic login, the SQL injection will not have effect: you have to logout and re-login in order to find the details of the searched user under the post search section.

Logging in with that user and connecting to `flags.php` will print the flag.
