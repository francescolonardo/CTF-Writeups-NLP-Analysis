The normal webpage returns a welcome advice.

But connecting to robots.txt endpoint will reveal the following content '?lmao'.

So you can connect to ?lmao endpoint which will return the following PHP code.

[PHP code that includes a configuration file and processes user input through GET parameters to either display the contents of the current file or replace a specific text pattern with user input, potentially vulnerable to code injection attacks.]

Basically you can craft your own `preg_replace`.

The preg_replace is subject to RCE using `/e`

It will return the `phpinfo()` output.

But [URL containing parameters that appear to be executing a system command to print the current user's ID.] will be blocked by the `is_payload_danger` method.

With some analysis, you can discover that `fread` and `fopen` are available, so you can read `config.php` with a payload, specifying the `config.php` filename in another GET parameter to bypass the check.

The response is a base64 encoded string, decoding you can discover the source code.

[PHP function that checks if a given string (presumably user input) contains any potentially dangerous code or commands that could be executed on the server.]

Using `glob` function, which is not blocked, you can find the flag file that can be read with the technique used before.

