{
    "Server-side Template Injection (SSTI)": [
        "Tested the SSTI vulnerability by crafting a URL that performed simple arithmetic in the email parameter using Jinja2 template syntax."
    ],
    "Information Leakage": [
        "Leaked the contents of the admin page"
    ],
    "Cross-Site Scripting (XSS)": [
        "Identify XSS vulnerability in the feedback feature of the site."
    ],
    "Cross-Site Request Forgery (CSRF)": [
        "Use the generated 2FA code for another CSRF attack."
    ],
    "Data Exfiltration": [
        "Exfiltrated each character using the updated CSS."
    ],
    "Bypassing Template Delimiters": [
        "Work on bypassing '{{' by using an if-else statement.",
        "Work on bypassing '}}' by using an if-else statement."
    ],
    "Bypassing Characters": [
        "Bypass '_' by constructing a string",
        "Bypass '\\' by constructing a string",
        "Bypass 'class' by constructing a string",
        "Bypass 'subclasses' by constructing a string",
        "Bypass 'getitem' by constructing a string"
    ],
    "Service Version Identification": [
        "Identified the specific version (2.4.0) of HAProxy."
    ],
    "HTTP Header Manipulation": [
        "Included an overflowing 'Content-Length' header."
    ],
    "Exploiting Smuggled Requests": [
        "Obtained the flag in the response of the smuggled request."
    ],
    "File Upload Exploitation": [
        "Submit the 'modified.odt' file with the payload to the server as a file upload."
    ],
    "Client Request Manipulation": [
        "Utilized script to make the client request."
    ],
    "Redirection Manipulation": [
        "Configured the PHP script to redirect to itself 19 times."
    ],
    "XSL-based Cross-Site Scripting (XSS)": [
        "Explored different methods for conducting XSS attacks on XSL documents."
    ],
    "Local File Inclusion (LFI)": [
        "Notice 'require()' leads to a Local File Inclusion (LFI) vulnerability."
    ],
    "Command Injection": [
        "Pollute '__proto__' attribute with a command injection payload in the 'data'."
    ],
    "Server-side Request Forgery (SSRF)": [
        "Specify 'changelog.js' script in the path of the JSON payload."
    ],
    "Remote Code Execution (RCE)": [
        "Gained a reverse shell by invoking the Lambda function",
        "Discover RCE vulnerability through pre-installed 'pearcmd.php'.",
        "Initialized a server to exploit the above vulnerability.",
        "Programmed the server to redirect to 'http://localhost/flag' in the second response."
    ],
    "Prototype Pollution": [
        "Execute Prototype pollution attack.",
        "Identify prototype pollution vulnerability"
    ],
    "Cross-Site Script Inclusion (XSSI)": [
        "Leverage the navigation function and the XS leak."
    ],
    "URL-based Exploitation": [
        "Use '?length=' as the query string."
    ],
    "Authentication Bypass": [
        "Use the known hash of an empty string as a token value for authentication."
    ],
    "Font Validation Error": [
        "Identify off-by-one error in `background.js` font validation",
        "Manipulate `utils.FONTS[10]` using the off-by-one error",
        "Ensure the injected `style` element is readable by the attacker"
    ],
    "Request Smuggling": [
        "Craft a request to smuggle a request to /admin in flagportal.",
        "Caught the request including the Admin-Key on our own server."
    ],
    "SQL Injection": [
        "Use this behaviour when constructing SQL queries to bypass the login."
    ],
    "Access Control Bypass": [
        "Bypass the access control implemented on ATS."
    ],
    "Exploit Discovery": [
        "Recognise potential exploit"
    ],
    "Negative Price Exploitation": [
        "HTTP POST request to sell flag with negative price"
    ],
    "Cross-Origin Resource Sharing (CORS)": [
        "Enable CORS to execute arbitrary JavaScript through the hosted file."
    ],
    "SQL 'LIKE' Operator Vulnerability": [
        "Identified that the OTP code was validated using SQL 'LIKE' operator."
    ],
    "BeautifulSoup Parser Differential Exploitation": [
        "Exploited parser differential in BeautifulSoup."
    ],
    "JSONP Response Exploitation": [
        "Triggered a JSONP response from the YouTube API."
    ],
    "Client-side Javascript Injection": [
        "Created a callback that reflected the response into Javascript code.",
        "Submitted final payload that contained a script.",
        "Repeated the Javascript injection to fetch the flag."
    ],
    "Brute-Force Attack": [
        "Derive a proof-of-concept (PoC) to brute-force a character of the flag by exploiting the observed behavior"
    ],
    "BBCode Tag Validation Error": [
        "Discover an edge case where not closing a BBCode tag results in an unencoded content being reflected"
    ],
    "Command Execution": [
        "Send the flag to an external server using the '/readflag>/dev/tcp' command"
    ]
}