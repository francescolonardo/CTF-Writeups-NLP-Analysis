Title: SQL Injection in Login Form
Primary topic: Web Exploitation
Secondary topic: SQL Injection
Tools used: None
Keywords: SQL queries, authentication, database, payload, parameterized queries, user input, sensitive data, flag

#context
During a CTF competition, I encountered a web application that used SQL queries to authenticate users and grant access to restricted content. Given the potential security risks associated with SQL queries, I suspected that the application might be vulnerable to SQL Injection, a type of vulnerability that allows attackers to manipulate SQL queries to perform unauthorized actions on the database.

#discovery
To test for SQL Injection, I crafted a malicious input containing SQL code, such as ' OR 1=1;--, and submitted it to the application's login form. If the application allowed me to bypass authentication and gain access to restricted content, it would confirm the presence of an SQL Injection vulnerability.

#exploitation
Upon submitting the crafted input to the application, it indeed bypassed authentication and granted me access to restricted content, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the SQL Injection vulnerability to extract sensitive data from the database.

#code
' OR 1=1;--,

#exploitation
After crafting a suitable payload and choosing the target data, I submitted the input to the application, which executed the SQL Injection and displayed the sensitive data, including the flag for the Web Exploitation challenge.

#countermeasures
This CTF writeup highlights the importance of properly securing web applications against SQL Injection vulnerabilities by using parameterized queries, validating and sanitizing user input, and restricting database access. By exploiting the SQL Injection vulnerability, I was able to manipulate SQL queries, bypass authentication, access sensitive data, and obtain the flag needed to complete the challenge.
