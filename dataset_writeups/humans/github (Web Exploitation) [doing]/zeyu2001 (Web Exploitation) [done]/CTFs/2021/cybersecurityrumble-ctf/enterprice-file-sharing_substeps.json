{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Analyze the code to understand its behavior and identify potential vulnerabilities.",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Analyze the code."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Understand the behavior of the code."
                    },
                    {
                        "SubstepNumber": 1.3,
                        "SubstepString": "Identify potential vulnerabilities."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Determine the code checks file extensions for uploaded files, only allowing 'txt', 'pdf', 'doc', 'docx', 'xls', 'xlsx'.",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Determine the code checks file extensions for uploaded files."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Identify the allowed file extensions: 'txt', 'pdf', 'doc', 'docx', 'xls', 'xlsx'."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Identify the code also normalizes file paths to prevent directory traversal attacks.",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Identify the code normalizes file paths."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Recognize the purpose of normalization: prevent directory traversal attacks."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Discover the use of the 'os.system()' method to execute the tar command when downloading all uploaded files, indicating potential wildcard injection vulnerability.",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Discover the use of the 'os.system()' method."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Identify use of the 'tar' command when downloading files."
                    },
                    {
                        "SubstepNumber": 4.3,
                        "SubstepString": "Recognize potential wildcard injection vulnerability."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Understand Wildcard Injection and how it can be abused to perform command injection attacks by manipulating the use of wildcards in system commands.",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Understand Wildcard Injection."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Recognize how Wildcard Injection can be abused for command injection attacks."
                    },
                    {
                        "SubstepNumber": 5.3,
                        "SubstepString": "Identify manipulation of wildcards in system commands as the attack method."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Identify the vulnerability lies in the use of tar utility which incorporates use of wildcards and an option '--checkpoint-action' that specifies execution of a program at a checkpoint, on reaching 10 records by default.",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Identify the vulnerability lies in the use of tar utility."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Recognize the use of wildcards in tar utility."
                    },
                    {
                        "SubstepNumber": 6.3,
                        "SubstepString": "Identify the '--checkpoint-action' option that executes a program at a checkpoint."
                    },
                    {
                        "SubstepNumber": 6.4,
                        "SubstepString": "Understand that the program is executed when 10 records are reached by default."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Understand the need of overcoming file extension restrictions to implement a successful attack.",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Understand the need to overcome file extension restrictions."
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Recognize the importance of bypassing file extension restrictions for a successful attack."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Conceptualize the attack by creating files '--checkpoint-action=exec=sh shell.txt' and '--checkpoint=1'. As '--checkpoint=1' does not pass the file extension check, find alternatives by digging into tar documentation.",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Conceptualize the attack."
                    },
                    {
                        "SubstepNumber": 8.2,
                        "SubstepString": "Create the file '--checkpoint-action=exec=sh shell.txt'."
                    },
                    {
                        "SubstepNumber": 8.3,
                        "SubstepString": "Create the file '--checkpoint=1'."
                    },
                    {
                        "SubstepNumber": 8.4,
                        "SubstepString": "Recognize that '--checkpoint=1' does not pass the file extension check."
                    },
                    {
                        "SubstepNumber": 8.5,
                        "SubstepString": "Dig into tar documentation to find alternatives."
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Uncover that the tar utility creates a checkpoint after every 10 records by default and each record is made up of 20 blocks of 512 bytes each.",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Uncover the checkpoint creation by tar utility."
                    },
                    {
                        "SubstepNumber": 9.2,
                        "SubstepString": "Recognize that 10 records are created by tar utility by default."
                    },
                    {
                        "SubstepNumber": 9.3,
                        "SubstepString": "Understand that each record consists of 20 blocks of 512 bytes each."
                    }
                ]
            },
            {
                "StepNumber": 10,
                "StepString": "Devise the exploit to upload enough bytes to exceed 10 records, hence causing the checkpoint action to be executed.",
                "Substeps": [
                    {
                        "SubstepNumber": 10.1,
                        "SubstepString": "Devise the exploit."
                    },
                    {
                        "SubstepNumber": 10.2,
                        "SubstepString": "Upload enough bytes to exceed 10 records."
                    },
                    {
                        "SubstepNumber": 10.3,
                        "SubstepString": "Cause the checkpoint action to be executed by exceeding 10 records."
                    }
                ]
            },
            {
                "StepNumber": 11,
                "StepString": "Initialize a GET request to the target URL.",
                "Substeps": [
                    {
                        "SubstepNumber": 11.1,
                        "SubstepString": "Initialize a GET request."
                    },
                    {
                        "SubstepNumber": 11.2,
                        "SubstepString": "Target the URL for the GET request."
                    }
                ]
            },
            {
                "StepNumber": 12,
                "StepString": "Create a file 'shell.txt' with the desired payload. Here, create a reverse shell back to attacker's machine.",
                "Substeps": [
                    {
                        "SubstepNumber": 12.1,
                        "SubstepString": "Create a file 'shell.txt'."
                    },
                    {
                        "SubstepNumber": 12.2,
                        "SubstepString": "Add the desired payload to 'shell.txt'."
                    },
                    {
                        "SubstepNumber": 12.3,
                        "SubstepString": "Create a reverse shell back to attacker's machine."
                    }
                ]
            },
            {
                "StepNumber": 13,
                "StepString": "Subsequently, create another file '--checkpoint-action=exec=sh shell.txt' with nothing inside. This just serves to pollute the arguments for tar command and passes the extension check due to .txt extension.",
                "Substeps": [
                    {
                        "SubstepNumber": 13.1,
                        "SubstepString": "Create the file '--checkpoint-action=exec=sh shell.txt'."
                    },
                    {
                        "SubstepNumber": 13.2,
                        "SubstepString": "Ensure the file is empty."
                    },
                    {
                        "SubstepNumber": 13.3,
                        "SubstepString": "Understand the purpose of this file: pollute the arguments for tar command."
                    },
                    {
                        "SubstepNumber": 13.4,
                        "SubstepString": "Recognize that it passes the extension check due to .txt extension."
                    }
                ]
            },
            {
                "StepNumber": 14,
                "StepString": "Send POST requests to upload both these files.",
                "Substeps": [
                    {
                        "SubstepNumber": 14.1,
                        "SubstepString": "Send POST request to upload the 'shell.txt' file."
                    },
                    {
                        "SubstepNumber": 14.2,
                        "SubstepString": "Send POST request to upload the '--checkpoint-action=exec=sh shell.txt' file."
                    }
                ]
            },
            {
                "StepNumber": 15,
                "StepString": "Start a loop to generate and send multiple POST requests to upload multiple files of random content until the total size exceeds 10 records.",
                "Substeps": [
                    {
                        "SubstepNumber": 15.1,
                        "SubstepString": "Start a loop."
                    },
                    {
                        "SubstepNumber": 15.2,
                        "SubstepString": "Generate a file with random content."
                    },
                    {
                        "SubstepNumber": 15.3,
                        "SubstepString": "Send POST request to upload the generated file."
                    },
                    {
                        "SubstepNumber": 15.4,
                        "SubstepString": "Repeat the loop until the total size exceeds 10 records."
                    }
                ]
            },
            {
                "StepNumber": 16,
                "StepString": "For each iteration, create a file of 1024 bytes with a random name ending in '.txt', send a POST request to upload this file, then create a tar archive with these files and verify the current size of the tar archive.",
                "Substeps": [
                    {
                        "SubstepNumber": 16.1,
                        "SubstepString": "Create a file of 1024 bytes with a random name ending in '.txt'."
                    },
                    {
                        "SubstepNumber": 16.2,
                        "SubstepString": "Send a POST request to upload the created file."
                    },
                    {
                        "SubstepNumber": 16.3,
                        "SubstepString": "Create a tar archive with all the uploaded files."
                    },
                    {
                        "SubstepNumber": 16.4,
                        "SubstepString": "Verify the current size of the tar archive."
                    }
                ]
            },
            {
                "StepNumber": 17,
                "StepString": "After the combined size of the uploaded files exceeds the size of 10 tar records, trigger the exploit by sending a GET request to '/download_all'. This executes the tar command with wildcard arguments, causing it to execute the payload in 'shell.txt'.",
                "Substeps": [
                    {
                        "SubstepNumber": 17.1,
                        "SubstepString": "Check if the combined size of uploaded files exceeds the size of 10 tar records."
                    },
                    {
                        "SubstepNumber": 17.2,
                        "SubstepString": "Send a GET request to '/download_all' to trigger the exploit."
                    },
                    {
                        "SubstepNumber": 17.3,
                        "SubstepString": "Execution of the tar command with wildcard arguments causes the payload in 'shell.txt' to be executed."
                    }
                ]
            },
            {
                "StepNumber": 18,
                "StepString": "Successfully obtain a reverse shell on the target system.",
                "Substeps": [
                    {
                        "SubstepNumber": 18.1,
                        "SubstepString": "Successfully obtain a reverse shell."
                    },
                    {
                        "SubstepNumber": 18.2,
                        "SubstepString": "Reverse shell is obtained on the target system."
                    }
                ]
            }
        ]
    }
}