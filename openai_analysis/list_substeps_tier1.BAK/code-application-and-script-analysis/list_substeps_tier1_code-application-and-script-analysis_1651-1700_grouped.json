{
    "Script Analysis": [
        "Find 'changelog.js' script.",
        "Find 'update-dist-tags.js' script.",
        "Analyze the 'changelog.js' script.",
        "Identify 'execSync' call in the script.",
        "Notice absence of arguments in 'require()' call.",
        "Identify 'process.argv[2]' as undefined.",
        "Plan to import the 'changelog.js' file after the pollution."
    ],
    "Local Testing and Exploitation": [
        "Perform local test using a python command.",
        "Pollute '__proto__' attribute with a command injection payload in the 'data'.",
        "Specify 'changelog.js' script in the path of the JSON payload.",
        "Accessed HTML source to find clues",
        "Created a Python script that opens a reverse shell",
        "Inspect the source code.",
        "Recognize that the express.json() allows Object and Array types to be given as req.body.email and req.body.password.",
        "Use this behaviour when constructing SQL queries to bypass the login.",
        "Realize that the /do-report endpoint is mapped to /forbidden.",
        "Modify the available PoC to suit the given context.",
        "Smuggle a request to the backend application.",
        "Understand that the verify.pug template has an unescaped username.",
        "For each text fragment, detect if a callback is received.",
        "Adjust necessary parameters in the python script.",
        "Identify weak point in code",
        "Recognise potential exploit",
        "Result: buyer's balance increases due to subtraction in 'buyFlag' function"
    ],
    "CSP Bypass and JavaScript Exfiltration": [
        "Notice that the scripts are always executed due to the `nonce` in the CSP.",
        "Note that the relative paths now load scripts from the attacker's server.",
        "Enable CORS to execute arbitrary JavaScript through the hosted file.",
        "Create a new script element.",
        "Add the appropriate `nonce` from the rest of the script tags.",
        "Set the script source to the data wanted to exfiltrate.",
        "Append the new script to the body of the document."
    ],
    "Server Interaction and Analysis": [
        "Initialize for loop.",
        "Print response from the server using command r.text.",
        "Examined 'auth.py'.",
        "Noticed rate limiting being enforced on a per-email basis through a Redis store.",
        "Failed as the function doesn't allow special characters like '%'.",
        "Understood that the `'re.match'` only matches at the _beginning_ of the string.",
        "Noticed that wildcards are allowed at the _end_ of the email due to `'re.match'` behavior.",
        "Ensured the user script run by application was active.",
        "Inspected Create Post code.",
        "Identified the BeautifulSoup module being used to sanitize HTML.",
        "Recognized a restrictive CSP.",
        "Exploited parser differential in BeautifulSoup.",
        "Analysed the server's CSP policy.",
        "Created a callback that reflected the response into Javascript code.",
        "Submitted final payload that contained a script.",
        "Exploited YouTube's JSONP response and BeautifulSoup's parsing differential.",
        "Repeated the Javascript injection to fetch the flag."
    ],
    "JavaScript Modifications and String Manipulation": [
        "Identify the presence of 'news' string in the JavaScript code.",
        "Notice that the site prepends a backslash to escape the single quote."
    ]
}