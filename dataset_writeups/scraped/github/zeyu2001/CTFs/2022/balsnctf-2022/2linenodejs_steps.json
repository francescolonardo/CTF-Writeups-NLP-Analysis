{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Checked source code and identified the prototype pollution vulnerability"
            },
            {
                "StepNumber": 2,
                "StepString": "Understood that 'JSON.parse' allows the '__proto__' key, storing it as ['__proto__']"
            },
            {
                "StepNumber": 3,
                "StepString": "Identified how to leverage the prototype pollution to run 'require('./usage')'"
            },
            {
                "StepNumber": 4,
                "StepString": "Noticed that causing a TypeError triggers the 'require('./usage')'"
            },
            {
                "StepNumber": 5,
                "StepString": "Interpreted how 'pkg' and 'pkgPath' can be controlled by polluting '__proto__.data' and '__proto__.path'"
            },
            {
                "StepNumber": 6,
                "StepString": "Found out that 'pkg' is an object containing the 'package.json' fields and 'pkgPath' is the path to this package"
            },
            {
                "StepNumber": 7,
                "StepString": "Found that we can load any JavaScript file by polluting 'data' and 'exports' in '__proto__.data' and '__proto__.path'"
            },
            {
                "StepNumber": 8,
                "StepString": "Found '/opt/yarn-v1.22.19/preinstall.js' in the container"
            },
            {
                "StepNumber": 9,
                "StepString": "Identified that 'child_process.execFileSync' is being called in 'preinstall.js'"
            },
            {
                "StepNumber": 10,
                "StepString": "Understood that to reach this code path, 'npm_config_global' needs to be polluted to a truthy value"
            },
            {
                "StepNumber": 11,
                "StepString": "Realized that 'process.env.npm_execpath' can be controlled since it is not set by default"
            },
            {
                "StepNumber": 12,
                "StepString": "Figured out how to use '--eval' option to run inline JavaScript"
            },
            {
                "StepNumber": 13,
                "StepString": "Realized JSON payload cannot have spaces due to regex match and used '${IFS}' to get around this"
            },
            {
                "StepNumber": 14,
                "StepString": "Defined final payload using 'wget' and command substitution to exfiltrate the '/readflag' output"
            },
            {
                "StepNumber": 15,
                "StepString": "Sent payload and received flag on the HTTP server"
            }
        ]
    }
}