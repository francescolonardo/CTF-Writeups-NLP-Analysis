{
    "DOMPurify": [
        "Notice that DOMPurify is applied on HTML.",
        "Acknowledge that DOMPurify is pretty secure.",
        "The statement indicates that using the sanitized HTML with jQuery's insecure elm.html() method without the SAFE_FOR_JQUERY flag could lead to XSS.",
        "Recognize from the source code that it is using jQuery's html() method.",
        "Notice that the SAFE_FOR_JQUERY flag is not being used.",
        "Find a section in DOMPurify's unit tests.",
        "Test the payloads from the unit test in the challenge."
    ],
    "JavaScript Injection": [
        "Attempt to inject code with an embedded script",
        "Identify the reason for the failure as JavaScript trying to parse parentheses",
        "Learn that backticks can be used instead of parentheses in JavaScript",
        "Replace parentheses with backticks in the script"
    ],
    "Source Code Analysis": [
        "Reveal all the source code.",
        "Open the source.zip file.",
        "Find upload.php in the source.zip file.",
        "Perform an immutable code inspection of upload.php."
    ],
    "Serialization and Phishing": [
        "Identify XML External Entity (XXE) vulnerability when loading SVG files.",
        "Identify serialization in the php code.",
        "Identify serialization in the __construct method.",
        "Identify serialization in the __destruct method.",
        "Use the PHP /// uri.",
        "Deserialize the object of the Image type using PHP.",
        "Identify when __destruct would be called.",
        "Disguise the phar file as a JPEG image.",
        "Upload the disguised phar file.",
        "Create a phar file.",
        "Unserialize the phar file.",
        "Create an Image object with a controlled filename.",
        "Trigger the command './flag_dispenser' when the __destruct method is called.",
        "Trigger the execution of the flag_dispenser command."
    ],
    "API Exploitation and SQL Injection": [
        "Identified vulnerability in /api/image endpoint",
        "Utilized REST to discard png header from uploaded file",
        "Run brute.py script to output arbitrary SQL queries",
        "Identify control over 'request.body.converter'.",
        "Implement '__defineSetter__' on 'converters'.",
        "Create an object that resolves as a promise.",
        "Cause the promise to resolve.",
        "Trigger an error."
    ],
    "PHP Bug Exploitation": [
        "Recognized that the 'basename()' function is used in the PHP script",
        "Observed that the 'basename()' function ignores invalid characters",
        "Realized that the invalid characters in the payload can bypass the regex validation",
        "Bypassed strip_tags using the PHP bug.",
        "Flag was in the user agent."
    ],
    "SQL Injection and Query Manipulation": [
        "Identify the presence of a create table statement vulnerability.",
        "Determine that the injection is limited to 32 characters.",
        "Find the validation function in the code.",
        "Understand how the SQL statement can transfer results from the select statement into a new table.",
        "Identify the unnecessary parts of the query that need to be wrapped in [] for it to become a valid query.",
        "Apply the necessary adjustments to the injection to ensure it fits within the limitations.",
        "Compile the modified injection query."
    ]
}