{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Analysed PHP code and identified it will execute 'cat' command when specified in the GET request parameter 'f'."
            },
            {
                "StepNumber": 2,
                "StepString": "Understood that a regex filter restricts characters that can be included in the 'f' parameter."
            },
            {
                "StepNumber": 3,
                "StepString": "Listed out permitted characters to craft an effective attack payload."
            },
            {
                "StepNumber": 4,
                "StepString": "Bypassed character filter using wildcard '?' to match any single character in command arguments."
            },
            {
                "StepNumber": 5,
                "StepString": "Used wildcard '?' to access '/etc/hosts' file."
            },
            {
                "StepNumber": 6,
                "StepString": "Read an interesting binary '/readflag' using 'cat' command."
            },
            {
                "StepNumber": 7,
                "StepString": "Downloaded and decompiled the found binary."
            },
            {
                "StepNumber": 8,
                "StepString": "In the decompiled code, identified a string 'sRPd45w_0' which is a rearrangement of 'P4s5_w0Rd'."
            },
            {
                "StepNumber": 9,
                "StepString": "Understood that pipe character '|' is allowed, thus utilizing it to terminate the 'cat' command and run new command."
            },
            {
                "StepNumber": 10,
                "StepString": "Used character substitution '$()' to get the required strings for password."
            },
            {
                "StepNumber": 11,
                "StepString": "Executed '/usr/bin/strings /readflag' to read strings from the binary without actually running it."
            },
            {
                "StepNumber": 12,
                "StepString": "Filtered output to get only the relevant 'P4s5_w0Rd' string using '/etc/alternatives/nawk'."
            },
            {
                "StepNumber": 13,
                "StepString": "Constructed a regex pattern to extract only the string 'P4s5_w0Rd'."
            },
            {
                "StepNumber": 14,
                "StepString": "Passed the obtained string as an argument to '/readflag' using character substitution, which resulted in 'Wrong Password!' message."
            },
            {
                "StepNumber": 15,
                "StepString": "Identified the need to rearrange 'P4s5_w0Rd' into 'sRPd45w_0' to get the correct password."
            },
            {
                "StepNumber": 16,
                "StepString": "Developed a script which aims to index the characters in 'P4s5_w0Rd' string and reconstructs it into 'sRPd45w_0'."
            },
            {
                "StepNumber": 17,
                "StepString": "Ran the script and yielded the payload to rearrange password."
            },
            {
                "StepNumber": 18,
                "StepString": "Appended the obtained payload to '/readflag' command in the 'f' GET parameter to finally get the flag 'grey{r35p3c7_70_b45h_m4573r_0dd14e9bc3172d16}'."
            }
        ]
    }
}