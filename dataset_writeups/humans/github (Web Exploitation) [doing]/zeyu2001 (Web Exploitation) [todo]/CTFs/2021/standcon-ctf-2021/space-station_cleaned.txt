Going to the given site only shows `Hello Mars!`.

Performing a simple directory busting scan, we find some interesting information.

We find a `/flag.txt`, but we cannot view it. Let's keep in mind that the flag is in web root for now. 

Going to `/app` gives us a web proxy application.

We can enter any URL, and the corresponding page will be rendered on our browser. At the bottom of the page, we find that this application is "Powered by PHP-Proxy" and a [link](https://www.php-proxy.com) is given.

This link leads us to the GitHub repository, where a search for Issues containing the word "vulnerability" yields several results.

A currently open and unfixed issue is that PHP-Proxy (all versions) suffers from a Local File Inclusion (LFI) vulnerability: [https://github.com/Athlon1600/php-proxy-app/issues/135](https://github.com/Athlon1600/php-proxy-app/issues/135). We can also find more details here: [https://github.com/0xUhaw/CVE-Bins/tree/master/PHP-Proxy](https://github.com/0xUhaw/CVE-Bins/tree/master/PHP-Proxy)

### The Exploit

The exploit script is already provided in the GitHub issue above.

Running the script gives us the flag, `STC{l0cal_f1l3_1nclus10n_328d47c2ac5b2389ddc47e5500d30e04}`

To understand why the exploit works, read on below!

### The Vulnerability

When visiting a page through PHP-Proxy, the `q=` parameter is used. This is the URL we are visiting, encrypted using an app key in the package configuration.

The encryption key is generated as follows:

The URL is encrypted as follows:

The following encryption function is not secure enough. It simply takes every character of the key and adds it to the original plaintext. Since we know both the plaintext (the original URL) and the ciphertext (the `q=` parameter), we can easily reverse-engineer the key.

Then, after getting the key, it is simply a matter of encrypting `file:///var/www/html/flag.txt` since the `file://` protocol is not explicitly banned.
