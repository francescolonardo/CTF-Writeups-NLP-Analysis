{
    "AttackModel": {
        "NameOfTheChallenge": "SQL Injection via Legacy Invoice System",
        "AttackerCapabilities": [
            "Knowledge of SQL injection",
            "Understanding of base64 encoding",
            "Ability to create custom tamper scripts in sqlmap"
        ],
        "Target": {
            "Type": "Web Application",
            "Vulnerabilities": [
                "SQL Injection"
            ],
            "SecurityMeasures": [
                "No input sanitization on username and signup date before passing into SQL query"
            ]
        },
        "Steps": [
            {
                "StepNumber": 1,
                "Description": "Signing up on the website and accessing the invoice URL",
                "ToolsUsed": null,
                "StepDetails": {
                    "Hypothesis": "The invoice URL format suggests the presence of sensitive information in the database.",
                    "Action": "Sign up on the website and access the invoice URL.",
                    "Result": "The invoice URL reveals a base64-encoded string containing the username and signup date.",
                    "Success": "Success",
                    "FailingReason": null
                }
            },
            {
                "StepNumber": 2,
                "Description": "Injecting SQL payload through the username",
                "ToolsUsed": "sqlmap, custom tamper script",
                "StepDetails": {
                    "Hypothesis": "The SQL error indicates a potential SQL injection vulnerability.",
                    "Action": "Add a single quote (') to the back of the username to trigger an SQL error.",
                    "Result": "An SQL error is generated, indicating the presence of an SQL injection vulnerability.",
                    "Success": "Success",
                    "FailingReason": null
                }
            },
            {
                "StepNumber": 3,
                "Description": "Exploiting the SQL injection vulnerability",
                "ToolsUsed": "sqlmap, custom tamper script",
                "StepDetails": {
                    "Hypothesis": "The SQL injection vulnerability can be exploited to extract data from the database.",
                    "Action": "Use a custom SQLMap tamper script to append the payload to the back of the signup date and base64-encode the input string before passing it to the injection point.",
                    "Result": "By running sqlmap with the custom tamper script, the attacker is able to dump the database and retrieve the flag.",
                    "Success": "Success",
                    "FailingReason": null
                }
            }
        ]
    }
}