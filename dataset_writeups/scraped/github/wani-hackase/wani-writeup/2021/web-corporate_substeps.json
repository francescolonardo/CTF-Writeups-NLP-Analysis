{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Analyse the verify() function.",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Begin analysis of the verify() function."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Identify three checks within the verify() function: verifyUsername(), verifyPassword(), and verifyMFA().",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Identify verifyUsername() within the verify() function."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Identify verifyPassword() within the verify() function."
                    },
                    {
                        "SubstepNumber": 2.3,
                        "SubstepString": "Identify verifyMFA() within the verify() function."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Determine that the correct username is 'D0loresH4ze' based on the simple string comparison in verifyUsername().",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Analyze verifyUsername() and find the simple string comparison indicating the correct username to be 'D0loresH4ze'."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Discover that verifyPassword() uses bcrypt password verification.",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Investigate verifyPassword() and observe the use of bcrypt password verification."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Determine that the password is 'rasmuslerdorf' based on the known bcrypt hash from the PHP manual.",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Refer to the PHP manual to obtain the bcrypt hash and identify the password as 'rasmuslerdorf'."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Note that verifyMFA() checks a 10-digit random number.",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Examine verifyMFA() and observe the check for a 10-digit random number."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Exploit object injection to make 'mfa' and '_correctValue' match.",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Utilize object injection to manipulate 'mfa' and '_correctValue' variables to be equal."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Construct the expected solution using object injection: 'O:8:\"stdClass\":4:{s:8:\"username\";s:11:\"D0loresH4ze\";s:8:\"password\";s:13:\"rasmuslerdorf\";s:13:\"_correctValue\";N;s:3:\"mfa\";R:4;}'.",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Create the expected solution string using object injection."
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Base64 encode the solution string to create the 'userdata' parameter.",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Encode the solution string using base64 to generate the 'userdata' parameter."
                    }
                ]
            },
            {
                "StepNumber": 10,
                "StepString": "Include the encoded 'userdata' as a request parameter for the mfa service.",
                "Substeps": [
                    {
                        "SubstepNumber": 10.1,
                        "SubstepString": "Add the encoded 'userdata' as a request parameter for the mfa service."
                    }
                ]
            },
            {
                "StepNumber": 11,
                "StepString": "Obtain the flag as proof of successful authentication.",
                "Substeps": [
                    {
                        "SubstepNumber": 11.1,
                        "SubstepString": "Retrieve the flag as confirmation of successful authentication."
                    }
                ]
            }
        ]
    }
}