{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "The server uses dynamic rendering, which renders JavaScript on the server-side before serving web crawlers."
            },
            {
                "StepNumber": 2,
                "StepString": "Checked the Nginx configuration and noticed that it re-writes and forwards the request to the pre-renderer at `http://renderer:3000` when `User-Agent` header is of the web crawlers."
            },
            {
                "StepNumber": 3,
                "StepString": "Detected that the server uses Prerender to handle these requests, implying that Chrome is used to render JavaScript."
            },
            {
                "StepNumber": 4,
                "StepString": "Set the host header so that the renderer visits our attacker-controlled site."
            },
            {
                "StepNumber": 5,
                "StepString": "Utilized an XSS attack to redirect the browser using the `Location` header."
            },
            {
                "StepNumber": 6,
                "StepString": "Created a `redirect.php` that when visited would redirect the renderer's browser to our second exploit page."
            },
            {
                "StepNumber": 7,
                "StepString": "Constructed a `exploit.html` file with an iframe whose source is `http://localhost:3000/render?url=http://api:8000/`."
            },
            {
                "StepNumber": 8,
                "StepString": "To access the iframe's contents which should be the response from `http://api:8000/`, bypassed SOP by exploiting the fact that the current site and the iframe's source are both `http://localhost:3000`."
            },
            {
                "StepNumber": 9,
                "StepString": "Received the iframe's contents: `PGhlYWQ+PC9oZWFkPjxib2R5PkFDU0N7c2hhcmtzX2FyZV9hbHdheXNfaHVuZ3J5fTwvYm9keT4=`."
            },
            {
                "StepNumber": 10,
                "StepString": "Decoded the received Base64 string to get the flag: `ACSC{sharks_are_always_hungry}`."
            }
        ]
    }
}