[
    "Identify that the request was double proxied with Nginx.",
    "Recognize the XSS prevention methods implemented by the site.",
    "Visited the website and viewed the login page",
    "Encounter a message saying browser is unsupported.",
    "Upload a PHP shell",
    "If a guess was not successful, the full password has been guessed.",
    "Decide to add custom JavaScript code to the 'code' key",
    "Test the vulnerability using the crafted payload",
    "Examine the Python code.",
    "Notice the validation of arbitrary code execution",
    "Complete the challenge.",
    "Caused the source of 'flag.php' file to be revealed",
    "Attempted various inputs.",
    "Noticed rate limiting being enforced on a per-email basis through a Redis store.",
    "Review the results to list all tables.",
    "Identified fields labeled 'username' and 'password'.",
    "Ensured the script utilizes a previously saved cache.",
    "Write a new PHP exploit",
    "Look for a value for 'confidential_documents'.",
    "Recognize that 'mobile-viewer' couldn't directly interact with server.",
    "Created exploit using SQL injection: 'adm' || trim('in', ` Password: `) || ''",
    "Open the website",
    "Included the payload in the URL.",
    "Read the file 'apache.conf'.",
    "Injected two `reCAPTCHA` buttons.",
    "Sign the Flask cookie with the desired username to authenticate as 'root'.",
    "Retrieve the corresponding IP address",
    "Realize that JavaScript doesn't execute when directly input into the application's fields.",
    "Used the obtained OTP for verification and login.",
    "Check the source code of the website.",
    "Access the 'Support' section",
    "Extract hidden data from the .DS_Store file.",
    "Modify the output of the Python code.",
    "Perform this step to prevent unintended data loss or corruption.",
    "Attempt to break out of the string with a single quote in '?cat=news''."
]