[
    "Confirmed server-side file inclusion.",
    "Identified that the user input '$text' from get param 'text' was being used.",
    "Discovered a folder '/ctf'.",
    "Located 'flag.txt'.",
    "Inspect the decoded payload.",
    "Inspect the downloaded file and find a GitHub URL.",
    "Identify the route as '/getFile?file=admins'.",
    "Replace 'admins' with '.env' in the route.",
    "Or replace 'admins' with '../.env' in the route.",
    "Download the '.env' file.",
    "Recognize that the response text contains the flag.",
    "Identify the conditions for file retrieval",
    "Note that spaces or slashes in the filename are not allowed",
    "Note that filename length must be five or less",
    "Note that only js, ts, cpp, c files are allowed",
    "Infer that the flag is inside a `flag.txt`",
    "Note that an array passed in 'file' GET parameter gets converted and concatenated into a string",
    "Note that comma separation is added between each element of the array in the string format",
    "Construct a parameter that meets the conditions and requests the flag file",
    "Use only the first five elements of the array to create the file name",
    "The file name resolves to flag.txt after the process",
    "Read the information about 'Brobot' in the 'index.html' file",
    "Translate the hex-encoded list, var _0x575c, into a more readable format",
    "Realize the split parts were stored against assigned keys",
    "Combine all password parts into a single string",
    "Enter a color",
    "Get the value from the cookie",
    "Observe that the server script takes user input as the 'icecream' value.",
    "Retrieve the cookie_secret value 'MangoDB'.",
    "Successfully change the website content from the original message to the target flag value 'csictf{h3r3_i_4m}'.",
    "Notice that to match the value of 'hash' and 'target', the 'hash' param cannot equal '10932435112'.",
    "Found that the 'flask_caching' module can store a python pickle in redis",
    "Realized that caching modules use 'pickle.load()' to load cached data",
    "Intend to use the crafted payload as the filename of the uploaded gif file.",
    "Perform the action of uploading the gif.",
    "Use the crafted filename for the uploaded gif.",
    "Conduct an analysis on the resulting PNG file.",
    "Discover that the flag is written on the resulting PNG file.",
    "Receive the flag in the body of the returned page",
    "Add a JSON object '{\"foo\":\"bar\"}' to the body.",
    "Add 'messi' as a key in the JSON object in the HTTP request.",
    "Change the value of the 'messi' key to 'psg'.",
    "Include 'payload' as the data",
    "If it does, append guessed character to 'flag' and continue process",
    "Identified the new flag value in the response",
    "Identified a different flag value in the response",
    "Concluded the phrase to be a flag after concatenating the chunks",
    "Para meters and values such as 'domain', 'check', 'key', and 'column' are initialized.",
    "These parameters are set up to be manipulated later.",
    "The data content for the request is constructed dynamically with a key-value pair.",
    "The value for the key-value pair is the payload.",
    "Noticed that body-parser is set to allow arrays and objects",
    "Realized it gives the possibility to pass an object in the query statement",
    "Used a known attribute in the object",
    "Understood that objects are converted",
    "Understood that converted attributes are comma separated",
    "Find the file named 'flag.txt'.",
    "Inspect the returned data",
    "Select and observe the local storage.",
    "Identify a meta tag with the name attribute 'redpwnctf2020' in the HTML source code.",
    "Retrieve the value of the content attribute from the identified meta tag.",
    "Copy the value of the content attribute: 'flag{1nspector_g3n3ral_at_w0rk}'",
    "Inject a random '<h1>Hello</h1>' tag.",
    "Find that the content is retrieved from the URL in base64 format.",
    "Identify the content of the page is used to generate the base64 encoded URL.",
    "Assign the document's cookie to the query parameter of a specified URL.",
    "Receive a gif in response",
    "Specify that files with the name 'flag' are of particular interest",
    "Decide to print all file contents",
    "Find a lot of printed information",
    "Search for the flag format",
    "Find the flag 'zh3r0{h3y_d1d_y0u_upl04d_php_c0rr3ct1y???_84651320}'",
    "Obtain the 'userId' from the decoded information.",
    "Identify the id of the newly created user from the received user list.",
    "Access the book in which the flag is contained.",
    "Observe a visible SQL query for the login request.",
    "Test various SQL queries to deduce the type of database in use.",
    "Execute the query '123' UNION SELECT 1, sqlite_version(), 3;--'.",
    "Determine from the result that the site uses SQLite as its database.",
    "Execute the query '123' UNION SELECT name, sql, null from sqlite_master;--'.",
    "Review the results to list all tables.",
    "Retrieve the flag from the returned results.",
    "Targeted the /etc/passwd file in the payload.",
    "Captured the flag from the response.",
    "Confirm the ability to upload TPL files.",
    "Upload a file.",
    "Set the file extension as .tpl.",
    "Generate random content for the file.",
    "Submit the file for identification.",
    "Observe the uploaded file triggering a POST to /upload.php.",
    "Confirm that the file content is displayed.",
    "Upload a different file.",
    "Submit the file for observation.",
    "Note the changes in the displayed content.",
    "Attempt to upload a valid PHP file.",
    "Access the template files on the server.",
    "Obtain the content of the template files.",
    "Connected to the database using the credentials from the JavaScript code.",
    "Examined the different database schemas and tables: accounts, config, env, innodb, sys, users.",
    "Found a flag in the 'users' schema.",
    "Discovered various other important details in other schemas.",
    "Downloaded the contents of an Amazon S3 bucket.",
    "Noted the creation of a 'storage.db' file",
    "Opened the 'storage.db' file with a SQLite database reader",
    "Viewed the stored data",
    "Identify the functionality of storing the request body object into a database.",
    "Discover the 'schema.prism' file.",
    "Identify the 'User' model within the file.",
    "Identify the 'isAdmin' field within the 'User' model.",
    "Identify the default value of 'false' for the 'isAdmin' field.",
    "Retrieve the flag using the customized request.",
    "Notice settings related to a calendar.",
    "Attempted to list the contents of '/etc/passwd'.",
    "Only 'index.php' was returned from the directory listing.",
    "Revealed current directory as '/var/www/html'.",
    "Listed environment variables.",
    "Revealed a 'flag.txt' file.",
    "Read the contents of 'flag.txt'.",
    "Check if the body JSON value 'solution' exists.",
    "Extract the flag from the '/flag' file.",
    "Identify the `database.sql` file in the source code.",
    "Identify a list of toys and some other properties.",
    "Identify that the flag is in the same database as the toys, but its approved value is set to 0.",
    "The application connects to a sqlite database ('const db = new Database('toy_workshop.db');'), so inspect 'database.js'.",
    "'database.js' lets you add and read items from the database. The query variable control is possible via the website, but SQL injection is unsuccessful.",
    "This function adds our user provided query to the database and then calls 'bot.readQueries(db)'.",
    "Configure the SQL injection to return all rows in the database.",
    "Select the generated barcode file for upload.",
    "Locate the flag within the results.",
    "Retrieve the flag successfully",
    "Attempt to read the required file.",
    "Read the flag.",
    "Create a 8 byte file equivalent to the data in `cipher + 0xd34db33f`.",
    "Upload the created file.",
    "Input {{ state }}",
    "Identify the first part of the flag within a comment",
    "Locate the style.css file within the website files",
    "Open the style.css file",
    "Analyze and review the Dirb scan results",
    "Open the final.txt file in the path",
    "Identify the third part of the flag within the file contents",
    "Discovered a suspicious 'data' parameter in the URL.",
    "Noticed that three successful purchases of 'cheap' had the same prefix.",
    "Observed that the prefix changed in the unsuccessful purchase.",
    "Inferred that the suffixes contain information about the product name and the purchase status.",
    "Combined portions of failed and successful purchase data strings.",
    "Observe the usage of MySQL",
    "Plan to obtain information from MySQL special tables",
    "Utilize the group_concat() function",
    "Obtain all entries in a column as a single row",
    "Test each column value",
    "Obtain table names from information_schema.tables",
    "Obtain column names from information_schema.columns",
    "Execute a final SQL query",
    "Retrieve the flag from the 'flag' column in the 'flag' table",
    "Analyzed the response",
    "Extracted the flag from the response",
    "Found a public key in the `/robots.txt` file.",
    "Assign user value as 'admin'.",
    "Retrieve the flag.",
    "Use the obtained token to perform a readfile operation",
    "Read the content of the `68696e742e747874` file, which is the hex representation of hint.txt",
    "Confirm that the password length is `22`",
    "Retrieve the value of AUTH_SECRET from the .env file",
    "Read the content of the /etc/flag.txt file",
    "Identify that query parameters are not properly sanitized.",
    "Discover that the 'DB_SECRET' is stored in another table.",
    "Use the payload to extract flag data from the server.",
    "Extract data from the server.",
    "Inspect the server response.",
    "Search for the flag within the server response.",
    "Identify that the code is using the HTTP header to construct a file path.",
    "Receive in response an 'image' encoded in base64.",
    "Identify the flag in the 'X-Localhost-Token' header in the received server response.",
    "Download the .DS_Store file.",
    "Extract hidden data from the .DS_Store file.",
    "Find the flag in the backup/b/a/c/flag.txt file.",
    "Include spaces in the note.",
    "Use only characters from a-z and A-Z in the note.",
    "Receive a note ID.",
    "Identify that the source code is located at /src.tgz.",
    "Extract the source code from /src.tgz.",
    "Identify that 'flag.txt' can be read.",
    "Retrieve 'flag.txt'.",
    "Test single characters from '0' to 'f'",
    "Use each character as the value for both 'pass' and the User-Agent header",
    "Found the first part of the flag 'accessdenied{1_w3nt_thr0ug' in an HTML comment",
    "Observe the flag after refreshing the page",
    "Recognize the first position in the JSON array as the winning position.",
    "Search for the flag within the script's output.",
    "Extract the flag from the HTML content of the response",
    "Extract the flag from the provided string",
    "Find the file named configs.zip on the webpage.",
    "Extract the configs.zip file.",
    "Replace any 'secret' tags with the word 'Protected'.",
    "Observe within the content of the page.",
    "Identify the 'secret' tag which contains the flag.",
    "Recognized from the error that the website is likely reading XML data from a database.",
    "Analyzed the results from the SQLmap.",
    "Concluded from the SQLmap results that there are two databases available: 'ASISCTF' and 'information_schema'.",
    "Continued to interpret the results from SQLmap.",
    "Discovered in the SQLmap results that the 'ASISCTF' database has one table termed 'books'.",
    "Evaluated the structure of the 'books' table.",
    "Noticed that the 'books' table has two columns: 'id' and 'info'.",
    "Discovered that a '<flag>' XML element is hidden in the 'books' table but not in the entry with 'id = 1'.",
    "Conducted a remote file read operation.",
    "URL-encoded the payload.",
    "Successfully read the remote files.",
    "Read source code via base64 encoding.",
    "URL-encoded the new payload.",
    "Set a 'flag' variable based on the response of the previous POST request.",
    "Retrieve the flag from the response of the previous POST request.",
    "Find 'flag.file'",
    "Print contents of 'flag.file'",
    "Identify 'flag.file' contents",
    "Recognize it as a GZip archive",
    "Recreate GZip archive",
    "Extract 'flag.txt' from the GZip archive",
    "Set the value of the header 'answer' as 'Fear the Old Blood'",
    "Retrieved the flag in the response",
    "Included a calculation statement in the request.",
    "Submitted a malformed statement.",
    "Determine that the website is an online calculator",
    "Include a calculation statement in the request",
    "Retrieve user information",
    "Retrieve directory listing",
    "Identified that 'transmissions' had a fixed part at the beginning and end.",
    "Identified that 'transmissions' had a variable part in the middle.",
    "Script retrieves all characters.",
    "Script composes the flag.",
    "Appended unique transmission values to a list.",
    "Script composes the flag using the loop.",
    "Received a PDF file from the '/circle/one/' endpoint.",
    "Received a PNG image from the 'CONNECT /two/' request.",
    "Another part of the flag provided.",
    "Found that 'POST' and 'PUT' returned a different result.",
    "Received a PDF file from '/circle/one/' endpoint.",
    "Received a PNG image from 'CONNECT /two/' request.",
    "Received a PNG image with a crossword puzzle from '/square/' endpoint.",
    "Identify 'login.php' and 'login.php.bak' files",
    "Make an educated guess on the numbers at the beginning of the MD5 string",
    "Realised that the generated PDF had the flag inside",
    "Included a reference to the /etc/flag.txt directory in the request.",
    "Analyzed the generated PDF.",
    "Collect the list of subclasses returned as a result",
    "Use the identified class (subprocess.Popen) to read the content of 'flag.txt'",
    "Discover '?lmao' in the robots.txt file",
    "Discover a file named 'flag210d9f88fd1db71b947fbdce22871b57.php'",
    "Read the file 'flag210d9f88fd1db71b947fbdce22871b57.php' using the same technique applied during reading of 'config.php'",
    "Find the flag file 'flag.jpg'.",
    "Upload a PHP shell",
    "Upload the new PHP exploit",
    "Get the flag by reading from a file in the '/etc' directory",
    "Contained the database name.",
    "Used the database name to compose the flag.",
    "Identify that the form only allows the uploading of PDF and DOCX files",
    "Upload a DOCX file",
    "Note that the number of pages is shown",
    "Understand that DOCX files are actually a collection of XML files",
    "Create a new DOCX file",
    "Alter the file 'app.xml' inside the new DOCX file",
    "Modify the number of pages stored in 'app.xml'",
    "Point 'xxe' to the required file 'file:///flag.txt'",
    "Website displays the content of the '/flag.txt' file",
    "Identified the specific query string parameters needed according to the code.",
    "Checked the equality of generated data from both the hexadecimal values.",
    "Checked if both md5 hashes matched.",
    "Got two different URL encoded strings.",
    "Find the flag on the accessed page",
    "Discover POST requests sent to '/forgotpassword.html' page.",
    "Replace the email value in the intercepted Post Request with a controlled one.",
    "Identify the flag hidden in the retrieved response: 'DawgCTF{cl!3nt_s1d3_v@l!d@t!0n_1s_d@ng3r0u5}'.",
    "Check the cookies being set.",
    "Analyze the PCAP file.",
    "Filter for POST requests passing 'passcode' values.",
    "Calculate the 'passcode'.",
    "Identify the URL parameter labelled 'flag'",
    "Observe the encoded string returned by the event",
    "Analyze the encoded string",
    "Obtain the flag from the decoded text",
    "Observe that comments under a picture can be inserted.",
    "Step 1: Insert the comment as a preview.",
    "Step 2: Validate and insert into the database.",
    "Find the database credentials in the output.",
    "Credentials: 'dogooo' for 'db_user' and 'dogZgoneWild' for 'db_pass'.",
    "Use the database credentials for authentication.",
    "Flag found: 'OOO{did you see my dog}'.",
    "Submitted a text content to a remote S3 bucket.",
    "Retrieved the text content.",
    "Examined the functionality endpoint '/files/'.",
    "Read the created item from the request smuggling.",
    "Received the final flag in the response.",
    "Recognize the challenge requires locating a flag in /var/www/html/flag.php on a web server",
    "Include /var/www/html/flag.php in the POST request",
    "Understood that data is packed in 'username:password:admin' format.",
    "Retrieved the flag after successful login.",
    "Identified the target 'config.php' file.",
    "Updated the '$url' attribute in the serialized object.",
    "Adjusted payload produced from serialization operation.",
    "Updated length of URL string according to the previous string replacement.",
    "Identify that 6 parameters are read from the server response",
    "Recognize the parameters as 'author', 'hidden', 'id', 'postDate', 'text', 'title'",
    "Received fire-place[0].html e4a4c2321d18246d027184605ca52866 as the challenge.",
    "Downloaded the provided HTML file.",
    "Observed that the HTML file establishes a connection to a Firestore environment.",
    "Observed that colored pixels on the canvas get stored into Firestore repository.",
    "Retrieved data from each document in the Firestore database using the code snippet.",
    "Verified the contents of the retrieved data.",
    "Found that the data are structures that contain all the RGB values for pixels.",
    "Tried accessing a document called 'flag' in the Firestore database.",
    "Verified the contents of the 'flag' document.",
    "Located the flag within the 'flag' document data.",
    "Found an interesting comment in the HTML source code: '?sauce'.",
    "Received SQL query result and examined the output.",
    "Discovered that the 'users' table had 3 columns.",
    "Identified that the second column contains usernames.",
    "Exfiltrate the output of executed commands.",
    "Retrieve the flag from the file \"flag.txt\".",
    "Craft serialized input",
    "Enumerate the characters that are converted to underscores.",
    "Extract the flag from the server response.",
    "Identify a file 'flag_for_this_INFERNO.txt' in the listed contents.",
    "Retrieve the flag.",
    "Use the directory listing to identify a 'print-flag' file.",
    "Use the 'strings' command to extract the flag from the binary data in the 'print-flag' file.",
    "Observe message indicating the ability to upload, list, and view LaTeX documents",
    "Upload a LaTeX document",
    "Upload another LaTeX document",
    "Download the unlinked source file",
    "Analyze the cookies",
    "Find the `login` cookie with base64 content",
    "Decode the base64 content",
    "Encode the malicious payload in base64",
    "Discover files in the directory, including the 'flag' file, amongst others.",
    "Receive the contents of the 'flag' file in the HTTP response.",
    "Noticed the user's IP address being attributed to an SQL query.",
    "Manipulated the IP address parameter in the SQL query.",
    "Interpreted the returned error message to infer the use of an SQLite database.",
    "Created a UNION SQL operation with 'null'.",
    "Determined the position of the column used to return data, it was found to be the last one.",
    "Discovered the presence of only two tables - nxf8_users and nxf8_sessions.",
    "Enumerated the columns of the user table.",
    "Analyzed the composition of the sessions table.",
    "Retrieved the 'id' of Maria from the user table.",
    "Queried the 'nxf8_sessions' table for session IDs where 'user_id' is 5.",
    "Use S3Scanner to dump the contents of the suspect S3 bucket",
    "Use the 'cat' command to display the contents of youfoundme-asd897kjm.txt",
    "Analyzed the requested pages",
    "Observe images displayed in a gallery",
    "Duplicate an image file",
    "Rename duplicated file to indicate shell",
    "Find the renamed file path of the uploaded image",
    "List directories in the root location",
    "Search the entire file system for files named 'flag'",
    "Display the content of the flag.txt file",
    "Retrieve the flag from file content",
    "Download the provided PHP files",
    "Observe different messages based on query results",
    "Create a SQL query to extract the data",
    "Specify the different IP address in the SQL query",
    "Retrieve the flag",
    "Identify an interesting file: require dirname(__DIR__).'/config/bootstrap.php';",
    "Find the entire path to an environment file.",
    "Print the content of the environment file.",
    "Access the environment file.",
    "Find the flag inside the environment file.",
    "Structure the XML code to expose data from the /etc/passwd file.",
    "Find the flag file in the current working directory.",
    "Pull the details of the user with the proper role",
    "Download the 'last-revision' file from the target server.",
    "Download the 'dirstate' file from the target server.",
    "Download the 'pack-names' file from the target server.",
    "Use the BZR Check command to find any missing files.",
    "Convert the Base64 string into hexadecimal format.",
    "Identify the Hexadecimal string.",
    "Identify the hexadecimal string.",
    "Accessed 'README' file within '.bzr' directory.",
    "Opened 'last-revision', revealing the last update to the directory.",
    "Created 'foo.txt' file within the 'ctf-bzr' directory.",
    "Added 'foo.txt' file to the Bazaar repository.",
    "Removed 'foo.txt' from the 'ctf-bzr' directory.",
    "Downloaded the 'last-revision' file from the target server.",
    "Replaced the current 'last-revision' file with the downloaded one.",
    "Downloaded the 'dirstate' file from 'checkout' folder on the target server.",
    "Replaced the current 'dirstate' file with the newly downloaded one.",
    "Downloaded the 'pack-names' file from 'repository' folder on the target server.",
    "Understand that TODO notes of users can be read by enumerating URLs in a certain format.",
    "Enter '1' for 2 + 2 - 3 = ?",
    "Obtain the flag from the webpage which reads: MCA{sms_2fa_is_bad_also}",
    "Analyze the read files page",
    "Inspect how the website stores the 'name' parameter",
    "Locate the 'name' parameter in the '/proc/self/fd/9' file",
    "Obtain the process ID as the result of executing the PHP command",
    "Execute the 'ls -al' command",
    "Retrieve the list of files in the directory",
    "Scan the contents of the 'flag_is_here' directory",
    "Discover the presence of a 'flag.txt' file",
    "Retrieve and examine the contents of the 'flag.txt' file",
    "Determine that the 'counter' cookie string ends with a changing base64 encoded string",
    "Compress the malicious Java serialized object",
    "Check the value of the cookie 'not_admin'",
    "Retrieve the flag from the refreshed webpage",
    "Find a base64 encoded value.",
    "Generate more base64 cookies.",
    "Enumerate the folder content.",
    "Find a 'flag' file.",
    "Retrieve the JavaScript file from the webpage.",
    "Perform a basic analysis of the cookies.",
    "Decide to use the SQL LIKE clause.",
    "Pull multiple .git files such as `.git/index`, `.git/config`, `.git/HEAD` etc., from the server.",
    "Find commit IDs within the log.",
    "Discover the usage of XML envelopes",
    "Identify two JavaScript files",
    "Identify the use of a productId value",
    "Observe the server reflecting the productId value in the response",
    "Attempt to read a file from the server",
    "Observe the data from the /etc/passwd file in the response",
    "Observe that the server reflects the passed productId value in the response.",
    "Attempt reading a file from the server using the crafted payload.",
    "Observe that the response contains data from the /etc/passwd file.",
    "Observe the returned data.",
    "Identify the flag utflag{n3xt_y3ar_go1ng_bl1nd} in the returned data.",
    "Retrieved the PHP source code.",
    "Using the constructed base, tried to enumerate DB tables.",
    "Identified a flag table in the database.",
    "Enumerated the columns of the flag table.",
    "Discovered a column named 'whatsthis'.",
    "Extracted the content of the 'whatsthis' table.",
    "Retrieved the PHP source code.",
    "Tried to enumerate DB tables.",
    "Identified a flag table in the database.",
    "Used the SQL injection to enumerate the columns of the flag table.",
    "Discovered a column named 'whatsthis'.",
    "Executed another HTTP request to extract the content of the 'whatsthis' table.",
    "Retrieved the flag from the table content.",
    "Noticed that an idea can be posted with an assigned ID.",
    "Identify the username and password values.",
    "Exclude the existing private key from the payload.",
    "Force the debugging private key in the payload.",
    "Include the payload in the request.",
    "Observe the presence of three files on the webpage.",
    "Open one of the files.",
    "Locate the file named '(wtf.mp4)'.",
    "Received the cookies",
    "Find a www.zip file using dirsearch.",
    "Open the www.zip file.",
    "The encoded XMLHttpRequest retrieves document's cookie.",
    "Structure the payload in JSON format.",
    "The filename used in the request was 'lol.txt'",
    "The content written in the request was 'HACKED'",
    "Explored files that could be overwritten",
    "Cannot modify anything in '/home/manhndd/.ssh/'",
    "Read the flag from '/var/secret'",
    "Write the flag to '/opt/mydank'",
    "The script reads from '/mydank'",
    "Analyse the given hyperlinks.",
    "Access the 'user' directory.",
    "Download the nginx.conf file successfully.",
    "Find a flag.txt file in the '/admin' directory.",
    "Return the real flag in the 'uberadmin' directory.",
    "Ensure that a valid graph can be created using a specific format",
    "Analyze the form provided to upload images.",
    "Examine the source.zip file.",
    "Host a document type definition (DTD).",
    "Retrieve the flag.",
    "Used the profile picture upload feature",
    "Uploaded a file to the FTP server",
    "Injected email queue in rabbitmq",
    "Triggered an email with the flag as content",
    "Initiate data leaking process",
    "Dump all tables and columns",
    "Use sessionID as the first parameter.",
    "Identify the list of banned words and special characters that the injection string must not contain.",
    "Discover the possibility of using a \"CREATE TABLE ... SELECT\" SQL statement.",
    "Identify the components of the encrypted string: remote IP address, a seed (IDSEED), and current date",
    "Set IDSEED with 'id\u306e\u7a2e'",
    "Retrieve the corresponding IP address",
    "Overwrite the index.html file",
    "Read the file 'satellite.txt'.",
    "Return the content of 'satellite.txt'.",
    "Observe that the system environment flag is displayed when the response contains the specific IP address (119.29.29.29).",
    "Capture the response from the server.",
    "Extract the system flag from the response.",
    "Open the file using an appropriate application or viewer.",
    "Read and retrieve the flag from the displayed contents.",
    "Inputted negative 'rate' value",
    "'src' set to local files",
    "Leaked secret key '19eb794c831f30f099a31b1c095a17d6' from 'config.py'",
    "Provide an empty array for 'variables'",
    "Fetch data using the manipulated query.",
    "Access the 'target_credentials' database.",
    "Identify the 'secret_key' column within the database.",
    "Discover the flag 'rwctf{t0-h4ck-$kynet-0r-f1ask_that-Is-th3-questi0n}' in the 'secret_key' column of the database.",
    "Uploaded a larage number of valid files.",
    "Uploaded .htaccess file.",
    "Read the file '/etc/passwd'.",
    "Read the file 'apache.conf'.",
    "Uploaded the first created PDF file to the website.",
    "Retrieved the signature from the first signed PDF.",
    "Identified that the input is copied to a mmap-ed memory region within the function.",
    "Discovered a connection being made to a MySQL server prior to shellcode execution.",
    "Realized SQL queries can be dispatched to this open FD to read responses.",
    "Prepared the SQL query to send to File Descriptor (FD) 4, which is the MySQL server.",
    "Sent the SQL query to FD 4 (MySQL server).",
    "Read the response from FD 4.",
    "Wrote the received response to the intended output.",
    "Observed the expected output - 'Content-type: text/html' cgi header.",
    "Wrote the received response as the final output.",
    "Found a JSON response.",
    "Read the message in the JSON response.",
    "Used the flag present in the JSON response.",
    "Identify the need to steal the saved note",
    "Display current cookies",
    "Predict the next 'nonces'",
    "Use the admin's cookie to retrieve the flag",
    "In the password field of the JSON body, use NoSQL's $gt operator to bypass password check by typing {\"$gt\": \"a\"}.",
    "Inspect the contents of the accessed page.",
    "Use 'flag.flag' as the 'id' to purchase the flag from the store for $1.",
    "Edit the user's name",
    "Edit the user's own name",
    "Use a length of '32 bytes' for the payload",
    "Note the presence of 'username', 'cnonce', and 'hash' parameters.",
    "Understand that this keylogger sends each pressed key to an external server as an encoded message.",
    "Remove unwanted characters from the decoded message.",
    "Extract the final flag.",
    "Downloaded the src.zip file",
    "Extracted the contents of the zip file",
    "Found the bundle.js file",
    "Found the index.html file",
    "Download the provided 'src.zip' file from the challenge description.",
    "Download the provided 'flag.png.encrypted' file from the challenge description.",
    "Unzip 'src.zip'.",
    "Inspect the unzipped contents of 'src.zip'.",
    "Analyze the results from the SQL payload tests.",
    "Observe that the new representation of the flag is a 152-digit long number.",
    "Pass a range of data values to test the properties of the number casting in the database.",
    "Determine that integer values exceeding '9223372036854775807' will be converted into floating numbers.",
    "Attempt to concatenate large integers in SQLite.",
    "Find that SQLite treats large integers the same way it treats strings during concatenation.",
    "Use the SQL function 'max(A, B)' to sort through the concatenated 152-digit number.",
    "Further reduce the payload character count by poking around and using different functions",
    "Manage to access the admin's note.",
    "Contain the password.",
    "Retrieve the flag.",
    "Observed the application displaying contents of '/api/answer'.",
    "Identify the octal notation of 127.0.0.1 IP address is 0177.0.0.1.",
    "Found a part of the flag: CHTB{",
    "Found another part of the flag: us3full_1nf0rm4tion}",
    "Found the last piece of the flag: 1nsp3ction_",
    "Note the MongoDB storage of a password with username 'admin'.",
    "Note the Json response upon attempted logins.",
    "Obtain the complete flag.",
    "Identify that 'eval' is used on data from the POST request.",
    "Extract the understanding of the possibility to upload an image.",
    "Conduct experiments with uploading images.",
    "Manipulate RGB values in the uploaded images.",
    "Replace one of the RGB values in the 'background' parameter.",
    "Successfully read the flag.txt file using the manipulated RGB value.",
    "Export or send the content of flag.txt.",
    "Examined the 'package.json' file in the site source.",
    "Identified the dependencies 'md-to-pdf' and 'nunjucks' in the 'package.json' file.",
    "Redirected the flag to a file in the invoices directory.",
    "Revealed the 'username', 'uid', and 'iat' from the decoded JWT token.",
    "Determine that the website is running on a MySQL database.",
    "Discover the config.py file.",
    "Find database information within the file.",
    "Deduce that the database logic requires password token.",
    "Attempt to extract database details.",
    "Successfully extract the user.",
    "Successfully extract the password token.",
    "Observed the status report of the combat robot and a command prompt.",
    "Found database config info in config.py.",
    "Utilized path traversal to access /etc/passwd file.",
    "Relocated flag name from 'flag.txt' to 'signal_sleuth_firmware' in root.",
    "The introspection query returns all the content of a graphql schema.",
    "Receive a full introspection response from the /graphql endpoint.",
    "Visualize the data structure using the graphql voyager tool.",
    "Search for a script.js file.",
    "Identify that the service lists all the items in the mentioned directory.",
    "Look for elements in the '/home' directory.",
    "Find the 'flag.txt' file.",
    "Navigate to the '/home/user' directory.",
    "Retrieve the flag from the server's response",
    "Discover that the captured screenshot is of a submitted webpage URL",
    "Find a formula",
    "Identify that the formula points to another sheet's labeled 'Source'",
    "Identify a specific range 'A:B'",
    "Unhide hidden sheets",
    "Call a range from the document",
    "Realize that a hidden sheet's full range can be accessed",
    "Flag is inside the hidden sheet",
    "Identify the flag in the response section of that response.",
    "Try various inputs.",
    "Include special characters in the inputs.",
    "Increase the number of commas in the input to three.",
    "Utilize the observed character set.",
    "Combine it with the input of three commas to meet the requirement.",
    "Modified the JSON body by removing the 'name' key value pair",
    "Realized that the 'name' key value pair is required",
    "Noticed that the 'salt' and 'hash' values are extracted from the JSON request body",
    "Discover that HTML files are uploaded successfully despite checks for images.",
    "Understand that HTML files are downloaded with random filenames.",
    "Upload the HTML file to the user profile.",
    "Extract the 'id' of the user (attacker) from the decoded JWT token.",
    "Execute the 'ls' command to list files in the current directory.",
    "Execute the 'cat' command to view the contents of a file.",
    "Access the desired file using the exploited vulnerabilities.",
    "Encode the flag.png file using Base64 encoding.",
    "Include the Base64 encoded data as part of the request payload.",
    "Receive the Base64 encoded png file on the local machine.",
    "Line shows: '+ /.env: .env file found. The .env file may contain credentials.'",
    "Followed directory path indicated in the scan result.",
    "Explored further based on the directory path.",
    "Populate entry in /out/save.txt.",
    "Include var1 and var2 parameters in the request.",
    "Fetch headers from /out/save.txt.",
    "Fetch PHP session ID from /out/save.txt.",
    "Inspect webpage response.",
    "Inspect parameters in the request.",
    "Successfully extract a password from the database",
    "Observe the extracted password is very long and alphanumeric",
    "Found a PHP object in the decoded cookie.",
    "Identified attributes: 'username', 'admin', and 'profile_img'.",
    "Used directory traversal (../) to access the flag",
    "Retrieve user and read permissions from the injected command.",
    "List the files using the backtick-enclosed 'ls' command.",
    "Identify the presence of 'index.php' file in the results.",
    "Identify the presence of 'flag.txt' file in the parent directory.",
    "Read the flag using the '< ../flag.txt' command.",
    "Aim to access internal files",
    "Knew that the flag was located in /var/www.",
    "The XML payload was designed to extract information from /var/www.",
    "Uploaded the XML payload.",
    "Reviewed the XML return from the 'view XML' tab.",
    "Successfully extracted the flag from /var/www.",
    "Discover a text file named flag.txt",
    "Access the flag.txt file.",
    "Notice three endpoints (/status, /rocketLaunch, /fuel) in the response.",
    "Receive a list of pumps and their IDs.",
    "Assign 'triton' as the rocket name in the POST request body.",
    "Add a random pump ID from earlier /fuel endpoint response.",
    "Submit an integer value as the input in the web application.",
    "Submit a value for 'n' that is larger than 8 characters.",
    "Dump file contents of websites.",
    "Dump the '.git' directory.",
    "Use an extractor tool.",
    "Get files from the dump.",
    "Locate 2 'users.db' files.",
    "Confirm that both files are sqlite3 databases.",
    "Identify the database containing 'bcrypt' hashes.",
    "Identify the database containing 'md5' hashes.",
    "Crack the md5 hashes.",
    "Identify 3 log file links.",
    "Use curl to search for 'sdctf' in the logs.",
    "Retrieve all logs for further analysis.",
    "Exclude common words from the search.",
    "Identify leaks of bash history in the logs.",
    "Inferred from the challenge that grades are uploaded through a json file",
    "Added more semesters to the json file",
    "Set the production value to true in the json file",
    "Used the following json to upload the updated grades",
    "Compile a list of emails",
    "Use a wildcard pattern and append the current character to check if the password starts with the current guessed string.",
    "Append the current character to the password string.",
    "Trim a section of the server response using slicing.",
    "Assign the string 'Hello_Rules' to a variable.",
    "Identify fields that need to be extracted.",
    "Extract the response text (HTML).",
    "Use regular expressions to find specific fields.",
    "Note that it includes the ability to upload photos.",
    "Note the showcasing of uploaded photos.",
    "Convert flag images to base64 data.",
    "Split the large image data into three parts.",
    "Send base64 encoded image data to the requestbin.",
    "Take note of the directory contents returned by the server.",
    "Append each character to an initial flag string.",
    "Check if 'True' is present in the response.",
    "If 'True' is present, append the flag string character to the flag.",
    "Retrieve the output",
    "Identify a key called 'likeCookie' with a value of false.",
    "Check if the response text contains 'LITCTF{' to identify a CTF flag.",
    "Discovered that '/lib/db/user.db' and '/lib/db/passcode.db' can be directly accessed from the server.",
    "Notice server-rendered pages.",
    "Use path traversal to get the SSH key.",
    "Get the SSH key to the attacker site.",
    "Retrieve the received private key.",
    "Used 'shell' as the setting name in the POST request",
    "Set 'shell=true' for all objects",
    "Observe the received Base64 encoded string.",
    "Realize that the GET handler for '/localisation-file' allows the reading of arbitrary files.",
    "Set the 'language' parameter to 'key' in the JSON data.",
    "Retrieve the key file.",
    "Set the 'language' parameter to 'flag.txt' in the payload.",
    "Verify that the 'language' parameter is indeed changed to 'flag.txt'.",
    "Read the contents of 'flag.txt'.",
    "Access the subclass information",
    "Identify the index of `<class 'subprocess.Popen'>` as 258",
    "Read the flag file",
    "Fuzz the username input with various inputs.",
    "Observe that anything after a whitespace is removed.",
    "Observe that 'admin' is replaced in the username field.",
    "Identify that data is being fetched from a MongoDB backend.",
    "Identify the exposed methods as 'notes.count', 'notes.add', and 'notes.remove'.",
    "Understand that 'notes.count' applies a filter.",
    "Understand that 'notes.count' returns the count of notes that pass the filter.",
    "Deduce that the '$ne' filter checks if the body of the notes is not empty.",
    "Determine the code checks file extensions for uploaded files.",
    "Identify the allowed file extensions: 'txt', 'pdf', 'doc', 'docx', 'xls', 'xlsx'.",
    "Identify the code normalizes file paths.",
    "Recognize the use of wildcards in tar utility.",
    "Recognize that 10 records are created by tar utility by default.",
    "Understand that each record consists of 20 blocks of 512 bytes each.",
    "Upload enough bytes to exceed 10 records.",
    "Create a file 'shell.txt'.",
    "Add the desired payload to 'shell.txt'.",
    "Create a file of 1024 bytes with a random name ending in '.txt'.",
    "Create a tar archive with all the uploaded files.",
    "Check if the combined size of uploaded files exceeds the size of 10 tar records.",
    "Reveal mapping in the Apache configuration file.",
    "Retrieve the flag.",
    "Successfully added 1337 coins to the account.",
    "Added a special character (') to the end of the username.",
    "Caused an SQL error.",
    "Appended a payload to the back of the signup date.",
    "Dumped the database.",
    "Located the flag.",
    "Flag was located within the public news_article table of the database dump.",
    "Deduced the number of columns based on error return.",
    "Used `1'; SHOW DATABASES;`.",
    "Used `1'; SHOW TABLES;`.",
    "Described the 'words' table using the `1'; DESCRIBE tablename;` command.",
    "Described the '1919810931114514' table using the `1'; DESCRIBE tablename;` command.",
    "Used `1'; USE information_schema; SHOW TABLES;`.",
    "Used `1';EXECUTE IMMEDIATE CONCAT('SEL', 'ECT * FROM words');` to retrieve data from the 'words' table.",
    "Used ``1';EXECUTE IMMEDIATE CONCAT('SEL', 'ECT * FROM `1919810931114514`');`` to retrieve data from the '1919810931114514' table.",
    "Understood the goal to read the 'flag.txt' file that requires root access",
    "Went to the '/tmp' directory",
    "Read the 'flag.txt' file using the root shell",
    "Understand that the history length can be used to approximate the user's balance.",
    "Construct the URL 'http://10.8.201.87:5000/checkbalance?amount=${num}' using the queried amount.",
    "Objective is to dump the database and retrieve the flag",
    "Received a collection of CSV files containing network traffic data",
    "Received a shapefile with information about cameras in Singapore",
    "Instructed to calculate the number of cameras within 1.3km radius of the origin point",
    "Wrote a Python script to extract the most commonly occurring source IP (src_ip) from the CSV files",
    "Discovered the latitude and longitude of the most frequently occurring src_ip",
    "Parsed the shapefile using geopandas",
    "Used the formula to calculate the great-circle distance between locations",
    "Looped through each camera location in the shapefile",
    "Checked if each camera location is within the specified distance from the point of interest",
    "Counted the number of cameras within the specified distance using the haversine formula",
    "The iframe source is /demo",
    "Data is POST-ed to the /api/filter endpoint",
    "Sensitive, user-specific data could be read if /api/filter endpoint returns based on these cookies",
    "Received the /api/flag contents",
    "Identify the request parameters of the /find endpoint: condition, startsWith, endsWith, and debug.",
    "Retrieve the flag.",
    "Extract the flag from the response received on the callback URL.",
    "View files using the 'file://' protocol.",
    "Use a POST request to request 'file:///code/app.py'.",
    "Recognize that a Redis database was being utilized.",
    "Check if the value of <userID>_isAdmin key in Redis database is 'yes'.",
    "Set the <userID>_isAdmin value to 'yes'.",
    "Recognize the requirement of having write access to a file on the server.",
    "Identify the predictable storage location of PHP sessions as '/tmp/sess_<PHPSESSID>'.",
    "Explore the file system to find the flag 'MetaCTF{wh4t??lfi_1s_ev0lv1ng??}'.",
    "Recognized the platform as SQLite database.",
    "Retrieved table names.",
    "Confirmed the existence of an additional table.",
    "Identified the additional table holding the flag.",
    "Extracted the flag from the identified table.",
    "Noted the appending of an entry to a log file.",
    "Observed the entry in the log file containing the cookies and value of 'X-Access' header.",
    "Obtained the flag from 'private.php'.",
    "Noticed the presence of file upload capability.",
    "Noticed the absence of legitimate ownership verification during file retrieval.",
    "Scanned each discovered username for potential files associated with them.",
    "Located the flag at `/users/employee/files/fileadmin`.",
    "Analyze the data being displayed",
    "Examine the registration fields",
    "Identify the 'account' object",
    "Identify the 'username' and 'password' attributes",
    "Change the 'account[role]' attribute to 'admin'",
    "Assume that the input fields are not properly sanitizing special characters.",
    "Assign the value 'true' to the cookie.",
    "Uploaded the .php16 file.",
    "Downloaded the flag.",
    "Specify 'http://localhost:20011/admin' as the value for the 'galleryUrl' parameter.",
    "Serialize the created object and encode it in base64 format.",
    "Reconstruct the user data from the encoded string.",
    "Look for a value for 'confidential_documents'.",
    "Search for `flag.txt` in the root directory.",
    "Send a request to read the content of the `flag.txt` file.",
    "Create 'first.pdf' using the chosen input PDF.",
    "Create 'second.pdf' using the chosen input PDF.",
    "Read and store the content of the merged PDF file.",
    "Read and store the content of the initial PDF files.",
    "Extract the count of PDF pages from the merged PDF file.",
    "Extract the count of PDF pages from the initial PDF files.",
    "Identify the list of references to the PDF pages in the merged PDF file.",
    "Exclude the reference to the dummy page from the list of PDF pages.",
    "Create a separate PDF page list for the first input PDF.",
    "Create a separate PDF page list for the second input PDF.",
    "Ensure the template holds identical initial content and MD5 hashes.",
    "Use the page count and PDFs list to write a manipulated 'hacked.pdf' file.",
    "Replace a specific string in the cleaned PDF data.",
    "Read the 'pdf1.bin' file.",
    "Read the 'pdf2.bin' file.",
    "Include the cleaned, manipulated PDF data in 'collision1.pdf'.",
    "Include the cleaned, manipulated PDF data in 'collision2.pdf'.",
    "Check the MD5 hash of 'collision1.pdf' using the hashlib library.",
    "Check the MD5 hash of 'collision2.pdf' using the hashlib library.",
    "Remove the intermediate 'merged.pdf' file.",
    "Remove the intermediate 'hacked.pdf' file.",
    "Confirmed the use of SQLite version 3.22.0.",
    "Retrieved table names from the database by manipulating the SQL query using 'moneys=' parameter.",
    "Used GROUP_CONCAT function to concatenate all retrieved table names into a single string.",
    "Retrieved column names of 'startup_users' table from the database using the SQL query.",
    "Used GROUP_CONCAT function to concatenate all retrieved column names into a single string.",
    "Dumped data from 'startup_users' table by using the SQL query and concatenating usernames using the GROUP_CONCAT function.",
    "Retrieved the flag by dumping data from 'startup_users' table again, this time concatenating 'wordpass' values using the GROUP_CONCAT function.",
    "The '__toString()' function can return the contents of a file",
    "The log_file of the 'access_log' object is set to '../flag'",
    "Encode the serialized object with base64",
    "Noticed the feature using SQLite through filters and SQL statements",
    "Understood that trim(string, character) will remove `character` from `string`.",
    "Realized finally that both SQL statements are identical to 'SELECT username, password FROM users WHERE username='admin''",
    "The form contains an XML part.",
    "Received a list of users as a response.",
    "Uploaded the final payload to the server.",
    "Used the same request to read the flag from the '/readflag' binary.",
    "Included the final payload as part of form data.",
    "Received the flag as part of HTML response.",
    "Retrieved the flag at `/flag.txt`.",
    "Found some encoded payload",
    "Decoded the base64 encoded payload",
    "Noted that incoming data was saved into HTML files",
    "Found that http://s0pq6slfaunwbtmysg62yzmoddaw7ppj.ctf.sg:18926/data.php lists all HTML files",
    "Observed data containing usernames and card numbers.",
    "Verified it returns data for user ID 1.",
    "Initiated a database dump.",
    "Observed the 'users_data' database structure.",
    "Identified a column labeled 'R34L_F14G'.",
    "Noted that queries to this column return blank results.",
    "Attempted to replace 'card_num' with 'R34L_F14G' in SQLMAP query.",
    "Retrieved data from 'R34L_F14G' column in 'users_data' table.",
    "Analyze the form submission structure",
    "Note that it executes file_get_contents('../flag.txt')",
    "Discovered that the app uses local storage to save notes.",
    "Understood that the admin bot stores a flag as a note on the challenge server before visiting the URL.",
    "Realized that the search function checks if a given fragment identifier substring is part of the flag.",
    "Identify the exposed '.git' directory",
    "Identify the flag exposed within 'app.py'",
    "Discover list of created books hosted on the server.",
    "Notice that files with commonly used extensions are downloaded.",
    "Test different file extensions.",
    "Discover the .phtml extension.",
    "Payload 1: Obtained the full URL of the browsing context.",
    "Payload 2: Obtained the page contents.",
    "Send the encoded payload through the cookie header.",
    "Stored the '__proto__' key as ['__proto__'].",
    "Read the first flag.",
    "Read the second flag.",
    "Convert the image to text using OCR.",
    "Extract the flag from the converted text.",
    "Exfiltrate the contents of the 'flag' file in the POST request.",
    "Prepend 'a' characters to the payload.",
    "Dump the database.",
    "Find flag in the database dump.",
    "Extracted the 'secret' cookie value from the request.",
    "Identify that /sakura allows interaction with the Redis cache.",
    "Retrieve the flag from the response.",
    "Select two strings from the 'magic hash' list that have a length of 15 or more characters",
    "Identified parameters in the WebSocket message.",
    "Recognized that the parameters in the WebSocket message could be modified.",
    "Found a mechanism to fetch the poll options.",
    "Fetched the flag.",
    "Observe that the end-point returns base64-encoded result of each ping request.",
    "Enumerate the 'id' range between '18446744073709551463' to '18446744073709551615'.",
    "Decode the base64 data.",
    "Append the decoded result to a file.",
    "Perform a string search on the 'out.bin' file.",
    "Realize that the buffer length can be less than the number of characters written into it.",
    "Generate a URL-encoded string.",
    "Exfiltrate the data to 'http://ATTACKER_URL'.",
    "List permitted characters.",
    "Access '/etc/hosts' file.",
    "Read binary '/readflag'.",
    "Retrieve required strings for password.",
    "Filter output using '/etc/alternatives/nawk'.",
    "Retrieve only 'P4s5_w0Rd' string.",
    "Extract 'P4s5_w0Rd' string using regex pattern.",
    "Index characters of 'P4s5_w0Rd' string.",
    "Reconstruct into 'sRPd45w_0' string.",
    "Access the requirements.txt file",
    "Check the 6th character of the flag in the SQL database",
    "The task of this payload is to exfiltrate the content from `http://localhost:5000/admin`",
    "The response text contains the secrets.",
    "Obtain the flag from the decoded string.",
    "Identified the 'data-last' attribute of the '#note-text-area' element.",
    "Realized that the 'data-last' attribute contains the victim's saved note.",
    "Realized that the 'data-last' attribute should start with the correct string for it to be fetched.",
    "Saved the generated CSS in 'exploit.css'.",
    "Added the CSS and generated CSS to a GitHub repository.",
    "Exfiltrated each character using the updated CSS.",
    "Convert items in a dictionary to a list using 'list'.",
    "Obtained the flag in the response of the smuggled request.",
    "Capture the requests received by the server logs, thereby obtaining the admin's cookie.",
    "Craft a file upload request with specific HTML content.",
    "Extract the contents of 'poc.odt' to access the 'content.xml' file.",
    "Compress the modified files back into a zip archive named 'modified.odt'.",
    "Submit the 'modified.odt' file with the payload to the server as a file upload.",
    "Identified the Content-Type.",
    "The payload utilized was designed to fetch cookies.",
    "Mutable objects within namedtuple and tuple can still be modified.",
    "Increase loyalty point history minimum of 1337 times.",
    "Use the workaround to parse the contents of '/etc/passwd' to the results",
    "Read '/proc/self/environ' to retrieve the flag.",
    "Notice vulnerability occurs when merging request data.",
    "Search for 'child_process' in all files of '/usr/local/lib/node_modules'.",
    "Insert '__proto__' attribute in the request payload.",
    "Include JSON payload in the request body.",
    "Read the flag.",
    "Identified an S3 bucket in the HTML source",
    "Downloaded files from the 'palindromecloudynekos' S3 bucket",
    "Found a passcode in the downloaded files",
    "Discovered interesting information in the 'iam list-roles' response",
    "Discovered interesting information in the 'iam list-instance-profiles' response",
    "Used the new AWS credentials to access DynamoDB",
    "Scanned the 'flag_db' DynamoDB table",
    "Retrieved the flag from the 'flag_db' DynamoDB table",
    "Understand that the mysqljs/mysql package is used without the option stringifyObjects: true.",
    "Exfiltrate data.",
    "Print the content of the final page.",
    "Find the public key in '/signature/key.pub' as indicated in the hint.",
    "Set the number of 'boops' in the token to 1501.",
    "Collect the flag from the server's response.",
    "Set 'user.code' to a random 4-digit number.",
    "Observe that the fetched resources are inserted into the 'ajax-load' element.",
    "Compare the resulting origins of the pages",
    "Unpack the tar archives",
    "The render2.asm file contains a hash table of commands used by the templating engine",
    "Capture the request, including the Admin-Key.",
    "Extract the first flag from the decoded field.",
    "Extract the second flag from the decoded field.",
    "View '/etc/passwd' using LFI vulnerability.",
    "Attempt to display the flag within the response body",
    "Manipulate the 'accessGranted' attribute to bypass Access Denied error.",
    "Conduct an extraction of the flag character by character.",
    "Check if 'length' query parameter exists.",
    "Verify if 'length' query parameter is a string of length 0.",
    "Fetch the flag using 'innerHTML'."
]