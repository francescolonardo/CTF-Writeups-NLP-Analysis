{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Given login credentials for an online portal with MFA and Captcha code protection."
            },
            {
                "StepNumber": 2,
                "StepString": "Notice a 'login_session_token' is received upon login attempt."
            },
            {
                "StepNumber": 3,
                "StepString": "Identify that the 'login_session_token' is used when making a query to 'mfa_service.php'."
            },
            {
                "StepNumber": 4,
                "StepString": "Discover that there is no limit to the number of attempts made with the same token, as long as correct CAPTCHA code is provided."
            },
            {
                "StepNumber": 5,
                "StepString": "Perform batching in GraphQL to send multiple queries at once, with the anticipation that the server will process all queries together using the same CAPTCHA code."
            },
            {
                "StepNumber": 6,
                "StepString": "Successfully use the same CAPTCHA code to test two different MFA tokens by sending them both in the same HTTP request."
            },
            {
                "StepNumber": 7,
                "StepString": "Understand that MFA token is only 4 digits and take advantage of this limited search space by sending batches of thousands of queries together, thereby reducing the number of required CAPTCHA responses."
            },
            {
                "StepNumber": 8,
                "StepString": "Observe that due to request length limits around 3000 queries are batched at a time."
            },
            {
                "StepNumber": 9,
                "StepString": "Write script to automate this process of generating payloads and making POST requests."
            },
            {
                "StepNumber": 10,
                "StepString": "Note that every 3000 attempts, the CAPTCHA code needs to be updated manually in the script."
            },
            {
                "StepNumber": 11,
                "StepString": "Found a successful login attempt among the batched requests."
            },
            {
                "StepNumber": 12,
                "StepString": "Obtained the flag `MetaCTF{if_brute_force_doesnt_work_use_more_brute_forceeeeeeee}`."
            }
        ]
    }
}