[
    "Tested the SSTI vulnerability by crafting a URL that performed simple arithmetic in the email parameter using Jinja2 template syntax.",
    "Leaked the contents of the admin page",
    "Identify XSS vulnerability in the feedback feature of the site.",
    "Use the generated 2FA code for another CSRF attack.",
    "Exfiltrated each character using the updated CSS.",
    "Work on bypassing '{{' by using an if-else statement.",
    "Work on bypassing '}}' by using an if-else statement.",
    "Bypass '_' by constructing a string",
    "Bypass '\\' by constructing a string",
    "Bypass 'class' by constructing a string",
    "Bypass 'subclasses' by constructing a string",
    "Bypass 'getitem' by constructing a string",
    "Identified the specific version (2.4.0) of HAProxy.",
    "Included an overflowing 'Content-Length' header.",
    "Obtained the flag in the response of the smuggled request.",
    "Submit the 'modified.odt' file with the payload to the server as a file upload.",
    "Utilized script to make the client request.",
    "Configured the PHP script to redirect to itself 19 times.",
    "Explored different methods for conducting XSS attacks on XSL documents.",
    "Notice 'require()' leads to a Local File Inclusion (LFI) vulnerability.",
    "Pollute '__proto__' attribute with a command injection payload in the 'data'.",
    "Specify 'changelog.js' script in the path of the JSON payload.",
    "Gained a reverse shell by invoking the Lambda function",
    "Use this behaviour when constructing SQL queries to bypass the login.",
    "Bypass the access control implemented on ATS.",
    "Recognise potential exploit",
    "HTTP POST request to sell flag with negative price",
    "Enable CORS to execute arbitrary JavaScript through the hosted file.",
    "Identified that the OTP code was validated using SQL 'LIKE' operator.",
    "Exploited parser differential in BeautifulSoup.",
    "Triggered a JSONP response from the YouTube API.",
    "Created a callback that reflected the response into Javascript code.",
    "Submitted final payload that contained a script.",
    "Repeated the Javascript injection to fetch the flag.",
    "Derive a proof-of-concept (PoC) to brute-force a character of the flag by exploiting the observed behavior",
    "Discover an edge case where not closing a BBCode tag results in an unencoded content being reflected",
    "Send the flag to an external server using the '/readflag>/dev/tcp' command",
    "Identify prototype pollution vulnerability",
    "Identify off-by-one error in `background.js` font validation",
    "Manipulate `utils.FONTS[10]` using the off-by-one error",
    "Ensure the injected `style` element is readable by the attacker",
    "Craft a request to smuggle a request to /admin in flagportal.",
    "Caught the request including the Admin-Key on our own server.",
    "Use the known hash of an empty string as a token value for authentication.",
    "Discover RCE vulnerability through pre-installed 'pearcmd.php'.",
    "Initialized a server to exploit the above vulnerability.",
    "Programmed the server to redirect to 'http://localhost/flag' in the second response.",
    "Execute Prototype pollution attack.",
    "Leverage the navigation function and the XS leak.",
    "Use '?length=' as the query string."
]