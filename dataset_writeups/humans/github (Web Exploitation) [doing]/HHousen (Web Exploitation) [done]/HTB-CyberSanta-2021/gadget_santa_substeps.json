{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "The website allows us to view some properties about a Linux system. The output looks just like standard Linux commands. The output of the 'List Storage' command seems to be executing 'df -h'.",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Visited the website."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Observed output similar to standard Linux commands."
                    },
                    {
                        "SubstepNumber": 1.3,
                        "SubstepString": "Noticed the output of 'List Storage' command runs 'df -h'."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Guessed that this was a command injection challenge and tried accessing 'http://IP:PORT/?command=ls' to see if could list the contents of the current directory. This confirmed that it was indeed a command injection challenge.",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Attempted accessing 'http://IP:PORT/?command=ls'."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Confirmed command injection challenge."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "In the source code, observed that 'shell_exec' is used to run the 'santa_mon.sh' script. Our input in the 'command' URL parameter is then appended to '/santa_mon.sh' so that the final command looks like '/santa_mon.sh [COMMAND PARAMETER INPUT]'. Noted that the 'sanitize' function is called on our input, which removes spaces.",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Viewed source code and observed 'shell_exec' usage with 'santa_mon.sh' script."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Recognized input appending pattern to '/santa_mon.sh'."
                    },
                    {
                        "SubstepNumber": 3.3,
                        "SubstepString": "Noticed the 'sanitize' function removes spaces from input."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Viewed the source code of the 'santa_mon.sh' program. Observed that the buttons in the web interface do indeed run standard Linux commands. Also saw that if there is an argument to the program, it is executed as a command.",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Examined source code of 'santa_mon.sh' program."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Confirmed buttons trigger standard Linux commands."
                    },
                    {
                        "SubstepNumber": 4.3,
                        "SubstepString": "Noted execution of argument as command."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Discovered that 'ups_status' and 'restart_ups' commands return the output from a local web server using curl. Checked the output of the 'List Processes' command and found 'python3 /root/ups_manager.py'. Reviewed the source code for 'config/ups_manager.py'. This file runs an HTTP server with the two endpoints accessed by the 'ups_status' and 'restart_ups' commands - it also has a '/get_flag' endpoint that prints the flag.",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Found 'ups_status' and 'restart_ups' commands return output from local web server."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Checked output of 'List Processes' command and identified 'python3 /root/ups_manager.py'."
                    },
                    {
                        "SubstepNumber": 5.3,
                        "SubstepString": "Reviewed source code of 'config/ups_manager.py' revealing the HTTP server with endpoints for 'ups_status', 'restart_ups', and '/get_flag'."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Decided to craft a command injection payload without using spaces to run 'curl http://localhost:3000/get_flag' which in turn will return the output to us through the webpage.",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Chose to craft a spaceless command injection payload."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Planned to execute 'curl http://localhost:3000/get_flag' to obtain output through the webpage."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Double quoted the payload for PHP to treat our payload as a single string argument, resulting in '/santa_mon.sh \"curl http://localhost:3000/get_flag\"', consequently executing the desired command and getting the flag output from the server.",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Enclosed payload in double quotes for PHP."
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Constructed command '/santa_mon.sh \"curl http://localhost:3000/get_flag\"'."
                    },
                    {
                        "SubstepNumber": 7.3,
                        "SubstepString": "Executed the modified command and obtained the flag output from the server."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "The final payload was `http://IP:PORT/?command=%22curl${IFS}http://localhost:3000/get_flag%22`.",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Finalized the payload as 'http://IP:PORT/?command=%22curl${IFS}http://localhost:3000/get_flag%22'."
                    }
                ]
            }
        ]
    }
}