{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Understand that the challenge is based around exploiting dynamic renderers like Prerender, used to render sensitive endpoints via a custom host header",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Understand that the challenge focuses on exploiting dynamic renderers"
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Understand that Prerender is used to render sensitive endpoints"
                    },
                    {
                        "SubstepNumber": 1.3,
                        "SubstepString": "Understand that the rendering is done via a custom host header"
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Take note of the Nginx configuration that rewrites the URL using the host header",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Take note of the Nginx configuration"
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Understand that the URL rewriting is done using the host header"
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Attempt to display the flag within the response body by using client-sided redirects",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Attempt to display the flag within the response body"
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Attempt to achieve this using client-sided redirects"
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Acknowledge that extra checks were implemented to necessitate XSS within the Chromium renderer and utilizing the 'localhost:3000' origin to avoid the Same Origin Policy",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Acknowledge the implementation of extra checks"
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Understand that XSS within the Chromium renderer is necessary"
                    },
                    {
                        "SubstepNumber": 4.3,
                        "SubstepString": "Understand that the usage of 'localhost:3000' origin avoids the Same Origin Policy"
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Take notice of the 'validateUrls' mechanism which validates whether the URL begins with 'http://app', and can be bypassed by using the 'username:password@hostname' URL format",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Take notice of the 'validateUrls' mechanism"
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Understand that the mechanism validates the URL format"
                    },
                    {
                        "SubstepNumber": 5.3,
                        "SubstepString": "Understand that the mechanism can be bypassed using 'username:password@hostname' URL format"
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Use 'Host: app@ATTACKER_URL' to bypass the validation",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Use 'Host: app@ATTACKER_URL' to bypass the validation"
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Recognize the naive 'script remover' that removes script tags which can be bypassed by using 'onload' event handlers",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Recognize the naive 'script remover'"
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Understand that script tags can be bypassed using 'onload' event handlers"
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Acknowledge that any flags in the response body will be replaced by the Nginx frontend and this challenge cannot be simply solved via redirects to 'http://app/login.php'",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Acknowledge the replacement of flags by Nginx"
                    },
                    {
                        "SubstepNumber": 8.2,
                        "SubstepString": "Understand that redirects to 'http://app/login.php' will not solve the challenge"
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Understand that an XSS must be achieved within the 'localhost:3000' origin that allows for usage of the 'localhost:3000/render?url=' feature in order to avoid the same-origin policy and read the flag",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Understand the requirement of achieving XSS within the 'localhost:3000' origin"
                    },
                    {
                        "SubstepNumber": 9.2,
                        "SubstepString": "Understand the usage of 'localhost:3000/render?url=' feature"
                    },
                    {
                        "SubstepNumber": 9.3,
                        "SubstepString": "Understand the need to avoid the same-origin policy for reading the flag"
                    }
                ]
            },
            {
                "StepNumber": 10,
                "StepString": "Host the 'outer.html' and 'inner.html' files",
                "Substeps": [
                    {
                        "SubstepNumber": 10.1,
                        "SubstepString": "Host the 'outer.html' file"
                    },
                    {
                        "SubstepNumber": 10.2,
                        "SubstepString": "Host the 'inner.html' file"
                    }
                ]
            },
            {
                "StepNumber": 11,
                "StepString": "Send a GET request to 'outer.html' with the custom host header targeting your own host",
                "Substeps": [
                    {
                        "SubstepNumber": 11.1,
                        "SubstepString": "Send a GET request to 'outer.html'"
                    },
                    {
                        "SubstepNumber": 11.2,
                        "SubstepString": "Use the custom host header to target your own host"
                    }
                ]
            }
        ]
    }
}