[
    "Identified the problem requires generating two PDFs with the same MD5 hash, but different content.",
    "Chose two small-sized PDFs due to size restrictions.",
    "Used Python scripting and the 'mutool' command to manipulate the PDF files.",
    "Created 'first.pdf' and 'second.pdf' using the chosen input PDFs.",
    "Created 'merged.pdf' containing a dummy PDF and the chosen input PDFs.",
    "Read and stored the content of the merged and initial PDF files in separate variables.",
    "Extracted the count of PDF pages from each PDF file.",
    "Identified the list of references to the PDF pages in the merged PDF file.",
    "Excluded the reference to the dummy page and created separate PDF page lists for both input PDFs.",
    "Defined a template for the final PDF files which will hold identical initial content and MD5 hashes, but will diverge at a certain point to become two different PDFs.",
    "Used the page count and PDFs list to write a manipulated 'hacked.pdf' file.",
    "Adjusted the offsets in the PDF with the 'mutool clean' command to correct any discrepancies.",
    "Replaced a specific string in the cleaned PDF data to ensure compatibility with different versions of 'mutool'.",
    "Read the 'pdf1.bin' and 'pdf2.bin' files which contain the prefix of the PDF content, which will be the same for both PDFs to ensure the same MD5 hash.",
    "Created the new PDF files 'collision1.pdf' and 'collision2.pdf' with the predetermined prefix and the cleaned, manipulated PDF data.",
    "Checked the MD5 hashes of both the PDFs using the hashlib library to confirm they are the same.",
    "Removed intermediate files created during the process.",
    "Verified the final PDFs using the 'mutool info -X' command.",
    "Uploaded the two colliding PDFs to the challenge page to unlock the flag and source code."
]