{
    "Exploiting Flask Caching Module": [
        "Found that the 'flask_caching' module can store a python pickle in redis"
    ],
    "Exploiting FFmpeg Command": [
        "Choose the '-vf drawtext=...' option within the 'ffmpeg' command as the method of exploitation.",
        "Formulate the payload in the format 'csictf.gif' -vf drawtext=\\\"text=$(grep ffLaG main.py)\\\"'.gif'.",
        "Perform the action of uploading the gif.",
        "Use the crafted filename for the uploaded gif."
    ],
    "SQL Injection Exploitation": [
        "Create 'payload' in the format of a SQL statement",
        "Include 'payload' as the data",
        "Realized it gives the possibility to pass an object in the query statement",
        "Understood that 'password' = 'username' evaluates to 0",
        "Used the exploit to log in"
    ],
    "Exploiting Web Authentication": [
        "Brute force the JWT secret with John The Ripper.",
        "Bypass authentication by making the conditional statement in the SQL query always true due to the SQL Injection.",
        "Recognize that the function for generating a token is using string interpolation to inject variables directly into the token string.",
        "Understand that by adding the necessary characters to the 'username', it is possible to close the double-quote and manipulate the fields following it in the token.",
        "Send the generated webpage to the website.",
        "Send requests with the newly encoded 'Admin' JWT token to attempt user role update and flag access.",
        "Attempt to login using 'user' as both username and password.",
        "Enter the payload 'or 1=1;--' into the 'pass' field to attempt a bypass."
    ],
    "Exploiting Code Execution": [
        "Noticed two javascript files: 'detailsCheck.js' and 'xmlDetailsCheckPayload.js'.",
        "Targeted the /etc/passwd file in the payload.",
        "Captured the flag from the response.",
        "Attempt to upload a valid PHP file.",
        "Identified vulnerability to log4j 2.14.1.",
        "Used a malicious cookie value for exploitation.",
        "Created a test JavaScript file",
        "Executed the payload using the 'unserialize()' function",
        "Included code in the payload to return the flag as the username",
        "Crafted the payload into a representation of a session cookie",
        "Delivered the payload via the crafted session cookie",
        "Fail due to the site removing <script> tags.",
        "Find them in the exploit database.",
        "Set 'host' parameter in URL to '127.0.0.1;cat /etc/passwd'.",
        "Write a payload using the Template Literal method.",
        "Directly call the directory function with 'flag' as its parameter.",
        "Executed the modified command and obtained the flag output from the server."
    ],
    "Exploiting JWT": [
        "Recognize the potential JWT exploit (CVE-2016-5431/CVE-2016-10555).",
        "Edit the JWT.",
        "Add the RS256-to-HS256 exploit to the JWT.",
        "Execute the RS256-to-HS256 exploit using python3 jwt_tool.py.",
        "Craft and insert the payload '{{range.constructor(\"return global.process.mainModule.require('child_process').execSync('cat /flag*')\")()}}' into the exploit."
    ],
    "Exploiting SQL Injection": [
        "Reinspect the source code with attention to the user authentication process.",
        "Fetch various SQL injection payloads from [swisskyrepo/PayloadsAllTheThings GitHub repository.",
        "Identify a working payload with username `admin' -- ` and any password.",
        "'database.js' lets you add and read items from the database. The query variable control is possible via the website, but SQL injection is unsuccessful.",
        "Configure the SQL injection to return all rows in the database.",
        "Retrieve the flag successfully"
    ],
    "Exploiting Template Injection": [
        "Determine that template injection is possible",
        "Used the page string as '' and die(show_source('templates/flag.php')) or ''"
    ]
}