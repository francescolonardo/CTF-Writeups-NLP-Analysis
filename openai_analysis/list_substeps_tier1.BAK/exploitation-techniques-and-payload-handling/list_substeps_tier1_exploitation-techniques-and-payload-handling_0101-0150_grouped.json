{
    "SQL Injection": [
        "Execute a SQL query via URL manipulation",
        "Identify that the login site is vulnerable to SQL injection",
        "Use '' OR 1=1;#' as password for SQL injection",
        "Create a SQL injection payload.",
        "Conduct communication with the server.",
        "Include the SQL injection payload in a complete request.",
        "Defined SQL injection as the manipulation of a query to interact with a website's database.",
        "Attempted to induce an SQL injection by inputting the URL 'https://poems.asisctf.com/books.php?type=excerpt&id=0%27%20or%20id=%271'.",
        "Input the URL 'https://poems.asisctf.com/books.php?type=excerpt&id=0%27%20union%20select%201%20%23' to further test for vulnerabilities.",
        "Encountered a weird error, further hinting at the presence of an SQL injection vulnerability.",
        "Decided to use SQLmap, a tool for automating the detection and exploitation of SQL injection flaws.",
        "Implemented SQLmap to exploit the potential SQL injection vulnerability.",
        "Recognized that SQLmap only displays one entry for 'id' of 1.",
        "Continued to analyze the output from SQLmap.",
        "Considered the possibility of output truncation by SQLmap.",
        "Found out that despite such constraints, the SQLmap successfully retrieved the flag 'ASIS{6e73c9d277cc0776ede0cbd36eb93960d0b07884}'."
    ],
    "Local File Inclusion (LFI)": [
        "Discover that the site is also vulnerable to Local File Inclusion (LFI)",
        "Use LFI to access the code of the 'delete' resource"
    ],
    "Brute Force Attack": [
        "Deduce the need for brute-forcing the secret key.",
        "Initiate brute force attack on the token."
    ],
    "Remote Code Execution (RCE)": [
        "Recognize that the npm package `node-serialize` is vulnerable to node-deserialization RCE attack",
        "Recognize that the `unserialize` function can lead to Remote Code Execution (RCE)",
        "Analyze the requirements for exploiting RCE",
        "Implement the necessary steps to exploit the vulnerability",
        "Demonstrate successful Remote Code Execution (RCE)",
        "Utilize the developed exploit",
        "Exploit PHP's type conversion"
    ],
    "Path Traversal": [
        "Realize that the potential path traversal vulnerability can be exploited.",
        "Understand that '....//' can be used to bypass the replacement of '../'.",
        "Make several attempts to exploit the path traversal vulnerability.",
        "Conclude that an image is necessary to exploit the service.",
        "Confirm that the selected image can be used to exploit the service.",
        "Realize that the 'id' parameter can be manipulated.",
        "Create a crafted 'id' parameter.",
        "Craft the parameter as '5779715767432985082/../../admin'."
    ],
    "XSS (Cross-Site Scripting)": [
        "Analyze the challenge title for possible XSS vulnerability",
        "Craft a message with an XSS attack using an `img` tag",
        "Set up a server using the `nc` command to listen for admin cookies",
        "Understood that the application can be exploited via a XXE attack.",
        "Crafted a malicious payload.",
        "Passed the payload via the SQL injection vulnerability.",
        "Triggered the XML payload on the application.",
        "Constructed a payload to test the exploit.",
        "Included the payload in the URL.",
        "Created another payload.",
        "Included the new payload in the URL."
    ],
    "Bypassing Strict Checks": [
        "Research methods of bypassing strict checks.",
        "Craft a payload."
    ]
}