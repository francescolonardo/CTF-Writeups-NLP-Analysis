Title: Cross-Site Scripting (XSS) Attack to Steal Cookies
Primary topic: Web Exploitation
Secondary topic: Cross-Site Scripting (XSS)
Tools used: None
Keywords: session cookie, user input, malicious scripts

#context
During a CTF competition, I encountered a web application that displayed user input without properly validating and sanitizing it, making it vulnerable to Cross-Site Scripting (XSS), a type of vulnerability that allows attackers to inject malicious scripts into web pages viewed by other users.

#discovery
To test for XSS, I crafted a benign script, such as <script>alert('XSS')</script>, and submitted it to the application. If the application displayed the script and executed it in the context of another user, it would confirm the presence of an XSS vulnerability.

#exploitation
Upon submitting the crafted input to the application, it indeed displayed the script and executed it in the context of another user, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the XSS vulnerability to steal the session cookie of another user. After crafting a suitable payload, I submitted it to the application, which executed the XSS attack and stole the session cookie of another user, allowing me to access their account and obtain the flag for the Web Exploitation challenge.

#countermeasures
This CTF writeup highlights the importance of properly securing web applications against XSS vulnerabilities by validating and sanitizing user input, encoding output to prevent script injection, and using HTTP-only session cookies. By exploiting the XSS vulnerability, I was able to steal session cookies, access user accounts, and obtain the flag needed to complete the challenge.
