{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Identified the challenge as involving wkhtmltopdf, a tool that translates HTML content into a PDF.",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Identified the challenge as involving wkhtmltopdf, a tool that translates HTML content into a PDF."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Understood that the input had to satisfy certain constraints, chiefly that 'name' could only contain alphanumeric characters, and 'email' had to pass RFC5322 validation.",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Understood that the input had to satisfy certain constraints, chiefly that 'name' could only contain alphanumeric characters, and 'email' had to pass RFC5322 validation."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Used knowledge of these constraints to aim exploitation efforts at the more forgiving 'email' parameter.",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Used knowledge of these constraints to aim exploitation efforts at the more forgiving 'email' parameter."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Examined the documentation for RFC5322 to understand what characters are allowed in the email parameter.",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Examined the documentation for RFC5322 to understand what characters are allowed in the email parameter."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Discovered that it allows for a domain-literal format, which permits just about any printable ASCII character.",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Discovered that it allows for a domain-literal format, which permits just about any printable ASCII character."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Crafted a URL that appended an HTML header tag to the domain part of the email parameter, thereby exploiting the lax character restriction.",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Crafted a URL that appended an HTML header tag to the domain part of the email parameter, thereby exploiting the lax character restriction."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Found the server endpoint was also vulnerable to Server-Side Template Injection (SSTI).",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Found the server endpoint was also vulnerable to Server-Side Template Injection (SSTI)."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Tested the SSTI vulnerability by crafting a URL that performed simple arithmetic in the email parameter using Jinja2 template syntax.",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Tested the SSTI vulnerability by crafting a URL that performed simple arithmetic in the email parameter using Jinja2 template syntax."
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Further exploited the SSTI vulnerability by crafting a URL that would read the contents of a 'flag.txt' file on the server using built-in Python functions within the Jinja2 template.",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Further exploited the SSTI vulnerability by crafting a URL that would read the contents of a 'flag.txt' file on the server using built-in Python functions within the Jinja2 template."
                    }
                ]
            }
        ]
    }
}