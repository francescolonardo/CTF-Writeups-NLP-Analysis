{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Load the CTF challenge and look into the provided source code to understand how the application works",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Load the CTF challenge."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Look into the provided source code to understand how the application works."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Notice that the application is a 'screenshotter' service that allows users to enter arbitrary URLs to be rendered by a Chromium instance",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Notice that the application is a 'screenshotter' service."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Notice that the 'screenshotter' service allows users to enter arbitrary URLs."
                    },
                    {
                        "SubstepNumber": 2.3,
                        "SubstepString": "Notice that the entered URLs are rendered by a Chromium instance."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Observe that the service doesn't allow for file:// protocol as it validates the URL to be HTTP(S)",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Observe that the service doesn't allow for file:// protocol."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Observe that the service validates the URL to be HTTP(S)."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Read the function getBrowserWithTimeout and note that a remote debugging port is exposed which normally allows commands to be sent to the browser through the DevTools protocol",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Read the function getBrowserWithTimeout."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Note that a remote debugging port is exposed."
                    },
                    {
                        "SubstepNumber": 4.3,
                        "SubstepString": "Understand that the exposed port allows commands to be sent to the browser through the DevTools protocol."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Consider that the debugging port is randomized from the getRandomPort function",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Consider that the debugging port is randomized."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Consider that the debugging port is generated from the getRandomPort function."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Formulate a strategy to leak the debugging port, understanding that the port scan needs to be completed within 30 seconds before the browser instance is closed",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Formulate a strategy to leak the debugging port."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Understand that the port scan needs to be completed within 30 seconds."
                    },
                    {
                        "SubstepNumber": 6.3,
                        "SubstepString": "Understand that the port scan needs to be completed before the browser instance is closed."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Code a web page that uses a Promise to try and load a URL, if the URL loads, the port is open and the script logs it and attempts to send this information to a remote server set up for this purpose",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Code a web page that uses a Promise."
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Use the Promise to try and load a URL."
                    },
                    {
                        "SubstepNumber": 7.3,
                        "SubstepString": "If the URL loads, log that the port is open."
                    },
                    {
                        "SubstepNumber": 7.4,
                        "SubstepString": "Attempt to send this information to a remote server."
                    },
                    {
                        "SubstepNumber": 7.5,
                        "SubstepString": "Set up a remote server for this purpose."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Deploy this page on a server and point the 'screenshotter' service to it, allowing you to detect open debugging ports",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Deploy this page on a server."
                    },
                    {
                        "SubstepNumber": 8.2,
                        "SubstepString": "Point the 'screenshotter' service to the deployed page."
                    },
                    {
                        "SubstepNumber": 8.3,
                        "SubstepString": "Detect open debugging ports."
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Create the server script to receive the port number from the exfiltration attempt, writing the port number used to a file to keep track",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Create the server script."
                    },
                    {
                        "SubstepNumber": 9.2,
                        "SubstepString": "Receive the port number from the exfiltration attempt."
                    },
                    {
                        "SubstepNumber": 9.3,
                        "SubstepString": "Write the port number used to a file to keep track."
                    }
                ]
            },
            {
                "StepNumber": 10,
                "StepString": "Request Chromium to open a new webpage, targeting the URL file:///tmp/flag.txt with the port number obtained causing the flag to be displayed in the browser instance",
                "Substeps": [
                    {
                        "SubstepNumber": 10.1,
                        "SubstepString": "Request Chromium to open a new webpage."
                    },
                    {
                        "SubstepNumber": 10.2,
                        "SubstepString": "Target the URL file:///tmp/flag.txt."
                    },
                    {
                        "SubstepNumber": 10.3,
                        "SubstepString": "Use the obtained port number for the request."
                    },
                    {
                        "SubstepNumber": 10.4,
                        "SubstepString": "Display the flag in the browser instance."
                    }
                ]
            },
            {
                "StepNumber": 11,
                "StepString": "Fetch the screenshotter service and put the result in an iframe to display in the screenshotting service",
                "Substeps": [
                    {
                        "SubstepNumber": 11.1,
                        "SubstepString": "Fetch the screenshotter service."
                    },
                    {
                        "SubstepNumber": 11.2,
                        "SubstepString": "Put the result in an iframe."
                    },
                    {
                        "SubstepNumber": 11.3,
                        "SubstepString": "Display the iframe in the screenshotting service."
                    }
                ]
            },
            {
                "StepNumber": 12,
                "StepString": "Take the screenshot of the flag and convert the image to text using OCR (Optical Character Recognition) to extract the flag",
                "Substeps": [
                    {
                        "SubstepNumber": 12.1,
                        "SubstepString": "Take the screenshot of the flag."
                    },
                    {
                        "SubstepNumber": 12.2,
                        "SubstepString": "Convert the image to text using OCR."
                    },
                    {
                        "SubstepNumber": 12.3,
                        "SubstepString": "Extract the flag from the converted text."
                    }
                ]
            },
            {
                "StepNumber": 13,
                "StepString": "Build a second-stage exploit that creates a WebSocket connection to the DevTools of the browser instance and sends JavaScript code to the browser instance using the Runtime.evaluate method",
                "Substeps": [
                    {
                        "SubstepNumber": 13.1,
                        "SubstepString": "Build a second-stage exploit."
                    },
                    {
                        "SubstepNumber": 13.2,
                        "SubstepString": "Create a WebSocket connection to the DevTools of the browser instance."
                    },
                    {
                        "SubstepNumber": 13.3,
                        "SubstepString": "Send JavaScript code to the browser instance."
                    },
                    {
                        "SubstepNumber": 13.4,
                        "SubstepString": "Use the Runtime.evaluate method for sending the code."
                    }
                ]
            },
            {
                "StepNumber": 14,
                "StepString": "The JavaScript sends a POST request to the remote server, exfiltrating the contents of the 'flag' file",
                "Substeps": [
                    {
                        "SubstepNumber": 14.1,
                        "SubstepString": "The JavaScript sends a POST request."
                    },
                    {
                        "SubstepNumber": 14.2,
                        "SubstepString": "Exfiltrate the contents of the 'flag' file in the POST request."
                    }
                ]
            }
        ]
    }
}