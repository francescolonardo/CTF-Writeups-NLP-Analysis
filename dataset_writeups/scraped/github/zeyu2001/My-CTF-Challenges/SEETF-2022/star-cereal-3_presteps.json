[
    "Understand that the challenge is based around exploiting dynamic renderers like Prerender, used to render sensitive endpoints via a custom host header",
    "Take note of the Nginx configuration that rewrites the URL using the host header",
    "Attempt to display the flag within the response body by using client-sided redirects",
    "Acknowledge that extra checks were implemented to necessitate XSS within the Chromium renderer and utilizing the 'localhost:3000' origin to avoid the Same Origin Policy",
    "Take notice of the 'validateUrls' mechanism which validates whether the URL begins with 'http://app', and can be bypassed by using the 'username:password@hostname' URL format",
    "Use 'Host: app@ATTACKER_URL' to bypass the validation",
    "Recognize the naive 'script remover' that removes script tags which can be bypassed by using 'onload' event handlers",
    "Acknowledge that any flags in the response body will be replaced by the Nginx frontend and this challenge cannot be simply solved via redirects to 'http://app/login.php'",
    "Understand that an XSS must be achieved within the 'localhost:3000' origin that allows for usage of the 'localhost:3000/render?url=' feature in order to avoid the same-origin policy and read the flag",
    "Host the 'outer.html' and 'inner.html' files",
    "Send a GET request to 'outer.html' with the custom host header targeting your own host"
]