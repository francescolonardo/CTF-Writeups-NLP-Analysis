The vulnerability comes from the use of `name` below.

The logic of this script is a bit suspicious. Consider the case where the `length` query parameter exists but is a string of length 0 - the `name` variable is never declared, yet it is used.

Since in HTML, the global scope is the window object (see [global scope](https://www.w3schools.com/js/js_scope.asp)), `name` would then refer to `window.name`, which can be set when we open a new window programatically.

To solve this challenge, all we need to do is to ensure that the `name` variable is never redeclared, which happens when we use `?length=` as the query string so that `usernameLength === ''`. We can then control `window.name` when using `window.open()` on our exploit server, and cause an XSS due to the insecure usage of `innerHTML`.