[
    "Perform the necessary action to retrieve the flag.",
    "Use the technique to bruteforce every character of the flag.",
    "Recognize potential wildcard injection vulnerability.",
    "Understand Wildcard Injection.",
    "Recognize how Wildcard Injection can be abused for command injection attacks.",
    "Identify manipulation of wildcards in system commands as the attack method.",
    "Identify the vulnerability lies in the use of tar utility.",
    "Recognize the importance of bypassing file extension restrictions for a successful attack.",
    "Conceptualize the attack.",
    "Create the file '--checkpoint-action=exec=sh shell.txt'.",
    "Devise the exploit.",
    "Create a reverse shell back to attacker's machine.",
    "Send POST request to upload the 'shell.txt' file.",
    "Send POST request to upload the '--checkpoint-action=exec=sh shell.txt' file.",
    "Reverse shell is obtained on the target system.",
    "Attempt to exploit the vulnerability using standard payload.",
    "URL-encode the payload again.",
    "Successfully exploit the path traversal vulnerability using a triple URL-encoded payload.",
    "Performed parameter pollution on the frontend with 'GET /callback?user=FRONTEND_USERNAME&amount=1337&amount=0&nonce=NONCE&sig=SIGNATURE'",
    "Collected from the error message.",
    "Used SQL injection payload `1' or '1'='1`.",
    "Realized stacked queries were allowed.",
    "Bypassed regex filters.",
    "Understood that a shell needs to be spawned as root",
    "The one-liner creates a malicious 'id' payload",
    "Ran 'insecure' to obtain a root shell",
    "Confirmed the malicious 'id' could be run as root",
    "Determine it potentially allows command injection.",
    "Attempt command injection.",
    "Create a base64-encoded payload.",
    "Design the payload to read the desired file.",
    "Ensure the payload bypasses the blacklist.",
    "Post each successful guess to the exploit server.",
    "Understood the presence of a blacklist filter for '#' symbol",
    "Understood the presence of a blacklist filter for '=' symbol",
    "Scheduled to perform a UNION based injection",
    "Implemented the UNION based SQL Injection",
    "Used 'username=test' or 1 UNION SELECT *, null from flag-- -&password=test' or 1 UNION SELECT *, null from flag-- -' as the injection payload",
    "CSRF to /api/flag is needed",
    "XSS on the challenge server is necessitated",
    "XSS payload is generated by sending a POST request to /api/create",
    "CSRF payload is created",
    "CSRF payload fetches /api/flag",
    "CSRF payload makes a callback to the exploit server with the page contents",
    "Identify the website's vulnerability to XSS.",
    "Discover that the /find endpoint can be used for Response Header Injection.",
    "Use the /find endpoint to inject a Set-Cookie header.",
    "Create a XSS payload.",
    "Perform a CSRF to the /find endpoint.",
    "Leverage a Local File Inclusion (LFI) vulnerability for Server Side Request Forgery (SSRF)."
]