{
    "URL Manipulation": [
        "Encapsulated the second request within the chunked contents of the first request.",
        "Understand that the URL rewriting is done using the host header",
        "Attempt to achieve this using client-sided redirects",
        "Understand that the usage of 'localhost:3000' origin avoids the Same Origin Policy",
        "Understand that redirects to 'http://app/login.php' will not solve the challenge",
        "Understand the usage of 'localhost:3000/render?url=' feature",
        "Understand the need to avoid the same-origin policy for reading the flag",
        "The URL is fetched for the first time to check for an SSRF attempt.",
        "The URL is fetched for the second time once it's deemed legitimate.",
        "Programmed the server to redirect to 'http://localhost/flag' in the second response."
    ],
    "HTML Hosting and Interaction": [
        "Host the 'outer.html' file",
        "Host the 'inner.html' file",
        "Send a GET request to 'outer.html'",
        "Use the navigation factor.",
        "Leverage the navigation function and the XS leak.",
        "Use '?'length=' as the query string.",
        "Ensure that 'usernameLength' is empty through the query string.",
        "Use 'window.open()' on the exploit server."
    ],
    "Server-side Validation": [
        "Understand that the mechanism validates the URL format",
        "Acknowledge the replacement of flags by Nginx"
    ],
    "Same-origin Policy": [
        "Understand that redirects to 'http://app/login.php' will not solve the challenge",
        "Understand the need to avoid the same-origin policy for reading the flag"
    ]
}