{
    "Enumeration Techniques": [
        "Utilize the 'subdomain enumeration' technique when guessing proves unsuccessful."
    ],
    "Exploit Identification": [
        "Identify potential exploits that can be used.",
        "Identify and exploit vulnerabilities present in the Apache server."
    ],
    "Network Scanning": [
        "Executed NIKTO scan."
    ],
    "HTTP Request Manipulation": [
        "Send first GET request with 65534 empty spaces.",
        "Send second GET request with 65534 empty spaces.",
        "Place a zero between the two GET requests.",
        "Discover connection between successful HTTP request smuggling attack and second request with admin headers."
    ],
    "Request Interception": [
        "Intercept register request."
    ],
    "SQL Injection": [
        "Recognize the presence of an SQL Injection vulnerability",
        "Realize the alternative method involves using SQL injection",
        "Create a SQL Injection payload.",
        "Craft the payload with the SQL Injection and set it as the request body.",
        "Exploit the SQL injection vulnerability"
    ],
    "Parameter Manipulation": [
        "Inject an address into the URL parameter.",
        "Inject the 'id' command in the input box.",
        "Submit multiple 'n' parameters with the same value in the web application."
    ],
    "Fuzzing": [
        "Execute ffuf to fuzz the challenge site."
    ],
    "Command Injection": [
        "Payload used: admin@uupeye.edu' or '1'='1",
        "Start the brute forcing process",
        "Use the functions 'get_hidden' and 'get_passwords' in a brute-force attack to find the correct password for the username 'jack'.",
        "The action of setting 'shell=true' made the command run within a shell",
        "Command injection became possible"
    ],
    "Cross-Site Scripting (XSS)": [
        "Attempt to bypass it by loading image URLs directly.",
        "Confirm the existence of XSS vulnerability at a specific URL.",
        "Perform XSS attack."
    ],
    "Server-Side Template Injection (SSTI)": [
        "Utilize object injection to manipulate 'mfa' and '_correctValue' variables to be equal.",
        "Test the SSTI vulnerability by inputting a mathematical operation as the payload into the password field.",
        "Recognize a Server-Side Template Injection (SSTI) vulnerability",
        "Recognize that it opens up path traversal vulnerabilities.",
        "Send an SQL payload to the inaccessible server using SSTI to force the execution.",
        "Send the encoded script as an SSTI payload."
    ],
    "Path Traversal": [
        "Attempt to bypass it by loading image URLs directly.",
        "Find that Vitepress running in dev mode enables CORS.",
        "The action of setting 'shell=true' made the command run within a shell",
        "The action of setting 'shell=true' made the command run within a shell",
        "Obtain the flag from within the target server."
    ],
    "CSRF (Cross-Site Request Forgery)": [
        "Create a CSRF request."
    ],
    "Flag Retrieval": [
        "Receive the flag.",
        "Capture the flag",
        "Capture the flag"
    ]
}