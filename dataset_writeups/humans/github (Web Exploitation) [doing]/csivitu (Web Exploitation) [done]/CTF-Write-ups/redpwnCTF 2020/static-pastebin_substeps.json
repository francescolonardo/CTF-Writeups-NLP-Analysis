{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Test if HTML tags can be inserted by trying a random `<h1>Hello</h1>` tag.",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Insert `<h1>Hello</h1>` into a relevant input field or parameter."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Submit the input and observe whether the HTML tag is rendered as text or as an HTML element on the page."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Inspect the JavaScript file to understand the content retrieval and `clean` function.",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Open the web developer tools in the browser and locate the JavaScript file."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Review the JavaScript file to understand how it retrieves and processes content."
                    },
                    {
                        "SubstepNumber": 2.3,
                        "SubstepString": "Analyze the `clean` function to identify any filtering or sanitization mechanisms."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Create an XSS payload with an extra `>` at the beginning to bypass the `clean` function.",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Design a payload to exploit the identified vulnerability, ensuring to include an extra `>` to bypass any filters."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Test the payload in a safe environment to confirm its efficacy in triggering an XSS."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Encode the payload in base64 and create a URL with the encoded payload.",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Use a base64 encoding tool or function to encode the payload."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Construct a URL, embedding the base64 encoded payload as a parameter or in the appropriate location."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Set up a `netcat listener` on your server using `nc -l port`.",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Choose a port and run `nc -l [chosen port]` on your server to start listening for incoming connections."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Pass the link to the `Admin Bot`, which will trigger the XSS attack.",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Identify the mechanism to submit or pass links to the `Admin Bot`."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Submit the malicious URL created in Step 4 to the `Admin Bot`."
                    },
                    {
                        "SubstepNumber": 6.3,
                        "SubstepString": "Monitor the `netcat listener` for any incoming connections or data."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Receive an HTTP GET request on your server containing the flag in the cookie.",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Observe incoming data on the `netcat listener` for any HTTP GET requests."
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Inspect the received HTTP GET request and extract the cookie data."
                    },
                    {
                        "SubstepNumber": 7.3,
                        "SubstepString": "Search the cookie data for the presence of the flag."
                    }
                ]
            }
        ]
    }
}
