{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Understood that there is a blacklist filter for '#' and '=' symbols",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Understood the presence of a blacklist filter for '#' symbol"
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Understood the presence of a blacklist filter for '=' symbol"
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Discovered that by using 'test' or 1-- - possible account credentials can be obtained but they don't provide the flag",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Discovered that using 'test' or 1-- - can obtain possible account credentials"
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Verified that the obtained credentials do not provide the flag"
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Scheduled to do a UNION based injection to dump the database to get the flag",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Scheduled to perform a UNION based injection"
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Objective is to dump the database and retrieve the flag"
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Implemented the UNION based SQL Injection using 'username=test' or 1 UNION SELECT *, null from flag-- -&password=test' or 1 UNION SELECT *, null from flag-- -'",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Implemented the UNION based SQL Injection"
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Used 'username=test' or 1 UNION SELECT *, null from flag-- -&password=test' or 1 UNION SELECT *, null from flag-- -' as the injection payload"
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Received a collection of CSV files containing network traffic data and a shapefile with information about cameras in Singapore",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Received a collection of CSV files containing network traffic data"
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Received a shapefile with information about cameras in Singapore"
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Instructed to locate the origin point of most attacks and calculate the number of cameras within 1.3km radius of that point",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Instructed to locate the origin point of most attacks"
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Instructed to calculate the number of cameras within 1.3km radius of the origin point"
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Wrote a Python script to extract out the most commonly occurring source IP (src_ip) from the CSV files",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Wrote a Python script to extract the most commonly occurring source IP (src_ip) from the CSV files"
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Discovered the latitude and longitude of the most frequently occurring src_ip",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Discovered the latitude and longitude of the most frequently occurring src_ip"
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Parsed the shapefile using geopandas",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Parsed the shapefile using geopandas"
                    }
                ]
            },
            {
                "StepNumber": 10,
                "StepString": "Implemented haversine formula to calculate the great-circle distance between locations based on their latitudes and longitudes",
                "Substeps": [
                    {
                        "SubstepNumber": 10.1,
                        "SubstepString": "Implemented haversine formula"
                    },
                    {
                        "SubstepNumber": 10.2,
                        "SubstepString": "Used the formula to calculate the great-circle distance between locations"
                    }
                ]
            },
            {
                "StepNumber": 11,
                "StepString": "Established the coordinates of the point of interest for distance calculations",
                "Substeps": [
                    {
                        "SubstepNumber": 11.1,
                        "SubstepString": "Established the coordinates of the point of interest"
                    }
                ]
            },
            {
                "StepNumber": 12,
                "StepString": "Counted the number of cameras within a 1.3km radius of the point of interest by looping through each camera location in the shapefile and checking if it's within the specified distance using the haversine formula",
                "Substeps": [
                    {
                        "SubstepNumber": 12.1,
                        "SubstepString": "Looped through each camera location in the shapefile"
                    },
                    {
                        "SubstepNumber": 12.2,
                        "SubstepString": "Checked if each camera location is within the specified distance from the point of interest"
                    },
                    {
                        "SubstepNumber": 12.3,
                        "SubstepString": "Counted the number of cameras within the specified distance using the haversine formula"
                    }
                ]
            }
        ]
    }
}