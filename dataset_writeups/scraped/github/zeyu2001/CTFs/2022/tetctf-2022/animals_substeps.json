{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Identify a prototype pollution vulnerability in '/api/tet/list' when merging request data.",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Identify vulnerability in '/api/tet/list' endpoint."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Notice vulnerability occurs when merging request data."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Observe that user input being passed to 'require()' leads to a Local File Inclusion (LFI) vulnerability.",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Observe user input being passed to 'require()'."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Notice 'require()' leads to a Local File Inclusion (LFI) vulnerability."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Propose to escalate this vulnerability to Remote Code Execution (RCE) given a valid .js file using an attribute that can be polluted to spawn a new process or execute a command.",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Propose escalation of vulnerability to Remote Code Execution (RCE)."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Identify attribute that can be polluted to spawn a new process or execute a command."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Consider that potential .js file candidates for execution are likely to be found in the node_modules folder which contains the source code of installed modules.",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Consider potential .js file candidates for execution."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Note that node_modules folder contains source code of installed modules."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Using 'grep' command to search for 'child_process' in all files of '/usr/local/lib/node_modules'.",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Execute 'grep' command."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Search for 'child_process' in all files of '/usr/local/lib/node_modules'."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Find two scripts, 'changelog.js' and 'update-dist-tags.js' using 'child_process'.",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Find 'changelog.js' script."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Find 'update-dist-tags.js' script."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Analyze the 'changelog.js' script finding that it includes a 'execSync' call with a possible command injection.",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Analyze the 'changelog.js' script."
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Identify 'execSync' call in the script."
                    },
                    {
                        "SubstepNumber": 7.3,
                        "SubstepString": "Note the possibility of command injection in the 'execSync' call."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Notice that 'require()' call doesn't pass any arguments in 'changelog.js' so 'process.argv[2]' is undefined.",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Notice absence of arguments in 'require()' call."
                    },
                    {
                        "SubstepNumber": 8.2,
                        "SubstepString": "Identify 'process.argv[2]' as undefined."
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Decide to pollute 'process.argv[2]' with a command injection payload before importing the 'changelog.js' file.",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Decide to pollute 'process.argv[2]' with a command injection payload."
                    },
                    {
                        "SubstepNumber": 9.2,
                        "SubstepString": "Plan to import the 'changelog.js' file after the pollution."
                    }
                ]
            },
            {
                "StepNumber": 10,
                "StepString": "Test this step locally with a python command that should create a reverse shell.",
                "Substeps": [
                    {
                        "SubstepNumber": 10.1,
                        "SubstepString": "Perform local test using a python command."
                    },
                    {
                        "SubstepNumber": 10.2,
                        "SubstepString": "Test the creation of a reverse shell."
                    }
                ]
            },
            {
                "StepNumber": 11,
                "StepString": "Perform a prototype pollution on the web server by sending a POST request to the '/api/tet/list' endpoint with a JSON payload having '__proto__' polluted with a command injection payload in the 'data'.",
                "Substeps": [
                    {
                        "SubstepNumber": 11.1,
                        "SubstepString": "Send POST request to '/api/tet/list' endpoint."
                    },
                    {
                        "SubstepNumber": 11.2,
                        "SubstepString": "Insert '__proto__' attribute in the request payload."
                    },
                    {
                        "SubstepNumber": 11.3,
                        "SubstepString": "Pollute '__proto__' attribute with a command injection payload in the 'data'."
                    }
                ]
            },
            {
                "StepNumber": 12,
                "StepString": "Exploit the LFI vulnerability to execute the 'changelog.js' script by sending a POST request to the '/api/tet/years' endpoint with a JSON payload in the request body specifying the 'changelog.js' script in the path.",
                "Substeps": [
                    {
                        "SubstepNumber": 12.1,
                        "SubstepString": "Send POST request to '/api/tet/years' endpoint."
                    },
                    {
                        "SubstepNumber": 12.2,
                        "SubstepString": "Include JSON payload in the request body."
                    },
                    {
                        "SubstepNumber": 12.3,
                        "SubstepString": "Specify 'changelog.js' script in the path of the JSON payload."
                    }
                ]
            },
            {
                "StepNumber": 13,
                "StepString": "Expect to get a reverse shell as a result.",
                "Substeps": [
                    {
                        "SubstepNumber": 13.1,
                        "SubstepString": "Expect the execution to result in a reverse shell."
                    }
                ]
            },
            {
                "StepNumber": 14,
                "StepString": "Navigate to root directory and read the flag.",
                "Substeps": [
                    {
                        "SubstepNumber": 14.1,
                        "SubstepString": "Navigate to the root directory."
                    },
                    {
                        "SubstepNumber": 14.2,
                        "SubstepString": "Read the flag."
                    }
                ]
            }
        ]
    }
}