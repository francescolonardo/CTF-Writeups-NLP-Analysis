{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Inspect the provided source code."
            },
            {
                "StepNumber": 2,
                "StepString": "Identify the logic behind the application's authentication."
            },
            {
                "StepNumber": 3,
                "StepString": "Identify the classes and methods involved in the authentication process."
            },
            {
                "StepNumber": 4,
                "StepString": "Discover the object injection vulnerability in the PHP application."
            },
            {
                "StepNumber": 5,
                "StepString": "Identify that the `login` cookie is deserialized into a `Login` object."
            },
            {
                "StepNumber": 6,
                "StepString": "Examine the `Login` object for exploitation."
            },
            {
                "StepNumber": 7,
                "StepString": "Identify that the `Login` object includes an MFA token and a `User` object."
            },
            {
                "StepNumber": 8,
                "StepString": "Examine the `User` object and identify that it instantiates a `SQL` object."
            },
            {
                "StepNumber": 9,
                "StepString": "Realize that the `SQL` class executes SQL queries and uses the results for authentication."
            },
            {
                "StepNumber": 10,
                "StepString": "Determine that the `SQL` class contains a `$query` attribute used to generate a prepared statement."
            },
            {
                "StepNumber": 11,
                "StepString": "Note how the authentication fails if the `bind_param()` call returns false."
            },
            {
                "StepNumber": 12,
                "StepString": "Identify how to exploit the object injection vulnerability: By injecting custom objects into user data, you can modify protected attributes and bypass authentication."
            },
            {
                "StepNumber": 13,
                "StepString": "Develop a plan for object injection: Bypass MFA token check by setting `$mfa_token` as a reference to the `$_correctValue` attribute, and bypass SQL by modifying the `$query`."
            },
            {
                "StepNumber": 14,
                "StepString": "Create a custom `User` and `Login` object to bypass the MFA token check."
            },
            {
                "StepNumber": 15,
                "StepString": "Identify that by simply modifying the `$query`, you can perform an SQL injection, and plan to modify it to bypass authentication."
            },
            {
                "StepNumber": 16,
                "StepString": "Write a code in PHP that creates these custom objects (`Login`, `User`, `SQL`). The custom `Login` object contains the custom `User` object and the `$_correctValue` reference. The custom `User` object contains a custom `SQL` with the custom `$query`."
            },
            {
                "StepNumber": 17,
                "StepString": "Serialize, encode, and then URL-encode the custom `Login` object."
            },
            {
                "StepNumber": 18,
                "StepString": "Set the `login` cookie to the output of the previous step."
            },
            {
                "StepNumber": 19,
                "StepString": "Log in to the application using the manipulated cookie to get the flag."
            }
        ]
    }
}