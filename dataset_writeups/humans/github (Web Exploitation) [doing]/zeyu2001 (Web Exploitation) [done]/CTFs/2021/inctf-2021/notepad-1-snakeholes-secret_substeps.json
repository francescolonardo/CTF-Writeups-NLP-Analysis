{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Identify the website's vulnerability to XSS.",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Identify the website's vulnerability to XSS."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Examine the init() function of the website, which changes the displayed note's innerHTML to the /get response on load.",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Examine the init() function of the website."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Identify that the init() function changes the displayed note's innerHTML to the /get response on load."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Discover the user can add notes via a POST request to /add.",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Discover that the user can add notes."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Identify the POST request to /add for adding notes."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Examine the /get and /add endpoints and their relationship with user's ID cookie in the Notes map.",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Examine the /get endpoint."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Examine the /add endpoint."
                    },
                    {
                        "SubstepNumber": 4.3,
                        "SubstepString": "Understand the relationship between the endpoints and the user's ID cookie in the Notes map."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Recognize the XSS prevention methods implemented by the site - cookies are set to prevent XSS for all API endpoints.",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Recognize the XSS prevention methods implemented by the site."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Identify that cookies are set to prevent XSS for all API endpoints."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Realize that although XSS can be performed, it would only affect the currently logged in user and not the admin.",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Realize that although XSS can be performed, it would only affect the currently logged in user and not the admin."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Examine the /find endpoint which takes the condition, startsWith, endsWith, and debug parameters.",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Examine the /find endpoint."
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Identify the request parameters of the /find endpoint: condition, startsWith, endsWith, and debug."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Discover that the /find endpoint can be used for Response Header Injection.",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Discover that the /find endpoint can be used for Response Header Injection."
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Use the /find endpoint to inject a Set-Cookie header to set the admin's ID cookie to your own session.",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Use the /find endpoint to inject a Set-Cookie header."
                    },
                    {
                        "SubstepNumber": 9.2,
                        "SubstepString": "Inject a Set-Cookie header to set the admin's ID cookie to your own session."
                    }
                ]
            },
            {
                "StepNumber": 10,
                "StepString": "Preserve the original admin's ID by setting the Path of the custom cookie to /get which allows to use the original admin ID in the /find endpoint.",
                "Substeps": [
                    {
                        "SubstepNumber": 10.1,
                        "SubstepString": "Preserve the original admin's ID."
                    },
                    {
                        "SubstepNumber": 10.2,
                        "SubstepString": "Set the Path of the custom cookie to /get."
                    }
                ]
            },
            {
                "StepNumber": 11,
                "StepString": "Create a XSS payload that fits within the 75 character limit to be stored. In this case, JavaScript code using `document.cookie` to control variables.",
                "Substeps": [
                    {
                        "SubstepNumber": 11.1,
                        "SubstepString": "Create a XSS payload."
                    },
                    {
                        "SubstepNumber": 11.2,
                        "SubstepString": "Ensure the XSS payload fits within the 75 character limit."
                    },
                    {
                        "SubstepNumber": 11.3,
                        "SubstepString": "Use JavaScript code using `document.cookie` to control variables in the payload."
                    }
                ]
            },
            {
                "StepNumber": 12,
                "StepString": "Use the /find endpoint to encode the cookie-characters as response headers.",
                "Substeps": [
                    {
                        "SubstepNumber": 12.1,
                        "SubstepString": "Use the /find endpoint."
                    },
                    {
                        "SubstepNumber": 12.2,
                        "SubstepString": "Encode the cookie-characters as response headers."
                    }
                ]
            },
            {
                "StepNumber": 13,
                "StepString": "Create a Python script to generate URLs that set cookies with parts of manipulated JavaScript code.",
                "Substeps": [
                    {
                        "SubstepNumber": 13.1,
                        "SubstepString": "Create a Python script."
                    },
                    {
                        "SubstepNumber": 13.2,
                        "SubstepString": "Generate URLs that set cookies with parts of manipulated JavaScript code."
                    }
                ]
            },
            {
                "StepNumber": 14,
                "StepString": "Modify the output of the Python code to look like a JavaScript script to be executed.",
                "Substeps": [
                    {
                        "SubstepNumber": 14.1,
                        "SubstepString": "Modify the output of the Python code."
                    },
                    {
                        "SubstepNumber": 14.2,
                        "SubstepString": "Format the output of the Python code to look like a JavaScript script."
                    }
                ]
            },
            {
                "StepNumber": 15,
                "StepString": "In this script, manipulate the multiple URL opens to actual browser window opens.",
                "Substeps": [
                    {
                        "SubstepNumber": 15.1,
                        "SubstepString": "In the script, manipulate the multiple URL opens."
                    },
                    {
                        "SubstepNumber": 15.2,
                        "SubstepString": "Replace the multiple URL opens with actual browser window opens."
                    }
                ]
            },
            {
                "StepNumber": 16,
                "StepString": "Set malicious cookies by having the user (admin) visit these URLs.",
                "Substeps": [
                    {
                        "SubstepNumber": 16.1,
                        "SubstepString": "Set malicious cookies."
                    },
                    {
                        "SubstepNumber": 16.2,
                        "SubstepString": "Have the user (admin) visit the URLs."
                    }
                ]
            },
            {
                "StepNumber": 17,
                "StepString": "Redirect the user to the main site.",
                "Substeps": [
                    {
                        "SubstepNumber": 17.1,
                        "SubstepString": "Redirect the user to the main site."
                    }
                ]
            },
            {
                "StepNumber": 18,
                "StepString": "The malicious JavaScript code is executed on client's side, which fetches an exploitative script and runs it in the background.",
                "Substeps": [
                    {
                        "SubstepNumber": 18.1,
                        "SubstepString": "The malicious JavaScript code is executed on the client's side."
                    },
                    {
                        "SubstepNumber": 18.2,
                        "SubstepString": "The malicious code fetches an exploitative script."
                    },
                    {
                        "SubstepNumber": 18.3,
                        "SubstepString": "The exploitative script is run in the background."
                    }
                ]
            },
            {
                "StepNumber": 19,
                "StepString": "Perform a CSRF to the /find endpoint to retrieve the flag and make a callback to our server with the data.",
                "Substeps": [
                    {
                        "SubstepNumber": 19.1,
                        "SubstepString": "Perform a CSRF to the /find endpoint."
                    },
                    {
                        "SubstepNumber": 19.2,
                        "SubstepString": "Retrieve the flag."
                    },
                    {
                        "SubstepNumber": 19.3,
                        "SubstepString": "Make a callback to our server with the data."
                    }
                ]
            },
            {
                "StepNumber": 20,
                "StepString": "Extract the flag from the response received on the callback URL.",
                "Substeps": [
                    {
                        "SubstepNumber": 20.1,
                        "SubstepString": "Extract the flag from the response received on the callback URL."
                    }
                ]
            }
        ]
    }
}