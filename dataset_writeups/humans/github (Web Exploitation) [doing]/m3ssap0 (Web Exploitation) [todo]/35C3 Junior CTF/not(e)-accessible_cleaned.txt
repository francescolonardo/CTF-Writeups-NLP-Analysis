Analyzing the HTML, you can find the following comment.

[HTML comment indicating that the source code for a project or website is located in a file named "src.tgz". The ".tgz" extension usually indicates that the file has been compressed using the gzip utility.]

The archive contains both the frontend and the backend code.

Into the backend file `app.rb` you can discover the backend endpoint that must be called to retrieve the flag.

[Ruby code defining a web application route that returns the contents of the "flag.txt" file when the path "/admin" is accessed.]

The code that can be abused is into frontend `view.php` file.

[PHP code that checks if a file exists and has specific contents before outputting the contents of another file with a certain ID obtained from a backend server.]

The `int` cast is not present everywhere, so the `id` parameter can be crafted like the following.

[A relative file path or URL that goes two directories up from the current directory and then accesses a directory named "admin".]

With this parameter, the first two `if` statements will be true, because the result of the expression is the following, due to the fact that PHP will consider only the integer part for the cast.

[File path pointing to a password-protected file or directory.]

That result is a valid password file, the one created previously during the note submission.

The `file_get_contents` instruction will perform a HTTP GET call to the following backend endpoint.

That will be interpreted like `$BACKEND/admin`

Hence, the flag will be returned.