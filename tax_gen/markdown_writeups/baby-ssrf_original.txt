<hr />

<p>description: &gt;-
  SSRF blacklist bypass enabled internal port scan and access to hidden</p>

<h2>  endpoints.</h2>

<h1>Baby SSRF</h1>

<h2>Problem</h2>

<p>Yet another server challenge :)</p>

<h3>Hint</h3>

<p>for i in range(5000,10000)</p>

<p>xD</p>

<h2>Solution</h2>

<p>We are given a <code>/request</code> endpoint from which we are able to submit a URL. </p>

<p>If the host is not found or the URL is invalid, <code>Learn about URL&amp;#39;s First</code> is returned.</p>

<p>If SSRF is detected, <code>Please dont try to heck me sir...</code> is returned. This was blacklist based, as pretty much every site is allowed except for <code>localhost</code> and anything containing the numbers <code>127</code>.</p>

<p>Otherwise, the HTTP response headers are returned.</p>

<p>My teammate rainbowpigeon found that the server was using Python's requests library to issue GET requests to the submitted URL, and returning <code>r.headers</code>.</p>

<p><img src="../../.gitbook/assets/image (9).png" alt="" /></p>

<p>I found that we could bypass the localhost blacklist using something like <code>url=http://0177.0.0.1:9006/&amp;sub=sub</code>. In most cases, <code>0177.0.0.1</code> will resolve to <code>127.0.0.1</code>. We can even see this behaviour in Chrome:</p>

<p><img src="../../.gitbook/assets/Screenshot 2021-06-07 at 1.17.16 AM.png" alt="" /></p>

<p>Once we bypass this filter, we could perform an internal port scan by e.g. writing a simple Python script or using Burp Intruder. From the hint, we know that we are looking for a port between 5000 and 10000.</p>

<p>This allows us to find ports that are not publicly accessible, but only accessible through the local machine itself. We found that ports 8080 and 9006 were open.</p>

<p>Since we only get the headers in the response, we don't have much to go off on except for things like the <code>Content-Length</code> header. Not Found (404) pages would have the same content length, so a different content length indicates that the page exists.</p>

<p>For localhost:8080, we find the <code>/request</code> endpoint. This means that the page at port 8080 is the same as the public challenge site.</p>

<p><img src="../../.gitbook/assets/image (10).png" alt="" /></p>

<p>The only remaining port would be 9006. Directly accessing it through <code>http://0177.0.0.1:9006/</code> did not give us anything meaningful, but a redirection through our PHP server revealed the flag in one of the headers.</p>

<p>Since the Python requests library follows redirections, our PHP server hosts the following:</p>

<p><code>php
&lt;?php
    header("Location: http://localhost:9006/");
?&gt;
</code></p>

<p>This reveals the flag:</p>

<p><img src="../../.gitbook/assets/image (8).png" alt="" /></p>
