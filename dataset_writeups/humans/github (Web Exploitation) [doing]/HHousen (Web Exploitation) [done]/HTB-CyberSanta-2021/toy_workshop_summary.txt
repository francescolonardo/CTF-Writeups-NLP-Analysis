Examine the `challenge/index.js` and `database.js` files to understand how the application connects to the SQLite database.
Analyze the `challenge/routes/index.js` file, focusing on the `/api/submit` and `/queries` endpoints.
Investigate the `challenge/bot.js` file to understand the use of Puppeteer and the `flag` variable.
Identify a stored cross-site scripting vulnerability (Stored XSS) and plan to exploit it by sending a malicious script.
Create the malicious XSS payload to redirect the target to an attacker-controlled server with the current cookies as URL parameters.
Set up a Flask server with the script `xss-cookie-stealer.py` to receive the request and log the stolen cookie.
Use a service like ngrok to create an internet-accessible server.
Insert the ngrok URL into the malicious payload.
Paste the payload into the frontend of the application, wait for the Puppeteer instance to load the page, and obtain the flag from the Flask server terminal or the `cookies.txt` file.
