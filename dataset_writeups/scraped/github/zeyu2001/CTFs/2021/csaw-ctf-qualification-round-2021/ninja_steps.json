{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Identified a Server-Side Template Injection (SSTI) vulnerability on a Flask webpage with certain blacklisted words as restriction"
            },
            {
                "StepNumber": 2,
                "StepString": "Determined a method of bypassing the Jinja2 SSTI filters using GET request arguments and accessing them through `request.args`"
            },
            {
                "StepNumber": 3,
                "StepString": "Used `attr()` to pass the blacklisted characters, this Jenja2 built-in filter gets an attribute of an object and the payload `/submit?value={{()|attr(request.args.c)}}&c=__class__` resulted in `().__class__` being evaluated and displayed to the user"
            },
            {
                "StepNumber": 4,
                "StepString": "Used the method `().__class__.__base__.__subclasses__()` to get subclasses of the base class"
            },
            {
                "StepNumber": 5,
                "StepString": "Formulated a GET request that accessed the subclass information"
            },
            {
                "StepNumber": 6,
                "StepString": "Copied the output and used a Python script to find `<class 'subprocess.Popen'>` in the subclasses and found it at index 258"
            },
            {
                "StepNumber": 7,
                "StepString": "Accessed this index to leverage `subprocess.Popen` to achieve Remote Code Execution (RCE)"
            },
            {
                "StepNumber": 8,
                "StepString": "Constructed another GET request to execute 'ls' command on the server using `subprocess.Popen`"
            },
            {
                "StepNumber": 9,
                "StepString": "Finally, read the flag file `cat flag.txt` and obtained the flag"
            }
        ]
    }
}