{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Observed that Baby Eval is a Node app with a path / that lists information including server source code"
            },
            {
                "StepNumber": 2,
                "StepString": "Analyzed the source codes provided and determined that the webpage is created by either executing an eval from a payload query parameter or calling the directory() function with specific parameters"
            },
            {
                "StepNumber": 3,
                "StepString": "Understood that the goal of the CTF challenge is to fetch the environment variable 'flag'"
            },
            {
                "StepNumber": 4,
                "StepString": "Realized that 'eval' can be triggered by entering a payload as the GET query parameter"
            },
            {
                "StepNumber": 5,
                "StepString": "Discovered that the code uses a blacklist Regex to prevent the execution of certain strings or functions"
            },
            {
                "StepNumber": 6,
                "StepString": "Observing that parentheses and some keywords were blocked, searched a way to call a function without parentheses"
            },
            {
                "StepNumber": 7,
                "StepString": "Found a JavaScript feature called Template Literals that can be used to call functions without parentheses"
            },
            {
                "StepNumber": 8,
                "StepString": "Wrote a payload using this Template Literal method to directly call the directory function with 'flag' as its parameter"
            },
            {
                "StepNumber": 9,
                "StepString": "Appended this payload '?payload=directory`flag`' to the URL of the webpage"
            },
            {
                "StepNumber": 10,
                "StepString": "Concluded that the directory function then receives an array with a single string 'flag' as an argument, which by the function's design returns the value of the 'flag' environment variable"
            }
        ]
    }
}