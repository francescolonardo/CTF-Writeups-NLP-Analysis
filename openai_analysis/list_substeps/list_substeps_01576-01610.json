[
    "Get the SSH key to the attacker site.",
    "Succeed in accessing localhost on the URL capture service",
    "Check redirection in the window.",
    "Locate the 'GET FLAG' button",
    "Replace the initial regex in the Python code.",
    "Identify the URL 'ip.address/?lang=es.php' as a potential target for LFI.",
    "Note that comma separation is added between each element of the array in the string format",
    "Bypassed 'disable_functions' on PHP 7.0-8.0 versions.",
    "Exploited the SQL Injection protection bypass.",
    "Understood the presence of a blacklist filter for '=' symbol",
    "Identify hashes that start with the '0e' prefix.",
    "Found potential injection points in the feature allowing us to edit our bio in Markdown.",
    "Identify the flag utflag{n3xt_y3ar_go1ng_bl1nd} in the returned data.",
    "Use RegEx payload.",
    "Note that messages were not being escaped.",
    "List the files.",
    "Set 'user.code' to a random 4-digit number.",
    "Check if the page content contains 'MCA{'.",
    "Discovered the flag.",
    "Acquire the flag.",
    "Used the same request to read the flag from the '/readflag' binary.",
    "Realized the input was being reflected into an XSL document.",
    "Deploy the provided Docker image.",
    "Make a GET request to /secret.html.",
    "Constructed the payload to send encoded cookies to a pre-defined URL controlled by the attacker.",
    "Use 'request.args' to bypass banned characters.",
    "The flag was found in the error, leading to successful completion of the challenge.",
    "Performed the action of claiming the Free Flag.",
    "Encode the flag.png file using Base64 encoding.",
    "Submitted an SQL injection in the 'email' and 'pass' parameters.",
    "Set the username as '{open('/flag').read()}' to trigger a Remote Code Execution during authentication.",
    "Check the cookies.",
    "Use '?length=' as the query string.",
    "Found another part of the flag: us3full_1nf0rm4tion}",
    "Remove the intermediate 'merged.pdf' file."
]