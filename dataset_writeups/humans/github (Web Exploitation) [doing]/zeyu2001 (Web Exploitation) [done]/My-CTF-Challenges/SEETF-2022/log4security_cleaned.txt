## Step 1 - Enable Logging Through API

In `/api/preferences`, the request body is deserialized into a `UserPreferences` object.

We can see that the `name`, `location`, and `logging` attributes are modified.

The following request will enable logging for our user.

## Step 2 - Authentication

In order to view our account logs, we need to supply a `token`.

This must then match the SHA1 hash of the `SUPER_SECRET` environment variable.

But notice that the above logic is a bit strange. If logging is enabled, then `digestStorage.digest()` is called twice. From the [documentation](https://cr.openjdk.java.net/~iris/se/11/latestSpec/api/java.base/java/security/MessageDigest.html), we can clearly see that:

Therefore, the second time that `digest()` is called, it is calculating the SHA1 of an empty string.

This hash allows us to authenticate successfully and view our logs.

## Step 3 - Log Poisoning and SSTI

First of all, notice that the `User-Agent` request header is logged for every request to `/home`.

Next, notice that the Thymeleaf template uses [expression preprocessing](https://www.thymeleaf.org/doc/articles/standarddialect5minutes.html) - i.e. the `logs` variable is expanded and included as part of the outer expression.

Therefore, poisoning our logs with `' + @environment.getProperty('FLAG') + '` would yield:

By poisoning the logs using the following,

We would see this in `/logs`.