[
    "Identify that the challenge consists of 3 services - Traefik (a HTTP proxy), a Python microservice, and a Go microservice",
    "Observe the configuration file of the Traefik service, note that it acts as a reverse proxy for the Go microservice, and only accepts the POST, GET, OPTIONS, DELETE and PATCH methods",
    "Examine the Go microservice and note that it uses the Beego web framework, acting as a reverse proxy for the Python microservice when the PUT method is used",
    "Evaluate the Python microservice, note that it allows the running of arbitrary commands when the GET method is used",
    "Realize the challenge of reaching the Python microservice that only accepts the PUT method while the Traefik proxy only allows the POST, GET, OPTIONS, DELETE and PATCH methods",
    "Inspect the Beego source code to find a way of issuing a pseudo PUT request by using a POST request with a '_method' query parameter set to PUT",
    "Make a request to the Go microservice using a POST method with a '_method=PUT' query to reach the 'Put()' handler",
    "Identify that the Python microservice runs on Flask's built-in server which, by its insecure nature can be susceptible to HTTP request smuggling attacks",
    "Navigate the HTTP request smuggling attack by noting that the Flask server treats underscores ('_') as hyphens ('-') and allows duplicate 'Content-Length' headers",
    "Setup a request, with differing 'Content-Length' header values, taking advantage of the Flask server's failure to comply with RFC norms",
    "Cause a GET request to the Python microservice to be executed by smuggling it inside a POST request made to the Go microservice, using HTTP request smuggling",
    "Get a reverse shell on the Python microservice to obtain the flag"
]