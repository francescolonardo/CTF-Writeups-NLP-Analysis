[
    "Study and understand the given client-side web exploitation challenge, where a URL is submitted to an '/share' endpoint which is then visited by an admin bot",
    "Identify the '/queue' WebSocket endpoint where the flag resides, with the conditions that the WebSocket client's origin must start with 'http://localhost' and the client having the correct 'auth' cookie set",
    "Understand that the correct 'auth' cookie is set at the '/auth' endpoint when the request is made locally by the admin bot",
    "Perform a GET-based CSRF through a top-level navigation to set the authentication cookie for the victim using JavaScript, followed by a 'sleep' for 1 second to ensure the navigation completion and cookie placement",
    "Understand that the WebSockets library used, flask_sockets is quite old, with no vulnerability in the ws.origin",
    "Notice that ws.origin corresponds to the Origin request header, which is forbidden to be modified by JavaScript with comprises of the webpage URL, i.e., ://hostname:port",
    "Realize that there is no way around the exploit page's origin needing to start with 'http://localhost', unless a browser's zero-day allows a malicious webpage to spoof Origin headers",
    "Manipulate the fact that sufficient validation does not ensure WebSocket connection came from a page hosted on localhost, hence domain starting with localhost could be used, such as localhost.zeyu2001.com",
    "Identify that CSRF token is not being checked and WebSockets are not restricted by the Same-Origin Policy, hence enabling 'cross-site WebSocket hijacking' to obtain and exfiltrate the flag",
    "Construct a page hosted on a domain starting with 'localhost' and submitted to '/share', this script sets the auth token by making the bot visit 'http://localhost:7070/auth', opens a WebSocket to 'ws://localhost:7070/quote' and exfiltrates the data to 'http://ATTACKER_URL'"
]