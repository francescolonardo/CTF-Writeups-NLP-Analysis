{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Establish a session with Shiba website through command session.get('https://shiba.yactf.ru/')"
            },
            {
                "StepNumber": 2,
                "StepString": "Set a for loop to iterate a get request to 'https://shiba.yactf.ru/api/boop' through the established session 1500 times"
            },
            {
                "StepNumber": 3,
                "StepString": "Print each response from the server through command r.text"
            },
            {
                "StepNumber": 4,
                "StepString": "Get the final page after 1500 iterations through command session.get('https://shiba.yactf.ru/')"
            },
            {
                "StepNumber": 5,
                "StepString": "Print the final page content and session cookies"
            },
            {
                "StepNumber": 6,
                "StepString": "Discover the website uses JWT tokens to count the number of 'boops'"
            },
            {
                "StepNumber": 7,
                "StepString": "Find the public key in '/signature/key.pub' as hinted in '/robots.txt'"
            },
            {
                "StepNumber": 8,
                "StepString": "Understand how server processes the JWT. Take note that the public key, verifyKey, is used to validate JWT signature in both HS256 and RS256 cases"
            },
            {
                "StepNumber": 9,
                "StepString": "Realize that the server signs new RS256 tokens with the private key, signKey, but we could generate our own HS256 token since we know the public key"
            },
            {
                "StepNumber": 10,
                "StepString": "Sign a token with the public key verifyKey and set 1501 as the number of boops"
            },
            {
                "StepNumber": 11,
                "StepString": "Collect the flag from the server's response"
            }
        ]
    }
}