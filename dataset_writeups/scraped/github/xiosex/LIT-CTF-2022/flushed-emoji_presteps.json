[
    "Identifies a Server-Side Template Injection (SSTI) vulnerability in the password field within the code.",
    "Tests the SSTI vulnerability by inputting a mathematical operation as the payload into the password field making the server return the result of the operation.",
    "Identifies a SQL injection vulnerability in the 'data-server' project.",
    "Executes commands using the SSTI vulnerability to read directory contents.",
    "Takes note of the directory contents returned by the server.",
    "Identifies an inaccessible server that is hosting data-server.",
    "Plans to send requests containing SQL to the server.",
    "Writes a python script in which an SQL payload is sent to the inaccessible server by using SSTI to force the execution of the payload.",
    "Loops through a list of characters, appending each character to an initial flag string. In each loop, a script is created and encoded into base64. This script is sent as an SSTI payload.",
    "Sends the payload via POST request and check if 'True' is in the response. If 'True' is present, the flag string character is an actual flag character; that character is then appended to the flag.",
    "Notes that due to the server filtering the character '.', the script is encoded into base64 to bypass this filtering.",
    "Notes that because the server does not have CURL, a python script is used to send requests."
]