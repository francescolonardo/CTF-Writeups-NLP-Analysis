{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Analyze the code to understand its behavior and identify potential vulnerabilities."
            },
            {
                "StepNumber": 2,
                "StepString": "Determine the code checks file extensions for uploaded files, only allowing 'txt', 'pdf', 'doc', 'docx', 'xls', 'xlsx'."
            },
            {
                "StepNumber": 3,
                "StepString": "Identify the code also normalizes file paths to prevent directory traversal attacks."
            },
            {
                "StepNumber": 4,
                "StepString": "Discover the use of the 'os.system()' method to execute the tar command when downloading all uploaded files, indicating potential wildcard injection vulnerability."
            },
            {
                "StepNumber": 5,
                "StepString": "Understand Wildcard Injection and how it can be abused to perform command injection attacks by manipulating the use of wildcards in system commands."
            },
            {
                "StepNumber": 6,
                "StepString": "Identify the vulnerability lies in the use of tar utility which incorporates use of wildcards and an option '--checkpoint-action' that specifies execution of a program at a checkpoint, on reaching 10 records by default."
            },
            {
                "StepNumber": 7,
                "StepString": "Understand the need of overcoming file extension restrictions to implement a successful attack."
            },
            {
                "StepNumber": 8,
                "StepString": "Conceptualize the attack by creating files '--checkpoint-action=exec=sh shell.txt' and '--checkpoint=1'. As '--checkpoint=1' does not pass the file extension check, find alternatives by digging into tar documentation."
            },
            {
                "StepNumber": 9,
                "StepString": "Uncover that the tar utility creates a checkpoint after every 10 records by default and each record is made up of 20 blocks of 512 bytes each."
            },
            {
                "StepNumber": 10,
                "StepString": "Devise the exploit to upload enough bytes to exceed 10 records, hence causing the checkpoint action to be executed."
            },
            {
                "StepNumber": 11,
                "StepString": "Initialize a GET request to the target URL."
            },
            {
                "StepNumber": 12,
                "StepString": "Create a file 'shell.txt' with the desired payload. Here, create a reverse shell back to attacker's machine."
            },
            {
                "StepNumber": 13,
                "StepString": "Subsequently, create another file '--checkpoint-action=exec=sh shell.txt' with nothing inside. This just serves to pollute the arguments for tar command and passes the extension check due to .txt extension."
            },
            {
                "StepNumber": 14,
                "StepString": "Send POST requests to upload both these files."
            },
            {
                "StepNumber": 15,
                "StepString": "Start a loop to generate and send multiple POST requests to upload multiple files of random content until the total size exceeds 10 records."
            },
            {
                "StepNumber": 16,
                "StepString": "For each iteration, create a file of 1024 bytes with a random name ending in '.txt', send a POST request to upload this file, then create a tar archive with these files and verify the current size of the tar archive."
            },
            {
                "StepNumber": 17,
                "StepString": "After the combined size of the uploaded files exceeds the size of 10 tar records, trigger the exploit by sending a GET request to '/download_all'. This executes the tar command with wildcard arguments, causing it to execute the payload in 'shell.txt'."
            },
            {
                "StepNumber": 18,
                "StepString": "Successfully obtain a reverse shell on the target system."
            }
        ]
    }
}