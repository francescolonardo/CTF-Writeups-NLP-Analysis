Analyze the vsCAPTCHA implementation, which is secured by a custom CAPTCHA written in TypeScript and Deno.
Understand the CAPTCHA generation process and note that `b1` and `b2` are only initialized at startup and never change.
Attempt to brute force the CAPTCHA by trying all possible combinations of `num1` and `num2`, given the limited range.
Encounter pitfalls such as the JWT success counter resetting to 0 if the old token is invalid, and the expiry not being extended for failed solving attempts.
Attempt to fix the Python code, but face issues with the CTF server due to connection delays and token reset.
Consider an alternative approach of cracking the random generator state or predicting random numbers since the random range is small and non-cryptographically secure random numbers were used.
