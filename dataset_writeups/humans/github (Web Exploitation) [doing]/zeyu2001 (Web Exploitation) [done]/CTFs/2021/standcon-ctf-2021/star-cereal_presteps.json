[
    "Inspect the provided source code.",
    "Identify the logic behind the application's authentication.",
    "Identify the classes and methods involved in the authentication process.",
    "Discover the object injection vulnerability in the PHP application.",
    "Identify that the `login` cookie is deserialized into a `Login` object.",
    "Examine the `Login` object for exploitation.",
    "Identify that the `Login` object includes an MFA token and a `User` object.",
    "Examine the `User` object and identify that it instantiates a `SQL` object.",
    "Realize that the `SQL` class executes SQL queries and uses the results for authentication.",
    "Determine that the `SQL` class contains a `$query` attribute used to generate a prepared statement.",
    "Note how the authentication fails if the `bind_param()` call returns false.",
    "Identify how to exploit the object injection vulnerability: By injecting custom objects into user data, you can modify protected attributes and bypass authentication.",
    "Develop a plan for object injection: Bypass MFA token check by setting `$mfa_token` as a reference to the `$_correctValue` attribute, and bypass SQL by modifying the `$query`.",
    "Create a custom `User` and `Login` object to bypass the MFA token check.",
    "Identify that by simply modifying the `$query`, you can perform an SQL injection, and plan to modify it to bypass authentication.",
    "Write a code in PHP that creates these custom objects (`Login`, `User`, `SQL`). The custom `Login` object contains the custom `User` object and the `$_correctValue` reference. The custom `User` object contains a custom `SQL` with the custom `$query`.",
    "Serialize, encode, and then URL-encode the custom `Login` object.",
    "Set the `login` cookie to the output of the previous step.",
    "Log in to the application using the manipulated cookie to get the flag."
]