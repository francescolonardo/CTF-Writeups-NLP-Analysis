{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Analyze the Python Flask API at http://35.207.189.79/pyserver/server.py and identify the vulnerable functionality due to unsanitized parameters."
            },
            {
                "StepNumber": 2,
                "StepString": "Perform a login as an admin user to obtain the token value, which will be set in the cookies."
            },
            {
                "StepNumber": 3,
                "StepString": "Identify the DB_SECRET variable containing the flag, which is stored in another table."
            },
            {
                "StepNumber": 4,
                "StepString": "Craft a SQL injection payload to target the vulnerable functionality."
            },
            {
                "StepNumber": 5,
                "StepString": "Send the HTTP POST request with the SQL injection payload to the server."
            },
            {
                "StepNumber": 6,
                "StepString": "Examine the HTTP response containing a JSON object with null values for most keys and a non-null value for the key userName with the flag value."
            },
            {
                "StepNumber": 7,
                "StepString": "Retrieve the flag."
            }
        ]
    }
}