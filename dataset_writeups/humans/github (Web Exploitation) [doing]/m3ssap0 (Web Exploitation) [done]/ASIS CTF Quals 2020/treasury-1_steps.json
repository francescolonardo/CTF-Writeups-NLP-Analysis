{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "The challenge starts with a given URL: https://poems.asisctf.com/ directing to a website containing a list of books."
            },
            {
                "StepNumber": 2,
                "StepString": "Two actions are available on the website, 'an excerpt' and 'read online', with 'read online' opening link from an unrelated domain."
            },
            {
                "StepNumber": 3,
                "StepString": "The HTML source of the webpage contains a treasury.js file useful for understanding actions performed."
            },
            {
                "StepNumber": 4,
                "StepString": "The homepage is a result of an initial HTTP GET request to '/books.php?type=list'."
            },
            {
                "StepNumber": 5,
                "StepString": "An excerpt button on the page performs a HTTP GET request to '/books.php?type=excerpt&id=1'."
            },
            {
                "StepNumber": 6,
                "StepString": "The 'read online' button opens a window redirecting to a link specific for each book."
            },
            {
                "StepNumber": 7,
                "StepString": "An observation made was that the web application is likely to be vulnerable to SQL injection."
            },
            {
                "StepNumber": 8,
                "StepString": "SQL injection refers to the manipulation of a query to interact with the website's database, it's potentially detected here when the result of the book with 'id=1' prints on inputting the URL https://poems.asisctf.com/books.php?type=excerpt&id=0%27%20or%20id=%271."
            },
            {
                "StepNumber": 9,
                "StepString": "Weird error appears when URL https://poems.asisctf.com/books.php?type=excerpt&id=0%27%20union%20select%201%20%23 is used, hinting that XML is being read from a database."
            },
            {
                "StepNumber": 10,
                "StepString": "SQLmap, an open source penetration testing tool that automates the process of detecting and exploiting SQL injection flaws, is used to retrieve information."
            },
            {
                "StepNumber": 11,
                "StepString": "Based on SQLmap results, one can determine that there are two databases available 'ASISCTF' and 'information_schema'."
            },
            {
                "StepNumber": 12,
                "StepString": "SQLmap results show that the 'ASISCTF' database has one table named 'books'."
            },
            {
                "StepNumber": 13,
                "StepString": "The 'books' table has two columns: 'id' and 'info' but SQLmap only displays one entry for 'id' of 1."
            },
            {
                "StepNumber": 14,
                "StepString": "SQLmap results showed that a '<flag>' XML element is hidden into the 'books' table but not in the book with 'id = 1'."
            },
            {
                "StepNumber": 15,
                "StepString": "Despite possible truncated output, the SQLmap did retrieve the flag 'ASIS{6e73c9d277cc0776ede0cbd36eb93960d0b07884}'."
            }
        ]
    }
}