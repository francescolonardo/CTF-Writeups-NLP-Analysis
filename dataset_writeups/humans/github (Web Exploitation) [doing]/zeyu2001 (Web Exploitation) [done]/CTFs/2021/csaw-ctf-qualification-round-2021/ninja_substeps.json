{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Identified a Server-Side Template Injection (SSTI) vulnerability on a Flask webpage with certain blacklisted words as restriction",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Identify a Flask webpage"
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Recognize a Server-Side Template Injection (SSTI) vulnerability"
                    },
                    {
                        "SubstepNumber": 1.3,
                        "SubstepString": "Note the presence of certain blacklisted words as restriction"
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Determined a method of bypassing the Jinja2 SSTI filters using GET request arguments and accessing them through `request.args`",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Determine a method to bypass Jinja2 SSTI filters"
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Recognize the usage of GET request arguments"
                    },
                    {
                        "SubstepNumber": 2.3,
                        "SubstepString": "Access the GET request arguments through `request.args`"
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Used `attr()` to pass the blacklisted characters, this Jenja2 built-in filter gets an attribute of an object and the payload `/submit?value={{()|attr(request.args.c)}}&c=__class__` resulted in `().__class__` being evaluated and displayed to the user",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Use `attr()` Jinja2 filter to pass blacklisted characters"
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Apply `attr()` filter with payload `/submit?value={{()|attr(request.args.c)}}&c=__class__`"
                    },
                    {
                        "SubstepNumber": 3.3,
                        "SubstepString": "Evaluate the object attribute and display it to the user"
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Used the method `().__class__.__base__.__subclasses__()` to get subclasses of the base class",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Use the method `().__class__.__base__.__subclasses__()`"
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Retrieve subclasses of the base class"
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Formulated a GET request that accessed the subclass information",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Formulate a GET request"
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Access the subclass information"
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Copied the output and used a Python script to find `<class 'subprocess.Popen'>` in the subclasses and found it at index 258",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Copy the output"
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Use a Python script to find `<class 'subprocess.Popen'>` in the subclasses"
                    },
                    {
                        "SubstepNumber": 6.3,
                        "SubstepString": "Identify the index of `<class 'subprocess.Popen'>` as 258"
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Accessed this index to leverage `subprocess.Popen` to achieve Remote Code Execution (RCE)",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Access the index 258"
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Leverage `subprocess.Popen` for Remote Code Execution (RCE)"
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Constructed another GET request to execute 'ls' command on the server using `subprocess.Popen`",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Construct another GET request"
                    },
                    {
                        "SubstepNumber": 8.2,
                        "SubstepString": "Execute 'ls' command on the server using `subprocess.Popen`"
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Finally, read the flag file `cat flag.txt` and obtained the flag",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Read the flag file"
                    },
                    {
                        "SubstepNumber": 9.2,
                        "SubstepString": "Obtain the flag"
                    }
                ]
            }
        ]
    }
}