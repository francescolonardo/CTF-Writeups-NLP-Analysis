{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Identify the goal: Bypass a WAF (Web Application Firewall), with the IP address being checked using the ipaddress library in Python.",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Identify the goal: Bypass a WAF (Web Application Firewall)."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Use the ipaddress library in Python to check the IP address."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Understand the provided code, which validates a given IP by first checking if it is a private IP using the ipaddress library. If the IP is not private (i.e., it's a global IP), the code proceeds to send a GET request to the provided url.",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Understand the provided code."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Check if the IP is a private IP using the ipaddress library."
                    },
                    {
                        "SubstepNumber": 2.3,
                        "SubstepString": "Proceed to send a GET request to the provided URL if the IP is not private."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Observe that the code is structured in such a way that it performs two DNS resolutions: the first to check if the destination is private, and the second to request the resource.",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Observe the code structure."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Perform the first DNS resolution to check if the destination is private."
                    },
                    {
                        "SubstepNumber": 3.3,
                        "SubstepString": "Perform the second DNS resolution to request the resource."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Add two A records to the DNS entry in an attempt to bypass this double-check, by first resolving to 127.0.0.1 (a local IP) and then to 51.38.138.162 (an IP address of a server).",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Add the first A record to the DNS entry to resolve to 127.0.0.1."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Add the second A record to the DNS entry to resolve to 51.38.138.162."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Make several attempts with this setup until the flag is obtained.",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Attempt to bypass the double-check using the modified DNS entry."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Repeat the attempts until the flag is obtained."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "For a more reliable solution, consider setting up a personal DNS server: one that will temporarily respond with a public IP (when the Python program is checking), but then resolve to the local IP when the GET request is made.",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Consider setting up a personal DNS server for a more reliable solution."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Configure the personal DNS server to respond with a public IP during the IP check."
                    },
                    {
                        "SubstepNumber": 6.3,
                        "SubstepString": "Configure the personal DNS server to resolve to the local IP during the GET request."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Because this method is similar to DNS Rebinding, consider using a tool such as singularity to set up this type of server.",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Consider using a tool like singularity to set up a DNS server."
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Set up the DNS server similar to DNS Rebinding."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Demo the reliability of this solution by using the DEMO application provided by singularity, replacing the RANDOM placeholder in the URL with something random.",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Use the DEMO application provided by singularity."
                    },
                    {
                        "SubstepNumber": 8.2,
                        "SubstepString": "Replace the RANDOM placeholder in the URL with something random."
                    }
                ]
            }
        ]
    }
}