{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Define the URL of the website that the SQL Injection will be performed on.",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Define the URL of the website."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Initialize an empty password string for storing the inferred password.",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Initialize an empty password string."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Create an infinite loop that will run until the password is fully determined using the SQL Injection.",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Create an infinite loop."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Set the loop condition to run until the password is fully determined using the SQL Injection."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Loop through each character in '0123456789abcdef' (hexadecimal).",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Loop through each character."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Set the range of characters to loop through as '0123456789abcdef' (hexadecimal)."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Create a SQL Injection payload that uses a wildcard pattern and append the current character. 'or password like {}{}%' --' would check if the password starts with the current guessed string.",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Create a SQL Injection payload."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Use a wildcard pattern and append the current character to check if the password starts with the current guessed string."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Send a POST request with the crafted payload to the target URL.",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Send a POST request."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Craft the payload with the SQL Injection and set it as the request body."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Check the response for the text 'No such person'. If this string is not found, it means that the guess was correct -- that character exists in the password at that position.",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Check the response for the text 'No such person'."
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "If the text is found, the guess was incorrect."
                    },
                    {
                        "SubstepNumber": 7.3,
                        "SubstepString": "If the text is not found, the guess was correct."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Append the current character to the password string and output it, along with a section of the server response trimmed by slicing.",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Append the current character to the password string."
                    },
                    {
                        "SubstepNumber": 8.2,
                        "SubstepString": "Trim a section of the server response using slicing."
                    },
                    {
                        "SubstepNumber": 8.3,
                        "SubstepString": "Output the password string and the trimmed section of the server response."
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Use the flag variable to denote a successful guess. If a guess was successful, restart the loop to guess the next character.",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Use a flag variable to denote a successful guess."
                    },
                    {
                        "SubstepNumber": 9.2,
                        "SubstepString": "If a guess was successful, restart the loop to guess the next character."
                    }
                ]
            },
            {
                "StepNumber": 10,
                "StepString": "If a guess was not successful (denoted by the flag remaining False after the loop), it means the full password has been guessed. Break the infinite loop and exit the script.",
                "Substeps": [
                    {
                        "SubstepNumber": 10.1,
                        "SubstepString": "If a guess was not successful, the full password has been guessed."
                    },
                    {
                        "SubstepNumber": 10.2,
                        "SubstepString": "Break the infinite loop."
                    },
                    {
                        "SubstepNumber": 10.3,
                        "SubstepString": "Exit the script."
                    }
                ]
            }
        ]
    }
}