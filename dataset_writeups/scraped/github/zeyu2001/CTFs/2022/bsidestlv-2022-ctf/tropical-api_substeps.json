{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Read the given challenge which involves investigating an unintentionally exposed internal API and finding a flag",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Read the given challenge."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Understand that the challenge involves investigating an unintentionally exposed internal API and finding a flag."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Go through the provided source code of the backend",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Go through the provided source code."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Investigate the backend."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Spot an interesting behavior with 'RegExp.prototype.test()' used with regex containing the global flag. This trick helps continue the search from the previously found index onwards and it can allow multiple instances of 'fqdn'",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Spot an interesting behavior with 'RegExp.prototype.test()' used with regex containing the global flag."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Understand that this trick helps continue the search from the previously found index onwards and it can allow multiple instances of 'fqdn'."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Find a way around the restrictive regex check by submitting same payload multiple times",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Find a way around the restrictive regex check."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Submit the same payload multiple times."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Convince the server to communicate with arbitrary URL by bypassing regex using the provided loophole",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Convince the server to communicate with arbitrary URL."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Bypass the regex using the provided loophole."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Understand that the 'Buffer' needs to be 16 bytes, meaning you need at least 32 characters in your 'fqdn'",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Understand the requirement of a 'Buffer' of 16 bytes."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Understand the necessity of having at least 32 characters in the 'fqdn'."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Leverage that 'Buffer' stops when it encounters the first non-hexadecimal character",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Leverage the behavior of 'Buffer' stopping at the first non-hexadecimal character."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Derive a URL that starts with 32 bytes of hexadecimal characters using leading 0's and convert your public IP address to octal form using an octal IP address converter",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Derive a URL that starts with 32 bytes of hexadecimal characters using leading 0's."
                    },
                    {
                        "SubstepNumber": 8.2,
                        "SubstepString": "Convert your public IP address to octal form using an octal IP address converter."
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Ensure the trailing '.ping-proxy/ping' turns into a URL fragment by appending '#' at the end of the 'fqdn', which simply makes the final URL your public IP address",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Ensure the trailing '.ping-proxy/ping' turns into a URL fragment."
                    },
                    {
                        "SubstepNumber": 9.2,
                        "SubstepString": "Append '#' at the end of the 'fqdn' to make the final URL your public IP address."
                    }
                ]
            },
            {
                "StepNumber": 10,
                "StepString": "Receive the request and observe the flag in the request header",
                "Substeps": [
                    {
                        "SubstepNumber": 10.1,
                        "SubstepString": "Receive the request."
                    },
                    {
                        "SubstepNumber": 10.2,
                        "SubstepString": "Observe the flag in the request header."
                    }
                ]
            },
            {
                "StepNumber": 11,
                "StepString": "Claim the flag to complete the challenge",
                "Substeps": [
                    {
                        "SubstepNumber": 11.1,
                        "SubstepString": "Claim the flag."
                    },
                    {
                        "SubstepNumber": 11.2,
                        "SubstepString": "Complete the challenge."
                    }
                ]
            }
        ]
    }
}