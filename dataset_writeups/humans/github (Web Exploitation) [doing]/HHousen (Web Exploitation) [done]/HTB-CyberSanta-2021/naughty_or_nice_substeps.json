{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Examining the source code found that both 'RS256' and 'HS256' algorithms are allowed for decryption in 'challenge/helpers/JWTHelper.js' indicating a potential JWT exploit (CVE-2016-5431/CVE-2016-10555).",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Examine the source code."
                    },
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Identify that 'RS256' and 'HS256' algorithms are allowed for decryption in 'challenge/helpers/JWTHelper.js'."
                    },
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Recognize the potential JWT exploit (CVE-2016-5431/CVE-2016-10555)."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Made an account on the website to get the JWT Token and public key by copying the 'session' cookie in the browser's developer tools.",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Create an account on the website."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Access the browser's developer tools."
                    },
                    {
                        "SubstepNumber": 2.3,
                        "SubstepString": "Copy the 'session' cookie."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Used JWT.io or jwt_tool.py to decode the cookie.",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Choose JWT.io or jwt_tool.py as the decoding tool."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Decode the cookie using the selected tool."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "The public key was found to be encoded in the JWT.",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Inspect the decoded JWT."
                    },
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Identify the encoded public key in the JWT."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Modified the JWT to use the RS256-to-HS256 exploit to gain access as an admin user.",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Edit the JWT."
                    },
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Add the RS256-to-HS256 exploit to the JWT."
                    },
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Gain access as an admin user."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Used python3 jwt_tool.py to perform the RS256-to-HS256 exploit.",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Execute the RS256-to-HS256 exploit using python3 jwt_tool.py."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Swapped the JWT token with the admin token in the browser's developer tools to gain admin access.",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Access the browser's developer tools."
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Replace the JWT token with the admin token."
                    },
                    {
                        "SubstepNumber": 7.3,
                        "SubstepString": "Gain admin access."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Found potential Server-Side Template Injection (SSTI) vulnerability in 'challenge/routes/index.js' and 'challenge/helpers/CardHelper.js'.",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Inspect 'challenge/routes/index.js' file for SSTI vulnerability."
                    },
                    {
                        "SubstepNumber": 8.2,
                        "SubstepString": "Inspect 'challenge/helpers/CardHelper.js' file for SSTI vulnerability."
                    },
                    {
                        "SubstepNumber": 8.3,
                        "SubstepString": "Identify the potential SSTI vulnerability."
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Exploited the vulnerability using ninjucks SSTI to read the flag from the '/flag' file by adding the payload '{{range.constructor(\"return global.process.mainModule.require('child_process').execSync('cat /flag*')\")()}}'",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Exploit the SSTI vulnerability using ninjucks."
                    },
                    {
                        "SubstepNumber": 9.2,
                        "SubstepString": "Extract the flag from the '/flag' file."
                    },
                    {
                        "SubstepNumber": 9.3,
                        "SubstepString": "Craft and insert the payload '{{range.constructor(\"return global.process.mainModule.require('child_process').execSync('cat /flag*')\")()}}' into the exploit."
                    }
                ]
            }
        ]
    }
}