<h3>Web 101</h3>

<p>There is a blacklist filter for <code>#</code> and <code>=</code>. Using <code>test' or 1-- -</code> gives us account credentials, but logging in with these does not give us the flag.</p>

<p>We could use a <code>UNION</code> based injection to dump the database and get the flag.</p>

<p><code>username=test' or 1 UNION SELECT *, null from flag-- -&amp;password=test' or 1 UNION SELECT *, null from flag-- -</code></p>

<h3>Find the Malicious Attacks by Revo Force</h3>

<p>We were given CSV files containing network traffic data, as well as a shapefile containing cameras in Singapore. We are tasked to find where most of the attacks are originating from, and the number of cameras within a 1.3km radius.</p>

<p>First, we obtain the most common <code>src_ip</code>, and find its corresponding latitude and longitude.</p>

<p>```python
import os, csv</p>

<p>SRC<em>IP</em>COL = 9
LABEL_COL = 14</p>

<p>files = [x for x in os.listdir() if x.endswith('.csv')]
results = {}</p>

<p>for file in files:
    with open(file, newline='') as csvfile:
        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
        for row in reader:
            src<em>ip, label = row[SRC</em>IP<em>COL], row[LABEL</em>COL]
            # print(src_ip, label)</p>

<pre><code>        if label == 'malicious':
            print(file)
            if src_ip in results:
                results[src_ip] += 1
            else:
                results[src_ip] = 1
</code></pre>

<p>print(results)
print(max(results.items(), key=lambda x: x[1]))
```</p>

<p>After, we can parse the shapefile using geopandas, and use the <a href="https://en.wikipedia.org/wiki/Haversine_formula">haversine formula</a> to determine the  great-circle distance between each camera and the <code>src_ip</code> location based on the latitude and longitudes.</p>

<p>```python
import geopandas as gpd
from math import radians, cos, sin, asin, sqrt</p>

<p>def haversine(lon1, lat1, lon2, lat2):
    """
    Calculate the great circle distance between two points 
    on the earth (specified in decimal degrees)
    """
    # convert decimal degrees to radians 
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])</p>

<pre><code># haversine formula 
dlon = lon2 - lon1 
dlat = lat2 - lat1 
a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
c = 2 * asin(sqrt(a)) 
r = 6371 # Radius of earth in kilometers. Use 3956 for miles
return c * r
</code></pre>

<p>LAT = 1.327187
LONG = 103.946316
RADIUS = 1.3</p>

<p>shapefile = gpd.read<em>file("SPF</em>DTRLS.shp")
print(shapefile)</p>

<p>count = 0
for row in shapefile.itertuples():
    lat2, long2 = row.LATITUDE, row.LONGITUDE
    a = haversine(LONG, LAT, long2, lat2)</p>

<pre><code>print('Distance (km) : ', a)
if a &lt;= RADIUS:
    count += 1
</code></pre>

<p>print(count)
```</p>
