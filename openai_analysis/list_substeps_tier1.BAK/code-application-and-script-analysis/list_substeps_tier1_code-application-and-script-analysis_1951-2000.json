[
    "Implement brute force for all possible remaining octets of the IP address within the range of 0 to 256",
    "Use YAML to analyze the script.",
    "Control 'Version' in cookie.",
    "Craft AJP Requests to be sent using Request Smuggling.",
    "Craft the AJP request to leak the source code of index.jsp.",
    "Inject CRLF characters in Lua's HTTP library.",
    "Identify a potential vulnerability within the function.",
    "Identify a SQL Injection vulnerability within the function.",
    "Appended `?source` to the index.php of the site.",
    "Discovered a connection being made to a MySQL server prior to shellcode execution.",
    "Verified the shellcode's functionality and ensured compatibility with the `strlen()` function within 'shellme()' in the `shellme.so` file.",
    "Identify the rendered HTML page from textarea inside an iframe",
    "Send an XSS to the pop-up",
    "Send an XSS with the stolen identifier",
    "Recognize that the sha512.js script will be filtered as a result of appending the parameter.",
    "Discover a potential for XSS injection.",
    "Assign different nonce to each script tag",
    "Begin to test this theory with 'handlebars', a tool which previously had a known vulnerability in processing templates.",
    "Consider whether this could present an entry point if a vulnerability, such as Template Injection, can be exploited successfully.",
    "Created a payload `\"><svg/onload=$.globalEval(name)` with length of '32 bytes'",
    "Assigned the payload by sending the admin to our webpage, where we triggered 'window.open('http://web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one/profile.php?uuid=\"><svg/onload=$.globalEval(name)', <long payload>)', setting 'window.name' to '<long payload>'",
    "Acknowledged the increased challenge in analyzing the code",
    "Noted the specific flag value: HarekazeCTF{j4v4scr1pt-0bfusc4t0r_1s_tsur41}",
    "Construct an SQL injection query based on the format.",
    "Identified a heavily filtered error-based blind sql injection.",
    "Test the SQL payload by iteratively substituting different lengths for '$LENGTH$'.",
    "Use the SQL function 'max(A, B)' to sort through the concatenated 152-digit number.",
    "Create a payload using functions that, when run, return 1337",
    "Check for a possibility of XSS injection in the CSRF token script.",
    "Overwrite document.domain using Object.defineProperty(document, 'domain', {value: 'yeunote.ctf.yeuchimse.com'});",
    "Recognized it as part of Angular's internal methods fetching '/api/answer' from server-side.",
    "Realized the mutation could be simplified to create the exploit.",
    "Perform the first DNS resolution to check if the destination is private.",
    "Perform the second DNS resolution to request the resource.",
    "Search for a script.js file.",
    "Perform the 'cat' command on '/home/user/flag.txt'.",
    "Identify that the formula points to another sheet's labeled 'Source'",
    "Identify the flag in the response section of that response.",
    "Inspect webpage response.",
    "Intercept register request.",
    "Realize the alternative method involves using SQL injection",
    "Attempt password brute force for each email",
    "Craft the payload with the SQL Injection and set it as the request body.",
    "Use the functions 'get_hidden' and 'get_passwords' in a brute-force attack to find the correct password for the username 'jack'.",
    "Send an SQL payload to the inaccessible server using SSTI to force the execution.",
    "Send the encoded script as an SSTI payload.",
    "Encode the script into base64 to bypass the filtering.",
    "Craft SQL injection payload",
    "Ensure payload always returns true",
    "Exploit the SQL injection vulnerability"
]