{
    "AttackModel": {
        "NameOfTheChallenge": "Flask Server-Side Template Injection (SSTI)",
        "AttackerCapabilities": [
            "Knowledge of Server-Side Template Injection (SSTI) vulnerabilities",
            "Understanding of Jinja2 filters and attributes",
            "Ability to bypass filter restrictions",
            "Ability to enumerate classes and find specific subclass",
            "Ability to leverage subprocess.Popen for remote code execution (RCE)"
        ],
        "Target": {
            "Type": "Web Application",
            "Vulnerabilities": [
                "Server-Side Template Injection (SSTI)"
            ],
            "SecurityMeasures": [
                "Blacklisting certain keywords/characters"
            ]
        },
        "Steps": [
            {
                "StepNumber": 1,
                "Description": "Bypass filter restrictions using Jinja2 attr() filter",
                "ToolsUsed": null,
                "StepDetails": {
                    "Hypothesis": "The attacker wants to bypass the filter restrictions to execute arbitrary code.",
                    "Action": "The attacker crafts a payload by passing blacklisted characters as GET request arguments and accessing them through request.args. They use the attr() filter to get an attribute of an object.",
                    "Result": "The payload allows the attacker to evaluate arbitrary code and display the result.",
                    "Success": "Success",
                    "FailingReason": null
                }
            },
            {
                "StepNumber": 2,
                "Description": "Find the subclass 'subprocess.Popen'",
                "ToolsUsed": "Python script",
                "StepDetails": {
                    "Hypothesis": "The attacker needs to find the specific subclass 'subprocess.Popen' in order to achieve RCE.",
                    "Action": "The attacker runs a Python script that enumerates the subclasses using ().__class__.__base__.__subclasses__() and searches for 'subprocess.Popen' in the output.",
                    "Result": "The attacker identifies the index of 'subprocess.Popen' in the subclasses list (index 258).",
                    "Success": "Success",
                    "FailingReason": null
                }
            },
            {
                "StepNumber": 3,
                "Description": "Exploit RCE using subprocess.Popen",
                "ToolsUsed": null,
                "StepDetails": {
                    "Hypothesis": "The attacker aims to leverage subprocess.Popen to achieve remote code execution (RCE).",
                    "Action": "The attacker constructs a payload that utilizes subprocess.Popen with the desired command ('ls') and necessary arguments. They use the previously obtained index (258) to access 'subprocess.Popen' in the subclasses list.",
                    "Result": "The payload executes the 'ls' command and retrieves the output using the 'communicate' method. It then decodes the output and displays it.",
                    "Success": "Success",
                    "FailingReason": null
                }
            },
            {
                "StepNumber": 4,
                "Description": "Retrieve the flag",
                "ToolsUsed": null,
                "StepDetails": {
                    "Hypothesis": "The attacker wants to obtain the flag by accessing the 'flag.txt' file.",
                    "Action": "The attacker modifies the payload to execute the 'cat flag.txt' command instead of 'ls'.",
                    "Result": "The payload executes the 'cat flag.txt' command and retrieves the flag.",
                    "Success": "Success",
                    "FailingReason": null
                }
            }
        ]
    }
}