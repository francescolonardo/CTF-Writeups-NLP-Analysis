<h1>Java Code Analysis!?!</h1>

<h2>Overview</h2>

<p>300 points</p>

<p>Category: <a href="../">Web Exploitation</a></p>

<p>Tags : <code>#picoCTF 2023</code> <code>Web Exploitation</code></p>

<h2>Description</h2>

<p>BookShelf Pico, my premium online book-reading service.
I believe that my website is super secure. I challenge you to prove me wrong by reading the 'Flag' book!</p>

<p>Additional details will be available after launching your challenge instance.</p>

<h2>Solution</h2>

<p>After start of the instance picoCTF will provide you source code of the site and link to running instance.</p>

<p>Site has login screen:</p>

<p><img src="1.jpg" alt="Screenshot of the login screen" /></p>

<p>And main screen with books.</p>

<p><img src="2.jpg" alt="Screenshot of the main screen" /></p>

<p>We can't access any of them except the first one.</p>

<p>Let's dive into code.</p>

<p>There are some files, that are interesting to us.</p>

<p><img src="3.jpg" alt="Screenshot of the files" /></p>

<p>Inside <code>JwtService.java</code> we can see all data, that JwtToken contain, the issuer and that <code>secretGenerator</code> gives the secret key. </p>

<p><img src="4.jpg" alt="Screenshot of the file" /></p>

<p>And inside the <code>SecretGenerator.Java</code> we see this.</p>

<p><img src="5.jpg" alt="Screenshot of the file" /></p>

<p>So, now we know, that "secret key" is <code>1234</code>. We have all the information to encode and decode JWT tokens.</p>

<p>But we need a userId, so let's get back to the login screen.</p>

<p>Now, I'm using <code>Google chrome</code> - press F12, open <code>Network</code> tab and login with creds from picoCTF: user:<code>user</code>, pass:<code>user</code></p>

<p>And we will get the JWT token for our user in the payload of the response:</p>

<p><img src="6.jpg" alt="Screenshot of the network tab" /></p>

<p>Copy it and go to the <a href="https://jwt.io/">this website</a>. Let's decode it like this:</p>

<p><img src="7.jpg" alt="Screenshot of the jwt" /></p>

<p>So, <code>userId</code> is <code>1</code>.</p>

<p>Now let's encode our JWT token with role <code>Admin</code>:</p>

<p><img src="8.jpg" alt="Screenshot of the jwt" /></p>

<p>Inside <code>controllers</code> directory we can find <code>UserController.java</code>, where we can see this endpoint:</p>

<p><img src="9.jpg" alt="Screenshot of the src" /></p>

<p>Now I will use Postman (because I'm lazy) and send some requests with new JWT to update our role and read the flag.</p>

<p>We need to create new user on the site, because we can't patch default user role.</p>

<p>We need to obtain users list.</p>

<p>First of all - put token into headers. </p>

<p><img src="10.jpg" alt="Screenshot of the postman" /></p>

<p>Request:</p>

<p><img src="11.jpg" alt="Screenshot of the postman" /></p>

<p>Our id is <code>6</code>.</p>

<p>Now let's patch our role:</p>

<p><img src="12.jpg" alt="Screenshot of the postman" /></p>

<p>Now we are <code>Admin</code> - just login and read the flag:</p>

<p><img src="13.jpg" alt="Screenshot of the postman" /></p>

<p><img src="14.jpg" alt="Screenshot of the postman" /></p>
