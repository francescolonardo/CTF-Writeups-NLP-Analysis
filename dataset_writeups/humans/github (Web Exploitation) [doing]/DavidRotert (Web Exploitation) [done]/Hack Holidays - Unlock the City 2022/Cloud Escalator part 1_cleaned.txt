The website's homepage displays an "Under Construction" image.

## Exploring content

To explore the site, it was opened with ZAP Proxy.

At the root path `/`, there was nothing of interest.
The `/logout` and `/login` paths were also investigated.
The login path contained a form for submitting a username and password, but attempting to log in with `admin` as both the username and password was unsuccessful, displaying a message stating that the username and/or password were invalid.

A "Forgot password" link redirected to `/forgotpassword.html`.
This path has some JavaScript which is does not work:
[JavaScript snippet: Non-working error message function with commented database credentials]

The passwords from the database did not appear to be crackable with Hashcat, even after a 7-character brute force attempt.
SQL Injection seemed to be ineffective.

Other notable features of the page included the `JSESSIONID` cookie and a custom header `ETag`.
It seems to be interesting (reading on the MDN Web Docs). Spoiler: it is not.

Submitting a username from the database did not seem to have any effect.

Visiting the `/admin` and `/dashboard` paths resulted in HTTP 404 errors, displaying default Apache Tomcat error messages.

### Database

Upon examining the database, several schemas were discovered: `accounts`, `config`, `env`, `innodb`, `sys`, and `users`.

Within the `users` schema, the `data` table contained a flag. The `employees_login` table held `Emp_id`, `User_name`, and `Password` fields, with passwords hashed using SHA1. The `employees` table contained personal data about the employees, with all emails ending in `@dummy.com` and all birthdates set to `0000-00-00`.

In the `env` schema, the `git` table contained an OpenSSH private key.

The `config` schema's `aws_env` table held the following information: `user` as `s3user1`, `access_key` as `AKIAWSXCCGNYFS7NN2XU`, and `secret` as `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`.

Finally, within the `accounts` schema, the `employees_account` table listed `Emp_id`, `Username`, and `Account_number`.

### Amazon S3
The crdentials in the `aws_env` table can be used to access an Amazon S3 bucket with. Download is possible with AWS CLI (after `aws configure`): 
[aws command: Download the S3 bucket content]

It contains a tomcat log. After analyzing it, I saw another flag:
`23-Jun-2022 12:50:31.561 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent APR capabilities: CTF{example_flag}`

After some more analyzing, I stumbled on this suspicious line:
`23-Jun-2022 12:50:31.551 ERROR [main] unable to pull update from github.com/cloudhopper-sec/app.git`

The repository is not accessible on GitHub. However, the account exists.

### GitHub Repository
GitHub repository can be cloned with the command:
[bash command: Set the custom SSH command to use the provided private SSH key when connecting to a remote server]

The SSH key is the one leaked from the database.

The repository contains the source code of the challenge including a Dockerfile.

### Apache Tomcat
The Tomcat servers version might be vulnerable to Remote Code Execution via a malicious `PUT` of a JSP (https://nvd.nist.gov/vuln/detail/CVE-2017-12617).

I tried it but the server is not vulnerable and forbids `PUT` requests.

## Code Review
The Java Servlet has `log4j` 2.14.1 as a dependency, which is vulnerable to Remote Code Execution via JNDI (Java Naming and Directory Interface).

Looking at the code, `ProfileServlet.java` logs the content of a `debug` Cookie value. This can be used to perform a log4shell attack. However, this is only possible if the user is logged in.
[JNDI payload]
[base64 encoded cookie]

In the Docker environment, the username and password are set to an empty string. However, this is not the case in production, maybe username or password are the flag. The user is identified by a SHA256 hash which is `SHA256(username + password)`.  The Database credentials don't work.

Tomcat does not use log4j so it is not vulnerable to malicious user input. Other libraries also don't use log4j.

## Exploiting log4j for the flag (after challenge for testing)
(Note: I was to lazy to write a beautiful Java code)
[Java code: RcePayload class that exploits log4j vulnerability, extracts credentials and flag, and sends them to a malicious server]
