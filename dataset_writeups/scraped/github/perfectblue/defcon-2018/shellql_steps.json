{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "The challenge entailed shellcoding in the context of PHP to make SQL queries under a sandbox environment"
            },
            {
                "StepNumber": 2,
                "StepString": "The challenge offered a shared object entitled `shellme.so` and a website"
            },
            {
                "StepNumber": 3,
                "StepString": "By appending `?source` to the index.php of the site, the source code was made visible"
            },
            {
                "StepNumber": 4,
                "StepString": "The source code shows when a GET request is sent with 'source' as a parameter, it reveals the source code of the file"
            },
            {
                "StepNumber": 5,
                "StepString": "Source code also shows if a POST request is made with 'shell' as a parameter, it echoes the input and sends it to the `shellme()` function, as long as it keeps a 1000 characters limit"
            },
            {
                "StepNumber": 6,
                "StepString": "Given function `shellme()` gets defined in the shared object `shellme.so`"
            },
            {
                "StepNumber": 7,
                "StepString": "In the shared object file `shellme.so`, the function `shellme()` gets tracked, leading to a function `shell_this()`, where the given input copies to a mmap-ed memory region"
            },
            {
                "StepNumber": 8,
                "StepString": "It puts a `SECCOMP_MODE_STRICT` seccomp sandbox into play before executing the input, allowing only read, write, and exit syscalls"
            },
            {
                "StepNumber": 9,
                "StepString": "It notes that the function uses strlen(), which will truncate any shellcode at null bytes"
            },
            {
                "StepNumber": 10,
                "StepString": "The PHP code reveals a connection to the MySQL server before executing the shellcode"
            },
            {
                "StepNumber": 11,
                "StepString": "The description of the challenge clarifies that the flag is in the MySQL 'flag' table"
            },
            {
                "StepNumber": 12,
                "StepString": "This means the File Descriptor (FD) for connection to MySQL server is open before executing shellcode, so SQL queries can be sent to it and get the response read"
            },
            {
                "StepNumber": 13,
                "StepString": "Given that the server runs php-cgi, to conduct the MySQL query, a php-cgi header has to first be written"
            },
            {
                "StepNumber": 14,
                "StepString": "Then the SQL query has to be sent to the File Descriptor (FD) 4 ( MySQL server ), then the response has to be read as it is received, and lastly, the received response has to be written to stdout"
            },
            {
                "StepNumber": 15,
                "StepString": "Forming the MySQL query following the MySQL docs under the protocol level results in the following: little-endian, 4 bytes, the length of the written query, a 1-byte query type (0x3 for this query), followed by the query itself"
            },
            {
                "StepNumber": 16,
                "StepString": "The goal consists of writing the cgi header (Content-type: text/html), sending the SQL query to the FD 4 (MySQL server), reading the response from this FD, and finally, writing the received response"
            },
            {
                "StepNumber": 17,
                "StepString": "A Python-based environment was set up to assemble and debug a shellcode"
            },
            {
                "StepNumber": 18,
                "StepString": "The shellcode used JMP - CALL - POP technique to get the strings in registers"
            },
            {
                "StepNumber": 19,
                "StepString": "At the same time, relative JMPs were turned into PLT type trampolines to avoid big JMPs with null bytes-NOP Sled to gracefully handle oversized jumps"
            },
            {
                "StepNumber": 20,
                "StepString": "The shellcode was created and verified with no NULL bytes, to operate as expected with the `strlen()` function of the 'shellme()' function inside the `shellme.so` file"
            },
            {
                "StepNumber": 21,
                "StepString": "Once verified and assembled, the shellcode was executed to obtain the desired output - 'Content-type: text/html' cgi header, SQL query sent to the FD 4, read the response from FD 4, write this response"
            }
        ]
    }
}