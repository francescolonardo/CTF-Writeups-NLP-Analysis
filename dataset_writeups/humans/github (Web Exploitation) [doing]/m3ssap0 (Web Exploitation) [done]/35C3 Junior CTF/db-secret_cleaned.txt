Analyzing `http://35.207.189.79/pyserver/server.py` some interesting snippets can be discovered.

The vulnerable functionality is the following, because the query contains parameters replaced and not sanitized.

[Python Flask API: Retrieve projects from the database based on the sorting criteria and offset value. Verify user is an admin and return the result as a JSON response]

To obtain the `token` value, a login with `admin` user must be performed. The `token` will be set into the cookies. The login can be performed like in the [Logged In challenge](https://github.com/m3ssap0/CTF-Writeups/tree/master/35C3%20Junior%20CTF/Logged%20In).

The `DB_SECRET` variable, with the flag, is stored in another table that can be discovered in the following function.

[Python function: Initialize database with migration script and a secrets table containing a single row with a secret value]

At this point a SQL injection payload can be crafted and sent to the server. The complete request with SQL injection payload is the following.

[HTTP POST: request with SQL Injection payload to retrieve project secrets]

The answer will be the following.

[HTTP response: Server returns a JSON object with one element containing null values for keys code, content, created, lastModified, public, title, and type; a non-null value for the key userName with the value of the flag]

So I got the flag.
