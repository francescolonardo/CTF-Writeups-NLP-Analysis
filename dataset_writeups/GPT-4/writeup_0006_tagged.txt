Title: Command Injection via Unsuspecting Image Conversion
Primary topic: Web Exploitation
Secondary topic: Command Injection
Tools used: None
Keywords: image conversion, payload, semicolon, directory contents, flag

#overview
In this CTF writeup, the author describes how they discovered a command injection vulnerability in a web application that allowed users to upload images and convert them to different formats. By injecting a command into the image conversion parameters, the author was able to execute arbitrary commands on the server and discover the flag needed to complete the challenge.

#analysis
The author noticed that the application used a command-line tool on the server-side to perform the conversion process. They crafted a payload that included a semicolon to separate the original conversion command from their injected command, which in this case was to list the contents of the server's directory. After submitting the payload through the image conversion form, the application returned the output of the injected command, revealing the contents of the server's directory. The author was able to locate the flag for the Web Exploitation challenge by further exploring the server's directory structure and executing additional commands.

#attack_execution
The author's payload looked like `convert input.jpg output.png; ls`. This executed both the conversion command and the injected command to list the directory contents. The vulnerability was caused by the application's failure to properly validate and sanitize user input when interacting with command-line tools on the server-side.

[CODE_REMOVED]

This CTF writeup highlights the importance of properly validating and sanitizing user input, especially when interacting with command-line tools on the server-side. Command injection vulnerabilities can lead to serious security risks, allowing attackers to execute arbitrary commands on the server and gain unauthorized access to sensitive information.