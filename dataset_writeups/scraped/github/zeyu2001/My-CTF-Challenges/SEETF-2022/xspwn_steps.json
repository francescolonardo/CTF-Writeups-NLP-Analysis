{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "There is a Use After Free (UAF) when deleting a node, with the HEAD never updating if the first index is removed."
            },
            {
                "StepNumber": 2,
                "StepString": "We can control `HEAD->name` by overwriting it in the next `malloc()` call in `insertSorted()`."
            },
            {
                "StepNumber": 3,
                "StepString": "In WASM, ASLR doesn't exist. We can therefore predict the address where our XSS payload will be inserted - this information can be obtained by debugging with Chrome DevTools."
            },
            {
                "StepNumber": 4,
                "StepString": "The `name` is written to memory, regardless of whether it passes the XSS check in `validateJared()`. We can exploit this by first 'inserting' our XSS payload then overwriting the `HEAD->name` to the address the XSS payload. `getNameAtIndex(0)` will then return the XSS payload when displaying the table."
            },
            {
                "StepNumber": 5,
                "StepString": "We can set a breakpoint after the `malloc` call and before the `strcpy` call. `$var8` is set immediately after `call $dlmalloc` - this would be the pointer to the newly allocated memory where the payload will be stored."
            },
            {
                "StepNumber": 6,
                "StepString": "The index is randomized, giving us a 10% chance of success. We could simply execute this multiple times until the index is 0."
            }
        ]
    }
}