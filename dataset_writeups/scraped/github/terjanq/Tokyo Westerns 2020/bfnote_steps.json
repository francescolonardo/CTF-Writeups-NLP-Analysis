{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Identified the application was protected by DOMPurify in version 2.0.16."
            },
            {
                "StepNumber": 2,
                "StepString": "Learned of an existing bypass in Chrome for the version of DOMPurify the application was using, which abused strange behaviors of `<math>` elements."
            },
            {
                "StepNumber": 3,
                "StepString": "Used the provided bypass and attempted to mutate the element in order to bypass the sanitizer."
            },
            {
                "StepNumber": 4,
                "StepString": "Ran a JavaScript snippet to test different elements for vulnerabilities with the DOMPurify sanitizer and `<math>` element bypass."
            },
            {
                "StepNumber": 5,
                "StepString": "Identified a mutation with the `<table>` element that could be simplified to create the exploit."
            },
            {
                "StepNumber": 6,
                "StepString": "Created a payload to leak cookies to the server by utilizing the mutation found earlier."
            },
            {
                "StepNumber": 7,
                "StepString": "Identified that the challenge seemed to involve reCAPTCHA, indicating the previous solution may not have been intended and deciding to look for another way to solve the challenge."
            },
            {
                "StepNumber": 8,
                "StepString": "Realized the application was simulating a Brainf*ck decompiler, which had protection against `<` and `>` characters with a `replaceAll` function."
            },
            {
                "StepNumber": 9,
                "StepString": "Understood that the `writeOutput` function could potentially be invoked while the program was still running, which could lead to unreplaced `<` and `>` characters provided the function was not called."
            },
            {
                "StepNumber": 10,
                "StepString": "Used DOM Clobbering to bypass the `CONFIG.unsafeRender` check."
            },
            {
                "StepNumber": 11,
                "StepString": "Injected two `reCAPTCHA` buttons to manipulate the `statusCode`."
            },
            {
                "StepNumber": 12,
                "StepString": "Implemented a trick to bypass `innerText` resetting the prepared CONFIG clobbering in the payload."
            },
            {
                "StepNumber": 13,
                "StepString": "Crafted a final payload that exploits the bypass and rewrites the document to `/terjanq/`."
            }
        ]
    }
}