[
    "Perform a GET-based CSRF through a top-level navigation.",
    "Create a tar archive with all the uploaded files.",
    "Craft a payload.",
    "Used '__proto__' as the username parameter",
    "Identified a Server Side Request Forgery (SSRF) vulnerability.",
    "Or replace 'admins' with '../.env' in the route.",
    "Identified an admin bot script provided by the challenge.",
    "Trigger the 'window.open' function with the payload",
    "Attempt to inject code with an embedded script",
    "Reverse shell is obtained on the target system.",
    "Fetched the flag.",
    "Try SQL Injection on the data passed using fragment values",
    "Find that content of the note is reflected in the source code",
    "Sensitive, user-specific data could be read if /api/filter endpoint returns based on these cookies",
    "Generate and test the payload",
    "Look into the provided source code to understand how the application works.",
    "The one-liner creates a malicious 'id' payload",
    "Replace the multiple URL opens with actual browser window opens.",
    "Understand that it performs an HTTP GET call.",
    "Open the Browser Devtools",
    "Examined source code of 'santa_mon.sh' program.",
    "Break the loop.",
    "Find that the login process is performed via a JavaScript file (scripts/login.js).",
    "Included a 'uri' parameter with a malformed path, such as //ATTACKER-URL, in the request.",
    "Include 'payload' as the data",
    "Understand that gaining a shell inside the docker container could provide more privileges.",
    "Checking if the character's index matches the desired one.",
    "Recognize that the hash can be cracked.",
    "Note that the Go microservice uses the Beego web framework",
    "Wait for the bot to visit the URL.",
    "Discover the 'mock()' function.",
    "Access the website.",
    "Extracted the flag.",
    "Found a snippet of JavaScript code containing database credentials and a 'JSESSIONID' cookie.",
    "Replace each integer into a URL."
]