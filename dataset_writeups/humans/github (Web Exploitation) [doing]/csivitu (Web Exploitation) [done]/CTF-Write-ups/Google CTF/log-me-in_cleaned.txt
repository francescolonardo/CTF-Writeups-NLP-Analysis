When you examine the source code, you'll notice the application uses `bodyParser.urlencoded` with `extended: true`. This allows arrays and objects to be passed in the request body. In the `/login` POST route, the output has not been stringified, so it is possible to pass an object in the query statement.
[JavaScript code: Configure bodyParser and create SQL query]

The exploit is to pass an object as the password parameter, with a known attribute. This causes the SQL query to be evaluated in a way that allows logging in without knowing the correct password. We'll refer to the official `mysql` docs for more information on how objects are converted into comma-separated attributes in SQL queries.

The final payload for this exploit is:
[HTTP POST request: Send payload with object as password]

From here, you can just take the cookie you received, and use that to visit `/flag`. Alternatively, you can use a Python script to automate the process:
[Python script: Send payload, get the flag, and print it]

You can run this script and use `grep` to find the flag.
