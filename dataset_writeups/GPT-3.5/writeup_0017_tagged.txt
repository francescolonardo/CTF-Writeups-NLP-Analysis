Title: SQL Injection in Login Functionality
Primary topic: Web Exploitation
Secondary topic: SQL Injection
Tools used: None
Keywords: user input, payload, authentication, database

#context
During a CTF competition, I encountered a web application that allowed users to login to the system. Given the potential security risks associated with user input, I suspected that the application might be vulnerable to SQL Injection, a type of vulnerability that allows attackers to manipulate SQL queries executed by the application.

#discovery
To test for SQL Injection, I crafted a malicious payload containing a SQL Injection attack string, such as ' OR 1=1 --, and submitted it to the application's login form. If the application allowed the payload to execute and bypassed the authentication process, it would confirm the presence of a SQL Injection vulnerability.

#exploitation
Upon submitting the crafted payload to the application, it indeed executed and bypassed the authentication process, confirming the vulnerability. To obtain the flag for the Web Exploitation challenge, I needed to use the SQL Injection vulnerability to extract sensitive information from the database.

#code
' OR 1=1 --

#exploitation
After researching the application's database structure and available resources, I crafted a suitable payload containing a SQL Injection attack string that would extract the flag from the database, such as ' UNION SELECT flag FROM flags --. The server successfully recognized the payload and responded with the flag for the Web Exploitation challenge.

#countermeasures
This CTF writeup highlights the importance of properly securing web applications against SQL Injection vulnerabilities by implementing proper input validation and output encoding controls, using parameterized queries, and validating user input. By exploiting the vulnerability, I was able to extract sensitive information, execute malicious code, and complete the Web Exploitation challenge.
