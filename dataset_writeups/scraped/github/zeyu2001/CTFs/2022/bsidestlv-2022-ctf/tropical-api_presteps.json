[
    "Read the given challenge which involves investigating an unintentionally exposed internal API and finding a flag",
    "Go through the provided source code of the backend",
    "Spot an interesting behavior with 'RegExp.prototype.test()' used with regex containing the global flag. This trick helps continue the search from the previously found index onwards and it can allow multiple instances of 'fqdn'",
    "Find a way around the restrictive regex check by submitting same payload multiple times",
    "Convince the server to communicate with arbitrary URL by bypassing regex using the provided loophole",
    "Understand that the 'Buffer' needs to be 16 bytes, meaning you need at least 32 characters in your 'fqdn'",
    "Leverage that 'Buffer' stops when it encounters the first non-hexadecimal character",
    "Derive a URL that starts with 32 bytes of hexadecimal characters using leading 0's and convert your public IP address to octal form using an octal IP address converter",
    "Ensure the trailing '.ping-proxy/ping' turns into a URL fragment by appending '#' at the end of the 'fqdn', which simply makes the final URL your public IP address",
    "Receive the request and observe the flag in the request header",
    "Claim the flag to complete the challenge"
]