{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Connected to the provided web site and was presented with an authentication form displaying the user's IP."
            },
            {
                "StepNumber": 2,
                "StepString": "Examined the HTML source code of the page which revealed default credentials."
            },
            {
                "StepNumber": 3,
                "StepString": "Used the default credentials to login."
            },
            {
                "StepNumber": 4,
                "StepString": "Observed User-Agent details and an image printed as a response to the login."
            },
            {
                "StepNumber": 5,
                "StepString": "Attempted to alter the User-Agent during authentication and received a SQL error, therefore SQL injection via User-Agent string was possible."
            },
            {
                "StepNumber": 6,
                "StepString": "Decided to leak the database name but had to devise a new strategy as this query was of type 'INSERT'."
            },
            {
                "StepNumber": 7,
                "StepString": "Implemented an error-based approach using 'Updatexml()' in the SQL payload."
            },
            {
                "StepNumber": 8,
                "StepString": "Used the following payload: 'or updatexml(0,concat(0x7e,(SELECT database())),0) or'', '127.0.0.1', 'admin') #."
            },
            {
                "StepNumber": 9,
                "StepString": "Received an XPATH syntax error that contained the database name, which was used to compose the flag."
            }
        ]
    }
}