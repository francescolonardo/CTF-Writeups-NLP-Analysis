{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Analyzed the source code which indicates that for testing locally, `admin:admin` is the basic authentication credentials"
            },
            {
                "StepNumber": 2,
                "StepString": "Identified an interesting functionality of the app that modifies the `services` object when POST-ing JSON to the `/change_status` endpoint using the `fast-json-patch`"
            },
            {
                "StepNumber": 3,
                "StepString": "Researched and identified that a prototype pollution vulnerability exists in `applyPatch()`"
            },
            {
                "StepNumber": 4,
                "StepString": "Realized that by POST-ing certain data (including `constructor/prototype/offline`), every object will now have the `offline` attribute"
            },
            {
                "StepNumber": 5,
                "StepString": "Identified potential for serious exploits like RCE due to the presence of prototype injection vulnerability in server-side code"
            },
            {
                "StepNumber": 6,
                "StepString": "Explored the potential of achieving RCE through exploiting the `ejs` module, by leveraging the `constructor/prototype/outputFunctionName`"
            },
            {
                "StepNumber": 7,
                "StepString": "Identified that `ejs` is used as a library for templating in web applications"
            },
            {
                "StepNumber": 8,
                "StepString": "Tested locally for potential RCE by POST-ing data that includes `constructor/prototype/outputFunctionName`"
            },
            {
                "StepNumber": 9,
                "StepString": "Checked the output reflected in the `style.css` file after executing `whoami >> src/static/style.css`"
            },
            {
                "StepNumber": 10,
                "StepString": "Deployed the provided Docker image and examined the `readflag` binary"
            },
            {
                "StepNumber": 11,
                "StepString": "Attempted to open a bind shell on port 4444 to enable running the `readflag` binary"
            },
            {
                "StepNumber": 12,
                "StepString": "Attempted to connect to the real server"
            },
            {
                "StepNumber": 13,
                "StepString": "Set up a `ngrok` TCP forwarder and modified the RCE to trigger a reverse shell"
            },
            {
                "StepNumber": 14,
                "StepString": "Used the public endpoint given by `ngrok` to catch the reverse shell and retrieved the flag"
            }
        ]
    }
}