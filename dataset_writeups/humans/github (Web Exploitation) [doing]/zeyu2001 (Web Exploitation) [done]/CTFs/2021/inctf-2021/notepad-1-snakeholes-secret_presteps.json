[
    "Identify the website's vulnerability to XSS.",
    "Examine the init() function of the website, which changes the displayed note's innerHTML to the /get response on load.",
    "Discover the user can add notes via a POST request to /add.",
    "Examine the /get and /add endpoints and their relationship with user's ID cookie in the Notes map.",
    "Recognize the XSS prevention methods implemented by the site - cookies are set to prevent XSS for all API endpoints.",
    "Realize that although XSS can be performed, it would only affect the currently logged in user and not the admin.",
    "Examine the /find endpoint which takes the condition, startsWith , endsWith, and debug parameters.",
    "Discover that the /find endpoint can be used for Response Header Injection.",
    "Use the /find endpoint to inject a Set-Cookie header to set the admin's ID cookie to your own session.",
    "Preserve the original admin's ID by setting the Path of the custom cookie to /get which allows to use the original admin ID in the /find endpoint.",
    "Create a XSS payload that fits within the 75 character limit to be stored. In this case, JavaScript code using `document.cookie` to control variables.",
    "Use the /find endpoint to encode the cookie-characters as response headers.",
    "Create a Python script to generate URLs that set cookies with parts of manipulated JavaScript code.",
    "Modify the output of the Python code to look like a JavaScript script to be executed.",
    "In this script, manipulate the multiple URL opens to actual browser window opens.",
    "Set malicious cookies by having the user (admin) visit these URLs.",
    "Redirect the user to the main site.",
    "The malicious JavaScript code is executed on client's side, which fetches an exploitative script and runs it in the background.",
    "Perform a CSRF to the /find endpoint to retrieve the flag and make a callback to our server with the data.",
    "Extract the flag from the response received on the callback URL."
]