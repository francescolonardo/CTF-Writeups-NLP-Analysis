[
    "Noticed the feature using SQLite through filters and SQL statements",
    "Recognize that 10 records are created by tar utility by default.",
    "Import 'io/ioutil'.",
    "Located 'flag.txt'.",
    "Force the debugging private key in the link.",
    "Execute an XSS attack.",
    "Sign the token using the public key.",
    "Noticed that three successful purchases of 'cheap' had the same prefix.",
    "Detect open debugging ports.",
    "Open the web browser.",
    "Understand that the challenge focuses on exploiting dynamic renderers",
    "Use the identified class (subprocess.Popen) to read the content of 'flag.txt'",
    "Checked the docker files.",
    "Concatenate possible characters to the end of the flag.",
    "Analyze the source code of the page.",
    "Uploaded the .php16 file.",
    "The bash script would only spawn the shell if the caller is root",
    "Identified potential vulnerabilities.",
    "Created a Python script that opens a reverse shell",
    "Note that mode=filter means any reflected XSS will be filtered and not executed.",
    "Identify functionalities accessed by authenticated users.",
    "Realized '$text' was passed into 'exec' leading to potential remote code execution.",
    "Identified vulnerability to log4j 2.14.1.",
    "Set up a local HTTP proxy using cURL to accommodate the complex GET request.",
    "Execute ffuf to fuzz the challenge site.",
    "CSRF payload is created",
    "Prepare a PATCH request for the new user\u2019s role.",
    "Unlock the flag and source code using the uploaded PDFs.",
    "Understood how MySQL executes query portions inside comments.",
    "Understand that HTML files are downloaded with random filenames.",
    "Successfully restore the source code files on local machine.",
    "Realize that YAML parsing 'NO' as False allows bypassing escapeshellargs.",
    "Enable running the `readflag` binary using the bind shell.",
    "Repeated the Javascript injection to fetch the flag.",
    "Base64 encode the private key."
]