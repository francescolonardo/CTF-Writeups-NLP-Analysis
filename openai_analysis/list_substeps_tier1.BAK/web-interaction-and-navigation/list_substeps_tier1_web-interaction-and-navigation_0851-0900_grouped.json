{
    "Page Visits and Navigations": [
        "Visit the rule page.",
        "Read the page carefully.",
        "Keep reading until reaching the line at the bottom."
    ],
    "Website Functionality Inspection": [
        "Inspect the functionality of the website.",
        "Examine the URLs associated with different users and photos.",
        "Try to load a webpage associated with the 'admin' user."
    ],
    "Data Transmission and Manipulation": [
        "Discover that the site restricts images to the same origin.",
        "Send image data externally using the 'src' attribute of the generated script tag.",
        "Split the data because it exceeded the length limit for the URL.",
        "Send the URLs to the bot.",
        "Display the data in HTML to obtain the flag."
    ],
    "HTTP Requests and Payload Modification": [
        "Send a POST request.",
        "Send the payload via POST request.",
        "Change the value of 'likeCookie' to true.",
        "Send a GET request to the target URL with each possible 'likeCookie' value (from 0 to 19)."
    ],
    "Browser Rendering and Exploitation": [
        "Observe the rewriting and forwarding of the request to the pre-renderer at `http://renderer:3000`.",
        "Infer that Chrome is used for rendering JavaScript.",
        "Set the host header.",
        "Ensure that the renderer visits our attacker-controlled site.",
        "Redirect the browser using the `Location` header.",
        "Create a `redirect.php` file.",
        "Ensure that visiting `redirect.php` redirects the renderer's browser to the second exploit page.",
        "Create an iframe within `exploit.html` with the source set to `http://localhost:3000/render?url=http://api:8000/`.",
        "Bypass SOP.",
        "Exploit the fact that the current site and the iframe's source are both `http://localhost:3000`.",
        "Receive the contents of the iframe."
    ],
    "Localization and Language Handling": [
        "Discover that the 'language' field is set according to the parameter passed via the POST handler for '/localization-language'.",
        "Send a POST request to the '/localization-language' endpoint.",
        "Send a GET request to '/localisation-file'."
    ],
    "Flask Webpage Exploration": [
        "Identify a Flask webpage",
        "Recognize the usage of GET request arguments",
        "Formulate a GET request",
        "Construct another GET request",
        "Observe that the username is reflected back into the username field.",
        "Find that 'notes.count' is being executed through websockets.",
        "Validate that only one result is returned."
    ],
    "File Upload and Exploitation": [
        "Initialize a GET request.",
        "Target the URL for the GET request.",
        "Send POST request to upload the generated file.",
        "Send a POST request to upload the created file.",
        "Send a GET request to '/download_all' to trigger the exploit."
    ],
    "CTF Website Access": [
        "Accessed the Cowsay as a Service Challenge website",
        "Executed a HTTP POST request",
        "Set the settings"
    ]
}