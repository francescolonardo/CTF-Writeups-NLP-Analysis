{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Examine the website source to find routes /login and /adminNames.",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Inspect the HTML source code of the website."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Identify the /login and /adminNames routes within the source code."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Fill out the login form and inspect the Network Tab in your browser to find the token header containing a JWT.",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Access the /login route of the website."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Complete the login form with appropriate credentials."
                    },
                    {
                        "SubstepNumber": 2.3,
                        "SubstepString": "Open the Network Tab in your browser's developer tools."
                    },
                    {
                        "SubstepNumber": 2.4,
                        "SubstepString": "Locate and examine the HTTP request made to the server."
                    },
                    {
                        "SubstepNumber": 2.5,
                        "SubstepString": "Find and extract the token header containing a JWT."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Decode the JWT to find the payload, then apply the rot13 cipher to the admin value.",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Use a JWT decoding tool to decode the JWT."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Retrieve the payload from the decoded JWT."
                    },
                    {
                        "SubstepNumber": 3.3,
                        "SubstepString": "Apply the rot13 cipher to the admin value in the payload."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Visit the /adminNames route to download a file containing a GitHub URL, and find the list of admin usernames in the repository.",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Access the /adminNames route of the website."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Download the file from the /adminNames route."
                    },
                    {
                        "SubstepNumber": 4.3,
                        "SubstepString": "Extract the GitHub URL from the downloaded file."
                    },
                    {
                        "SubstepNumber": 4.4,
                        "SubstepString": "Access the GitHub repository using the extracted URL."
                    },
                    {
                        "SubstepNumber": 4.5,
                        "SubstepString": "Identify and retrieve the list of admin usernames from the repository."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Modify the JWT payload with a rot13 encrypted admin username and change the admin value to the rot13 encrypted string for true.",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Update the JWT payload with the rot13 encrypted admin username."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Change the admin value in the payload to the rot13 encrypted string for 'true'."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Find the JWT secret by trying the /getFile?file=../.env route to download the .env file.",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Access the /getFile?file=../.env route of the website."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Attempt to download the .env file from the specified route."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Send a GET request to the /admin route with the JWT in the Authorization header.",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Craft a GET request targeting the /admin route."
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Include the JWT in the Authorization header of the request."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "rot13 decrypt the received flag to get the real flag.",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Apply the rot13 decryption algorithm to the received flag."
                    },
                    {
                        "SubstepNumber": 8.2,
                        "SubstepString": "Retrieve the real flag from the decrypted text."
                    }
                ]
            }
        ]
    }
}
