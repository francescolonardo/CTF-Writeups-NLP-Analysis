[
    "Examining the source code found that both 'RS256' and 'HS256' algorithms are allowed for decryption in 'challenge/helpers/JWTHelper.js' indicating a potential JWT exploit (CVE-2016-5431/CVE-2016-10555).",
    "Made an account on the website to get the JWT Token and public key by copying the 'session' cookie in the browser's developer tools.",
    "Used JWT.io or jwt_tool.py to decode the cookie.",
    "The public key was found to be encoded in the JWT.",
    "Modified the JWT to use the RS256-to-HS256 exploit to gain access as an admin user.",
    "Used python3 jwt_tool.py to perform the RS256-to-HS256 exploit.",
    "Swapped the JWT token with the admin token in the browser's developer tools to gain admin access.",
    "Found potential Server-Side Template Injection (SSTI) vulnerability in 'challenge/routes/index.js' and 'challenge/helpers/CardHelper.js'.",
    "Exploited the vulnerability using ninjucks SSTI to read the flag from the '/flag' file by adding the payload '{{range.constructor(\"return global.process.mainModule.require('child_process').execSync('cat /flag*')\")()}}'"
]