<h1>/[a-z().]/</h1>

<p><code>js
if (code &amp;&amp; code.length &lt; 200 &amp;&amp; !/[^a-z().]/.test(code)) {
    try {
      const result = vm.runInNewContext(code, {}, { timeout: 500 });
      if (result === 1337) {
        output = process.env.FLAG;
      } else {
        output = 'nope';
      }
    } catch (e) {
      output = 'nope';
    }
  } else {
    output = 'nope';
  }
</code></p>

<p>We have to create a payload that when ran in the context will return 1337. My first solution was:
<code>escape.name.concat(eval.length).repeat(eval.name.concat(eval).repeat(eval.name.concat(eval.length).length).concat(escape.name).length).length</code> which is 141 characters long. It uses factorization of 1337 which is 7*191</p>

<p>Then I improved it to: 
<code>escape.name.concat(eval.length).repeat(escape(escape(escape(escape(escape(escape(escape(unescape))))))).length).length</code> which is 118 characters long</p>

<p>Then I just was poking around and the best I got for 7*191 was:
<code>console.profile.name.repeat(escape(escape(eval).sup().bold().link().link()).length).length</code> (90 characters)</p>

<p>However my best payload doesn't use the factorization:
<code>escape(escape(eval).repeat(escape.name.sup().length)).concat(eval.name.link()).length</code> and is only <strong>85 characters long!</strong></p>

<p>One could possibly bruteforce the shortest solution but no fun there! :)</p>

<p>P.S <br />
splitline shared on discord a nice way to solve by joining 13 and 37 with the payload: <code>eval(escape(eval.name.fixed().length).concat(unescape(unescape).length))</code> (72)   </p>

<p>I improved my best payload to: <code>escape(escape().bold().repeat(escape(eval).length)).strike().length</code> and that is only 67 characters long!</p>

<p>The flag:
<strong>HarekazeCTF{sorry<em>about</em>last<em>year's</em>js_challenge...}</strong></p>
