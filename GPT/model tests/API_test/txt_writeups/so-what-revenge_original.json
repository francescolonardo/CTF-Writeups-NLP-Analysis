{
    "AttackModel": {
        "NameOfTheChallenge": "So What? Revenge",
        "AttackerCapabilities": [
            "Knowledge of assembly language",
            "Understanding of shellcoding",
            "Ability to evade input filters"
        ],
        "Target": {
            "Type": "Web Application",
            "Vulnerabilities": [
                "Lack of input validation",
                "Insecure filtering of user input"
            ],
            "SecurityMeasures": [
                "Input filtering"
            ]
        },
        "Steps": [
            {
                "StepNumber": 1,
                "Description": "Evading the input filters",
                "ToolsUsed": null,
                "StepDetails": {
                    "Hypothesis": "The attacker aims to bypass the input filters in order to input shellcode.",
                    "Action": "The attacker submits assembly code that uses uppercased characters to evade the filter on '/bi/sh'. They also use the .set directive to create the 'win' label by setting its value to the current position.",
                    "Result": "The assembly code successfully evades the input filters.",
                    "Success": "Success",
                    "FailingReason": null
                }
            },
            {
                "StepNumber": 2,
                "Description": "Crafting the shellcode",
                "ToolsUsed": null,
                "StepDetails": {
                    "Hypothesis": "The attacker aims to create a shellcode that spawns a /bin/sh shell.",
                    "Action": "The attacker creates a shellcode using assembly instructions that perform the necessary operations to spawn a shell.",
                    "Result": "The shellcode is successfully created.",
                    "Success": "Success",
                    "FailingReason": null
                }
            },
            {
                "StepNumber": 3,
                "Description": "Evading the filter on digits 0 to 5",
                "ToolsUsed": null,
                "StepDetails": {
                    "Hypothesis": "The attacker aims to bypass the input filter on digits 0 to 5 to include them in the shellcode.",
                    "Action": "The attacker uses mathematical operations to arrive at the number needed in the shellcode, avoiding the use of the banned digits.",
                    "Result": "The shellcode is successfully modified to include the necessary values without using the banned digits.",
                    "Success": "Success",
                    "FailingReason": null
                }
            },
            {
                "StepNumber": 4,
                "Description": "Exploiting the unintended solution",
                "ToolsUsed": null,
                "StepDetails": {
                    "Hypothesis": "The attacker realizes that they can write directly to the libyour_input.so file without writing assembly code.",
                    "Action": "The attacker creates a linker script that links libflag.so, allowing them to execute the win() function.",
                    "Result": "The win() function is successfully executed, providing the flag.",
                    "Success": "Success",
                    "FailingReason": null
                }
            }
        ]
    }
}