This challenge was heavily inspired by [Favorite Emojis - ACSC 2021](https://ctf.zeyu2001.com/2021/asian-cyber-security-challenge-acsc-2021/favorite-emojis).

The challenge was centred around the unsafe use of dynamic renderers such as Prerender, which are pretty much SSRF-as-a-service.

The main idea is that we could trick the dynamic renderer to render a sensitive internal endpoint by using a custom host header, since the Nginx configuration rewrites the URL using the host header as follows:

When I attempted this challenge, many participants used client-side redirects to get the renderer to display the flag in the response body.

This time, I added some extra checks to force the players to obtain XSS within the Chromium renderer and make use of the `localhost:3000` origin to bypass the Same Origin Policy.

1. `validateUrls` is a naive URL validation mechanism that checks whether the URL begins with `http://app`. This can be easily bypassed by using the `username:password@hostname` URL format.

To bypass this, use `Host: app@ATTACKER_URL`

2. `noScriptsPlease` is also a naive "script remover" that removes `<script>` tags. This can be easily bypassed by using `onload` event handlers and the like.

3. The Nginx frontend will replace any flags in the response body. Therefore, this challenge cannot be trivially solved by using redirects to `http://app/login.php`. One must achieve XSS within the `localhost:3000` origin, and use the `localhost:3000/render?url=` feature to bypass the same-origin policy and read the flag.

Host the `outer.html` and `inner.html` files, then make a request to `outer.html`:
