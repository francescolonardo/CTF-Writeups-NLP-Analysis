{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Import necessary libraries (`requests` and `string`) and initialize an empty flag variable."
            },
            {
                "StepNumber": 2,
                "StepString": "Define the search domain containing all possible characters and set challenge-specific variables."
            },
            {
                "StepNumber": 3,
                "StepString": "Enter an infinite loop iterating through each character in the search domain."
            },
            {
                "StepNumber": 4,
                "StepString": "Create a payload containing a SQL injection query using the current flag and character."
            },
            {
                "StepNumber": 5,
                "StepString": "Send an HTTP POST request to the URL with the payload as the data."
            },
            {
                "StepNumber": 6,
                "StepString": "Check if the expected response text is found in the received response."
            },
            {
                "StepNumber": 7,
                "StepString": "If the expected response is found, add the character to the flag and print it."
            },
            {
                "StepNumber": 8,
                "StepString": "Break the loop once the flag is found, exploiting the SQL Injection vulnerability."
            }
        ]
    }
}