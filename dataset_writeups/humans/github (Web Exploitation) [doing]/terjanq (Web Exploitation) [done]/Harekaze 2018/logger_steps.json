{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Identify the provided file is a packet capture (.pcap) file."
            },
            {
                "StepNumber": 2,
                "StepString": "Use Wireshark to read the packet capture file."
            },
            {
                "StepNumber": 3,
                "StepString": "Search for HTTP packets within the packet logs."
            },
            {
                "StepNumber": 4,
                "StepString": "Locate the POST requests to '/login.php' and note the presence of 'username', 'cnonce', and 'hash' parameters."
            },
            {
                "StepNumber": 5,
                "StepString": "Detect that the JavaScript file 'bundle.js' is used to calculate the hash value."
            },
            {
                "StepNumber": 6,
                "StepString": "Identify the existence of a WebSocket tunnel from the 'HTTP/1.1 101 Switching Protocols' packet."
            },
            {
                "StepNumber": 7,
                "StepString": "Analyze the JavaScript bundle to understand how the hash is calculated. Identify needed parameters: username, nonce, and cnonce."
            },
            {
                "StepNumber": 8,
                "StepString": "Observe that the password is not given directly but might be related to the hash."
            },
            {
                "StepNumber": 9,
                "StepString": "Inspect the injected JavaScript code that is responsible for WebSocket communication."
            },
            {
                "StepNumber": 10,
                "StepString": "Understand that the client-server communication uses an encoding function which involves two keys - 'key' and 'key2'."
            },
            {
                "StepNumber": 11,
                "StepString": "Note that client's 'User-Agent' value is used in the encoding function and this value can be fetched from HTTP headers."
            },
            {
                "StepNumber": 12,
                "StepString": "Validate the encoding function by checking if it produces the same encoded message as captured in unmasked WebSocket packets in Wireshark."
            },
            {
                "StepNumber": 13,
                "StepString": "Determine that 'key2' is a shuffled version of 'key'. This shuffle is based on seeded random values tied to the 'User-Agent'."
            },
            {
                "StepNumber": 14,
                "StepString": "Identify that an attacker has set up a keylogger which sends each pressed key to an external server as an encoded message."
            },
            {
                "StepNumber": 15,
                "StepString": "Separate WebSocket packets into ones that are related to sent messages (particularly user input) and unrelated ones such as 'pings'."
            },
            {
                "StepNumber": 16,
                "StepString": "Dump the related WebSocket packets for further analysis (decoding)."
            },
            {
                "StepNumber": 17,
                "StepString": "Briefly analyze the encoding function to get the basic idea for decoding messages."
            },
            {
                "StepNumber": 18,
                "StepString": "Start the decoding process by reversing the function: encoded_arr.split('').map( x => key.indexOf(x) ).reverse()."
            },
            {
                "StepNumber": 19,
                "StepString": "Continue the decoding process by solving for 'c' in the equation: c = seed, c0 = c + prev_encoded_arr[0] * 256, encoded_arr[0] == c0 % 58. Note that only 'encoded_arr[0]' is known, and 'seed' is the actual character of 'msg' that we are trying to find."
            },
            {
                "StepNumber": 20,
                "StepString": "Use brute force to solve for a set of possible solutions for 'c' and 'prev_encoded_arr[0]'. Narrow down the solutions by progressing through succeeding elements of 'prev_encoded_arr[]'."
            },
            {
                "StepNumber": 21,
                "StepString": "Implement a recursive function to retrieve one character from 'msg' for each WebSocket packet."
            },
            {
                "StepNumber": 22,
                "StepString": "Repeat the process for characters in each WebSocket packet."
            },
            {
                "StepNumber": 23,
                "StepString": "Remove unwanted characters from the decoded message and extract the final flag."
            }
        ]
    }
}