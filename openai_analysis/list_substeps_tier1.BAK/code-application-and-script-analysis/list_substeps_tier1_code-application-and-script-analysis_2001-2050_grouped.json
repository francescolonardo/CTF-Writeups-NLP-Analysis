{
    "HTTP Requests": [
        "Use the 'requests' library to send HTTP GET requests.",
        "Transmit it safely in an HTTP GET request to the attacker's server."
    ],
    "Loops and Iterations": [
        "Create a for loop to iterate through the numbers from 1 to 20."
    ],
    "Web Application Testing": [
        "Find that Vitepress running in dev mode enables CORS.",
        "Accessed the Cowsay as a Service Challenge website",
        "Used 'shell' as the setting name in the POST request",
        "The action of setting 'shell=true' made the command run within a shell",
        "Infer that Chrome is used for rendering JavaScript.",
        "Create an iframe within `exploit.html` with the source set to `http://localhost:3000/render?url=http://api:8000/`.",
        "Notice that the JWT token is checked in the response for '/localisation-file'.",
        "Verify that the 'language' parameter is indeed changed to 'flag.txt'.",
        "Recognize a Server-Side Template Injection (SSTI) vulnerability",
        "Identify the index of `<class 'subprocess.Popen'>` as 258",
        "Craft an SQL injection payload.",
        "Find that 'notes.count' is being executed through websockets.",
        "Identify the code normalizes file paths.",
        "Recognize the importance of bypassing file extension restrictions for a successful attack.",
        "Create the file '--checkpoint-action=exec=sh shell.txt'.",
        "Understand the purpose of this file: pollute the arguments for tar command.",
        "Reverse shell is obtained on the target system.",
        "Reveal mapping in the Apache configuration file.",
        "Passed the input to the injection point at 'GET /legacy_invoice_system/*'.",
        "Used the command 'sqlmap -r invoice.req --tamper tamper.py --threads 10 -T news_article --dump'.",
        "Described the 'words' table using the `1'; DESCRIBE tablename;` command.",
        "Described the '1919810931114514' table using the `1'; DESCRIBE tablename;` command.",
        "Used `1';EXECUTE IMMEDIATE CONCAT('SEL', 'ECT * FROM words');` to retrieve data from the 'words' table.",
        "Used ``1';EXECUTE IMMEDIATE CONCAT('SEL', 'ECT * FROM `1919810931114514`');`` to retrieve data from the '1919810931114514' table.",
        "The one-liner creates a malicious 'id' payload",
        "Read the 'flag.txt' file using the root shell",
        "Determine it potentially allows command injection.",
        "Check redirection in the window.",
        "Use the 'tryNumber' function.",
        "Implemented the UNION based SQL Injection",
        "Used 'username=test' or 1 UNION SELECT *, null from flag-- -&password=test' or 1 UNION SELECT *, null from flag-- -' as the injection payload",
        "Identify the POST request to /add for adding notes.",
        "Leverage a Local File Inclusion (LFI) vulnerability for Server Side Request Forgery (SSRF).",
        "Use a POST request to request 'file:///code/app.py'.",
        "Check if the value of <userID>_isAdmin key in Redis database is 'yes'.",
        "Craft a request to set the theme to '<?php phpinfo() ?>'.",
        "Identified potential vulnerabilities.",
        "Recognized that the user input is directly used in an SQL query.",
        "Identified lack of validation for 'Content-Length' headers as the cause of the vulnerability.",
        "Test basic payloads.",
        "Identify SQL injection is possible.",
        "Attempt SQL injection using MySQL comments in place of spaces.",
        "Test the SQL injections '/api/call_api.php?api=10.0.42.200/?search=admin_richard_lauren'/**/OR/**/'1'='1'.",
        "Test the SQL injections '/api/call_api.php?api=10.0.42.200/?search=admin_richard_lauren'/**/OR/**/'1'='2'.",
        "Write a script to bruteforce each of the hardcoded cookie names.",
        "Use hashlib, URLSafeTimedSerializer and TimestampSigner in Python.",
        "Started testing for potential XPath injection points in the application."
    ]
}