[
    "Review the code of the 'query_login_attempt' function.",
    "Exploit the vulnerability in the 'query_login_attempt' function.",
    "Inspect the code of the 'query_kill_time' function.",
    "Checked 'req.files' in check.js.",
    "'next()' was called in each iteration causing express to continue.",
    "Manipulated 'app.post('/upload' to process with invalid 'req.files[req.query.formid]'.",
    "Highlighted 'ExtFilterDefine 7f39f8317fgzip mode=output cmd=/bin/gzip'.",
    "Combined output filter.",
    "Used 'SetEnv LD_PRELOAD' to execute code when running gzip.",
    "Access and examine the source code of the website.",
    "Identified the condition that only PDF files containing 'ECHO' would be signed.",
    "Identified the 'openssl_verify' function in website source code.",
    "Understood the function is used to sign PDF files.",
    "Applied the retrieved signature to the second PDF.",
    "Notice the presence of a PHP eval function.",
    "Investigate the source code of the website.",
    "Look for any unusual strings.",
    "Notice the mention of `shell_exec` on the website.",
    "Guess that `shell_exec` might be allowed on the website.",
    "Run the command `echo shell_exec(\"../flag\");` on the website.",
    "Page contains some HTML and JavaScript.",
    "Identify a scoped style attribute.",
    "Identify a `navigator.battery.charging call` in the JavaScript.",
    "Deduce that style scoped only works in Firefox versions 21-54.",
    "The challenge entailed shellcoding in the context of PHP to make SQL queries under a sandbox environment.",
    "Identified the presence of a shared object entitled `shellme.so`.",
    "Reviewed the source code.",
    "Determined that sending a GET request with 'source' as a parameter reveals the source code.",
    "Identified from the source code that a POST request with 'shell' as a parameter echoes the input.",
    "Understood that the echoed input is sent to the `shellme()` function with a character limit of 1000.",
    "Determined that the function `shellme()` is defined in the shared object `shellme.so`.",
    "Tracked the function `shellme()` inside the `shellme.so` shared object file.",
    "Found that `shellme()` leads to the function `shell_this()`.",
    "Noticed the use of `SECCOMP_MODE_STRICT` seccomp sandbox.",
    "Determined that it allows only read, write, and exit syscalls before executing the input.",
    "Identified the use of strlen() function within the code.",
    "Realized this would truncate any shellcode at null bytes.",
    "Reviewed the PHP code closely.",
    "Identified that the File Descriptor (FD) for MySQL server connection is open before shellcode execution.",
    "Understood that the server is running php-cgi.",
    "Recognized the necessity to write a php-cgi header before executing the MySQL query.",
    "Constructed the MySQL query ensuring it follows the little-endian, 4 bytes format for length, used 1-byte for query type (0x3 for this specific query), and then added the actual query content.",
    "Utilized the environment to assemble and debug shellcode.",
    "Designed the shellcode.",
    "Employed the JMP - CALL - POP technique within the shellcode to acquire strings in the registers.",
    "Transformed relative JMPs into PLT type trampolines.",
    "This was done to prevent large JMPs containing null bytes.",
    "Introduced NOP Sled to efficiently manage oversized jumps.",
    "Created the shellcode ensuring it has no NULL bytes.",
    "Executed the verified and assembled shellcode."
]