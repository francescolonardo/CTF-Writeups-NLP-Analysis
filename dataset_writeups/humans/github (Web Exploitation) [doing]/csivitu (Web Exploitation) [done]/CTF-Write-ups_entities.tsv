-DOCSTART- -X- O O
This	O
Python	O
script	O
demonstrates	O
an	O
SQL	B-VULNERABILITY
Injection	I-VULNERABILITY
attack	O
against	O
the	O
web	O
application	O
's	O
database	B-TARGET_COMPONENT
to	O
solve	O
the	O
"	O
Taxi	O
Union	O
"	O
and	O
"	O
Gate	O
Keeper	O
"	O
challenges	O
.	O
The	O
script	B-TOOL_USED
performs	O
the	O
following	O
steps	O
:	O

[	O
Import	O
the	O
necessary	O
libraries	O
and	O
initialize	O
the	O
variables	O
.	O

Set	O
the	O
appropriate	O
URL	O
,	O
check	O
string	O
,	O
key	O
,	O
and	O
column	O
values	O
based	O
on	O
the	O
selected	O
challenge	O
(	O
either	O
"	O
Taxi	O
Union	O
"	O
or	O
"	O
Gate	O
Keeper	O
"	O
)	O
.	O

Iterate	O
through	O
each	O
character	O
in	O
the	O
domain	O
(	O
letters	O
,	O
digits	O
,	O
and	O
special	O
characters	O
)	O
while	O
searching	O
for	O
the	O
flag	O
.	O

For	O
each	O
character	O
,	O
create	O
an	O
SQL	O
injection	O
payload	O
that	O
checks	O
if	O
the	O
current	O
flag	O
value	O
concatenated	O
with	O
the	O
character	O
is	O
a	O
prefix	O
of	O
the	O
targeted	O
column	O
's	O
value	O
.	O

Send	O
an	O
HTTP	O
POST	O
request	O
to	O
the	O
URL	O
with	O
the	O
payload	O
as	O
the	O
form	O
data	O
.	O

If	O
the	O
check	O
string	O
is	O
found	O
in	O
the	O
response	O
,	O
it	O
means	O
the	O
character	O
is	O
part	O
of	O
the	O
flag	O
.	O
Add	O
the	O
character	O
to	O
the	O
flag	O
and	O
continue	O
iterating	O
through	O
the	O
domain	O
.	O

Repeat	O
the	O
process	O
until	O
the	O
entire	O
flag	O
is	O
discovered	O
.	O
]	O

The	O
Python	B-TOOL_USED
script	I-TOOL_USED
helps	O
to	O
find	O
the	O
flag	O
by	O
exploiting	O
SQL	B-VULNERABILITY
injection	I-VULNERABILITY
vulnerability	I-VULNERABILITY
in	O
the	O
web	B-TARGET_COMPONENT
application	I-TARGET_COMPONENT
.	O


-DOCSTART- -X- O O
The	O
challenge	O
is	O
very	O
simple	O
once	O
you	O
know	O
what	O
to	O
do	O
.	O

This	O
is	O
the	O
hint	O
:	O

"	O
We	O
will	O
only	O
give	O
our	O
flag	O
to	O
our	O
Agent	O
95	O
!	O
He	O
is	O
still	O
running	O
an	O
old	O
version	O
of	O
Windows	O
...	O
"	O

We	O
assume	O
Agent	O
95	O
uses	O
Windows	O
95	O
.	O
So	O
just	O
change	O
the	O
`	B-TARGET_COMPONENT
User	I-TARGET_COMPONENT
-	I-TARGET_COMPONENT
Agent	I-TARGET_COMPONENT
`	I-TARGET_COMPONENT
header	I-TARGET_COMPONENT
to	O
`	O
Mozilla/4.0	O
(	O
compatible	O
;	O
MSIE	O
4.01	O
;	O
Windows	O
95	O
)	O
`	O
.	O

We	O
use	O
a	O
Python	B-TOOL_USED
script	I-TOOL_USED
:	O

[	O
Python	O
code	O
:	O
using	O
`	O
requests	O
`	O
to	O
send	O
a	O
GET	O
with	O
the	O
`	O
User	O
-	O
Agent	O
`	O
header	O
]	O

In	O
the	O
response	O
,	O
you	O
got	O
the	O
flag	O
.	O


-DOCSTART- -X- O O
When	O
you	O
visit	O
the	O
website	O
,	O
you	O
find	O
that	O
there	O
's	O
a	B-TARGET_COMPONENT
cookie	I-TARGET_COMPONENT
containing	I-TARGET_COMPONENT
a	I-TARGET_COMPONENT
JWT	I-TARGET_COMPONENT
.	O
It	O
's	O
hashed	O
using	O
`	O
HS256	O
`	O
.	O
The	O
JWT	B-TARGET_COMPONENT
secret	I-TARGET_COMPONENT
was	O
brute	O
-	O
forced	O
using	O
`	B-TOOL_USED
rockyou.txt	I-TOOL_USED
`	O
and	O
John	B-TOOL_USED
The	I-TOOL_USED
Ripper	I-TOOL_USED
,	O
which	O
revealed	O
the	O
secret	O
as	O
`	O
supersecret	O
`	O
.	O
Using	O
this	O
secret	O
,	O
a	O
JWT	O
with	O
`	O
username	O
:	O
admin	O
`	O
was	O
created	O
and	O
added	O
to	O
the	O
cookie	O
,	O
logging	O
in	O
as	O
admin	O
.	O

Visiting	O
a	O
random	O
route	O
starting	O
with	O
`	O
/admin/	O
`	O
that	O
throws	O
a	O
404	O
error	O
,	O
it	O
was	O
observed	O
that	O
there	O
's	O
scope	O
for	O
template	B-VULNERABILITY
injection	I-VULNERABILITY
in	O
the	B-TARGET_COMPONENT
404	I-TARGET_COMPONENT
page	I-TARGET_COMPONENT
.	O
By	O
climbing	O
up	O
the	O
Python	O
MRO	O
using	O
`	O
_	O
_	O
class	O
_	O
_	O
`	O
and	O
`	O
_	O
_	O
bases	O
_	O
_	O
`	O
,	O
etc	O
.	O
,	O
a	O
list	O
of	O
all	O
available	O
classes	O
was	O
found	O
.	O
At	O
index	O
405	O
,	O
the	O
`	O
subprocess	O
.	O
Popen	O
`	O
class	O
was	O
discovered	O
.	O

Using	O
this	O
class	O
,	O
a	O
reverse	O
shell	O
was	O
spawned	O
by	O
sending	O
a	O
specially	O
crafted	O
URL	O
.	O
A	O
netcat	B-TOOL_USED
listener	I-TOOL_USED
was	O
started	O
on	O
the	O
server	O
at	O
the	O
specified	O
port	O
,	O
which	O
ultimately	O
led	O
to	O
gaining	O
a	O
shell	O
.	O

Upon	O
listing	O
the	O
files	O
and	O
reading	O
the	O
content	O
of	O
`	O
flag.txt	O
`	O
.	O


-DOCSTART- -X- O O
When	O
you	O
examine	B-TOOL_USED
the	I-TOOL_USED
source	I-TOOL_USED
code	I-TOOL_USED
,	O
you	O
'll	O
notice	O
the	O
application	O
uses	O
`	B-TARGET_COMPONENT
bodyParser.urlencoded	I-TARGET_COMPONENT
`	I-TARGET_COMPONENT
with	O
`	O
extended	O
:	O
true	O
`	O
.	O
This	O
allows	O
arrays	O
and	O
objects	O
to	O
be	O
passed	O
in	O
the	O
request	O
body	O
.	O
In	O
the	O
`	O
/login	O
`	O
POST	O
route	O
,	O
the	O
output	O
has	O
not	O
been	O
stringified	O
,	O
so	O
it	O
is	O
possible	O
to	O
pass	O
an	O
object	O
in	O
the	O
query	O
statement	O
.	O

[	O
JavaScript	B-TARGET_COMPONENT
code	I-TARGET_COMPONENT
:	O
Configure	O
bodyParser	O
and	O
create	O
SQL	O
query	O
]	O

The	O
exploit	O
is	O
to	O
pass	O
an	O
object	O
as	O
the	O
password	O
parameter	O
,	O
with	O
a	O
known	O
attribute	O
.	O
This	O
causes	O
the	O
SQL	O
query	O
to	O
be	O
evaluated	O
in	O
a	O
way	O
that	O
allows	O
logging	O
in	O
without	O
knowing	O
the	O
correct	O
password	O
.	O
We	O
'll	O
refer	O
to	O
the	O
official	B-LEARNING_RESOURCE
`	I-LEARNING_RESOURCE
mysql	I-LEARNING_RESOURCE
`	I-LEARNING_RESOURCE
docs	I-LEARNING_RESOURCE
for	O
more	O
information	O
on	O
how	O
objects	O
are	O
converted	O
into	O
comma	O
-	O
separated	O
attributes	O
in	O
SQL	O
queries	O
.	O

The	O
final	O
payload	O
for	O
this	O
exploit	O
is	O
:	O

[	O
HTTP	O
POST	O
request	O
:	O
Send	O
payload	O
with	O
object	O
as	O
password	O
]	O

From	O
here	O
,	O
you	O
can	O
just	O
take	O
the	O
cookie	O
you	O
received	O
,	O
and	O
use	O
that	O
to	O
visit	O
`	O
/flag	O
`	O
.	O
Alternatively	O
,	O
you	O
can	O
use	O
a	O
Python	O
script	O
to	O
automate	O
the	O
process	O
:	O

[	O
Python	B-TOOL_USED
script	I-TOOL_USED
:	O
Send	O
payload	B-TOOL_USED
,	O
get	O
the	O
flag	O
,	O
and	O
print	O
it	O
]	O

You	O
can	O
run	O
this	O
script	O
and	O
use	O
`	B-TOOL_USED
grep	I-TOOL_USED
`	I-TOOL_USED
to	O
find	O
the	O
flag	O
.	O


-DOCSTART- -X- O O
The	O
challenge	O
provides	O
the	O
following	O
hint	O
:	O
"	O
Normal	O
fries	O
are	O
nice	O
,	O
but	O
everything	O
's	O
better	O
with	O
a	O
curl	O
in	O
it	O
.	O
I	O
'm	O
with	O
you	O
,	O
every	O
step	O
of	O
the	O
way	O
.	O
"	O

Upon	O
opening	O
the	O
link	O
,	O
an	O
image	O
is	O
displayed	O
.	O
To	O
solve	O
the	O
challenge	O
,	O
a	O
series	O
of	O
curl	B-TOOL_USED
commands	I-TOOL_USED
were	O
executed	O
with	O
various	O
headers	B-TARGET_COMPONENT
,	O
cookies	B-TARGET_COMPONENT
,	O
and	O
JSON	B-TARGET_COMPONENT
data	I-TARGET_COMPONENT
.	O
Here	O
's	O
the	O
process	O
:	O

Change	O
the	O
method	O
to	O
POST	O
and	O
send	O
a	O
request	O
to	O
the	O
URL	O
.	O

Set	O
the	O
Referer	B-TARGET_COMPONENT
header	I-TARGET_COMPONENT
to	O
Google	O
and	O
send	O
a	O
request	O
to	O
the	O
URL	O
.	O
In	O
response	O
,	O
you	O
receive	O
a	O
hint	O
to	O
attend	O
a	O
dinner	O
party	O
hosted	O
by	O
dscvit	O
.	O

Set	O
the	O
Host	B-TARGET_COMPONENT
header	I-TARGET_COMPONENT
to	O
dscvit.com	O
and	O
send	O
a	O
request	O
to	O
the	O
URL	O
.	O
The	O
response	O
mentions	O
potatoes	O
,	O
carrots	O
,	O
milk	O
,	O
and	O
cookies	O
.	O

Set	O
the	O
user	O
cookie	B-TARGET_COMPONENT
to	O
"	O
root	O
"	O
and	O
send	O
a	O
request	O
to	O
the	O
URL	O
,	O
as	O
potatoes	O
and	O
carrots	O
are	O
root	O
vegetables	O
.	O
The	O
response	O
contains	O
a	O
JSON	O
-	O
related	O
hint	O
.	O

Set	O
the	O
Content	B-TARGET_COMPONENT
-	I-TARGET_COMPONENT
Type	I-TARGET_COMPONENT
header	I-TARGET_COMPONENT
to	O
application	O
/	O
json	O
,	O
include	O
JSON	O
data	O
,	O
and	O
send	O
a	O
request	O
to	O
the	O
URL	O
.	O
The	O
response	O
points	O
out	O
that	O
"	O
messi	O
"	O
is	O
required	O
in	O
the	O
JSON	O
data	O
.	O

Add	O
"	O
messi	O
"	O
to	O
the	O
JSON	B-TARGET_COMPONENT
data	I-TARGET_COMPONENT
and	O
send	O
a	O
request	O
to	O
the	O
URL	O
.	O
The	O
response	O
asks	O
for	O
the	O
club	O
Messi	O
is	O
in	O
.	O

Change	O
the	O
"	O
messi	O
"	O
value	O
to	O
"	O
psg	O
"	O
and	O
send	O
a	O
request	O
to	O
the	O
URL	O
,	O
since	O
Messi	O
is	O
playing	O
for	O
PSG	O
at	O
the	O
time	O
.	O

After	O
executing	O
the	O
final	O
command	O
,	O
the	O
flag	O
is	O
returned	O
.	O
-DOCSTART- -X- O O
The	O
challenge	O
gives	O
us	O
the	O
following	O
text	O
:	O

"	O
Normal	O
fries	O
are	O
nice	O
,	O
but	O
everything	O
's	O
better	O
with	O
a	O
curl	O
in	O
it	O
.	O
Why	O
do	O
logos	O
make	O
things	O
so	O
recognizable	O
?	O
"	O

Upon	O
opening	O
the	O
link	O
,	O
an	O
image	O
is	O
displayed	O
that	O
shows	O
the	O
logos	O
of	O
Xbox	O
and	O
Linux	O
.	O
This	O
is	O
viewed	O
on	O
a	O
Windows	O
device	O
.	O

To	O
change	O
the	O
User	O
-	O
Agent	O
to	O
Linux	O
,	O
use	O
the	O
following	O
command	O
:	O

[	O
Shell	B-TOOL_USED
command	I-TOOL_USED
:	O
Set	O
User	B-TARGET_COMPONENT
-	I-TARGET_COMPONENT
Agent	I-TARGET_COMPONENT
header	I-TARGET_COMPONENT
to	O
Linux	O
]	O

Executing	O
this	O
command	O
returns	O
a	O
response	O
with	O
the	O
Linux	O
logo	O
gone	O
.	O

Next	O
,	O
set	O
the	O
User	O
-	O
Agent	O
to	O
both	O
Linux	O
and	O
Xbox	O
:	O

[	O
Shell	B-TOOL_USED
command	I-TOOL_USED
:	O
Set	O
User	B-TARGET_COMPONENT
-	I-TARGET_COMPONENT
Agent	I-TARGET_COMPONENT
header	I-TARGET_COMPONENT
to	O
Linux	O
Xbox	O
]	O

Executing	O
this	O
command	O
gives	O
the	O
flag	O
inside	O
the	O
body	O
of	O
the	O
page	O
.	O


-DOCSTART- -X- O O
The	O
challenge	O
gives	O
us	O
the	O
following	O
text	O
:	O

"	O
Normal	O
fries	O
are	O
nice	O
,	O
but	O
everything	O
's	O
better	O
with	O
a	O
curl	O
in	O
it	O
.	O
The	O
flag	O
is	O
right	O
in	O
front	O
of	O
you	O
.	O
"	O

Upon	O
opening	O
the	O
link	O
,	O
an	O
image	O
is	O
displayed	O
,	O
which	O
hints	O
at	O
Sweden	O
.	O
So	O
,	O
the	O
solution	O
involves	O
setting	O
the	O
language	B-TARGET_COMPONENT
headers	I-TARGET_COMPONENT
to	O
Swedish	O
using	O
a	O
"	B-TOOL_USED
curl	I-TOOL_USED
"	I-TOOL_USED
command	I-TOOL_USED
.	O

[	O
Shell	B-TOOL_USED
command	I-TOOL_USED
:	O
Set	O
Accept	B-TARGET_COMPONENT
-	I-TARGET_COMPONENT
Language	I-TARGET_COMPONENT
header	I-TARGET_COMPONENT
to	O
Swedish	O
]	O

Executing	O
this	O
command	O
returns	O
the	O
flag	O
.	O


-DOCSTART- -X- O O
The	O
critical	O
line	O
in	O
the	O
code	O
is	O
:	O

[	O
Python	O
code	O
:	O
Use	O
subprocess	B-TARGET_COMPONENT
.	I-TARGET_COMPONENT
Popen	I-TARGET_COMPONENT
to	O
call	O
FFmpeg	O
]	O

Here	O
,	O
you	O
can	O
perform	O
Remote	B-VULNERABILITY
Code	I-VULNERABILITY
Execution	I-VULNERABILITY
(	I-VULNERABILITY
RCE	I-VULNERABILITY
)	I-VULNERABILITY
with	O
the	O
file	O
name	O
.	O
The	O
idea	O
is	O
to	O
grep	O
the	O
flag	O
from	O
the	O
main.py	O
file	O
and	O
write	O
it	O
on	O
the	O
image	O
to	O
which	O
the	O
GIF	O
is	O
going	O
to	O
be	O
converted	O
.	O
This	O
can	O
be	O
done	O
with	O
the	O
-vf	O
drawtext=	O
...	O
option	O
.	O
The	O
payload	O
used	O
is	O
:	O

[	O
Payload	B-TOOL_USED
:	O
Include	O
grep	O
and	O
drawtext	O
options	O
in	O
the	O
file	O
name	O
]	O

When	O
you	O
upload	O
a	O
GIF	O
with	O
this	O
payload	O
as	O
the	O
file	O
name	O
,	O
you	O
will	O
receive	O
a	O
resulting	O
PNG	O
with	O
the	O
flag	O
written	O
on	O
it	O
.	O


-DOCSTART- -X- O O
When	O
you	O
look	O
at	O
the	O
documentation	O
for	O
the	O
source	O
for	O
the	O
`	B-TARGET_COMPONENT
flask_caching	I-TARGET_COMPONENT
`	I-TARGET_COMPONENT
module	I-TARGET_COMPONENT
,	O
you	O
can	O
optionally	O
store	O
a	O
python	B-TOOL_USED
pickle	I-TOOL_USED
in	O
the	O
redis	B-TARGET_COMPONENT
by	O
prepending	O
it	O
with	O
`	O
'	O
!	O
'	O
`	O
.	O
You	O
can	O
use	O
python	O
pickles	O
for	O
RCE	B-VULNERABILITY
,	O
when	O
the	O
caching	O
modules	O
uses	O
`	O
pickle.load	O
(	O
)	O
`	O
to	O
load	O
the	O
cached	O
data	O
.	O

Set	O
up	O
a	O
netcat	B-TOOL_USED
listener	I-TOOL_USED
on	O
your	O
server	O
and	O
run	O
the	O
following	O
script	O
with	O
your	O
IP	O
and	O
PORT	O
.	O

[	O
Python	B-TOOL_USED
script	I-TOOL_USED
:	O
Create	O
a	O
payload	O
for	O
RCE	B-VULNERABILITY
and	O
send	O
it	O
to	O
the	O
server	O
]	O

On	O
your	O
netcat	O
listener	O
,	O
you	O
would	O
get	O
the	O
flag	O
.	O

[	O
HTTP	O
POST	O
request	O
with	O
the	O
flag	O
]	O


-DOCSTART- -X- O O
Press	O
`	B-TOOL_USED
Ctrl	I-TOOL_USED
+	I-TOOL_USED
U	I-TOOL_USED
`	I-TOOL_USED
on	I-TOOL_USED
your	I-TOOL_USED
browser	I-TOOL_USED
to	O
view	O
the	O
source	O
code	O
of	O
the	O
`	O
HTML	O
`	O
file	O
.	O
Search	O
for	O
`	O
flag	O
{	O
...	O
}	O
`	O
.	O

[	O
HTML	B-TARGET_COMPONENT
source	I-TARGET_COMPONENT
code	I-TARGET_COMPONENT
with	O
flag	O
]	O


-DOCSTART- -X- O O
The	O
first	O
part	O
of	O
the	O
challenge	O
is	O
a	O
sort	O
of	O
vague	O
guesswork	O
.	O
In	O
the	O
challenge	O
description	O
,	O
there	O
are	O
two	O
words	O
-	O
`	O
page	O
`	O
and	O
`	O
upload	O
`	O
-	O
which	O
the	O
author	O
wants	O
you	O
to	O
notice	O
.	O
Also	O
,	O
when	O
you	O
view	O
the	O
homepage	O
source	O
,	O
it	O
has	O
a	O
comment	O
`	O
<	O
!	O
--	O
get	O
the	O
'	O
page	O
'	O
:	O
eyes	O
:	O
--	O
>	O
`	O
.	O

So	O
,	O
the	O
first	O
try	O
was	O
to	O
pass	O
a	O
query	O
`	O
page	O
`	O
in	O
the	O
flag	O
.	O
So	O
,	O
we	O
tried	O
to	O
visit	O
`	O
?	O
page	O
=	O
flag	O
`	O
.	O
Here	O
,	O
we	O
get	O
a	O
gif	O
.	O

Now	O
,	O
since	O
the	O
description	O
had	O
the	O
word	O
`	O
upload	O
`	O
in	O
it	O
,	O
we	O
tried	O
to	O
checkout	O
if	O
there	O
is	O
a	B-TARGET_COMPONENT
page	I-TARGET_COMPONENT
called	I-TARGET_COMPONENT
upload	I-TARGET_COMPONENT
,	O
and	O
there	O
was	O
!	O

Here	O
,	O
we	O
can	O
assume	O
that	O
we	O
have	O
to	O
do	O
some	O
sort	O
of	O
local	B-VULNERABILITY
file	I-VULNERABILITY
inclusion	I-VULNERABILITY
.	O
So	O
we	O
created	O
a	O
file	O
called	O
`	B-TOOL_USED
payload.php	I-TOOL_USED
`	I-TOOL_USED
,	O
and	O
tried	O
to	O
`	O
ls	O
`	O
the	O
directory	O
.	O
We	O
saw	O
a	O
lot	O
of	O
files	O
called	O
`	O
flag	O
`	O
,	O
so	O
we	O
just	O
decided	O
to	O
print	O
all	O
files	O
and	O
just	O
search	O
on	O
the	O
browser	O
.	O

Here	O
's	O
the	O
final	O
payload	O
for	O
the	O
PHP	O
code	O
:	O

[	O
PHP	B-TOOL_USED
code	I-TOOL_USED
payload	I-TOOL_USED
for	O
local	B-VULNERABILITY
file	I-VULNERABILITY
inclusion	I-VULNERABILITY
to	O
find	O
all	O
files	O
and	O
print	O
them	O
]	O

Now	O
you	O
can	O
visit	O
the	O
route	O
`	O
/?page	O
=	O
payload	O
`	O
(	O
name	O
of	O
the	O
file	O
you	O
uploaded	O
)	O
.	O
This	O
gives	O
a	O
page	O
with	O
a	O
lot	O
of	O
stuff	O
.	O

So	O
,	O
the	O
contents	O
of	O
all	O
the	O
files	O
are	O
now	O
on	O
the	O
browser	O
.	O
All	O
you	O
have	O
to	O
do	O
is	O
open	O
the	O
source	O
code	O
and	O
search	O
for	O
the	O
flag	O
format	O
.	O


-DOCSTART- -X- O O
Well	O
,	O
if	O
you	O
happen	O
to	O
look	O
at	O
the	O
local	O
storage	O
,	O
you	O
'll	O
get	O
the	O
flag	O
directly	O
.	O
But	O
that	O
's	O
not	O
how	O
we	O
got	O
it	O
because	O
we	O
're	O
stupid	O
.	O
So	O
,	O
here	O
's	O
what	O
we	O
did	O
.	O

You	O
see	O
a	O
JS	O
file	O
in	O
the	O
sources	O
:	O
`	O
jquery.jscroll2.js	O
`	O
.	O
Now	O
,	O
to	O
understand	O
what	O
exactly	O
it	O
does	O
,	O
we	O
first	O
convert	O
the	O
huge	O
list	O
on	O
`	O
line	O
1	O
`	O
from	O
`	O
hex	O
`	O
to	O
`	O
string	O
`	O
to	O
be	O
able	O
to	O
make	O
sense	O
of	O
it	O
.	O
So	O
let	O
's	O
convert	O
it	O
using	O
a	O
script	O
written	O
in	O
`	O
python2	O
`	O
.	O

Once	O
you	O
convert	O
it	O
,	O
you	O
will	O
see	O
some	O
meaningful	O
strings	O
such	O
as	O
`	O
localStorage	O
`	O
,	O
`	O
setItem	O
`	O
,	O
`	O
data	O
`	O
,	O
`	O
defaults	O
`	O
,	O
`	O
extend	O
`	O
,	O
`	O
function	O
`	O
,	O
etc	O
..	O

Now	O
we	O
can	O
try	O
to	O
make	O
sense	O
of	O
the	O
rest	O
of	O
the	O
code	O
.	O

We	O
see	O
an	O
interesting	O
line	O
.	O
Now	O
that	O
we	O
have	O
the	O
strings	O
figured	O
out	O
:	O

[	O
JavaScript	O
code	O
:	O
stores	O
the	O
decoded	O
base64	O
string	O
in	O
local	O
storage	O
with	O
the	O
key	O
'	O
flag	O
'	O
]	O

So	O
the	O
script	O
basically	O
converst	O
the	O
`	O
base64	O
`	O
string	O
`	O
SkNURntzcG9vb29va3lfZ2hvc3RzX2luX3N0b3JhZ2V9	O
`	O
and	O
stores	O
it	O
in	O
local	B-TARGET_COMPONENT
storage	I-TARGET_COMPONENT
with	O
the	O
key	O
`	O
flag	O
`	O
.	O
Well	O
,	O
now	O
you	O
can	O
just	O
check	O
the	O
local	O
storage	O
,	O
or	O
just	O
convert	O
this	O
string	O
to	O
ASCII	O
using	O
BASH	B-TOOL_USED
.	O


-DOCSTART- -X- O O
This	O
site	B-TARGET_COMPONENT
allows	O
you	O
to	O
write	O
HTML	O
,	O
so	O
it	O
's	O
basically	O
shouting	O
at	O
you	O
to	O
perform	O
an	O
XSS	B-VULNERABILITY
attack	O
.	O
The	O
URL	O
of	O
the	O
webpage	O
created	O
actually	O
consists	O
a	O
base64	O
encoded	O
form	O
of	O
the	O
content	O
of	O
the	O
page	O
.	O
We	O
can	O
see	O
the	O
`	O
js	O
`	O
in	O
the	O
source	O
.	O

The	O
main	O
thing	O
we	O
notice	O
is	O
that	O
it	O
prevents	B-MITIGATION_STRATEGY
`	I-MITIGATION_STRATEGY
script	I-MITIGATION_STRATEGY
`	I-MITIGATION_STRATEGY
tags	I-MITIGATION_STRATEGY
and	O
it	O
allows	B-MITIGATION_STRATEGY
only	I-MITIGATION_STRATEGY
the	I-MITIGATION_STRATEGY
following	I-MITIGATION_STRATEGY
attributes	I-MITIGATION_STRATEGY
for	O
an	O
element	O
:	O
`	O
'	O
src	O
'	O
,	O
'	O
width	O
'	O
,	O
'	O
height	O
'	O
,	O
'	O
alt	O
'	O
,	O
'	O
class	O
'	O
`	O
.	O
So	O
we	O
have	O
to	O
perform	O
an	O
XSS	O
with	O
these	O
attributes	O
.	O
So	O
,	O
here	O
's	O
the	O
payload	O
:	O

[	O
Payload	B-TOOL_USED
for	O
XSS	B-VULNERABILITY
attack	O
using	O
an	O
iframe	O
and	O
the	O
'	O
src	O
'	O
attribute	O
]	O

Note	O
that	O
here	O
,	O
the	O
site	O
is	O
supposed	O
to	O
be	O
`	O
https	O
`	O
,	O
otherwise	O
there	O
will	O
be	O
a	O
Content	B-MITIGATION_STRATEGY
Security	I-MITIGATION_STRATEGY
Policy	I-MITIGATION_STRATEGY
Bypass	O
(	O
CSP	B-MITIGATION_STRATEGY
Bypass	O
)	O
error	O
,	O
and	O
the	O
request	O
wo	O
n't	O
be	O
sent	O
.	O
We	O
can	O
get	O
the	O
URL	O
of	O
the	O
resulting	O
webpage	O
:	O

[	O
URL	O
with	O
base64	O
encoded	O
payload	O
]	O

On	O
the	O
server	O
,	O
we	O
can	O
create	O
a	O
simple	O
Node.js	O
backend	O
which	O
accepts	O
the	O
cookie	O
as	O
a	O
query	O
param	O
and	O
logs	O
it	O
.	O
Here	O
's	O
an	O
example	O
of	O
the	O
backend	O
code	O
:	O

[	O
Node.js	B-TOOL_USED
code	I-TOOL_USED
for	O
a	O
simple	O
backend	O
to	O
log	O
the	O
stolen	B-TARGET_COMPONENT
cookie	I-TARGET_COMPONENT
]	O

When	O
the	O
link	O
for	O
the	O
website	O
is	O
sent	O
to	O
the	O
`	O
admin	O
bot	O
`	O
,	O
which	O
is	O
basically	O
a	O
headless	O
chrome	O
browser	O
,	O
it	O
visits	O
the	O
page	O
and	O
it	O
's	O
cookie	O
is	O
stolen	O
and	O
sent	O
to	O
the	O
server	O
at	O
`	O
myserver.tld	O
`	O
.	O
The	O
cookie	O
stores	O
the	O
`	O
flag	O
`	O
.	O


-DOCSTART- -X- O O
This	O
challenge	O
uses	O
XSS	B-VULNERABILITY
to	O
get	O
the	O
flag	O
from	O
the	O
`	O
admin	O
bot	O
's	O
`	O
cookies	B-TARGET_COMPONENT
.	O

First	O
,	O
try	O
a	O
random	O
`	O
<	O
h1	O
>	O
Hello</h1	O
>	O
`	O
tag	O
to	O
see	O
if	O
you	O
can	O
put	O
HTML	O
in	O
your	O
pastebin	O
.	O

Inspecting	O
the	O
`	O
js	O
`	O
file	O
of	O
the	O
page	O
we	O
can	O
can	O
infer	O
2	O
things	O
:	O

-	O
the	O
content	O
of	O
the	O
page	O
is	O
obtained	O
from	O
the	O
URL	O
,	O
which	O
is	O
a	O
base64	O
encoded	O
form	O
of	O
the	O
text	O
you	O
entered	O
.	O

-	O
the	O
`	B-MITIGATION_STRATEGY
clean	I-MITIGATION_STRATEGY
`	I-MITIGATION_STRATEGY
function	I-MITIGATION_STRATEGY
will	I-MITIGATION_STRATEGY
not	I-MITIGATION_STRATEGY
allow	I-MITIGATION_STRATEGY
writing	I-MITIGATION_STRATEGY
of	I-MITIGATION_STRATEGY
text	I-MITIGATION_STRATEGY
if	I-MITIGATION_STRATEGY
bracket	I-MITIGATION_STRATEGY
pairs	I-MITIGATION_STRATEGY
do	I-MITIGATION_STRATEGY
not	I-MITIGATION_STRATEGY
match	I-MITIGATION_STRATEGY
.	O

It	O
is	O
rather	O
easy	O
to	O
break	O
this	O
`	O
clean	O
`	O
function	O
,	O
by	O
adding	O
an	O
extra	O
`	O
>	O
`	O
at	O
the	O
starting	O
of	O
your	O
XSS	O
script	O
.	O
Here	O
's	O
the	O
payload	O
:	O

[	O
Payload	B-TOOL_USED
for	O
XSS	B-VULNERABILITY
attack	O
with	O
an	O
extra	O
"	O
>	O
"	O
at	O
the	O
beginning	O
of	O
the	O
script	O
]	O

Your	O
payload	O
has	O
the	O
following	O
URL	O
:	O

[	O
URL	O
with	O
base64	O
encoded	O
payload	O
]	O

You	O
can	O
simply	O
set	O
up	O
a	O
`	O
netcat	B-TOOL_USED
listener	I-TOOL_USED
`	O
using	O
`	O
nc	O
-l	O
port	O
`	O
on	O
your	O
server	O
,	O
and	O
pass	O
the	O
link	O
to	O
the	O
`	O
Admin	O
Bot	O
`	O
.	O
The	O
admin	O
bot	O
is	O
basically	O
a	O
headless	O
chrome	O
browser	O
which	O
has	O
the	O
flag	O
in	O
it	O
's	O
cookies	O
.	O
When	O
it	O
visits	O
your	O
site	O
,	O
the	O
XSS	B-VULNERABILITY
steals	O
the	O
cookies	B-TARGET_COMPONENT
from	O
the	O
admin	O
bot	O
and	O
sends	O
it	O
to	O
your	O
server	O
.	O
You	O
get	O
a	O
request	O
which	O
looks	O
like	O
:	O

[	O
HTTP	O
GET	O
request	O
with	O
the	O
flag	O
in	O
the	O
cookie	O
]	O


-DOCSTART- -X- O O
[	O
This	O
challenge	O
involves	O
exploiting	O
a	O
vulnerability	B-VULNERABILITY
in	O
the	O
`	B-TARGET_COMPONENT
generateToken	I-TARGET_COMPONENT
`	I-TARGET_COMPONENT
function	I-TARGET_COMPONENT
in	I-TARGET_COMPONENT
a	I-TARGET_COMPONENT
JavaScript	I-TARGET_COMPONENT
file	I-TARGET_COMPONENT
.	O
The	O
function	O
generates	O
a	O
token	O
for	O
a	O
given	O
`	O
username	O
`	O
,	O
where	O
the	O
`	O
username	O
`	O
is	O
included	O
as	O
a	O
string	O
in	O
a	O
JSON	O
object	O
that	O
is	O
encrypted	O
using	O
`	O
aes-192	O
-	O
cbc	O
`	O
.	O
However	O
,	O
the	O
function	O
forms	O
the	O
JSON	O
object	O
in	O
a	O
way	O
that	O
allows	O
the	O
"	O
character	O
to	O
be	O
closed	O
with	O
the	O
help	O
of	O
the	O
string	O
passed	O
in	O
the	O
`	O
username	O
`	O
parameter	O
,	O
and	O
sets	O
the	O
`	O
member	O
`	O
field	O
to	O
a	O
non	O
-	O
zero	O
value	O
.	O
]	O

You	O
really	O
just	O
need	O
to	O
notice	O
this	O
function	O
.	O
Notice	O
,	O
the	O
token	O
is	O
not	O
created	O
like	O
`	O
token.username	O
=	O
username	O
`	O
.	O
It	O
's	O
formed	O
in	O
the	O
following	O
way	O
:	O

`	O
`	O
`	O

const	O
token	O
=	O
`	O
{	O
"	O
integrity":"${INTEGRITY}","member":0,"username":"${username	O
}	O
"	O
}	O
`	O

`	O
`	O
`	O

To	O
exploit	O
the	O
vulnerability	B-VULNERABILITY
,	O
we	O
can	O
pass	O
the	O
`	B-TOOL_USED
username	I-TOOL_USED
`	I-TOOL_USED
as	I-TOOL_USED
`	I-TOOL_USED
"	I-TOOL_USED
,	I-TOOL_USED
"	I-TOOL_USED
member":"1	I-TOOL_USED
`	I-TOOL_USED
which	O
will	O
close	O
the	O
`	O
"	O
`	O
character	O
and	O
set	O
`	O
member	O
`	O
to	O
`	O
1	O
`	O
.	O
Then	O
,	O
we	O
can	O
visit	O
`	O
/api	O
/	O
flag	O
`	O
to	O
get	O
the	O
flag	O
in	O
JSON	O
format	O
.	O


-DOCSTART- -X- O O
This	O
is	O
a	O
beginner	O
SQL	B-VULNERABILITY
Injection	I-VULNERABILITY
challenge	O
.	O
To	O
retrieve	O
the	O
flag	O
,	O
you	O
need	O
to	O
inject	O
a	B-TOOL_USED
malicious	I-TOOL_USED
SQL	I-TOOL_USED
query	I-TOOL_USED
into	O
the	O
login	B-TARGET_COMPONENT
form	I-TARGET_COMPONENT
.	O

Simply	O
pass	O
the	O
username	O
and	O
the	O
password	O
as	O
'	O
or	O
1=1	O
--	O
,	O
which	O
will	O
be	O
interpreted	O
as	O
a	O
SQL	O
query	O
that	O
always	O
returns	O
true	O
,	O
and	O
comment	O
out	O
the	O
rest	O
of	O
the	O
query	O
with	O
the	O
--	O
symbol	O
.	O
This	O
will	O
cause	O
the	O
server	O
to	O
execute	O
the	O
SQL	B-TOOL_USED
query	I-TOOL_USED
as	O
if	O
you	O
had	O
provided	O
valid	O
login	O
credentials	O
,	O
resulting	O
in	O
an	O
alert	O
box	O
displaying	O
the	O
flag	O
.	O


-DOCSTART- -X- O O
In	O
this	O
challenge	O
,	O
you	O
see	O
a	O
bunch	O
of	O
captcha	O
's	O
floating	O
around	O
on	O
your	O
screen	O
,	O
and	O
the	O
goal	O
is	O
to	O
successfully	O
get	O
5	O
captchas	O
.	O
There	O
's	O
many	O
ways	O
to	O
solve	O
this	O
,	O
here	O
's	O
what	O
was	O
done	O
:	O

When	O
you	O
see	O
the	O
source	O
,	O
this	O
is	O
the	O
function	O
which	O
creates	O
the	O
captchas	O
and	O
makes	O
them	O
move	O
:	O

[	O
JavaScript	O
code	O
:	O
Captcha	B-TARGET_COMPONENT
creation	I-TARGET_COMPONENT
and	I-TARGET_COMPONENT
movement	I-TARGET_COMPONENT
function	I-TARGET_COMPONENT
]	O

To	O
make	O
it	O
easier	O
to	O
solve	O
the	O
captchas	O
,	O
modify	O
this	O
function	O
using	O
your	O
browser	B-TOOL_USED
's	I-TOOL_USED
developer	I-TOOL_USED
tools	I-TOOL_USED
,	O
removing	O
the	O
part	O
where	O
it	O
runs	O
the	O
loop	O
,	O
which	O
is	O
responsible	O
for	O
moving	O
the	O
captchas	O
.	O

[	O
Modified	O
JavaScript	O
code	O
:	O
Captcha	O
creation	O
function	O
without	O
movement	O
]	O

Now	O
,	O
you	O
can	O
manually	O
add	O
5	O
captchas	O
and	O
get	O
them	O
.	O
Just	O
call	O
the	O
function	O
`	O
addCaptcha	O
(	O
)	O
`	O
and	O
keep	O
clicking	O
the	O
boxes	O
.	O
When	O
you	O
're	O
done	O
with	O
5	O
,	O
click	O
on	O
`	O
GET	O
FLAG	O
`	O
,	O
and	O
copy	O
the	O
flag	O
from	O
the	O
screen	O
!	O


-DOCSTART- -X- O O
The	O
challenge	O
begins	O
with	O
the	O
given	O
text	O
:	O
"	O
There	O
is	O
nothing	O
here	O
I	O
promise	O
!	O
;)	O
"	O

Upon	O
opening	O
the	O
link	O
,	O
an	O
image	O
is	O
displayed	O
.	O
By	O
checking	O
the	O
network	O
tab	O
,	O
a	O
response	B-TARGET_COMPONENT
header	I-TARGET_COMPONENT
with	O
a	O
specific	O
string	O
is	O
found	O
.	O
A	O
curl	B-TOOL_USED
request	I-TOOL_USED
is	O
then	O
sent	O
,	O
setting	O
the	O
cookie	B-TARGET_COMPONENT
to	O
the	O
given	O
string	O
.	O

The	O
response	O
contains	O
another	O
string	O
.	O
A	O
new	O
curl	B-TOOL_USED
request	I-TOOL_USED
is	O
sent	O
with	O
this	O
new	O
string	O
as	O
the	O
cookie	B-TARGET_COMPONENT
.	O

To	O
automate	O
this	O
process	O
,	O
a	O
Python	B-TOOL_USED
script	I-TOOL_USED
is	O
written	O
:	O

[	O
Define	O
the	O
initial	O
URL	O
and	O
the	O
first	O
flag	O
value	O
.	O

Create	O
a	O
loop	O
that	O
continues	O
until	O
the	O
final	O
flag	O
value	O
,	O
'	O
EOF	O
'	O
,	O
is	O
found	O
.	O

In	O
each	O
iteration	O
,	O
send	O
an	O
HTTP	O
GET	O
request	O
to	O
the	O
URL	O
with	O
the	O
current	O
flag	O
value	O
as	O
a	O
cookie	B-TARGET_COMPONENT
.	O

Append	O
the	O
received	O
string	O
to	O
the	O
list	O
of	O
flags	O
and	O
continue	O
iterating	O
.	O

Once	O
the	O
loop	O
is	O
finished	O
,	O
print	O
the	O
received	O
strings	O
.	O
]	O

The	O
output	O
contains	O
multiple	O
strings	O
,	O
which	O
appear	O
to	O
be	O
MD5	O
hashes	O
.	O
After	O
decoding	O
these	O
hashes	O
,	O
a	O
sequence	O
of	O
characters	O
is	O
obtained	O
,	O
which	O
is	O
the	O
flag	O
.	O


-DOCSTART- -X- O O
This	O
solution	O
demonstrates	O
a	O
SQL	B-VULNERABILITY
Injection	I-VULNERABILITY
attack	O
to	O
solve	O
a	O
CTF	O
challenge	O
.	O
The	O
script	O
also	O
works	O
for	O
the	O
`	O
Gate	O
Keeper	O
`	O
challenge	O
.	O
Here	O
's	O
a	O
high	O
-	O
level	O
explanation	O
of	O
the	O
Python	B-TOOL_USED
script	I-TOOL_USED
:	O

[	O
Import	O
the	O
necessary	O
libraries	O
:	O
`	O
requests	O
`	O
and	O
`	O
string	O
`	O
.	O

Initialize	O
an	O
empty	O
`	O
flag	O
`	O
variable	O
,	O
and	O
define	O
the	O
search	O
domain	O
containing	O
all	O
possible	O
characters	O
.	O

Set	O
the	O
challenge	O
,	O
URL	O
,	O
check	O
,	O
key	O
,	O
and	O
column	O
variables	O
based	O
on	O
the	O
challenge	O
being	O
solved	O
(	O
either	O
"	O
taxi	O
union	O
"	O
or	O
"	O
gate	O
keeper	O
"	O
)	O
.	O

Enter	O
an	O
infinite	O
loop	O
that	O
iterates	O
through	O
each	O
character	O
in	O
the	O
search	O
domain	O
.	O

For	O
each	O
character	O
,	O
create	O
a	O
payload	O
containing	O
a	O
SQL	O
injection	O
query	O
using	O
the	O
current	O
flag	O
and	O
character	O
.	O

Send	O
an	O
HTTP	O
POST	O
request	O
to	O
the	O
URL	O
with	O
the	O
payload	O
as	O
the	O
data	O
.	O

Check	O
if	O
the	O
expected	O
response	O
text	O
is	O
found	O
in	O
the	O
received	O
response	O
.	O

If	O
the	O
expected	O
response	O
is	O
found	O
,	O
add	O
the	O
character	O
to	O
the	O
flag	O
and	O
print	O
it	O
.	O

Break	O
the	O
loop	O
once	O
the	O
flag	O
is	O
found	O
.	O
]	O

The	O
script	O
automates	O
the	O
process	O
of	O
testing	O
various	B-TOOL_USED
payloads	I-TOOL_USED
to	O
exploit	O
the	O
SQL	B-VULNERABILITY
Injection	I-VULNERABILITY
vulnerability	I-VULNERABILITY
and	O
retrieve	O
the	O
flag	O
.	O

