[
    "Provided a callback parameter.",
    "Steal the admin's cookie.",
    "Create a policy that only allows form submissions to a specific domain",
    "'smtp_exec' variable is used in sending activation emails",
    "Upon granting admin privileges",
    "Use the credentials for `http://app/` in the fetch request",
    "Ensure the injected `style` element is readable by the attacker",
    "Use the known hash of an empty string as a token value for authentication.",
    "Provide authentication to view the server logs.",
    "Use 'Host: app@ATTACKER_URL' to bypass the validation",
    "Use the custom host header to target your own host",
    "The first response is designed to pass the SSRF check.",
    "Identify that if the request token is wrong, then the 'request.accessGranted' attribute would not be set.",
    "Inspect the decoded payload.",
    "Identify the route as '/getFile?file=admins'.",
    "Download the '.env' file.",
    "Realize the split parts were stored against assigned keys",
    "Get the value from the cookie",
    "Pass the final payload '/admin'",
    "Run the server script with a new payload '?icecream={{application.settings[\"cookie_secret\"]}}'.",
    "Locate the 'Cookie' header in the HTTP request.",
    "Begin SQL Injection attack",
    "Infer from the knowledge of SQL Injection that the username and password input can be manipulated.",
    "Inject a classic SQL Injection payload (' or 1=1 -- ) into the username field.",
    "Inject a classic SQL Injection payload (' or 1=1 -- ) into the password field.",
    "Inject the SQL Injection payload into the username field.",
    "Inject the SQL Injection payload into the password field.",
    "Submit the manipulated username and password.",
    "Login with given credentials using the Google Chrome Network tab.",
    "Capture the payload of the response, identifying the included JWT token.",
    "Encode a new JWT token with the modified 'role'.",
    "Applied the payload to the live environment",
    "Examine the source code.",
    "Identify that 'RS256' and 'HS256' algorithms are allowed for decryption in 'challenge/helpers/JWTHelper.js'.",
    "After this, you should see the flag in your Flask terminal and in the 'cookies.txt' file.",
    "Intercept an HTTP request or use a cookie editor tool.",
    "Press 'login' on the login page.",
    "Use a Python script to brute force the password",
    "Retrieve the value of AUTH_SECRET from the .env file",
    "Identify the flag in the 'X-Localhost-Token' header in the received server response.",
    "Analyse the response of the authentication API",
    "Modify the value of 'admin_id' cookie to '1'",
    "Find the file named configs.zip on the webpage.",
    "Research methods of bypassing strict checks.",
    "Set a 'flag' variable based on the response of the previous POST request.",
    "Observe the presence of a CSRF token.",
    "Identify the user 'true.grit@umbccd.io' through PCAP analysis.",
    "Spot '@login_required' annotations as indicators.",
    "Step 2: Validate and insert into the database.",
    "Use the database credentials for authentication."
]