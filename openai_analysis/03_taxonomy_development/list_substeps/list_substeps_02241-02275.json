[
    "Perform extended analysis of the vulnerability",
    "Send POST request to upload the generated file.",
    "Bot clicking our link gave us the flag.",
    "Server code for /api/filter endpoint returns the hash of the user's token in the response",
    "Generate more base64 cookies.",
    "Receive 403 Forbidden.",
    "Open the provided challenge link",
    "Observe that global scope is the window object in HTML.",
    "Access the template files on the server.",
    "Observe the vulnerability's location after the ORDER BY clause",
    "Navigate to /flag",
    "Used the knowledge of the vulnerability to conclude that the web application potentially parses the HTML content and interpret it",
    "Attempt to log in the admin to a dummy Twitter account.",
    "Analyze the code.",
    "Note that /flag.txt is inaccessible",
    "Set permissions of the 'id' file to 777",
    "Caused problems.",
    "Retrieve the flag from the refreshed webpage",
    "Use the newly generated token as a cookie",
    "Recognize the usage of Flask's 'render_template_string' function",
    "Redirected the flag to a file in the invoices directory.",
    "Receive API documentation including the endpoints: /api/admin and /api/normal.",
    "Try out all remaining expected values.",
    "Learn about using the CASE clause to determine the column of the result being sorted",
    "Suggest to visit recently acquired companies.",
    "Understood the process of flag brute-forcing.",
    "Upon granting admin privileges",
    "Reveal the '/admin' directory's contents.",
    "Access the list functionality",
    "Access the '/admin' page",
    "Understood that 'password' = 'username' evaluates to 0",
    "Realized the IP address couldn't be overridden as a result.",
    "Blacklist works based on 'localhost' and '127'.",
    "Look for additional information in the file.",
    "Consider the downside of the above PoC - the potential strain on the server due to very long URLs"
]