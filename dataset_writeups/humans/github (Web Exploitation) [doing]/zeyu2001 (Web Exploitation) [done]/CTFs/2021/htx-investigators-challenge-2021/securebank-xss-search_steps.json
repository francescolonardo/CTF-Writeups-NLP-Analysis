{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Identify a web application vulnerability, specifically XS Leaks, from incoming responses at the '/checkbalance' endpoint."
            },
            {
                "StepNumber": 2,
                "StepString": "Notice that users are redirected if the queried amount exceeds their actual balance."
            },
            {
                "StepNumber": 3,
                "StepString": "Determine that window's history length can reveal whether a redirection occurred, thus allowing to approximate the user's balance."
            },
            {
                "StepNumber": 4,
                "StepString": "To adhere to Same Origin Policy, open a new window from the exploit server with the URL 'http://10.8.201.87:5000/checkbalance?amount=${num}'."
            },
            {
                "StepNumber": 5,
                "StepString": "Wait for the site to load. Depending on the balance, the window may be redirected to '/'."
            },
            {
                "StepNumber": 6,
                "StepString": "Change the window's location back to the exploit server for similarity of origins."
            },
            {
                "StepNumber": 7,
                "StepString": "Check the window's 'history.length' attribute to determine if a redirect occurred."
            },
            {
                "StepNumber": 8,
                "StepString": "Use trial and error to narrow down the appropriate number by controlling the number of intervals in the aforementioned steps."
            },
            {
                "StepNumber": 9,
                "StepString": "Build a HTML page to automated this process, using a JavaScript script that opens a window, checks redirection, and then guesses a number based on the window's history length."
            },
            {
                "StepNumber": 10,
                "StepString": "Use the 'tryNumber' function to navigate to the '/checkbalance' endpoint with a queried amount."
            },
            {
                "StepNumber": 11,
                "StepString": "Register a delay for the time it takes for the page to load and possibly redirect."
            },
            {
                "StepNumber": 12,
                "StepString": "Change the location of the pop-up back to the exploit server."
            },
            {
                "StepNumber": 13,
                "StepString": "Check the length of the window's history to determine if a redirection has occurred."
            },
            {
                "StepNumber": 14,
                "StepString": "If the history length is three, the balance has been exceeded. In that case, return false and the queried amount."
            },
            {
                "StepNumber": 15,
                "StepString": "Otherwise, return that the balance is exceeded and the queried amount."
            },
            {
                "StepNumber": 16,
                "StepString": "Start the checker for a number range."
            },
            {
                "StepNumber": 17,
                "StepString": "Post each successful guess to the exploit server."
            }
        ]
    }
}