{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Inspect the search feature of the provided platform"
            },
            {
                "StepNumber": 2,
                "StepString": "Look at the responses when searching for a note and examine the issued redirects"
            },
            {
                "StepNumber": 3,
                "StepString": "Notice the difference in redirect URLs when a note is found or not found"
            },
            {
                "StepNumber": 4,
                "StepString": "Consider the potential of exploiting the system by bloating the URL length (via the 'ids' parameter) to hit a limitation"
            },
            {
                "StepNumber": 5,
                "StepString": "Explore the possibility of detecting a client-side error when exceeding Chrome's maximum URL length (2MB)"
            },
            {
                "StepNumber": 6,
                "StepString": "Experiment with creating a URL that just hits the length limit and observe a redirection to an 'about:blank#blocked' page when the limit is exceeded"
            },
            {
                "StepNumber": 7,
                "StepString": "Notice that if the URL limit is hit, the origin of the page remains that of the parent window"
            },
            {
                "StepNumber": 8,
                "StepString": "Test the observation by creating a URL for a successful and unsuccessful query respectively and compare the resulting origins of the pages"
            },
            {
                "StepNumber": 9,
                "StepString": "Derive a proof-of-concept (PoC) to brute-force a character of the flag by exploiting the observed behavior"
            },
            {
                "StepNumber": 10,
                "StepString": "Leverage a backend server to eliminate unsuccessful queries and zero in on the correct flag"
            },
            {
                "StepNumber": 11,
                "StepString": "Consider the downside of the above PoC - the potential strain on the server due to very long URLs"
            },
            {
                "StepNumber": 12,
                "StepString": "Explore the alternative of exploiting Cross-Origin Resource Sharing (CORS) policy violation as a faster and more efficient method"
            },
            {
                "StepNumber": 13,
                "StepString": "Create a policy that only allows form submissions to a specific domain, so queries leading to a different domain will be blocked"
            },
            {
                "StepNumber": 14,
                "StepString": "Observe that the violation can be detected through a 'securitypolicyviolation' event listener"
            }
        ]
    }
}