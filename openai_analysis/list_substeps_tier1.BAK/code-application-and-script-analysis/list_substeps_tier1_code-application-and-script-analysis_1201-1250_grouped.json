{
    "Configuration and Source Code Analysis": [
        "Read the Apache configuration file.",
        "Read the Python source code for the web app.",
        "Find faulty secret key handling in the Python source code."
    ],
    "Payment System and SQL Injection": [
        "App was composed of frontend and payment backend.",
        "'request.args.get('amount')' was added to the user balance.",
        "Identified possibility to use 'Parameter Pollution' by having two 'amount' arguments.",
        "Username and signup date were passed into the SQL query.",
        "No sanitization was applied.",
        "Created a custom SQLMap tamper script.",
        "Ran SQLMap with the script.",
        "Experimented with `1' ORDER BY` commands.",
        "Determined that SELECT and UNION keywords were being filtered by regex.",
        "Attempted to uncover stored procedures and functions using `1'; SHOW PROCEDURE STATUS; SHOW FUNCTION STATUS;`.",
        "Levied MariaDB's support for the 'EXECUTE IMMEDIATE' command to run queries as strings.",
        "Used backticks around the numeric table name."
    ],
    "Privilege Escalation by Manipulating PATH Variable": [
        "Identified that the binary calls the 'id' command three times, with privileges",
        "Identified that the binary calls the 'id' command three times, without privileges",
        "Recognized the need to manipulate the PATH variable to execute arbitrary code when 'id' is called",
        "Recognized the need to manipulate the PATH variable due to the SUID flag being set",
        "Created a bash script",
        "Translated the bash script into a one-liner",
        "Created an 'id' file with the malicious payload",
        "Ensured the shell would execute the malicious 'id'"
    ],
    "Command Execution and Blacklist Filtering": [
        "Identify '/cmd.php' endpoint.",
        "Observe the existence of a blacklist filter.",
        "Execute 'cat cmd.php' command.",
        "View the code of 'cmd.php'.",
        "Observe the presence of the blacklist filter in the code.",
        "Examine the blacklist filter code.",
        "Identify the replacement of blacklisted characters.",
        "Identify the replacement of blacklisted commands.",
        "Identify the use of base64-encoded payloads.",
        "Construct a command.",
        "Include the base64-encoded payload in the command.",
        "Encode the payload using Python on the server."
    ],
    "Client-Side Code Manipulation": [
        "Create a JavaScript script within the HTML page.",
        "Open a window.",
        "Guess a number based on the window's history length."
    ],
    "Geolocation and Mathematical Functions": [
        "Implemented haversine formula"
    ],
    "Markdown Processing and XSS": [
        "Started analysing how the web application processes Markdown",
        "Sanitized HTML is added to document.body.innerHTML",
        "When the admin's hash is used, the /api/create handler does not sanitize data",
        "fromCharCode() is utilized to avoid escaping quotes"
    ],
    "Frontend Interaction and Note Management": [
        "Examine the init() function of the website.",
        "Identify that the init() function changes the displayed note's innerHTML to the /get response on load.",
        "Examine the /get endpoint.",
        "Examine the /add endpoint.",
        "Realize that although XSS can be performed, it would only affect the currently logged in user and not the admin.",
        "Examine the /find endpoint.",
        "Use JavaScript code using `document.cookie` to control variables in the payload."
    ]
}