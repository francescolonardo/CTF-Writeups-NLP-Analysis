{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "The email's input validation was bypassed through injection, as it only required the email to start validly, allowing any characters afterwards",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Bypassed input validation"
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Email only required to start validly"
                    },
                    {
                        "SubstepNumber": 1.3,
                        "SubstepString": "Any characters allowed after the valid start of email"
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "A negative 'rate' value was inputted when updating the status to bypass the duration check",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Inputted negative 'rate' value"
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Bypassed duration check"
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Arbitrary HTML was injected, which would be rendered by pdfkit/wkhtmltopdf",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Injected arbitrary HTML"
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "HTML rendering by pdfkit/wkhtmltopdf"
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "An iframe was injected, with the 'src' set to local files. This enabled a leak of the secret key '19eb794c831f30f099a31b1c095a17d6' from the 'config.py'",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Injected iframe"
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "'src' set to local files"
                    },
                    {
                        "SubstepNumber": 4.3,
                        "SubstepString": "Leaked secret key '19eb794c831f30f099a31b1c095a17d6' from 'config.py'"
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "The leaked secret key was then used to fake a session with 'is_admin' privileges, which allowed for reading the flag",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Used leaked secret key"
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Faked session with 'is_admin' privileges"
                    },
                    {
                        "SubstepNumber": 5.3,
                        "SubstepString": "Allowed reading the flag"
                    }
                ]
            }
        ]
    }
}