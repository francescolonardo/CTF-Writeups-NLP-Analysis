{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Started the challenge by finding the /login/ endpoint and a www.zip file using dirsearch",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Find the /login/ endpoint using dirsearch."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Find a www.zip file using dirsearch."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Opened the www.zip file to find the source code of the web app",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Open the www.zip file."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Find the source code of the web app in the www.zip file."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Identified the login process in the file bookhub/forms.user.py",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Identify the login process in the file bookhub/forms.user.py."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Noticed the login occurs only if the user's IP address is one of the whitelisted IP addresses or when the debug mode is enabled. Found that the get_remote_addr() function from the file bookhub/helper.py is used to get the user's IP address",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Notice that the login occurs only if the user's IP address is one of the whitelisted IP addresses or when the debug mode is enabled."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Find that the get_remote_addr() function from the file bookhub/helper.py is used to get the user's IP address."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Added the header X-Forwarded-For, but got an error message that the IP address was not in the whitelist",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Add the header X-Forwarded-For to the request."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Receive an error message that the IP address was not in the whitelist."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Suspected a reverse proxy might be stripping the X-Forwarded-For header",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Suspect that a reverse proxy might be stripping the X-Forwarded-For header."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Did a nmap scan on IP 18.213.16.123 which was not a local IP",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Perform an nmap scan on IP 18.213.16.123."
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Confirm that IP 18.213.16.123 is not a local IP."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Opened http://18.213.16.123:5000/ and found out the web app run in the debug mode",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Open http://18.213.16.123:5000/ in a web browser."
                    },
                    {
                        "SubstepNumber": 8.2,
                        "SubstepString": "Discover that the web app is running in debug mode."
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Identified some extra code for the debug mode in the bookhub/views/user.py file",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Identify extra code for the debug mode in the file bookhub/views/user.py."
                    }
                ]
            },
            {
                "StepNumber": 10,
                "StepString": "Discovered a bug in the /admin/system/refresh_session/ endpoint which could be accessed without authentication",
                "Substeps": [
                    {
                        "SubstepNumber": 10.1,
                        "SubstepString": "Discover a bug in the /admin/system/refresh_session/ endpoint."
                    },
                    {
                        "SubstepNumber": 10.2,
                        "SubstepString": "Realize that the endpoint can be accessed without authentication."
                    }
                ]
            },
            {
                "StepNumber": 11,
                "StepString": "Identified there is a potential for a redis injection flaw in the refresh_session() function, where the user's sessionID is used in a redis eval() call with a lua script",
                "Substeps": [
                    {
                        "SubstepNumber": 11.1,
                        "SubstepString": "Identify a potential redis injection flaw in the refresh_session() function."
                    },
                    {
                        "SubstepNumber": 11.2,
                        "SubstepString": "Notice that the user's sessionID is used in a redis eval() call with a lua script."
                    }
                ]
            },
            {
                "StepNumber": 12,
                "StepString": "Duplicated the server environment and set up a redis server to construct an exploit",
                "Substeps": [
                    {
                        "SubstepNumber": 12.1,
                        "SubstepString": "Duplicate the server environment."
                    },
                    {
                        "SubstepNumber": 12.2,
                        "SubstepString": "Set up a redis server."
                    },
                    {
                        "SubstepNumber": 12.3,
                        "SubstepString": "Construct an exploit."
                    }
                ]
            },
            {
                "StepNumber": 13,
                "StepString": "Revealed that session data is stored as a serialized pickle python object, which could potentially be exploited for a pickle deserialization vulnerability",
                "Substeps": [
                    {
                        "SubstepNumber": 13.1,
                        "SubstepString": "Reveal that session data is stored as a serialized pickle python object."
                    },
                    {
                        "SubstepNumber": 13.2,
                        "SubstepString": "Realize that the pickle python object could potentially be exploited for a pickle deserialization vulnerability."
                    }
                ]
            },
            {
                "StepNumber": 14,
                "StepString": "Created a script which modified sessionID to valid lua, refreshed the CSRF token and sent a POST request to the /admin/system/refresh_session/ endpoint",
                "Substeps": [
                    {
                        "SubstepNumber": 14.1,
                        "SubstepString": "Create a script to modify the sessionID to valid lua."
                    },
                    {
                        "SubstepNumber": 14.2,
                        "SubstepString": "Refresh the CSRF token."
                    },
                    {
                        "SubstepNumber": 14.3,
                        "SubstepString": "Send a POST request to the /admin/system/refresh_session/ endpoint."
                    }
                ]
            },
            {
                "StepNumber": 15,
                "StepString": "Constructed a payload to do a redis.call() to set the serialized object with the sessionID and made a GET request to /login/ to trigger the deserialization",
                "Substeps": [
                    {
                        "SubstepNumber": 15.1,
                        "SubstepString": "Construct a payload to do a redis.call() to set the serialized object with the sessionID."
                    },
                    {
                        "SubstepNumber": 15.2,
                        "SubstepString": "Make a GET request to /login/ to trigger the deserialization."
                    }
                ]
            },
            {
                "StepNumber": 16,
                "StepString": "Created a final script to send the command for flag extraction to the server",
                "Substeps": [
                    {
                        "SubstepNumber": 16.1,
                        "SubstepString": "Create a final script to send the command for flag extraction to the server."
                    }
                ]
            }
        ]
    }
}