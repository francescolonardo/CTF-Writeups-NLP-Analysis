Title: Abusing Open Redirect Vulnerability to Perform Phishing Attacks
Primary topic: Web Exploitation
Secondary topic: Open Redirect Vulnerability
Tools used: None
Keywords: phishing, validation, sanitizing, user-supplied URLs, compromised accounts, flag

#overview
During a CTF event, the author encountered a web application that allowed users to input a URL, which would then redirect the user to that destination. The author suspected that this functionality could be vulnerable to an Open Redirect attack, which could allow an attacker to create malicious URLs that redirect users to attacker-controlled websites. To test for an Open Redirect vulnerability, the author crafted a URL that included a redirection to an attacker-controlled website. Upon navigating to the modified URL, the application redirected the author to the attacker-controlled website, confirming the presence of an Open Redirect vulnerability.

#analysis
To exploit this vulnerability, the author created a phishing page that mimicked the appearance of the original web application and hosted it on the attacker-controlled website. The author then crafted a malicious URL that redirected users to the phishing page and distributed the URL to unsuspecting users. By doing so, the author was able to capture their login credentials and gain unauthorized access to their accounts. Inside one of the compromised accounts, the author found the flag for the Web Exploitation challenge.

#attack_execution
The author emphasizes the importance of properly validating and sanitizing user-supplied URLs in web applications to prevent Open Redirect vulnerabilities. By exploiting the Open Redirect vulnerability, the author was able to perform phishing attacks, compromise user accounts, and obtain the flag needed to complete the challenge.

[CODE_REMOVED]

During a CTF event, the author encountered a web application that allowed users to input a URL, which would then redirect the user to that destination. This functionality caught my attention, as it could potentially be vulnerable to an Open Redirect attack, allowing an attacker to create malicious URLs that redirect users to attacker-controlled websites.

To test for an Open Redirect vulnerability, I crafted a URL that included a redirection to an attacker-controlled website. For example, if the original URL was https://example.com/redirect?url=https://google.com, I modified it to https://example.com/redirect?url=https://attacker.com.

Upon navigating to the modified URL, the application redirected me to the attacker-controlled website, confirming the presence of an Open Redirect vulnerability.

To exploit this vulnerability, I created a phishing page that mimicked the appearance of the original web application and hosted it on my attacker-controlled website. I then crafted a malicious URL that redirected users to my phishing page and distributed the URL to unsuspecting users. By doing so, I was able to capture their login credentials and gain unauthorized access to their accounts.

Inside one of the compromised accounts, I found the flag for the Web Exploitation challenge.

This CTF writeup emphasizes the importance of properly validating and sanitizing user-supplied URLs in web applications to prevent Open Redirect vulnerabilities. By exploiting the Open Redirect vulnerability, I was able to perform phishing attacks, compromise user accounts, and obtain the flag needed to complete the challenge.