{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Followed the challenge description and noted the use of the 'flask_caching' module for the app",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Followed the challenge description"
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Noted the use of the 'flask_caching' module for the app"
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Researched and found that the 'flask_caching' module can optionally store a python pickle in redis with a prepended '!'",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Researched the 'flask_caching' module"
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Found that the 'flask_caching' module can store a python pickle in redis"
                    },
                    {
                        "SubstepNumber": 2.3,
                        "SubstepString": "Discovered that the python pickle can be prepended with '!'"
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Learned that python pickles can be used for Remote Code Execution when the caching modules use 'pickle.load()' to load the cached data",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Learned about python pickles"
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Understood how python pickles can be used for Remote Code Execution"
                    },
                    {
                        "SubstepNumber": 3.3,
                        "SubstepString": "Realized that caching modules use 'pickle.load()' to load cached data"
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Set up a netcat listener on my server",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Prepared my server for listening with netcat"
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Set up a netcat listener on my server"
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Wrote a script which: constructs a command to be executed, creates a payload using python pickle containing a command execution statement, sleeps for half a second, reads the just created payload, and then sends it to the challenge webpage URL using a POST request",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Constructed a command to be executed"
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Created a payload using python pickle containing a command execution statement"
                    },
                    {
                        "SubstepNumber": 5.3,
                        "SubstepString": "Slept for half a second"
                    },
                    {
                        "SubstepNumber": 5.4,
                        "SubstepString": "Read the just created payload"
                    },
                    {
                        "SubstepNumber": 5.5,
                        "SubstepString": "Sent the payload to the challenge webpage URL using a POST request"
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Used a GET request to access the cache data that triggers the command execution on the server side",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Sent a GET request to access the cache data"
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Triggered the command execution on the server side"
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Observed the output on my netcat listener, which included the CTF flag",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Observed the output on my netcat listener"
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Identified the CTF flag"
                    }
                ]
            }
        ]
    }
}