[
    "Identified a Server-Side Template Injection (SSTI) vulnerability on a Flask webpage with certain blacklisted words as restriction",
    "Determined a method of bypassing the Jinja2 SSTI filters using GET request arguments and accessing them through `request.args`",
    "Used `attr()` to pass the blacklisted characters, this Jenja2 built-in filter gets an attribute of an object and the payload `/submit?value={{()|attr(request.args.c)}}&c=__class__` resulted in `().__class__` being evaluated and displayed to the user",
    "Used the method `().__class__.__base__.__subclasses__()` to get subclasses of the base class",
    "Formulated a GET request that accessed the subclass information",
    "Copied the output and used a Python script to find `<class 'subprocess.Popen'>` in the subclasses and found it at index 258",
    "Accessed this index to leverage `subprocess.Popen` to achieve Remote Code Execution (RCE)",
    "Constructed another GET request to execute 'ls' command on the server using `subprocess.Popen`",
    "Finally, read the flag file `cat flag.txt` and obtained the flag"
]