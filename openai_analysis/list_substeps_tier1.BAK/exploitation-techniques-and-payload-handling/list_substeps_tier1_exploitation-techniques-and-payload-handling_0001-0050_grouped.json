{
    "Remote Code Execution": [
        "Realized '$text' was passed into 'exec' leading to potential remote code execution.",
        "Input the payload '; ls #'.",
        "Input the payload to attempt to spawn a reverse shell.",
        "Understood how python pickles can be used for Remote Code Execution",
        "Realize that the critical line could potentially lead to Remote Command Execution (RCE).",
        "Understand that the interaction with the filename being uploaded is the potential vulnerability for RCE.",
        "Begin preparing an attack.",
        "Decide to exploit the RCE vulnerability.",
        "Craft a payload for the attack.",
        "Obtain the flag",
        "Retrieve the flag"
    ],
    "SQL Injection": [
        "Begin SQL Injection attack",
        "Use combination of uppercase, lowercase, numbers, underscore, and curly braces for domain",
        "Use OR operator to guess the next character in the password",
        "The author identifies it as a SQL Injection challenge.",
        "In each iteration, the author forms SQL Injection payload.",
        "If the check is successful, it indicates that the payload was able to pass through SQL Injection.",
        "Submitted the payload 'csrf&username=michelle&password[username]=michelle'",
        "Understood that 0 compared with 'michelle' returns true",
        "The payload was included in the request",
        "Identify the challenge as a beginner SQL Injection challenge.",
        "Infer from the knowledge of SQL Injection that the username and password input can be manipulated.",
        "Inject a classic SQL Injection payload (' or 1=1 -- ) into the username field.",
        "Inject a classic SQL Injection payload (' or 1=1 -- ) into the password field.",
        "Inject the SQL Injection payload into the username field.",
        "Inject the SQL Injection payload into the password field."
    ],
    "Template Injection": [
        "Discover a template injection vulnerability.",
        "Exploit the template injection vulnerability."
    ],
    "Cross-Site Scripting (XSS)": [
        "Assume a Local File Inclusion (LFI) exploitation is required",
        "Devise a payload.",
        "Bypass the bracket-based sanitization by adding an extra '>' in the start.",
        "Exploit the arbitrary JavaScript execution via a broken image tag's onerror handler.",
        "Submit the crafted URL to the Admin Bot.",
        "XSS payload is executed.",
        "Notice the challenge is about Cross-Site Scripting (XSS).",
        "Craft an XSS payload.",
        "Utilize the specified attributes to redirect.",
        "Generate a webpage with the XSS payload.",
        "Include the XSS payload in the URL."
    ],
    "Miscellaneous": [
        "Identify that the vulnerability lies in Express query parsing",
        "Note that filename restrictions need to be bypassed to get the flag",
        "Test CSS injection",
        "Use iterative deepening",
        "Inject CSS through the input box",
        "Pass the final payload '/admin'",
        "Understand that brute forcing is not a viable option.",
        "Understand that these hashes match the target through brute forcing."
    ]
}