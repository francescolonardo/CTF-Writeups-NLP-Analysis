The website allows you to upload and comment pictures of dogs.

There is an interesting endpoint at that contains a remote shell functionality, but it can't be used due to an `HTTP 502 Bad Gateway` error caused by the presence of `seccomp` filter, which prevents `execve`.

Several functionalities can be used only by authenticated users (i.e. `@login_required` annotations). There is an endpoint that can be used to create new users, but even this functionality requires the login.

A public functionality is the `<postid>` that can be used to insert a new comment under a picture.

The comment is inserted with a two-step procedure: the comment is inserted like a preview and showed into the webpage; the content of the comment is strictly validated and inserted into the database.

Analyzing the code for the first step, in the python script, an interesting line of code can be found into `get_comments` function.

The interesting line is the following.

[Python code that formats a comment string using the contents of a dictionary attribute "self.dict" and assigns it to a variable named "fmt_cmt".]

It seems that if you use a format string like `{rating}` into the comment text, then the content of `self.__dict__` can be printed.

Trying it, the following content will be printed into the preview webpage.

[HTML code containing an unordered list with class "square" and a Python dictionary nested within a string.]

This code can be abused to read secret data.

The following code can be used to access *globals* objects.

[Python expression that retrieves the global variables dictionary of the init method of the first element in the "comments" list of the "rating" dictionary.]

From the output you can spot user credentials.

So now you can authenticate into the system and create new users.

During the authentication, an interesting behavior can be spot. The `login` method uses the f-Strings functionality of Python 3, which is a very powerful formatting syntax and can be used to call methods.

[Python Flask route handler function for the "login" URL that accepts both GET and POST requests. It processes a login form, authenticates the user with the provided username and password, and redirects the user to the appropriate page based on the result of the login attempt.]

The interesting line is the following.

[Python code that returns a redirect to a specific URL, constructed by appending a query string with a welcome message containing user information to the base URL obtained from the request's host URL.]

The `get_user_info` method of the `User` class uses the `f()` method, instead of the `f""` one, on the `username` field; this method is the legacy one of f-Strings Python 2 implementation. The library implemented the f-Strings functionality by using an `eval`.

[Python code that imports a custom module named "fstring" and defines a method named "get_user_info" that returns a formatted string using the instance variable "self.username".]

So you can create a new user with a malicious username that could trigger a RCE during the authentication. The malicious username is: `{open('/flag').read()}`.

Authenticating with this user, you will be redirect to the following an address that contains the flag in the URL.