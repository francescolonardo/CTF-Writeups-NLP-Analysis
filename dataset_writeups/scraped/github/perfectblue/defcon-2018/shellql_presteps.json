[
    "The challenge entailed shellcoding in the context of PHP to make SQL queries under a sandbox environment",
    "The challenge offered a shared object entitled `shellme.so` and a website",
    "By appending `?source` to the index.php of the site, the source code was made visible",
    "The source code shows when a GET request is sent with 'source' as a parameter, it reveals the source code of the file",
    "Source code also shows if a POST request is made with 'shell' as a parameter, it echoes the input and sends it to the `shellme()` function, as long as it keeps a 1000 characters limit",
    "Given function `shellme()` gets defined in the shared object `shellme.so`",
    "In the shared object file `shellme.so`, the function `shellme()` gets tracked, leading to a function `shell_this()`, where the given input copies to a mmap-ed memory region",
    "It puts a `SECCOMP_MODE_STRICT` seccomp sandbox into play before executing the input, allowing only read, write, and exit syscalls",
    "It notes that the function uses strlen(), which will truncate any shellcode at null bytes",
    "The PHP code reveals a connection to the MySQL server before executing the shellcode",
    "The description of the challenge clarifies that the flag is in the MySQL 'flag' table",
    "This means the File Descriptor (FD) for connection to MySQL server is open before executing shellcode, so SQL queries can be sent to it and get the response read",
    "Given that the server runs php-cgi, to conduct the MySQL query, a php-cgi header has to first be written",
    "Then the SQL query has to be sent to the File Descriptor (FD) 4 ( MySQL server ), then the response has to be read as it is received, and lastly, the received response has to be written to stdout",
    "Forming the MySQL query following the MySQL docs under the protocol level results in the following: little-endian, 4 bytes, the length of the written query, a 1-byte query type (0x3 for this query), followed by the query itself",
    "The goal consists of writing the cgi header (Content-type: text/html), sending the SQL query to the FD 4 (MySQL server), reading the response from this FD, and finally, writing the received response",
    "A Python-based environment was set up to assemble and debug a shellcode",
    "The shellcode used JMP - CALL - POP technique to get the strings in registers",
    "At the same time, relative JMPs were turned into PLT type trampolines to avoid big JMPs with null bytes-NOP Sled to gracefully handle oversized jumps",
    "The shellcode was created and verified with no NULL bytes, to operate as expected with the `strlen()` function of the 'shellme()' function inside the `shellme.so` file",
    "Once verified and assembled, the shellcode was executed to obtain the desired output - 'Content-type: text/html' cgi header, SQL query sent to the FD 4, read the response from FD 4, write this response"
]