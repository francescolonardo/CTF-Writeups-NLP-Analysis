{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "The challenge entailed shellcoding in the context of PHP to make SQL queries under a sandbox environment",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "The challenge entailed shellcoding in the context of PHP to make SQL queries under a sandbox environment."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "The challenge offered a shared object entitled `shellme.so` and a website",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Identified the presence of a shared object entitled `shellme.so`."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Noticed a website related to the challenge."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "By appending `?source` to the index.php of the site, the source code was made visible",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Appended `?source` to the index.php of the site."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Observed that the source code of the site became visible."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "The source code shows when a GET request is sent with 'source' as a parameter, it reveals the source code of the file",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Reviewed the source code."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Determined that sending a GET request with 'source' as a parameter reveals the source code."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Source code also shows if a POST request is made with 'shell' as a parameter, it echoes the input and sends it to the `shellme()` function, as long as it keeps a 1000 characters limit",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Identified from the source code that a POST request with 'shell' as a parameter echoes the input."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Understood that the echoed input is sent to the `shellme()` function with a character limit of 1000."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Given function `shellme()` gets defined in the shared object `shellme.so`",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Determined that the function `shellme()` is defined in the shared object `shellme.so`."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "In the shared object file `shellme.so`, the function `shellme()` gets tracked, leading to a function `shell_this()`, where the given input copies to a mmap-ed memory region",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Tracked the function `shellme()` inside the `shellme.so` shared object file."
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Found that `shellme()` leads to the function `shell_this()`."
                    },
                    {
                        "SubstepNumber": 7.3,
                        "SubstepString": "Identified that the input is copied to a mmap-ed memory region within the function."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "It puts a `SECCOMP_MODE_STRICT` seccomp sandbox into play before executing the input, allowing only read, write, and exit syscalls",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Noticed the use of `SECCOMP_MODE_STRICT` seccomp sandbox."
                    },
                    {
                        "SubstepNumber": 8.2,
                        "SubstepString": "Determined that it allows only read, write, and exit syscalls before executing the input."
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "It notes that the function uses strlen(), which will truncate any shellcode at null bytes",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Identified the use of strlen() function within the code."
                    },
                    {
                        "SubstepNumber": 9.2,
                        "SubstepString": "Realized this would truncate any shellcode at null bytes."
                    }
                ]
            },
            {
                "StepNumber": 10,
                "StepString": "The PHP code reveals a connection to the MySQL server before executing the shellcode",
                "Substeps": [
                    {
                        "SubstepNumber": 10.1,
                        "SubstepString": "Reviewed the PHP code closely."
                    },
                    {
                        "SubstepNumber": 10.2,
                        "SubstepString": "Discovered a connection being made to a MySQL server prior to shellcode execution."
                    }
                ]
            },
            {
                "StepNumber": 11,
                "StepString": "The description of the challenge clarifies that the flag is in the MySQL 'flag' table",
                "Substeps": [
                    {
                        "SubstepNumber": 11.1,
                        "SubstepString": "Read the challenge's description."
                    },
                    {
                        "SubstepNumber": 11.2,
                        "SubstepString": "Understood that the desired flag is located within the 'flag' table in MySQL."
                    }
                ]
            },
            {
                "StepNumber": 12,
                "StepString": "This means the File Descriptor (FD) for connection to MySQL server is open before executing shellcode, so SQL queries can be sent to it and get the response read",
                "Substeps": [
                    {
                        "SubstepNumber": 12.1,
                        "SubstepString": "Identified that the File Descriptor (FD) for MySQL server connection is open before shellcode execution."
                    },
                    {
                        "SubstepNumber": 12.2,
                        "SubstepString": "Realized SQL queries can be dispatched to this open FD to read responses."
                    }
                ]
            },
            {
                "StepNumber": 13,
                "StepString": "Given that the server runs php-cgi, to conduct the MySQL query, a php-cgi header has to first be written",
                "Substeps": [
                    {
                        "SubstepNumber": 13.1,
                        "SubstepString": "Understood that the server is running php-cgi."
                    },
                    {
                        "SubstepNumber": 13.2,
                        "SubstepString": "Recognized the necessity to write a php-cgi header before executing the MySQL query."
                    }
                ]
            },
            {
                "StepNumber": 14,
                "StepString": "Then the SQL query has to be sent to the File Descriptor (FD) 4 ( MySQL server ), then the response has to be read as it is received, and lastly, the received response has to be written to stdout",
                "Substeps": [
                    {
                        "SubstepNumber": 14.1,
                        "SubstepString": "Prepared the SQL query to send to File Descriptor (FD) 4, which is the MySQL server."
                    },
                    {
                        "SubstepNumber": 14.2,
                        "SubstepString": "Waited and read the response as it came in."
                    },
                    {
                        "SubstepNumber": 14.3,
                        "SubstepString": "Wrote the received response to stdout."
                    }
                ]
            },
            {
                "StepNumber": 15,
                "StepString": "Forming the MySQL query following the MySQL docs under the protocol level results in the following: little-endian, 4 bytes, the length of the written query, a 1-byte query type (0x3 for this query), followed by the query itself",
                "Substeps": [
                    {
                        "SubstepNumber": 15.1,
                        "SubstepString": "Referenced the MySQL documentation related to the protocol level."
                    },
                    {
                        "SubstepNumber": 15.2,
                        "SubstepString": "Constructed the MySQL query ensuring it follows the little-endian, 4 bytes format for length, used 1-byte for query type (0x3 for this specific query), and then added the actual query content."
                    }
                ]
            },
            {
                "StepNumber": 16,
                "StepString": "The goal consists of writing the cgi header (Content-type: text/html), sending the SQL query to the FD 4 (MySQL server), reading the response from this FD, and finally, writing the received response",
                "Substeps": [
                    {
                        "SubstepNumber": 16.1,
                        "SubstepString": "Wrote the cgi header with 'Content-type: text/html'."
                    },
                    {
                        "SubstepNumber": 16.2,
                        "SubstepString": "Sent the SQL query to FD 4 (MySQL server)."
                    },
                    {
                        "SubstepNumber": 16.3,
                        "SubstepString": "Read the response from FD 4."
                    },
                    {
                        "SubstepNumber": 16.4,
                        "SubstepString": "Wrote the received response to the intended output."
                    }
                ]
            },
            {
                "StepNumber": 17,
                "StepString": "A Python-based environment was set up to assemble and debug a shellcode",
                "Substeps": [
                    {
                        "SubstepNumber": 17.1,
                        "SubstepString": "Set up a Python-based environment."
                    },
                    {
                        "SubstepNumber": 17.2,
                        "SubstepString": "Utilized the environment to assemble and debug shellcode."
                    }
                ]
            },
            {
                "StepNumber": 18,
                "StepString": "The shellcode used JMP - CALL - POP technique to get the strings in registers",
                "Substeps": [
                    {
                        "SubstepNumber": 18.1,
                        "SubstepString": "Designed the shellcode."
                    },
                    {
                        "SubstepNumber": 18.2,
                        "SubstepString": "Employed the JMP - CALL - POP technique within the shellcode to acquire strings in the registers."
                    }
                ]
            },
            {
                "StepNumber": 19,
                "StepString": "At the same time, relative JMPs were turned into PLT type trampolines to avoid big JMPs with null bytes-NOP Sled to gracefully handle oversized jumps",
                "Substeps": [
                    {
                        "SubstepNumber": 19.1,
                        "SubstepString": "Transformed relative JMPs into PLT type trampolines."
                    },
                    {
                        "SubstepNumber": 19.2,
                        "SubstepString": "This was done to prevent large JMPs containing null bytes."
                    },
                    {
                        "SubstepNumber": 19.3,
                        "SubstepString": "Introduced NOP Sled to efficiently manage oversized jumps."
                    }
                ]
            },
            {
                "StepNumber": 20,
                "StepString": "The shellcode was created and verified with no NULL bytes, to operate as expected with the `strlen()` function of the 'shellme()' function inside the `shellme.so` file",
                "Substeps": [
                    {
                        "SubstepNumber": 20.1,
                        "SubstepString": "Created the shellcode ensuring it has no NULL bytes."
                    },
                    {
                        "SubstepNumber": 20.2,
                        "SubstepString": "Verified the shellcode's functionality and ensured compatibility with the `strlen()` function within 'shellme()' in the `shellme.so` file."
                    }
                ]
            },
            {
                "StepNumber": 21,
                "StepString": "Once verified and assembled, the shellcode was executed to obtain the desired output - 'Content-type: text/html' cgi header, SQL query sent to the FD 4, read the response from FD 4, write this response",
                "Substeps": [
                    {
                        "SubstepNumber": 21.1,
                        "SubstepString": "Executed the verified and assembled shellcode."
                    },
                    {
                        "SubstepNumber": 21.2,
                        "SubstepString": "Observed the expected output - 'Content-type: text/html' cgi header."
                    },
                    {
                        "SubstepNumber": 21.3,
                        "SubstepString": "Noted that the SQL query was sent to FD 4."
                    },
                    {
                        "SubstepNumber": 21.4,
                        "SubstepString": "Read the response from FD 4."
                    },
                    {
                        "SubstepNumber": 21.5,
                        "SubstepString": "Wrote the received response as the final output."
                    }
                ]
            }
        ]
    }
}
