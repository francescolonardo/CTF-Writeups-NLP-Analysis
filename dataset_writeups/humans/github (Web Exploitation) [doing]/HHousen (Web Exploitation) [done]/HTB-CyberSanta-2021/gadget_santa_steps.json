{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Observe the website output, which appears like standard Linux commands."
            },
            {
                "StepNumber": 2,
                "StepString": "Test for command injection by appending `ls` to the URL, confirming the vulnerability."
            },
            {
                "StepNumber": 3,
                "StepString": "Examine the source code, finding that the input is sanitized and passed as an argument to `santa_mon.sh`."
            },
            {
                "StepNumber": 4,
                "StepString": "Investigate the `santa_mon.sh` program, discovering that it executes commands based on input."
            },
            {
                "StepNumber": 5,
                "StepString": "Analyze the `config/ups_manager.py` file, finding a `/get_flag` endpoint."
            },
            {
                "StepNumber": 6,
                "StepString": "Craft a command injection payload without spaces, using the `IFS` variable."
            },
            {
                "StepNumber": 7,
                "StepString": "Wrap the payload in double quotes to ensure it is interpreted correctly."
            },
            {
                "StepNumber": 8,
                "StepString": "Execute the final payload using the URL, retrieving the flag."
            }
        ]
    }
}