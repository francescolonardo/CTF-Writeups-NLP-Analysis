The website contains a login form with two different authentications, user credentials and guest account, managed by a the script auth.js.

Analyzing the JavaScript, you can discover that a query to a GraphQL endpoint is performed with the standard authentication. Credentials are put into cookies.

Guest credentials, decoded from base64, are the following.

Connecting as guest, you can reach the dashboard listing all the data and discover main.js which contacts the GraphQL backend to retrieve data.

Queries discovered till now are the following:
mutation { login(username:"username", password:"password")};
query Query { Challs { id title description category author points }}.

You can enumerate types and dump the database schema.

With graphql-voyager you can easily view the schema structure.

The ID of the challenge that should have the flag is `35`. You can try to retrieve the flag, but you will discover that you are not authorized.

There is a query, `allUsers`, that can be used to retrieve users data.

So you can craft the authentication cookie for the administrator.

And then retrieve the data for the challenge with a POST request.

You can read hint data too.

You can dump all challenges data, but there is no flag at all.

With the following payload, you can discover a SQL error.

So you can craft a SQL injection payload discovering the flag.