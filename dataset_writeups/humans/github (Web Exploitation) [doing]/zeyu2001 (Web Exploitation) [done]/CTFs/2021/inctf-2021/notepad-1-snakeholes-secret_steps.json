{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Identify the website's vulnerability to XSS."
            },
            {
                "StepNumber": 2,
                "StepString": "Examine the init() function of the website, which changes the displayed note's innerHTML to the /get response on load."
            },
            {
                "StepNumber": 3,
                "StepString": "Discover the user can add notes via a POST request to /add."
            },
            {
                "StepNumber": 4,
                "StepString": "Examine the /get and /add endpoints and their relationship with user's ID cookie in the Notes map."
            },
            {
                "StepNumber": 5,
                "StepString": "Recognize the XSS prevention methods implemented by the site - cookies are set to prevent XSS for all API endpoints."
            },
            {
                "StepNumber": 6,
                "StepString": "Realize that although XSS can be performed, it would only affect the currently logged in user and not the admin."
            },
            {
                "StepNumber": 7,
                "StepString": "Examine the /find endpoint which takes the condition, startsWith , endsWith, and debug parameters."
            },
            {
                "StepNumber": 8,
                "StepString": "Discover that the /find endpoint can be used for Response Header Injection."
            },
            {
                "StepNumber": 9,
                "StepString": "Use the /find endpoint to inject a Set-Cookie header to set the admin's ID cookie to your own session."
            },
            {
                "StepNumber": 10,
                "StepString": "Preserve the original admin's ID by setting the Path of the custom cookie to /get which allows to use the original admin ID in the /find endpoint."
            },
            {
                "StepNumber": 11,
                "StepString": "Create a XSS payload that fits within the 75 character limit to be stored. In this case, JavaScript code using `document.cookie` to control variables."
            },
            {
                "StepNumber": 12,
                "StepString": "Use the /find endpoint to encode the cookie-characters as response headers."
            },
            {
                "StepNumber": 13,
                "StepString": "Create a Python script to generate URLs that set cookies with parts of manipulated JavaScript code."
            },
            {
                "StepNumber": 14,
                "StepString": "Modify the output of the Python code to look like a JavaScript script to be executed."
            },
            {
                "StepNumber": 15,
                "StepString": "In this script, manipulate the multiple URL opens to actual browser window opens."
            },
            {
                "StepNumber": 16,
                "StepString": "Set malicious cookies by having the user (admin) visit these URLs."
            },
            {
                "StepNumber": 17,
                "StepString": "Redirect the user to the main site."
            },
            {
                "StepNumber": 18,
                "StepString": "The malicious JavaScript code is executed on client's side, which fetches an exploitative script and runs it in the background."
            },
            {
                "StepNumber": 19,
                "StepString": "Perform a CSRF to the /find endpoint to retrieve the flag and make a callback to our server with the data."
            },
            {
                "StepNumber": 20,
                "StepString": "Extract the flag from the response received on the callback URL."
            }
        ]
    }
}