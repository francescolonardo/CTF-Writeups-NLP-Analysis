Title: Server-Side Template Injection Exploitation to Gain Remote Code Execution
Primary topic: Web Exploitation
Secondary topic: Server-Side Template Injection
Tools used: None
Keywords: SSTI, Jinja2, arbitrary code execution, flag file

#overview
During a CTF competition, the author encountered a web application that allowed users to create custom templates using a templating engine. The author suspected that this functionality might be vulnerable to Server-Side Template Injection (SSTI), which could potentially allow them to execute arbitrary code on the server.

#analysis
To test for an SSTI vulnerability, the author provided a template input that contained a simple expression, such as {{ 7 * 7 }}, and observed the output. If the web application returned the evaluated result of the expression (e.g., 49), it would confirm the presence of an SSTI vulnerability.

#attack_execution
To exploit the SSTI vulnerability and obtain the flag for the Web Exploitation challenge, the author crafted a template input that contained code to read the content of the flag file. For example, the following input could be used in the case of a Jinja2 templating engine:

```
{{ ''.__class__.__mro__[1].__subclasses__()[40]('/path/to/flag.txt').read() }}
```

After submitting the crafted input, the web application executed the code and displayed the content of the flag file, allowing the author to obtain the flag needed to complete the challenge.

The CTF writeup highlights the importance of securely handling and processing user input in web applications that utilize server-side templating engines to prevent SSTI vulnerabilities. By exploiting the SSTI vulnerability, the author was able to execute arbitrary code on the server and obtain the flag needed to complete the challenge.

[CODE_REMOVED]