{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Identify the `report` admin page as vulnerable to SQL injection from the id parameter, allowing leakage of one column of information directly to the output.",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Inspect the `report` admin page to locate potential injection points."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Test the identified ‘id’ parameter for SQL injection vulnerabilities."
                    },
                    {
                        "SubstepNumber": 1.3,
                        "SubstepString": "Evaluate the output to confirm the leakage of one column of information directly to the output."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Recognize that the system is using MySQL and consider using \"special tables\" in MySQL with a `UNION SELECT` based query to obtain information.",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Analyze the system behavior and error messages to determine the underlying database management system is MySQL."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Devise a strategy involving the utilization of MySQL “special tables” along with `UNION SELECT` queries to extract information."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Overcome the challenge of finding the number of columns in the UNION SELECT attack due to browser extension issues.",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Attempt to determine the number of columns necessary for a successful UNION SELECT attack."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Identify and resolve any browser extension issues interfering with the assessment of the UNION SELECT attack."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Utilize `group_concat()` to obtain all entries in a column as a single row, allowing for efficient information retrieval.",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Employ the `group_concat()` function in the SQL query to concatenate column entries into a single row."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Inspect the obtained row for any useful information regarding the database structure or contents."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Execute the following queries (URLdecoded versions for easier reading): determine the number of columns in the UNION SELECT attack; obtain table names from the information_schema.tables; obtain column names from the information_schema.columns; retrieve the flag from the flag column in the flag table.",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Formulate and execute queries to identify the number of columns required for the UNION SELECT attack."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Craft and run queries targeting the information_schema.tables to reveal table names within the database."
                    },
                    {
                        "SubstepNumber": 5.3,
                        "SubstepString": "Generate and execute queries on the information_schema.columns to ascertain the names of columns within the identified tables."
                    },
                    {
                        "SubstepNumber": 5.4,
                        "SubstepString": "Construct and perform a final query to extract the flag from the identified `flag` column in the `flag` table."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Find the flag in the `flag` column of the `flag` table.",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Review the retrieved database information to locate the `flag` column within the `flag` table."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Extract and secure the found flag from the specified column and table."
                    }
                ]
            }
        ]
    }
}
