{
    "Callback and Authentication": [
        "Provided a callback parameter.",
        "Use the credentials for `http://app/` in the fetch request",
        "Use the known hash of an empty string as a token value for authentication.",
        "Provide authentication to view the server logs.",
        "Use 'Host: app@ATTACKER_URL' to bypass the validation",
        "Use the custom host header to target your own host",
        "Download the '.env' file.",
        "Get the value from the cookie",
        "Pass the final payload '/admin'",
        "Run the server script with a new payload '?icecream={{application.settings[\"cookie_secret\"]}}'.",
        "Locate the 'Cookie' header in the HTTP request.",
        "Retrieve the value of AUTH_SECRET from the .env file",
        "Analyse the response of the authentication API",
        "Modify the value of 'admin_id' cookie to '1'",
        "Use the database credentials for authentication."
    ],
    "Code and Payload Analysis": [
        "Ensure the injected `style` element is readable by the attacker",
        "Inspect the decoded payload.",
        "Identify that if the request token is wrong, then the 'request.accessGranted' attribute would not be set.",
        "Identify the route as '/getFile?file=admins'.",
        "Realize the split parts were stored against assigned keys",
        "Begin SQL Injection attack",
        "Infer from the knowledge of SQL Injection that the username and password input can be manipulated.",
        "Inject a classic SQL Injection payload (' or 1=1 -- ) into the username field.",
        "Inject a classic SQL Injection payload (' or 1=1 -- ) into the password field.",
        "Inject the SQL Injection payload into the username field.",
        "Inject the SQL Injection payload into the password field.",
        "Encode a new JWT token with the modified 'role'.",
        "Examine the source code.",
        "Identify that 'RS256' and 'HS256' algorithms are allowed for decryption in 'challenge/helpers/JWTHelper.js'.",
        "Apply the payload to the live environment",
        "Intercept an HTTP request or use a cookie editor tool.",
        "Step 2: Validate and insert into the database."
    ],
    "HTTP Requests and Responses": [
        "Steal the admin's cookie.",
        "The first response is designed to pass the SSRF check.",
        "Capture the payload of the response, identifying the included JWT token.",
        "Identify the flag in the 'X-Localhost-Token' header in the received server response."
    ],
    "Webpage Exploration and Manipulation": [
        "Observe the presence of a CSRF token.",
        "Proceed to step 2"
    ]
}