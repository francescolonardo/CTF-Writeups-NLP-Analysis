{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Visited the challenge website and tried to understand how it works"
            },
            {
                "StepNumber": 2,
                "StepString": "Identified an admin bot script that the challenge provided"
            },
            {
                "StepNumber": 3,
                "StepString": "Used Chrome DevTools to examine how the note taking app functions"
            },
            {
                "StepNumber": 4,
                "StepString": "Analyzed the notes app's JavaScript source code"
            },
            {
                "StepNumber": 5,
                "StepString": "Discovered how the app uses local storage to save notes"
            },
            {
                "StepNumber": 6,
                "StepString": "Learned that the search feature places the query into the URL's fragment identifier"
            },
            {
                "StepNumber": 7,
                "StepString": "Saw that search results affect which image loads: 'y.png' if the query is found within a note, 'n.png' if it's not"
            },
            {
                "StepNumber": 8,
                "StepString": "Understood that the admin bot visits any URL provided, first storing a flag as a note on the challenge server"
            },
            {
                "StepNumber": 9,
                "StepString": "Realized it might be possible to force the admin bot to perform a search function on the server, checking if a given fragment identifier substring is part of the flag"
            },
            {
                "StepNumber": 10,
                "StepString": "Considered using a cache probing attack to detect whether a search was successful based on whether 'y.png' or 'n.png' was cached"
            },
            {
                "StepNumber": 11,
                "StepString": "Constructed a JavaScript payload to be run on the victim's browser that loads an iframe of the notes site with a search query and measures the time taken to fetch 'y.png'"
            },
            {
                "StepNumber": 12,
                "StepString": "Automated a bruteforce attack with a Python script that loads a template including the query for each possible character"
            },
            {
                "StepNumber": 13,
                "StepString": "Discovered that headless mode of Chrome doesn't perform cache partitioning, allowing the cache probing attack to succeed"
            },
            {
                "StepNumber": 14,
                "StepString": "Found out the intended solution involves bypassing the cache partitioning by controlling a subdomain matching the site domain, as subdomains and port numbers are ignored in cache keys"
            },
            {
                "StepNumber": 15,
                "StepString": "Identified that the website is GitHub Pages site and does not require proof of domain ownership, letting an attacker set up a GitHub Pages site with a subdomain that matches the site domain"
            },
            {
                "StepNumber": 16,
                "StepString": "Created a new GitHub Pages site with a subdomain that matched the target domain"
            },
            {
                "StepNumber": 17,
                "StepString": "Deployed the previously developed JavaScript payload to the new GitHub Pages site"
            },
            {
                "StepNumber": 18,
                "StepString": "Launched the attack script on the new GitHub Pages site and observed the attack working even with Chrome's cache partitioning policy"
            }
        ]
    }
}