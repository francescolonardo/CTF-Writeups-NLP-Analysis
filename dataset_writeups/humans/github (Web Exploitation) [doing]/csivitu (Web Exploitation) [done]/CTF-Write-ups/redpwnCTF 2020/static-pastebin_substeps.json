{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "First, trying to inject a random '<h1>Hello</h1>' tag to check for HTML input acceptance",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Inject a random '<h1>Hello</h1>' tag."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Check for HTML input acceptance."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Looking at the JavaScript file in the webpage found that the content is retrieved from the URL in base64 format and HTML tags are not allowed",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Look at the JavaScript file in the webpage."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Find that the content is retrieved from the URL in base64 format."
                    },
                    {
                        "SubstepNumber": 2.3,
                        "SubstepString": "Note that HTML tags are not allowed."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Devising a payload that can bypass the bracket-based sanitization by adding an extra '>' in the start. This exploits the arbitrary JavaScript execution via a broken image tag's onerror handler",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Devise a payload."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Bypass the bracket-based sanitization by adding an extra '>' in the start."
                    },
                    {
                        "SubstepNumber": 3.3,
                        "SubstepString": "Exploit the arbitrary JavaScript execution via a broken image tag's onerror handler."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Encoding the payload in base64 and adding it to the URL",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Encode the payload in base64."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Add the encoded payload to the URL."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Setting up a netcat listener on a local server to capture incoming connections",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Set up a netcat listener on a local server."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Capture incoming connections."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Submitting the crafted URL to the Admin Bot, which visits the URL causing the XSS payload to execute",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Submit the crafted URL to the Admin Bot."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Admin Bot visits the URL."
                    },
                    {
                        "SubstepNumber": 6.3,
                        "SubstepString": "XSS payload is executed."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Capturing the Admin Bot's cookies sent by the executed payload to the netcat listener",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Capture the Admin Bot's cookies."
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Cookies are sent by the executed payload to the netcat listener."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Extracting the flag from the Admin Bot's cookies",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Extract the flag from the Admin Bot's cookies."
                    }
                ]
            }
        ]
    }
}