{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Analyze website's HTML and find a link to a JavaScript file, revealing server's source code."
            },
            {
                "StepNumber": 2,
                "StepString": "Determine that the service is similar to Pastebin, allowing users to create messages with unique IDs to share."
            },
            {
                "StepNumber": 3,
                "StepString": "Identify that the exploit involves creating a Stored XSS to exfiltrate session cookies."
            },
            {
                "StepNumber": 4,
                "StepString": "Examine the 'escape_string' method and attempt various payloads to bypass the escaping mechanism."
            },
            {
                "StepNumber": 5,
                "StepString": "Craft an HTTP POST request leveraging the 'extended' option being set to 'true' in the bodyParser middleware."
            },
            {
                "StepNumber": 6,
                "StepString": "Alter the JavaScript 'const' to close the string and insert arbitrary JavaScript, creating a working XSS payload."
            },
            {
                "StepNumber": 7,
                "StepString": "Set up a listening host using 'nc -lkv 1337'."
            },
            {
                "StepNumber": 8,
                "StepString": "Craft an HTTP POST request that sends the user's cookie information to the attacker-controlled server."
            },
            {
                "StepNumber": 9,
                "StepString": "Bypass reCAPTCHA issues by creating another note and modifying the HTML source, signaling it to TJMike with the previous malicious 'note_id'."
            },
            {
                "StepNumber": 10,
                "StepString": "Receive the flag in the terminal output."
            }
        ]
    }
}