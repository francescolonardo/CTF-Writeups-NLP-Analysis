<h1>zer0pts CTF 2021 â€“ Kantan Calc</h1>

<ul>
<li><strong>Category:</strong> web</li>
<li><strong>Points:</strong> 135</li>
</ul>

<h2>Challenge</h2>

<blockquote>
  <p>"Kantan" means simple or easy in Japanese.</p>
  
  <p>http://web.ctf.zer0pts.com:8002/</p>
  
  <p>author:st98</p>
</blockquote>

<h2>Solution</h2>

<p>The challenge gives you an <a href="kantan_calc_a4f3130c72d9093ab206a29e27e40123.tar.gz">attachment</a> containing the source code: <a href="kantan_calc/app.js">app.js</a>.</p>

<p>```javascript
const express = require('express');
const path = require('path');
const vm = require('vm');
const FLAG = require('./flag');</p>

<p>const app = express();</p>

<p>app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'pug');</p>

<p>app.use(express.static(path.join(__dirname, 'public')));</p>

<p>app.get('/', function (req, res, next) {
  let output = '';
  const code = req.query.code + '';</p>

<p>if (code &amp;&amp; code.length &lt; 30) {
    try {
      const result = vm.runInNewContext(<code>'use strict'; (function () { return ${code}; /* ${FLAG} */ })()</code>, Object.create(null), { timeout: 100 });
      output = result + '';
      if (output.includes('zer0pts')) {
        output = 'Error: please do not exfiltrate the flag';
      }
    } catch (e) {
      output = 'Error: error occurred';
    }
  } else {
    output = 'Error: invalid code';
  }</p>

<p>res.render('index', { title: 'Kantan Calc', output });
});</p>

<p>app.get('/source', function (req, res) {
  res.sendFile(path.join(__dirname, 'app.js'));
});</p>

<p>module.exports = app;
```</p>

<p>The website is a some sort of calculator.</p>

<p>Even if several articles on how to escape <code>vm</code> sandbox can be found on the Internet, here the point is to dump the source code of the defined function.</p>

<p>Two constraints are present:
1. the payload must be lesser than 30 chars;
2. if the output contains <code>zer0pts</code>, so the starting part of the flag, it will be blocked.</p>

<p>This is a <em>code injection</em> challenge.</p>

<p>First of all, a JavaScript named function can print itself, with comments, if its name is returned.</p>

<p><code>javascript
(function p() { return p; /* Comment. */ })()
</code></p>

<p>The structure of the given script can be seen as something like <code>(x, y)()</code>.</p>

<p>If you try to exfiltrate the function source code in this way, you will be blocked by the check on the output content, because the output is converted to a string and checked for the presence of <code>zer0pts</code>.</p>

<p>In JavaScript you can convert a string to an array of chars with the following clause: <code>[...p]</code>. With this trick you could bypass the check on the content.</p>

<p>But you can't execute that clause directly on <code>p</code> because it <code>is not iterable</code>. So you have to convert it to a string with a concatenation.</p>

<p>Putting all together, you can have the following payload.</p>

<p><code>javascript
},function p(){return[...p+1]
</code></p>

<p>The flag is the following.</p>

<p><code>
zer0pts{K4nt4n_m34ns_4dm1r4t1on_1n_J4p4n3s3}
</code></p>
