DOM Validator
Detailed writeup available here: https://medium.com/@terjanq/xss-auditor-the-protector-of-unprotected-f900a5e15b7b
We had a simple upload page that allowed you to upload a custom HTML page. You could report suspicious URLs to admin.
After uploading the page we get:
```html








test_post



```
The <script>alert('pwned')</script> won't be executed because of the DOMValidator.js script:
javascript
function checksum (element) {
    var string = ''
    string += (element.attributes ? element.attributes.length : 0) + '|'
    for (var i = 0; i < (element.attributes ? element.attributes.length : 0); i++) {
        string += element.attributes[i].name + ':' + element.attributes[i].value + '|'
    }
    string += (element.childNodes ? element.childNodes.length : 0) + '|'
    for (var i = 0; i < (element.childNodes ? element.childNodes.length : 0); i++) {
        string += checksum(element.childNodes[i]) + '|'
    }
    return CryptoJS.SHA512(string).toString(CryptoJS.enc.Hex)
}
var request = new XMLHttpRequest()
request.open('GET', location.href, false)
request.send(null)
if (checksum((new DOMParser()).parseFromString(request.responseText, 'text/html')) !== document.doctype.systemId) {
    document.documentElement.remove()
}

It calculates some sort document's hash and then compares it with the original. I haven't even looked into the code because I already knew an unintended solution for this one. 
The page wasn't setting any X-XSS-Protection header so the XSS-Auditor in Chrome 74 (that's the version the admin uses) is set to mode=filter so any reflected XSS will be filtered and not executed. 
So I appended the xss=<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/sha512.js"> parameter to the query so the sha512.js script will be filtered and the DOMValidator.js will crash. Hence, <script>alert('pwned')</script> will be executed.

After sending that URL to the admin we get the flag: actf{itsallrelative}
