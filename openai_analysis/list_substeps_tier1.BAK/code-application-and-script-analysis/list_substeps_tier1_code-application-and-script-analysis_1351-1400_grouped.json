{
    "Debugging and Source Code Analysis": [
        "Enable the 'debug' option",
        "Examine the source code of the page",
        "Identify the 'eval()' vulnerability",
        "Understand the list of blocked keywords/functions in the source PHP code",
        "Identify the variables $blocked, $special_block, and $$special_block",
        "Recognize that they are defined before the 'eval()' statement",
        "Understand that they can be referenced in the eval-ed code",
        "Understand the concept of $$ variable in PHP",
        "Analyze how $$ variable is used in the code"
    ],
    "Interactions with Eval and Code Execution": [
        "Reference the blocked function and restricted file",
        "Set the GET parameter to '?print=echo+'';print(eval('return ${blocked}[4](${nc});'))'",
        "Observe the execution of eval function",
        "Realize that eval does not display the output",
        "Use print to display the output"
    ],
    "Analyzing Web Application and JavaScript Code": [
        "Identified an admin bot script provided by the challenge.",
        "Analyzed the notes app's JavaScript source code.",
        "The script loads a template including the query for each possible character.",
        "Noted that subdomains and port numbers are ignored in cache keys.",
        "Determine that the source code is exposed",
        "Locate the 'app.py' file",
        "Determine the presence of a vulnerability in the 'new chat' feature",
        "Identify the condition for invoking the 'send_sms' function",
        "Recognize the location of the 'send_sms' function in 'sms.py'",
        "Recognize the usage of Flask's 'render_template_string' function",
        "Identify the utilization within the 'send_sms' function",
        "Understand the control of the resulting template",
        "Recognize 'login' as the user-controllable portion",
        "Recognize the potential for Server-Side Template Injection (SSTI)",
        "Identify the 'add_money_to_login' function added to the template context",
        "Invoke the 'render_template_string' function using the SMS message",
        "Trigger the 'add_money_to_login' function through the 'render_template_string' function"
    ],
    "Server Technology and File Upload": [
        "Discover the server technology.",
        "Identify PHP as the server technology.",
        "Notice that .html files are rendered inline.",
        "Realize the filtering of .php extensions.",
        "Notice the recursive nature of the filtering.",
        "Verify that .phtml extension executes PHP code.",
        "Determine that the .phtml extension is not being filtered.",
        "Choose a .phtml file for upload.",
        "Execute the command cat /flag.txt.",
        "Blacklist works based on 'localhost' and '127'."
    ],
    "HTML Rendering and Payload Injection": [
        "Understood that the server uses Python's requests library to issue GET requests to the submitted URL.",
        "Identified content lengths as indicators of page existence due to uniform content length of Not Found (404) pages.",
        "Discovered that arbitrary HTML submitted is rendered by the admin's browser.",
        "Introduced three separate payloads in the HTML."
    ],
    "Deserialization Vulnerability and RCE": [
        "Inspect the given source code.",
        "Recognize that there's a well-known deserialization vulnerability in node.js.",
        "Understand that RCE can be achieved by passing a serialized object into 'serialize.unserialize()'.",
        "Understand that a JavaScript Immediately Invoked Function Expression (IIFE) can be used for RCE.",
        "Understand that the reverse shell payload will be fired when the data is deserialized."
    ]
}