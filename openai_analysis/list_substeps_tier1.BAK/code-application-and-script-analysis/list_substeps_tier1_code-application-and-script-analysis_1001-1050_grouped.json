{
    "Code Inspection and Analysis": [
        "Identify the code that checks for a 4 digit pin.",
        "Observe the code fetching the flag based on the pin value.",
        "Examine the service.",
        "Confirm that the login page does not contain any JavaScript code.",
        "Analyze the server code files.",
        "Focus on app.js.",
        "Configure a grep match for 'flag{' to locate the start of the flag.",
        "Open the server.py file.",
        "Noticed that error messages are displayed in a javascript alert",
        "Inspected the page source and found no abnormalities",
        "Analyzed the error message and deduced that a Python Flask backend is used",
        "Examined the 'if' condition that appears to determine the login logic",
        "Observed the comparison between the calculated hash and the 'hash' value",
        "Realized that these values are used for the calculation and comparison",
        "Identify JavaScript variable storing user details.",
        "View the code of 'index.php' file.",
        "Identify blacklisted characters mentioned in the code.",
        "Determine the command length limit of 15 characters from the code."
    ],
    "Database Exploration and Exploitation": [
        "Observe that a status 500 is received.",
        "Compare the syntax differences between the observed behavior and other database systems.",
        "Deduce that it is MySQL.",
        "Bruteforce the flag character by character.",
        "Use the SUBSTRING and SLEEP functions for each character.",
        "Explain the syntax and usage of the SUBSTRING function.",
        "Explain the syntax and usage of the IF function.",
        "If a correct character is found (indicated by a read timeout), append the character to the flag and move to the next character.",
        "Fail to recognize the potential for using an SQL injection into the password field as an authentication bypass"
    ],
    "File and Data Retrieval": [
        "Reveal the hidden sheet",
        "Obtain the final flag: 'flag{y4m_y4m_c00k13s}'.",
        "Developed a Python script to retrieve the flag",
        "Discovered the flag.",
        "Attempt to execute the 'cat ../flag.txt' command.",
        "Execute the 'cat index.php' command.",
        "Final payload was a modified PHP object with the 'profile_img' attribute pointing to the flag",
        "Enclose 'ls' command in backticks."
    ],
    "Client-Side Manipulations and Injections": [
        "Try a bypass method by uploading HTML files disguised as image files.",
        "Realize that HTML files don't execute on the server side.",
        "Switch strategy and attempt to upload an HTML file containing a simple JavaScript function.",
        "Observe that JavaScript inside the uploaded HTML does execute.",
        "Realize that JavaScript doesn't execute when directly input into the application's fields.",
        "Craft a JavaScript snippet that sends a GET request to the '/profile/follow' endpoint.",
        "Embed the crafted JS snippet into an HTML file.",
        "Execute the JS script silently when admin opens the page.",
        "Use Apache httpd 2.4.49 to handle the connection.",
        "Double decoded the user cookie",
        "Identified the task as a PHP Object Injection challenge",
        "Tried to become admin, but the server sent hints or funny responses",
        "Manipulated the 'profile_img' attribute in the PHP object",
        "Identified that the system might be susceptible to an XXE (XML External Entity) attack."
    ]
}
