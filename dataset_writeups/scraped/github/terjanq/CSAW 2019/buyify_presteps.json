[
    "Study and inspect the provided instance of a simple website with functionality including a 'flag store', create new store, update created store description, and create items in created store.",
    "Look for potential vulnerabilities or points of entry, taking note of any suspect templates in the webpage's code, such as an 'update store description' template.",
    "Recognizing the problem to be potentially related to Server-side Template Injection, begin to test this theory with 'handlebars', which previously had a known vulnerability in processing templates.",
    "Assess the function of the 'handlebars' library within the system as it could present an entry point if a vulnerability, such as Template Injection, can be exploited successfully.",
    "Continue the investigation by exploring the scope of the Template Injection vulnerability despite the past reported vulnerability being fixed.",
    "Identify a token structure that, if manipulated, could allow for unauthorized purchases from the 'flag store'.",
    "Find the mechanism through which the 'id' in the token is created (concatenating 'store_name' and 'item_name') and how the token is signed using 'store.key'.",
    "Understand the structure of the store object, noting if there are any properties that are not defined initially but used later.",
    "Locate where 'store.key' is defined using 'crypto.randomBytes' and when this function is called, and pay attention to what actions trigger the key's update.",
    "Devise a strategy that involves acquiring the secret key from the store object, to sign a 'jwt' with a controlled object to purchase a 'flag' for $1.",
    "Recognize the security checks in place, the most crucial one is in the 'checkout(req, res)' function that will verify the token's signature matches the key.",
    "Consider ways to apply the Template Injection exploit with the 'setter' and 'getter' properties for 'key', even if you do not need to achieve Remote Code Execution (RCE).",
    "Attempt to access or replace 'store.key' through the Template Injection vulnerability, which may require redefining the Object prototype.",
    "Find a way around the lack of access to the constructor property by using older object manipulation features like '__defineSetter__' and '__defineGetter__'.",
    "Apply the determined attack vector to exploit the system, overriding the prototype using a payload to set a context to the prototype of [object] and redefining 'key' through '__defineSetter__' and '__defineGetter__'.",
    "Once the injection payload has been executed, check that the accessor for 'key' has been overridden and behaves as expected, for instance by returning a '[object Object]' string and not allowing itself to be overridden by a new value.",
    "Create a token with the overridden '[object Object]' as the secret key and 'flag.flag' as the 'id' to purchase the flag from the store for $1.",
    "Automate the process through script and execute the exploit to retrieve the flag ('flag{npm_devs_are_pretty_bad_at_fixing_bugs}') and complete the CTF."
]