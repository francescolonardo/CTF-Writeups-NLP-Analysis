Title: NoSQL Injection in Party App
Primary topic: Web Exploitation
Secondary topic: NoSQL Injection
Tools used: None
Keywords: cookie, session, Content-Type, application/json

#context
The portion of code to check if a user is authorized in the party is done in this middleware.

#discovery
The query is vulnerable to NoSQL injection, but we need to set both session.user and session.pin to a js object controlled by us. The session is stored in a cookie created with the cookie-session library, and it needs a signature with a random key, so we should find a way to get it from the server. When using the app in the intended way, the browser sends the requested data with Content-Type: application/x-www-form-urlencoded. However, the server also loads a middleware to interpret the application/json content type. Thanks to it, we can send data as JSON, injecting objects inside the input parameters of the server.

#exploitation
Our first try was the /new endpoint. Here we confirmed that it's possible to set as a pin an object like {"$ne":"a"} and bypass the check. However, this endpoint calls the trim() function on the user parameter, making it unusable for the exploitation. We need to set both session.user and session.pin to an object to bypass the checks. We used two sessions in parallel to get the exploit working, a legit session and a session for the payload. First, we create a party in the legit session with valid values. Then, in the other session, we create a party sending the admin parameter equal to the object {"$ne":"a"}. The creation of the party will fail, but the session values are updated anyway. In this way, we set session.user to the bypass object. However, we have a random value in session.pin, but we can't change it