{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Registered a new account on the provided URL"
            },
            {
                "StepNumber": 2,
                "StepString": "Checked how the OTP verification is performed by analyzing the provided source code"
            },
            {
                "StepNumber": 3,
                "StepString": "Couldn't find any flaws in the OTP verification logic hence proceeded to find vulnerabilities in other functions"
            },
            {
                "StepNumber": 4,
                "StepString": "Checked search function for potential vulnerabilities"
            },
            {
                "StepNumber": 5,
                "StepString": "Identified potential SQL Injection vulnerability in the search function's MySQL query builder through string manipulation"
            },
            {
                "StepNumber": 6,
                "StepString": "Noted that certain characters and strings were restricted like space, 'AND', 'OR', etc."
            },
            {
                "StepNumber": 7,
                "StepString": "Bypassed the SQL Injection protection through MySQL comments that are treated like spaces"
            },
            {
                "StepNumber": 8,
                "StepString": "Crafted payload '/search?q=socengexp'/**/AANDND/**/(SUBSTR(otp,<POSITION>,1))='<GUESS>' to brute force the OTP character by character"
            },
            {
                "StepNumber": 9,
                "StepString": "Used the obtained OTP to verify and login into the system"
            },
            {
                "StepNumber": 10,
                "StepString": "Gained access to '/cornelia' URL which performs GET request on chosen URL"
            },
            {
                "StepNumber": 11,
                "StepString": "Identified Server Side Request Forgery (SSRF) vulnerability in '/cornelia'"
            },
            {
                "StepNumber": 12,
                "StepString": "Realized SSRF couldn't be exploited directly due to validation that prevents from specifying 'localhost' or '127.0.0.1'"
            },
            {
                "StepNumber": 13,
                "StepString": "Leveraged the fact that the server follows redirects and used PHP to redirect to 'localhost:8081/flag' to access the flag"
            },
            {
                "StepNumber": 14,
                "StepString": "Retrieved the flag 'CTFSG{All_T00_W3ll_T3n_M1nutes_V3rs1on_Taylors_Version}'"
            }
        ]
    }
}