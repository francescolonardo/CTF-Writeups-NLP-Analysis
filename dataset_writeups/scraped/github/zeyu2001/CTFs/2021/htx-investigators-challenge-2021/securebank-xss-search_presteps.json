[
    "Identify a web application vulnerability, specifically XS Leaks, from incoming responses at the '/checkbalance' endpoint.",
    "Notice that users are redirected if the queried amount exceeds their actual balance.",
    "Determine that window's history length can reveal whether a redirection occurred, thus allowing to approximate the user's balance.",
    "To adhere to Same Origin Policy, open a new window from the exploit server with the URL 'http://10.8.201.87:5000/checkbalance?amount=${num}'.",
    "Wait for the site to load. Depending on the balance, the window may be redirected to '/'.",
    "Change the window's location back to the exploit server for similarity of origins.",
    "Check the window's 'history.length' attribute to determine if a redirect occurred.",
    "Use trial and error to narrow down the appropriate number by controlling the number of intervals in the aforementioned steps.",
    "Build a HTML page to automated this process, using a JavaScript script that opens a window, checks redirection, and then guesses a number based on the window's history length.",
    "Use the 'tryNumber' function to navigate to the '/checkbalance' endpoint with a queried amount.",
    "Register a delay for the time it takes for the page to load and possibly redirect.",
    "Change the location of the pop-up back to the exploit server.",
    "Check the length of the window's history to determine if a redirection has occurred.",
    "If the history length is three, the balance has been exceeded. In that case, return false and the queried amount.",
    "Otherwise, return that the balance is exceeded and the queried amount.",
    "Start the checker for a number range.",
    "Post each successful guess to the exploit server."
]