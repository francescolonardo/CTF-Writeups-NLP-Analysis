{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Recognize the calculator app filters out potential XSS attacks"
            },
            {
                "StepNumber": 2,
                "StepString": "Analyze 'calc.js' and identify controllable variables"
            },
            {
                "StepNumber": 3,
                "StepString": "Identify ability to control 'astProgram.type' variable which sets the type attribute for the script element"
            },
            {
                "StepNumber": 4,
                "StepString": "Decide to provide code JSON, which 'JSON.parse()' will then parse"
            },
            {
                "StepNumber": 5,
                "StepString": "Switch 'astToJs' to 'evalCode' in order to execute custom code within the app"
            },
            {
                "StepNumber": 6,
                "StepString": "Decide to use Import Maps to switch 'astToJs' to 'evalCode'"
            },
            {
                "StepNumber": 7,
                "StepString": "Create a new HTML script element with id 'program', language 'json', and type 'importmap'"
            },
            {
                "StepNumber": 8,
                "StepString": "Inside the new HTML script element, add an 'imports' key to map '/js/ast-to-js.mjs' to '/js/eval-code.mjs'"
            },
            {
                "StepNumber": 9,
                "StepString": "Add custom JavaScript code to the 'code' key in order to leak the cookie, and provide an empty array for 'variables'"
            },
            {
                "StepNumber": 10,
                "StepString": "Execute a Python script (solve.py), eventually obtaining the flag"
            }
        ]
    }
}