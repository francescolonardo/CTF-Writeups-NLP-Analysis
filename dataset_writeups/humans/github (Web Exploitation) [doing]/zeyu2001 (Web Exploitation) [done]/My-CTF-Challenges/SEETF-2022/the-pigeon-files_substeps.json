{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Noticed that 'mootools' JavaScript library is used and is vulnerable to client-side prototype pollution",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Notice that 'mootools' JavaScript library is used."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Identify that the JavaScript library is vulnerable to client-side prototype pollution."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Identified that if the request token is wrong, then the 'request.accessGranted' attribute would not be set and is thus undefined",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Identify that if the request token is wrong, then the 'request.accessGranted' attribute would not be set."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Observe that the 'request.accessGranted' attribute becomes undefined in such cases."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Executed Prototype pollution to manipulate the 'accessGranted' attribute to bypass Access Denied error",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Execute Prototype pollution attack."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Manipulate the 'accessGranted' attribute to bypass Access Denied error."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Noticed that a 'note' is 'found' as long as 'note.startsWith(request.search)'",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Notice that a 'note' is 'found' if it starts with 'request.search'."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Using the navigation factor, performed an XS leak attack to verify if a substring exists in the flag",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Use the navigation factor."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Perform an XS leak attack."
                    },
                    {
                        "SubstepNumber": 5.3,
                        "SubstepString": "Verify if a substring exists in the flag."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Conducted an extraction of the flag character by character leveraging the navigation function and the XS leak",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Conduct an extraction of the flag character by character."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Leverage the navigation function and the XS leak."
                    }
                ]
            }
        ]
    }
}