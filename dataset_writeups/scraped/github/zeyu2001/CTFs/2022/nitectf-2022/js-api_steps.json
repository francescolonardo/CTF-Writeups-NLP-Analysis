{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Analyzed the JavaScript source provided in the challenge."
            },
            {
                "StepNumber": 2,
                "StepString": "Identified the use of a message event handler that had to be exploited in tandem with a '.jsapi.tech' subdomain takeover."
            },
            {
                "StepNumber": 3,
                "StepString": "Recognized the ability to 'preview' HTML without saving it in this challenge. The HTML input however is sanitized through DOMPurify."
            },
            {
                "StepNumber": 4,
                "StepString": "Identified a loophole where the 'search' feature originally using 'this.noteData' could be bypassed since 'this.noteData' remained the same even after sanitizing HTML input via 'preview' feature."
            },
            {
                "StepNumber": 5,
                "StepString": "Ran into an issue with the 'search' feature checking for 'window.enable_experimental_features', which did not originally exist."
            },
            {
                "StepNumber": 6,
                "StepString": "Used DOM clobbering as DOMPurify doesn't protect against it to override 'window.enable_experimental_features' property."
            },
            {
                "StepNumber": 7,
                "StepString": "Inserted HTML through 'preview' feature to demonstrate DOM clobbering, thereby enabling 'enable_experimental_features'."
            },
            {
                "StepNumber": 8,
                "StepString": "Unintended solution used the property 'Lazy-loading' of an image to check if an extra div is rendered when search is correct."
            },
            {
                "StepNumber": 9,
                "StepString": "If no request is received for a particular character, it is concluded the extra div was rendered and search was a correct guess."
            },
            {
                "StepNumber": 10,
                "StepString": "A script was written to implement the attack involving 'Lazy-loading' property."
            },
            {
                "StepNumber": 11,
                "StepString": "A different intended solution involved the use of 'PerformanceLongTaskTiming API' to identify if the search was taking more than 50ms."
            },
            {
                "StepNumber": 12,
                "StepString": "Learned that any timing attack with 'performance.now()' would had worked too due to the JavaScript event loop being single-threaded."
            },
            {
                "StepNumber": 13,
                "StepString": "A script using 'setTimeout' function was written to execute the timing attack."
            }
        ]
    }
}