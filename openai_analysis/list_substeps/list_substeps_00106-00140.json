[
    "Used backticks around the numeric table name.",
    "Find the API used to modify the status of the services.",
    "Initiate data leaking process",
    "Add GET parameter to final URL",
    "Understood the deserialization process.",
    "Used `Access-Control-Allow-Origin: *` header.",
    "Test classic SQL Injection payloads.",
    "Verify if the count returns 1.",
    "Review the source code in `database.sql` file again.",
    "Recognize the presence of an SQL Injection vulnerability",
    "Identified a second SQL injection endpoint.",
    "Prepare a GET request to the URL 'http://35.207.189.79/api/proxyimage?url=http://127.0.0.1:8075/img/paperbots.svg'.",
    "Recognize the presence of a file named 'flag.jpg'.",
    "Found alternative solution posted by P4Team.",
    "Apply the determined attack vector to exploit the system.",
    "Read the flag using the established reverse shell.",
    "Executed 'cat ./system/of/a/down/flag.txt' command.",
    "Verified the shellcode's functionality and ensured compatibility with the `strlen()` function within 'shellme()' in the `shellme.so` file.",
    "Realize that the crafted payload successfully runs a SQL query",
    "Browse the 'user' directory.",
    "Iframe's message is received and processed in /demo",
    "Create a SQL injection payload.",
    "Executed 'cat index.php' command.",
    "Check if PNG was found in the response.",
    "Identified 'disable_functions' configuration.",
    "Find a lot of printed information",
    "Identify that 'flag.txt' can be read.",
    "Identified a post made by admin with the flag.",
    "Identify User Registration section.",
    "Understand that the rendering is done via a custom host header",
    "Directory wasn't directly browsable or clonable",
    "Recognize that it passes the extension check due to .txt extension.",
    "Payload posts a message to trigger the /api/filter POST request in the admin's context",
    "Analyzed the browser console.",
    "No success in submitting the answers."
]