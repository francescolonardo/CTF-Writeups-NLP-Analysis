Considering the XML-related error spawned previously and the hint provided into the `<flag>` element talking about a `/flag` file, you can understand that the application can be exploited via a XXE attack.

The malicious payload can be crafted and passed via the SQL injection vulnerability using a `UNION` operation. The application will parse the XML payload triggering the remote file read operation.

Let's consider a payload like the following to test the exploit.

[XML External Entity (XXE) Injection attack payload and result, where an attacker exploits a vulnerability in an XML parser to retrieve sensitive information from the target system. The payload is a malicious XML file that includes an external entity that points to a file (/etc/passwd) that the attacker wants to retrieve. The URL-encoded payload is used in the malicious URL to retrieve the file. The result shows the contents of the /etc/passwd file, indicating that the attack was successful.]

So it is possible to read remote files. PHP filters can be used to read source code via base64 encoding.

[Payload and URL-encoded payload of an XML External Entity (XXE) injection attack, along with the resulting encoded flag obtained from the attack on a vulnerable web application.]

Decoding the base64 encoded result you can obtain the flag.
