{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Access and inspect the front-end JavaScript source code"
            },
            {
                "StepNumber": 2,
                "StepString": "Identify that Meteor is being used to fetch data from a MongoDB backend"
            },
            {
                "StepNumber": 3,
                "StepString": "Discover all the exposed Meteor methods including 'notes.count', 'notes.add', and 'notes.remove'"
            },
            {
                "StepNumber": 4,
                "StepString": "Observe that 'notes.count' function is unauthenticated"
            },
            {
                "StepNumber": 5,
                "StepString": "Understand that 'notes.count' applies a filter and returns the count of notes that pass this filter"
            },
            {
                "StepNumber": 6,
                "StepString": "Use Burp Suite to find that this method is being executed through websockets"
            },
            {
                "StepNumber": 7,
                "StepString": "Deduce that the '$ne' filter checks if the body of the notes is not empty"
            },
            {
                "StepNumber": 8,
                "StepString": "Understand '$regex' is acceptable, allowing regex patterns for note contents"
            },
            {
                "StepNumber": 9,
                "StepString": "Check for notes that match the regex pattern 'flag{.*}', testing the filter"
            },
            {
                "StepNumber": 10,
                "StepString": "Validate that only one result is returned, indicating only one note contains the flag"
            },
            {
                "StepNumber": 11,
                "StepString": "Use this technique to bruteforce every character of the flag"
            },
            {
                "StepNumber": 12,
                "StepString": "Concatenate possible characters to the end of the flag"
            },
            {
                "StepNumber": 13,
                "StepString": "For each possible character, check if it is part of the flag by verifying if the count returns 1"
            },
            {
                "StepNumber": 14,
                "StepString": "Output the character if it returns a count larger than 0"
            },
            {
                "StepNumber": 15,
                "StepString": "Repeat this until the entire flag ('flag{4lly0Urb4s3}') is discovered"
            }
        ]
    }
}