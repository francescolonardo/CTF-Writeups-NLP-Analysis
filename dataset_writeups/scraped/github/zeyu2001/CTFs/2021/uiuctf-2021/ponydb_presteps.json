[
    "Analyze the provided source code for a Flask web application. Identify how the web application creates a MySQL connection and that the website has two endpoints- GET and POST. Take note of the flag variable.",
    "Observe the behavior of the GET endpoint and the way it handles a session. Notice the unusual format of the 'favorites' data, which is meant to be JSON string.",
    "Examine how 'SELECT' statement is used to fetch the ponies corresponding to the session ID, with the 'favorites' data parsed into a Python dictionary.",
    "Analyze the POST endpoint, identifying the 7 parameters to submit. Study how each parameter is validated and observe the use of f-strings over parameterized queries.",
    "Identify potential loophole by observing that error variable should be assigned something but it isn't. Note that the favorites column has a maximum length of 256 in the ponies table.",
    "Refer to MySQL documentation to see how assigning a value to a VARCHAR string that exceeds its length will be truncated. Take note of the omission of STRICT_TRANS_TABLES and STRICT_ALL_TABLES in the sql_mode configuration.",
    "Implement a payload injection into the truncated JSON string. Use 'number\":1337,\"color' as the favorite_key parameter in order to insert the string into the database.",
    "Develop a script to exploit the vulnerability. Set the favorite_key and favorite_value, prepare a JSON string, calculate the remaining characters, append them to the beginning of favorite_value and attempt to insert the truncated JSON string into the database.",
    "Submit the payload manually or through the HTTP requests automated script."
]