{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "The server uses dynamic rendering, which renders JavaScript on the server-side before serving web crawlers.",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Identify that the server uses dynamic rendering."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Understand that dynamic rendering renders JavaScript on the server-side before serving web crawlers."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Checked the Nginx configuration and noticed that it re-writes and forwards the request to the pre-renderer at `http://renderer:3000` when `User-Agent` header is of the web crawlers.",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Check the Nginx configuration."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Observe the rewriting and forwarding of the request to the pre-renderer at `http://renderer:3000`."
                    },
                    {
                        "SubstepNumber": 2.3,
                        "SubstepString": "Identify that the re-writing and forwarding occurs when the `User-Agent` header is of the web crawlers."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Detected that the server uses Prerender to handle these requests, implying that Chrome is used to render JavaScript.",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Detect the usage of Prerender to handle the requests."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Infer that Chrome is used for rendering JavaScript."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Set the host header so that the renderer visits our attacker-controlled site.",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Set the host header."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Ensure that the renderer visits our attacker-controlled site."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Utilized an XSS attack to redirect the browser using the `Location` header.",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Perform XSS attack."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Redirect the browser using the `Location` header."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Created a `redirect.php` that when visited would redirect the renderer's browser to our second exploit page.",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Create a `redirect.php` file."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Ensure that visiting `redirect.php` redirects the renderer's browser to the second exploit page."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Constructed a `exploit.html` file with an iframe whose source is `http://localhost:3000/render?url=http://api:8000/`.",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Construct `exploit.html` file."
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Create an iframe within `exploit.html` with the source set to `http://localhost:3000/render?url=http://api:8000/`."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "To access the iframe's contents which should be the response from `http://api:8000/`, bypassed SOP by exploiting the fact that the current site and the iframe's source are both `http://localhost:3000`.",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Bypass SOP."
                    },
                    {
                        "SubstepNumber": 8.2,
                        "SubstepString": "Exploit the fact that the current site and the iframe's source are both `http://localhost:3000`."
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Received the iframe's contents: `PGhlYWQ+PC9oZWFkPjxib2R5PkFDU0N7c2hhcmtzX2FyZV9hbHdheXNfaHVuZ3J5fTwvYm9keT4=`.",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Receive the contents of the iframe."
                    },
                    {
                        "SubstepNumber": 9.2,
                        "SubstepString": "Observe the received Base64 encoded string."
                    }
                ]
            },
            {
                "StepNumber": 10,
                "StepString": "Decoded the received Base64 string to get the flag: `ACSC{sharks_are_always_hungry}`.",
                "Substeps": [
                    {
                        "SubstepNumber": 10.1,
                        "SubstepString": "Decode the received Base64 string."
                    },
                    {
                        "SubstepNumber": 10.2,
                        "SubstepString": "Observe the decoded flag."
                    }
                ]
            }
        ]
    }
}