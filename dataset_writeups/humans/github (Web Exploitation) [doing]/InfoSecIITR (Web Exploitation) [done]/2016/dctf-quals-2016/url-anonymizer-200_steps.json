{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Identify the `report` admin page as vulnerable to SQL injection from the id parameter, allowing leakage of one column of information directly to the output."
            },
            {
                "StepNumber": 2,
                "StepString": "Recognize that the system is using MySQL and consider using \"special tables\" in MySQL with a `UNION SELECT` based query to obtain information."
            },
            {
                "StepNumber": 3,
                "StepString": "Overcome the challenge of finding the number of columns in the UNION SELECT attack due to browser extension issues."
            },
            {
                "StepNumber": 4,
                "StepString": "Utilize `group_concat()` to obtain all entries in a column as a single row, allowing for efficient information retrieval."
            },
            {
                "StepNumber": 5,
                "StepString": "Execute the following queries (URLdecoded versions for easier reading): determine the number of columns in the UNION SELECT attack; obtain table names from the information_schema.tables; obtain column names from the information_schema.columns; retrieve the flag from the flag column in the flag table."
            },
            {
                "StepNumber": 6,
                "StepString": "Find the flag in the `flag` column of the `flag` table."
            }
        ]
    }
}