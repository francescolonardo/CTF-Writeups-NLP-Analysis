{
    "AttackModel": {
        "NameOfTheChallenge": "Pasteless",
        "AttackerCapabilities": [
            "Understanding of XSS vulnerabilities",
            "Ability to bypass Content Security Policy (CSP)",
            "Knowledge of relative JavaScript paths",
            "Ability to host files and enable CORS on an attacker server"
        ],
        "Target": {
            "Type": "Web Application",
            "Vulnerabilities": [
                "XSS vulnerability",
                "Bypassable Content Security Policy"
            ],
            "SecurityMeasures": [
                "Content Security Policy (CSP)"
            ]
        },
        "Steps": [
            {
                "StepNumber": 1,
                "Description": "Identify the Content Security Policy (CSP) in the web page.",
                "ToolsUsed": null,
                "StepDetails": {
                    "Hypothesis": "The attacker needs to understand the restrictions imposed by the CSP in order to bypass them.",
                    "Action": "Inspect the web page source code to find the CSP meta tag.",
                    "Result": "The CSP meta tag is found with the following directives: default-src 'self', script-src 'self' 'nonce-2ac41eb7-a3d1-4f8b-a06d-369e439ff08f', img-src 'self' ext.captcha.yandex.net",
                    "Success": "Success",
                    "FailingReason": null
                }
            },
            {
                "StepNumber": 2,
                "Description": "Identify the usage of relative JavaScript paths in the web page.",
                "ToolsUsed": null,
                "StepDetails": {
                    "Hypothesis": "The attacker can leverage the relative JavaScript paths to load scripts from their own server.",
                    "Action": "Inspect the web page source code to find the usage of relative JavaScript paths.",
                    "Result": "Relative JavaScript paths are found near the bottom of the page.",
                    "Success": "Success",
                    "FailingReason": null
                }
            },
            {
                "StepNumber": 3,
                "Description": "Change the base URI of the page to the attacker's server.",
                "ToolsUsed": null,
                "StepDetails": {
                    "Hypothesis": "By changing the base URI, the relative JavaScript paths will now load scripts from the attacker's server.",
                    "Action": "Add a base tag with the attacker's server URL to the web page.",
                    "Result": "The relative JavaScript paths now load scripts from the attacker's server.",
                    "Success": "Success",
                    "FailingReason": null
                }
            },
            {
                "StepNumber": 4,
                "Description": "Host a file with arbitrary JavaScript code on the attacker's server and enable CORS.",
                "ToolsUsed": null,
                "StepDetails": {
                    "Hypothesis": "By hosting a file on the attacker's server and enabling CORS, the attacker can execute arbitrary JavaScript code through that file.",
                    "Action": "Host a file named /static/page.js on the attacker's server and enable CORS.",
                    "Result": "The file /static/page.js is hosted on the attacker's server and CORS is enabled.",
                    "Success": "Success",
                    "FailingReason": null
                }
            },
            {
                "StepNumber": 5,
                "Description": "Bypass the CSP once again to exfiltrate data.",
                "ToolsUsed": null,
                "StepDetails": {
                    "Hypothesis": "By leveraging the nonce from the script tags, the attacker can create a new script element and exfiltrate data by setting the script source to the desired data.",
                    "Action": "Create a new script element, set its nonce to the nonce obtained from the existing script tags, and set its source to the desired data (e.g., ?cookie=${document.cookie}).",
                    "Result": "The script element is created, the nonce is set, and the source is set to exfiltrate the flag.",
                    "Success": "Success",
                    "FailingReason": null
                }
            }
        ]
    }
}