<hr />

<h2>description: Server-Side Template Injection (SSTI) in SMS template</h2>

<h1>Yauzabomber</h1>

<h2>Description</h2>

<p>http://tasks.yauzactf.com:30003/</p>

<p>Your task is to learn a new service for fast sending messages at</p>

<h2>Solution</h2>

<h3>Unintended</h3>

<p>The <code>.git</code> directory and source code were exposed on the webserver. In <code>app.py</code>, the flag is exposed.</p>

<p>```python
@app.route("/shop/", methods=['POST'])
@require<em>authorization
def shop</em>form(current<em>user):
    item</em>id = int(request.form.get('id'))
    user<em>obj, item</em>obj = db.ShopItem().buy<em>item(item</em>id, current<em>user.id)
    shop</em>items = db.ShopItem().list_items()</p>

<pre><code>if user_obj is None:
    return render_template("shop.html", shop_items=shop_items, error=1)

if item_obj.phone == '+7777-(777)-777777':
    db.User().delete_login(current_user.login)
    return render_template("shop.html", shop_items=shop_items, flag='YauzaCTF{$M$_B000mb3r_$$t1_vu1n}')

return render_template("shop.html", shop_items=shop_items, success=1)
</code></pre>

<p>```</p>

<h3>Intended</h3>

<p>There is a vulnerability in the "new chat" feature.</p>

<p>```python
@app.route("/new<em>chat/", methods=['POST'])
@require</em>authorization
def new<em>chat(current</em>user):
    phone = str(request.form.get('phone'))
    message = str(request.form.get('message'))
    recaptchaResponse = str(request.form.get('g-recaptcha-response'))</p>

<pre><code>r = requests.post('https://www.google.com/recaptcha/api/siteverify',
                  data={
                      'secret': '6LcFLRccAAAAAJGO9V52-YxMiXkrKLmT4GBp9Ysf',
                      'response': recaptchaResponse,
                      'remoteip': '127.0.0.1',
                  })
a = request.form
j = r.json()

if 'success' in j and j['success']:
    if not phone.startswith('+1337') and not phone.startswith('1337'):
        # sms message
        result = sms.send_sms(number='+' + re.sub("[^0-9]", "", phone), message=message, login=current_user.login, vulnfunc=db.User().add_money_to_login)
        if result:
            db.Message().send_sms(current_user, phone, message)
    else:
        # chat private message
        db.Message().send_private(current_user, phone, message)

return redirect('/private/')
</code></pre>

<p>```</p>

<p>When sending an SMS to a number that does not begin with <code>+1337</code> or <code>1337</code>, the <code>send_sms</code> function in <code>sms.py</code> is called, with the keyword argument <code>vulnfunc=db.User().add_money_to_login</code>.</p>

<p>In the <code>send_sms</code> function, Flask's <code>render_template_string</code> function is used to generate the SMS message.</p>

<p><code>python
def send_sms(number, message, login, vulnfunc):
    try:
        message = render_template_string('Hello from ' + login + ':\n{{ message }}', message=message, add_money_to_login=vulnfunc)
    except Exception as e:
        message = str(e)
    print(message)
    message = message[:160]
    r = requests.post(
        'https://api.twilio.com/2010-04-01/Accounts/AC8af1c9ea60578bbf05fcc8073785601d/Messages.json',
        data={
            'To': number,
            'MessagingServiceSid': 'MG2361073db2b525645c80023fbf791ff8',
            'Body': message
        },
        auth=HTTPBasicAuth('AC8af1c9ea60578bbf05fcc8073785601d', '43b98a2b0de062483f43e938112d9aa0')
    )
    print(number)
    j = r.json()
    print(j)
    return j['status'] == 'accepted' and not j['error_code']
</code></p>

<p>The resulting template is user-controllable, since <code>login</code> is our username.</p>

<p><code>python
'Hello from ' + login + ':\n{{ message }}'
</code></p>

<p>We can then exploit Server-Side Template Injection (SSTI). Since the <code>add_money_to_login</code> function is added to the template context, we can manipulate the <code>login</code> variable to invoke this function. We essentially need two accounts, with one of the usernames being:</p>

<p><code>python
{{ add_money_to_login(USERNAME, AMOUNT_OF_MONEY) }}
</code></p>

<p><img src="../../.gitbook/assets/upload_1a3560d2825112a36522ddfecb9b5b1c.png" alt="" /></p>

<p>Then, when sending an SMS message, the following is called:</p>

<p><code>python
render_template_string(
    'Hello from {{ add_money_to_login(USERNAME, AMOUNT_OF_MONEY) }}:\n{{ message }}', 
    message=message, 
    add_money_to_login=vulnfunc
)
</code></p>

<p>When rendering the template, the <code>add_money_to_login</code> function is called, adding money to our other account.</p>

<p><img src="../../.gitbook/assets/upload_8ef68bbab074e004b0c4c3a59ef8d74a.png" alt="" /></p>

<p>Now that we have sufficient money, we can buy the flag!</p>

<p><img src="../../.gitbook/assets/upload_170e466c6e5c955c491187bcd70bd2c3.png" alt="" /></p>
