{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Loaded the page at `/` which simply says `Hello Mars!`."
            },
            {
                "StepNumber": 2,
                "StepString": "Found the app at `http://whatever.domain.com/app/`."
            },
            {
                "StepNumber": 3,
                "StepString": "Used `dirb/wordlists/common.txt` wordlist to find the endpoint."
            },
            {
                "StepNumber": 4,
                "StepString": "Discovered that the application is a PHP proxy that allows users to visit websites from it."
            },
            {
                "StepNumber": 5,
                "StepString": "Found out from the footer that the application is 'Powered by PHP-Proxy'."
            },
            {
                "StepNumber": 6,
                "StepString": "Identified PHP-Proxy (all versions) have a Local File Inclusion (LFI) vulnerability."
            },
            {
                "StepNumber": 7,
                "StepString": "Identified the encryption key is generated using `Config::set('encryption_key', md5(Config::get('app_key').$_SERVER['REMOTE_ADDR']));`."
            },
            {
                "StepNumber": 8,
                "StepString": "Found that the URL is encrypted using `str_rot_pass($url, $key);`."
            },
            {
                "StepNumber": 9,
                "StepString": "Discovered encryption function is not secure enough and can be decrypted."
            },
            {
                "StepNumber": 10,
                "StepString": "Reverse-engineered the key using the ciphertext and original plaintext."
            },
            {
                "StepNumber": 11,
                "StepString": "Upon getting the key, encrypted `file:///var/www/html/flag.txt`."
            },
            {
                "StepNumber": 12,
                "StepString": "The `file://` protocol was not explicitly banned, making the encryption possible."
            },
            {
                "StepNumber": 13,
                "StepString": "Used `python3 solve.py` to exploit the LFI vulnerability."
            },
            {
                "StepNumber": 14,
                "StepString": "Retrieved the flag `STC{l0cal_f1l3_1nclus10n_328d47c2ac5b2389ddc47e5500d30e04}`."
            }
        ]
    }
}