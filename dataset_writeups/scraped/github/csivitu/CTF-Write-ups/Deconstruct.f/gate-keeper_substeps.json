{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Starting point of the code, it's a SQL Injection attack and for domain they used a combination of uppercase, lowercase, numbers, underscore and curly braces",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Begin SQL Injection attack"
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Use combination of uppercase, lowercase, numbers, underscore, and curly braces for domain"
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Author defined a conditional statement, if the challenge is 'taxi union', certain variables are initialized with specific values",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Define conditional statement"
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Initialize certain variables with specific values if challenge is 'taxi union'"
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "If the challenge is 'Gate keeper', specific values are assigned to the same variables, like url and check",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Assign specific values to variables if challenge is 'Gate keeper'"
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "The execution enters a while loop, where the code iterates over every character in the domain to build up the 'payload'",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Enter while loop"
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Iterate over every character in the domain"
                    },
                    {
                        "SubstepNumber": 4.3,
                        "SubstepString": "Build up the 'payload'"
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "In the loop, the 'payload' is created in the format of a SQL statement with an OR operator to guess the next character in the password",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Create 'payload' in the format of a SQL statement"
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Use OR operator to guess the next character in the password"
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "A POST request is sent to the server with the 'payload' as the data",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Send POST request to server"
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Include 'payload' as the data"
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "If the response contains the 'check' string, that means the guess was correct and the character is appended to the 'flag' and the process continues",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Check if response contains 'check' string"
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "If it does, append guessed character to 'flag' and continue process"
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "If the guessed character is not in the password, the loop continues with the next character",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Check if guessed character is in password"
                    },
                    {
                        "SubstepNumber": 8.2,
                        "SubstepString": "If it is not, continue loop with next character"
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "The script continues in this way until the full password is discovered",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Continue script until full password is discovered"
                    }
                ]
            }
        ]
    }
}