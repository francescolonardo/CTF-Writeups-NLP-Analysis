The website has directory listing active, connecting to it two files are listed:
`login.php`
`login.php.bak`

The first page prints the message: `Not authenticated.`.

The login.php.bak contains the PHP source code.

Analyzing it, you can discover that a cookie named `otadmin` must be passed and its format must follow the following regex.

A correct value for that cookie can be the following;

If the passed value for that cookie is different from the MD5 hash of the `$cfg_pass` variable, a hint is given. You can use the correct value crafted befor to print it.

The hint is obtained by the following snippet.

Where strlen function gives 32 (i.e. the length of MD5 hashes is 32).

In that snippet, an AND operation is performed between the ASCII value of each char and the constant `0xC0` (i.e. `11000000`). Considering that the first three chars of the hint are 0, it means that the first original chars of the hash were numbers. That is due to the fact in the ASCII representation of numbers, the first most significant bits are `00` and the AND operation for that bits is performed with `11`.

So, the problem could be located in a *type juggling* in this comparison.

To exploit it, you have to guess the numbers at the beginning of the MD5 string.

A Python script can be written to exploit this task.

[Python code implementing a brute force attack against a login page. The code tries different cookie values by sending HTTP requests to the target URL until it finds the correct one that contains a flag.]

With the cookie you will discover the flag.
