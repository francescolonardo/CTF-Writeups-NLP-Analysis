{
    "XSS Attacks": [
        "Send an XSS with the stolen identifier",
        "Render the XSS payload: '<img src=\"/images/error.jpg\" alt=\"selected category random\"onerror=\"alert``\" />'"
    ],
    "Code Review": [
        "Determined that the payload was executed before serialization",
        "Reviewed source code of 'config/ups_manager.py' revealing the HTTP server with endpoints for 'ups_status', 'restart_ups', and '/get_flag'.",
        "Read the Python source code for the web app.",
        "Reviewed JavaScript 'index.js'."
    ],
    "File Manipulation": [
        "Find the renamed file path of the uploaded image",
        "Write the flag to '/opt/mydank'",
        "Injected a malicious payload into the file"
    ],
    "Exploits and Vulnerabilities": [
        "Run the exploit with the specified phar file",
        "Craft SQL injection payload",
        "Use version 43.0 for the user-agent string.",
        "Conclude that the problem might have been misconfigured.",
        "Noted that queries to this column return blank results.",
        "Identify the checks for specific patterns.",
        "Noted the flag leakage due to Fetch API redirect limit.",
        "Bypass authentication by making the conditional statement in the SQL query always true due to the SQL Injection."
    ],
    "Web Navigation": [
        "Access the website homepage",
        "Visit the website 'https://chall1.jsapi.tech'.",
        "Access the website: http://toomanycredits.tamuctf.com"
    ],
    "Networking and Requests": [
        "Caught the request including the Admin-Key on our own server.",
        "Observe the response received after sending the manipulated request.",
        "Trigger JavaScript code."
    ],
    "Web Application Features": [
        "Another part of the flag provided.",
        "Note the output shown upon submitting an article",
        "Realize that it runs the function exposed by the WASM module.",
        "Used 'attachment' parameter",
        "Submit the registration form",
        "Set the GET parameter to '?print=echo+'';print(eval('return ${blocked}[4](${nc});'))'",
        "Compose a JSON body with 'username': 'admin'.",
        "Identify needed parameters: username, nonce, and cnonce.",
        "Obtain the payload generated by the exploit script.",
        "Verify that the 'token' key contains a JWT"
    ]
}