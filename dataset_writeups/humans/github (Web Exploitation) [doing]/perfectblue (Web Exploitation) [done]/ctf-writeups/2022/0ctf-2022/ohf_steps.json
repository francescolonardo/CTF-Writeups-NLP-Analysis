{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Used lesscss to evaluate CSS on the backend and read arbitrary files with @import (inline) \"/etc/passwd\";"
            },
            {
                "StepNumber": 2,
                "StepString": "Leaked source code;"
            },
            {
                "StepNumber": 3,
                "StepString": "Used interp to evaluate Golang at runtime from cookie;"
            },
            {
                "StepNumber": 4,
                "StepString": "Controlled 'Version' in cookie to get arbitrary code execution;"
            },
            {
                "StepNumber": 5,
                "StepString": "Realized 'os.exec' is blocked, therefore used 'os.StartProcess' instead;"
            },
            {
                "StepNumber": 6,
                "StepString": "Imported 'io/ioutil' and 'os';"
            },
            {
                "StepNumber": 7,
                "StepString": "Created a function named 'api' which reads the file 'satellite.txt';"
            },
            {
                "StepNumber": 8,
                "StepString": "Defined 'os.ProcAttr' and assigned file descriptors for standard input, output and error handling;"
            },
            {
                "StepNumber": 9,
                "StepString": "Started a new process to execute '/bin/sh' with argument to read flag file and redirect the output to '/tmp/jizz';"
            },
            {
                "StepNumber": 10,
                "StepString": "Waited for the process to complete and returned the content of 'satellite.txt'."
            }
        ]
    }
}