{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Inspect the source code and discover that all other endpoints are protected by authenticationMiddleware"
            },
            {
                "StepNumber": 2,
                "StepString": "Understand that the mysqljs/mysql package is used without the option stringifyObjects: true"
            },
            {
                "StepNumber": 3,
                "StepString": "Recognize that the express.json() allows Object and Array types to be given as req.body.email and req.body.password"
            },
            {
                "StepNumber": 4,
                "StepString": "Use this behaviour when constructing SQL queries to bypass the login"
            },
            {
                "StepNumber": 5,
                "StepString": "Authenticate successfully and gain access to the application"
            },
            {
                "StepNumber": 6,
                "StepString": "Discover that the Express application is put behind a reverse proxy (Apache Traffic Server)"
            },
            {
                "StepNumber": 7,
                "StepString": "Realize that the /do-report endpoint is mapped to /forbidden, preventing access unless not going through the proxy"
            },
            {
                "StepNumber": 8,
                "StepString": "Research about the versions of Node.js and ATS used"
            },
            {
                "StepNumber": 9,
                "StepString": "Find a HTTP request smuggling issue with incorrect parsing of chunk extensions"
            },
            {
                "StepNumber": 10,
                "StepString": "Modify the available PoC to suit the given context"
            },
            {
                "StepNumber": 11,
                "StepString": "Smuggle a request to the backend application, bypassing the access control implemented on ATS"
            },
            {
                "StepNumber": 12,
                "StepString": "Understand that the verify.pug template has a unescaped username allowing HTML markup injection"
            },
            {
                "StepNumber": 13,
                "StepString": "Learn about the Scroll-To-Text-Fragment (STTF) which is a Chromium feature allowing to scroll to a specific portion of the page using a text snippet in the URL"
            },
            {
                "StepNumber": 14,
                "StepString": "Use the lazy-loaded image to detect if a scroll occurred when a text fragment is parsed in the URL"
            },
            {
                "StepNumber": 15,
                "StepString": "Automate the submission of different text fragments and for each text fragment, detect if a callback is received"
            },
            {
                "StepNumber": 16,
                "StepString": "Use this method to bruteforce the admin token one character at a time"
            },
            {
                "StepNumber": 17,
                "StepString": "Automate the full exploit chain in solve.py"
            },
            {
                "StepNumber": 18,
                "StepString": "Adjust necessary parameters in the python script"
            }
        ]
    }
}