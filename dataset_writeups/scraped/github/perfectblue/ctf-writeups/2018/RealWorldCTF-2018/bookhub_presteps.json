[
    "Started the challenge by finding the /login/ endpoint and a www.zip file using dirsearch",
    "Opened the www.zip file to find the source code of the web app",
    "Identified the login process in the file bookhub/forms.user.py",
    "Noticed the login occurs only if the user's IP address is one of the whitelisted IP addresses or when the debug mode is enabled. Found that the get_remote_addr() function from the file bookhub/helper.py is used to get the user's IP address",
    "Added the header X-Forwarded-For, but got an error message that the IP address was not in the whitelist",
    "Suspected a reverse proxy might be stripping the X-Forwarded-For header",
    "Did a nmap scan on IP 18.213.16.123 which was not a local IP",
    "Opened http://18.213.16.123:5000/ and found out the web app run in the debug mode",
    "Identified some extra code for the debug mode in the bookhub/views/user.py file",
    "Discovered a bug in the /admin/system/refresh_session/ endpoint which could be accessed without authentication",
    "Identified there is a potential for a redis injection flaw in the refresh_session() function, where the user's sessionID is used in a redis eval() call with a lua script",
    "Duplicated the server environment and set up a redis server to construct an exploit",
    "Revealed that session data is stored as a serialized pickle python object, which could potentially be exploited for a pickle deserialization vulnerability",
    "Created a script which modified sessionID to valid lua, refreshed the CSRF token and sent a POST request to the /admin/system/refresh_session/ endpoint",
    "Constructed a payload to do a redis.call() to set the serialized object with the sessionID and made a GET request to /login/ to trigger the deserialization",
    "Created a final script to send the command for flag extraction to the server"
]