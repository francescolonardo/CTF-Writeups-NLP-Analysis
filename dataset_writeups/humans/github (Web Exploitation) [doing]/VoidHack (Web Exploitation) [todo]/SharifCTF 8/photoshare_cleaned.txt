Website welcomes us with a login form. Username is known from the description (```jack```), password mask is ```YYYYMM``` (also from the description), secret question is pretty simple. So we need to investigate a html code and write a bruteforcer.

I marked fields which should be extracted. I've used Python for writing it.

Full code you can see in [brute.py](brute.py). Run it and... yeah!
Now we can login as jack.

Website has two pages: we can upload a photo with id from 1 to 6 and show it on the showcase.
Look at the urls.

It seems that we can insert any username instead of ```jack```, but it causes 403.

Interesting, but we're following Hint and ```not bypassing the uploader```. Look at the cookie called ```session_id``` instead! Yes, it's just an md5 hash which can easily be cracked.

After some experiments I decided that we can write here hashes of jacks from ```jack1``` to ```jack60```, but it isn't important. Authors asks us to login as ```admin```, so let's do it! Try to set ```md5(admin34)``` and reload the page.

Oops! Security check. But what if we open images directly from urls? For example image with ```id=3```:

Yeah, got it! His name is ```Mr. Tashakkor```. Now we can use it for entering the website.

