{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Access and inspect the front-end JavaScript source code",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Access the front-end JavaScript source code."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Inspect the front-end JavaScript source code."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Identify that Meteor is being used to fetch data from a MongoDB backend",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Identify that Meteor is being used."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Identify that data is being fetched from a MongoDB backend."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Discover all the exposed Meteor methods including 'notes.count', 'notes.add', and 'notes.remove'",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Discover the exposed Meteor methods."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Identify the exposed methods as 'notes.count', 'notes.add', and 'notes.remove'."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Observe that 'notes.count' function is unauthenticated",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Observe the 'notes.count' function."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Determine that the 'notes.count' function is unauthenticated."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Understand that 'notes.count' applies a filter and returns the count of notes that pass this filter",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Understand the purpose of 'notes.count'."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Understand that 'notes.count' applies a filter."
                    },
                    {
                        "SubstepNumber": 5.3,
                        "SubstepString": "Understand that 'notes.count' returns the count of notes that pass the filter."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Use Burp Suite to find that this method is being executed through websockets",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Use Burp Suite."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Find that 'notes.count' is being executed through websockets."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Deduce that the '$ne' filter checks if the body of the notes is not empty",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Deduce the purpose of the '$ne' filter."
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Deduce that the '$ne' filter checks if the body of the notes is not empty."
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Understand '$regex' is acceptable, allowing regex patterns for note contents",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Understand the purpose of '$regex'."
                    },
                    {
                        "SubstepNumber": 8.2,
                        "SubstepString": "Understand that '$regex' allows regex patterns for note contents."
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Check for notes that match the regex pattern 'flag{.*}', testing the filter",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Check for notes that match the regex pattern 'flag{.*}'."
                    },
                    {
                        "SubstepNumber": 9.2,
                        "SubstepString": "Test the filter."
                    }
                ]
            },
            {
                "StepNumber": 10,
                "StepString": "Validate that only one result is returned, indicating only one note contains the flag",
                "Substeps": [
                    {
                        "SubstepNumber": 10.1,
                        "SubstepString": "Validate that only one result is returned."
                    },
                    {
                        "SubstepNumber": 10.2,
                        "SubstepString": "Indicate that only one note contains the flag."
                    }
                ]
            },
            {
                "StepNumber": 11,
                "StepString": "Use this technique to bruteforce every character of the flag",
                "Substeps": [
                    {
                        "SubstepNumber": 11.1,
                        "SubstepString": "Use the technique to bruteforce every character of the flag."
                    }
                ]
            },
            {
                "StepNumber": 12,
                "StepString": "Concatenate possible characters to the end of the flag",
                "Substeps": [
                    {
                        "SubstepNumber": 12.1,
                        "SubstepString": "Concatenate possible characters to the end of the flag."
                    }
                ]
            },
            {
                "StepNumber": 13,
                "StepString": "For each possible character, check if it is part of the flag by verifying if the count returns 1",
                "Substeps": [
                    {
                        "SubstepNumber": 13.1,
                        "SubstepString": "For each possible character."
                    },
                    {
                        "SubstepNumber": 13.2,
                        "SubstepString": "Check if the possible character is part of the flag."
                    },
                    {
                        "SubstepNumber": 13.3,
                        "SubstepString": "Verify if the count returns 1."
                    }
                ]
            },
            {
                "StepNumber": 14,
                "StepString": "Output the character if it returns a count larger than 0",
                "Substeps": [
                    {
                        "SubstepNumber": 14.1,
                        "SubstepString": "Output the character if it returns a count larger than 0."
                    }
                ]
            },
            {
                "StepNumber": 15,
                "StepString": "Repeat this until the entire flag ('flag{4lly0Urb4s3}') is discovered",
                "Substeps": [
                    {
                        "SubstepNumber": 15.1,
                        "SubstepString": "Repeat the process until the entire flag ('flag{4lly0Urb4s3}') is discovered."
                    }
                ]
            }
        ]
    }
}