{
    "Web Application Firewall (WAF)": [
        "Observe the presence of a WAF named 'Skynet' that filters requests."
    ],
    "SQL Injection": [
        "Create an SQL injection payload.",
        "Execute the SQL injection payload created in the previous step.",
        "Manipulate the query using the union operation."
    ],
    "File Upload and Arbitrary File Read": [
        "Used previous step's vulnerability to upload.",
        "Used 'Redirect 307' to read arbitrary files."
    ],
    "Cryptographic Vulnerabilities": [
        "Utilized SHATTERED tool.",
        "Exploited SHA1 vulnerability using SHATTERED.",
        "Created two PDFs with same SHA1 hash exploiting the SHA1 vulnerability with SHATTERED."
    ],
    "Burp Suite and User-Agent Strings": [
        "Brute-force user-agent strings in burp suite."
    ],
    "Cross-Site Scripting (XSS)": [
        "Understand that the challenge involves a Same-Origin XSS attack",
        "Send an XSS to the pop-up",
        "Send an XSS with the stolen identifier",
        "Get the flag",
        "Append the xss=<script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/rollups/sha512.js\"> parameter to the query.",
        "Send the crafted URL, which includes the injected script, to the admin.",
        "Discover a potential for XSS injection."
    ],
    "Server-Side Request Forgery (SSRF)": [
        "Recognize the opportunity that 'ping' sends a POST request when the link is clicked.",
        "Think of exploiting this opportunity.",
        "Determine the payload to be inserted.",
        "Insert the payload which is a URL that generates a password change request for the admin account when clicked."
    ],
    "NoSQL Injection": [
        "Recognize that blind NoSQL injection is required.",
        "Perform a bruteforce attack."
    ],
    "Vulnerability Identification and Exploitation": [
        "Identify potential vulnerabilities and points of entry in the website.",
        "Consider whether this could present an entry point if a vulnerability, such as Template Injection, can be exploited successfully.",
        "Consider if manipulating this token structure could allow for unauthorized purchases from the 'flag store'.",
        "Apply the determined attack vector to exploit the system.",
        "Ensure the injection payload has been executed.",
        "Execute the exploit to retrieve the flag ('flag{npm_devs_are_pretty_bad_at_fixing_bugs}')."
    ],
    "CSS Injection and CSRF Attack": [
        "Found out the parameter 'uuid' in the request 'http://web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one/profile.php?uuid=<uuid>' is vulnerable to injections ( XSS/CSS ) and is limited to '36 characters'",
        "Decided to use CSRF (Cross-Origin Request Forgery) attack to change the status to 'premium', the only missing piece is the 'token'",
        "Created a payload `\"><svg/onload=$.globalEval(name)` with length of '32 bytes'",
        "Assigned the payload by sending the admin to our webpage, where we triggered 'window.open('http://web-04.v7frkwrfyhsjtbpfcppnu.ctfz.one/profile.php?uuid=\"><svg/onload=$.globalEval(name)', <long payload>)', setting 'window.name' to '<long payload>'",
        "Sent the admin to the page with the payload",
        "Determine that the 'uuid' parameter is vulnerable to injections (XSS/CSS)",
        "Decide to use CSRF attack",
        "Create the payload",
        "Send the admin to the page with the payload"
    ],
    "SQL Injection via UUID POST data": [
        "Understand that the 'decrypt.php' file suggests the potential for an SQL injection via the UUID POST data.",
        "Construct an SQL injection query based on the format.",
        "Perform the SQL injection using the constructed input string."
    ],
    "Error-Based Blind SQL Injection": [
        "Identified a heavily filtered error-based blind sql injection.",
        "Test the SQL payload by iteratively substituting different lengths for '$LENGTH$'."
    ],
    "Mathematical Exploitation for SQL Injection": [
        "Create a payload using functions that, when run, return 1337",
        "Reduce the number of characters in the payload by improving upon the first solution",
        "Use a new approach that does not involve factorization to achieve a payload with an even smaller character size"
    ],
    "XSS Injection via CSRF Token Script": [
        "Check for a possibility of XSS injection in the CSRF token script.",
        "Attempt to utilize CSRF mechanism."
    ],
    "Server Exploitation and Manipulation": [
        "Identified manipulating capabilities of Apache2."
    ],
    "Message Length Restriction Bypass": [
        "Bypassed message length restriction."
    ]
}