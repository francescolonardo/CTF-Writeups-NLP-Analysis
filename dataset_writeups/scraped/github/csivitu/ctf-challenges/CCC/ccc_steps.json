{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Locate routes to '/login' and '/adminNames' in the website source."
            },
            {
                "StepNumber": 2,
                "StepString": "Visiting the '/login' route presents a form to fill."
            },
            {
                "StepNumber": 3,
                "StepString": "Submit form and monitor the Network Tab responses for a JWT in the 'token' header."
            },
            {
                "StepNumber": 4,
                "StepString": "Decode the JWT, e.g., at jwt.io, revealing a payload with 'username', 'password', and 'admin' keys."
            },
            {
                "StepNumber": 5,
                "StepString": "Note that the 'username' from the form inputs has undergone rot13 encoding to appear in the decoded JWT."
            },
            {
                "StepNumber": 6,
                "StepString": "Apply rot13 decoding on the 'admin' value, which returns 'false'."
            },
            {
                "StepNumber": 7,
                "StepString": "Form the intention to alter the decoded 'admin' value to a rot13-encoded 'true', which would require the JWT secret."
            },
            {
                "StepNumber": 8,
                "StepString": "Navigate to '/adminNames', which prompts a file download containing a GitHub URL."
            },
            {
                "StepNumber": 9,
                "StepString": "Visit the GitHub URL, which leads to a list of website admin usernames."
            },
            {
                "StepNumber": 10,
                "StepString": "Prepare to alter the JWT 'username' to the rot13-encoded version of a listed admin username."
            },
            {
                "StepNumber": 11,
                "StepString": "Seek the JWT secret by examining the request route for '/adminNames', i.e., '/getFile?file=admins'."
            },
            {
                "StepNumber": 12,
                "StepString": "Experiment with the '/getFile?file=...' route, e.g., by replacing 'admins' with '.env' or '../.env'."
            },
            {
                "StepNumber": 13,
                "StepString": "Download the '.env' file, which contains the JWT secret."
            },
            {
                "StepNumber": 14,
                "StepString": "Create a new token using the JWT secret and the altered payload (admin username and 'true' admin status)."
            },
            {
                "StepNumber": 15,
                "StepString": "Visit the '/admin' route, monitoring the response for headers requiring a token."
            },
            {
                "StepNumber": 16,
                "StepString": "Identify the need for an 'Authorization' header containing a JWT."
            },
            {
                "StepNumber": 17,
                "StepString": "Send a GET request with the correct 'Authorization' header using the new token to authenticate."
            },
            {
                "StepNumber": 18,
                "StepString": "Receive a response text containing the flag in rot13 encoding."
            },
            {
                "StepNumber": 19,
                "StepString": "Decode the flagged text via rot13 to reveal the true flag."
            }
        ]
    }
}