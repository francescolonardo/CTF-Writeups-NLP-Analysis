{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "The challenge was to host 'https://chall1.jsapi.tech' on GitHub. This site provided an HTML interface for writing and saving notes."
            },
            {
                "StepNumber": 2,
                "StepString": "Upon examination of the site's JavaScript script 'script.js', it was found that it added the message event handler to the window after meeting several checks."
            },
            {
                "StepNumber": 3,
                "StepString": "These checks included whether the 'enableapi' query parameter was set to 'true', if 'recv' query parameter was a subdomain of 'jsapi.tech', and if the window was framed or opened by another window."
            },
            {
                "StepNumber": 4,
                "StepString": "It was discovered that if the subdomain is 'jsapi.tech', it points to 'sohomdatta1.github.io' thanks to a wildcard DNS configuration."
            },
            {
                "StepNumber": 5,
                "StepString": "By using the 'dig' command on 'asdf.jsapi.tech', it was confirmed that any new repository with a CNAME file containing 'asdf.jsapi.tech' can be created to serve a GitHub pages site at 'asdf.jsapi.tech'."
            },
            {
                "StepNumber": 6,
                "StepString": "Further scrutiny of the code revealed that when a note is saved and self.set() is called, the note's contents are added to the 'data-last' attribute of the '#note-text-area' element. The DOMPurify v2.3.0 tool is used for sanitizing the note, with 'link' and 'style' tags explicitly permitted."
            },
            {
                "StepNumber": 7,
                "StepString": "This allows the addition of DOMPurify-sanitized HTML into the child iframe if a postMessage starting with 'NOTE_APP_SET_REQUEST' is sent."
            },
            {
                "StepNumber": 8,
                "StepString": "The site's Content-Security-Policy (CSP) allowed stylesheets to be loaded from '*.jsapi.tech', enabling the loading of a CSS file from the exploit domain."
            },
            {
                "StepNumber": 9,
                "StepString": "However, adding anything _before_ the '<link>' tag fixes this behaviour, such as using 'asdf<link rel='stylesheet' href='...'>'."
            },
            {
                "StepNumber": 10,
                "StepString": "The 'data-last' attribute of the '#note-text-area' element, containing the victim's saved note, can be exfiltrated using CSS attribute selectors."
            },
            {
                "StepNumber": 11,
                "StepString": "The URL specified in the 'background' of the appropriate CSS rule is only fetched if the 'data-last' attribute starts with the correct string."
            },
            {
                "StepNumber": 12,
                "StepString": "This then allows the flag to be brute-forced by guessing all possible characters in each position of the flag, each character having a background URL corresponding to the guessed flag."
            },
            {
                "StepNumber": 13,
                "StepString": "For the attack, a Python script is used to generate the corresponding CSS, and the result is saved in 'exploit.css'."
            },
            {
                "StepNumber": 14,
                "StepString": "The exploit page loads the challenge page as an 'iframe', waits for the API to be loaded, and then sends a 'postMessage' linking the generated CSS to the target page. This is added to a GitHub repository together with the CSS and deployed to GitHub pages under a '.jsapi.tech' subdomain."
            },
            {
                "StepNumber": 15,
                "StepString": "Each character was exfiltrated by redeploying the exploit GitHub page with the updated CSS."
            }
        ]
    }
}