Title: XSS in Halloween Form
Primary topic: Web Exploitation
Secondary topic: Cross-Site Scripting (XSS)
Tools used: Burp Suite, GitHub, Webhook.site
Keywords: CSP, JWT, cookie

#context
Starting the challenge, we get the following page which presents a form. Submitting the form, it says that request will be reviewed by team. Looking into the burpsuite proxy, it is posting data to the submit endpoint. Tracing into the source code, this endpoint adds the post data in the database and calls a visit function from bot. The other endpoint is /admin which gets the data from db and passes it into the admin template and /admin/delete_all endpoint deletes all the data from db.

#discovery
Looking into the visit function which is called when we submit the form. It first creates a headless browser and it signs and sets an admin JWT which contains flag. This gives the idea that we need to steal this admin cookie. Then it visits the /admin page which displays all the data from db and then it calls delete_all endpoint which deletes all data from db.

#exploitation
Now, that we know that we need to steal admin cookie and also the admin is rendering the user input data, we can perform XSS to grab the cookie. Looking in the admin template which displays the form data to admin, the halloween name field is marked safe which means it will not escape character, so we can inject our js code in it. But the problem is that it has a CSP header which we need to bypass for our XSS to work. Understanding the CSP that script source is set to self and jsdelivr CDN which means it will only trust JS