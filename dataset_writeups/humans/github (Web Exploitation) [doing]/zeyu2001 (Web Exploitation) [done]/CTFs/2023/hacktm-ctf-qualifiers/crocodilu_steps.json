{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Registered a new user and attempted to login which returns 'User not active' error"
            },
            {
                "StepNumber": 2,
                "StepString": "Examined 'auth.py' and identified that a successful password reset would set 'user.active' to 'True', activating the user account"
            },
            {
                "StepNumber": 3,
                "StepString": "Requested an OTP at '/request_code' to set 'user.code' to a random 4-digit number"
            },
            {
                "StepNumber": 4,
                "StepString": "Noticed rate limiting being enforced on a per-email basis through a Redis store, which limits the number of OTP attempts to 3"
            },
            {
                "StepNumber": 5,
                "StepString": "Identified that the OTP code was validated using SQL 'LIKE' operator and tried to insert '%' wildcard to bypass check"
            },
            {
                "StepNumber": 6,
                "StepString": "Attempted to bypass `is_valid_email(email)` function but failed as the function doesn't allow special characters like '%'"
            },
            {
                "StepNumber": 7,
                "StepString": "Understood that the `'re.match'` only matches at the _beginning_ of the string, allowing for wildcards at the _end_ of the email"
            },
            {
                "StepNumber": 8,
                "StepString": "Created a script to brute force the OTP by appending '%' to the email and incrementally changing the OTP"
            },
            {
                "StepNumber": 9,
                "StepString": "Gained access by passing the OTP check, ensuring the user script run by application was active"
            },
            {
                "StepNumber": 10,
                "StepString": "Identified a post made by admin with the flag which is only visible to the admin"
            },
            {
                "StepNumber": 11,
                "StepString": "Inspected Create Post code and identified the BeautifulSoup module being used to sanitize HTML and a restrictive CSP"
            },
            {
                "StepNumber": 12,
                "StepString": "Exploited parser differential in BeautifulSoup and injected arbitrary HTML through HTML comments"
            },
            {
                "StepNumber": 13,
                "StepString": "Analysed the server's CSP policy and identified a potential vulnerability with 'www.youtube.com' hosting a JSONP endpoint"
            },
            {
                "StepNumber": 14,
                "StepString": "After unsuccessful attempts searching for YouTube's JSONP endpoints, found an issue on Google's issue tracker regarding YouTube's 'oembed' API not implementing JSONP"
            },
            {
                "StepNumber": 15,
                "StepString": "Triggered a JSONP response from the YouTube API by providing a callback parameter"
            },
            {
                "StepNumber": 16,
                "StepString": "Created a callback that reflected the response into Javascript code in order to inject arbitrary Javascript to exfiltrate contents from admin's page"
            },
            {
                "StepNumber": 17,
                "StepString": "Submitted final payload that contained a script, exploiting YouTube's JSONP response and BeautifulSoup's parsing differential"
            },
            {
                "StepNumber": 18,
                "StepString": "Identified the URL of the flag containing post '/post/68a30ae2-a8f3-4d12-9ffa-0564a3a7177b' from the exfiltrated contents, and repeated the Javascript injection to fetch the flag"
            }
        ]
    }
}