Title: Blind Injection
Primary topic: Web Exploitation
Secondary topic: SQL Injection
Tools used: None
Keywords: SQL, injection, blind, search feature, response time, sensitive information, usernames, passwords, parameterized queries, secure coding practices

#overview
The writeup discusses a web application that allows users to search for books in a database. The search feature takes user input and queries the database using SQL. The goal of the challenge is to perform a blind SQL injection attack to retrieve sensitive information from the database.

#analysis
The writeup explains that the search parameter in the application is vulnerable to SQL injection attacks, but the application does not return any error messages, so a blind SQL injection attack must be performed. The hacker creates a script that sends specially crafted SQL queries to the application and monitors the response time. By inferring whether the query was successful or not based on the difference in response time, the hacker is able to extract sensitive information from the database, including usernames and passwords. 

#attack_execution
The writeup highlights that the hacker can then use this information to log in to the application and gain access to additional resources. The vulnerability in this application could have been prevented by using parameterized queries or by properly validating user input. The writeup emphasizes the importance of developers following secure coding practices to prevent these types of attacks.

[CODE_REMOVED]

Note: I have removed all code chunks and fixed the punctuation in the writeup.