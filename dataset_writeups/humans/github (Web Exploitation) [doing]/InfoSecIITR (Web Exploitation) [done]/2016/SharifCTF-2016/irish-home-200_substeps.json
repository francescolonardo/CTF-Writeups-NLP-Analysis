{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Identify /login.php as vulnerable to SQL injection with filters applied on double quotes.",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Analyze the /login.php page to identify possible input fields and parameters for SQL injection."
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Test for SQL injection vulnerabilities by injecting SQL payloads into the identified fields and parameters."
                    },
                    {
                        "SubstepNumber": 1.3,
                        "SubstepString": "Determine the presence of filters, particularly on double quotes, by observing the system's response to the injected payloads."
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Bypass the filter and log in as admin using a specific username and password combination.",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Develop payloads designed to bypass the identified filters on double quotes."
                    },
                    {
                        "SubstepNumber": 2.2,
                        "SubstepString": "Inject the developed payloads to log in with a combination of username and password that grants admin access."
                    },
                    {
                        "SubstepNumber": 2.3,
                        "SubstepString": "Verify successful login and elevated access by examining available functionalities and data."
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Discover Local File Inclusion (LFI) vulnerability on the site after logging in.",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "After securing admin access, scrutinize the site’s functionalities and parameters to identify potential points for Local File Inclusion."
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Attempt to exploit identified points by injecting payloads designed to include local files and observe the site's responses."
                    },
                    {
                        "SubstepNumber": 3.3,
                        "SubstepString": "Confirm the existence of LFI vulnerability by successfully including and accessing local files."
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Use an LFI technique to access a PHP script, revealing that the site is under maintenance and all destructive actions are disabled.",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Choose an LFI technique suitable for the identified vulnerability."
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Employ the chosen LFI technique to access specific PHP scripts within the server."
                    },
                    {
                        "SubstepNumber": 4.3,
                        "SubstepString": "Analyze the accessed PHP script to uncover information about the site’s status and restrictions, such as maintenance mode and disabled destructive actions."
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Use another LFI technique to access a PHP script containing the flag, a username, a salt value, and an empty password field.",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Identify a different LFI technique or modify the existing one to access other PHP scripts on the server."
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Implement the identified LFI technique to access a PHP script containing sensitive information like the flag, a username, and a salt value."
                    },
                    {
                        "SubstepNumber": 5.3,
                        "SubstepString": "Extract the discovered sensitive information for further exploitation."
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Employ a Python script to brute-force the password.",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Develop or acquire a Python script capable of brute-forcing passwords using the extracted salt value and username."
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Run the Python script and monitor its progress to capture the correct password once found."
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Complete the challenge, which involved SQLi, LFI, path traversal, and blind SQLi vulnerabilities.",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Complete the challenge, which involved SQLi, LFI, path traversal, and blind SQLi vulnerabilities."
                    }
                ]
            }
        ]
    }
}
