{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Identify a prototype pollution vulnerability in '/api/tet/list' when merging request data."
            },
            {
                "StepNumber": 2,
                "StepString": "Observe that user input being passed to 'require()' leads to a Local File Inclusion (LFI) vulnerability."
            },
            {
                "StepNumber": 3,
                "StepString": "Propose to escalate this vulnerability to Remote Code Execution (RCE) given a valid .js file using an attribute that can be polluted to spawn a new process or execute a command."
            },
            {
                "StepNumber": 4,
                "StepString": "Consider that potential .js file candidates for execution are likely to be found in the node_modules folder which contains the source code of installed modules."
            },
            {
                "StepNumber": 5,
                "StepString": "Using 'grep' command to search for 'child_process' in all files of '/usr/local/lib/node_modules'."
            },
            {
                "StepNumber": 6,
                "StepString": "Find two scripts, 'changelog.js' and 'update-dist-tags.js' using 'child_process'."
            },
            {
                "StepNumber": 7,
                "StepString": "Analyze the 'changelog.js' script finding that it includes a 'execSync' call with a possible command injection."
            },
            {
                "StepNumber": 8,
                "StepString": "Notice that 'require()' call doesn't pass any arguments in 'changelog.js' so 'process.argv[2]' is undefined."
            },
            {
                "StepNumber": 9,
                "StepString": "Decide to pollute 'process.argv[2]' with a command injection payload before importing the 'changelog.js' file."
            },
            {
                "StepNumber": 10,
                "StepString": "Test this step locally with a python command that should create a reverse shell."
            },
            {
                "StepNumber": 11,
                "StepString": "Perform a prototype pollution on the web server by sending a POST request to the '/api/tet/list' endpoint with a JSON payload having '__proto__' polluted with a command injection payload in the 'data'."
            },
            {
                "StepNumber": 12,
                "StepString": "Exploit the LFI vulnerability to execute the 'changelog.js' script by sending a POST request to the '/api/tet/years' endpoint with a JSON payload in the request body specifying the 'changelog.js' script in the path."
            },
            {
                "StepNumber": 13,
                "StepString": "Expect to get a reverse shell as a result."
            },
            {
                "StepNumber": 14,
                "StepString": "Navigate to root directory and read the flag."
            }
        ]
    }
}