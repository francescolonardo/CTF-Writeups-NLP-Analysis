{
    "Character Escaping and Injection": [
        "Discover that the backslash character itself isn't escaped.",
        "Attempt to break out using '?cat=news\\\\''.",
        "Find that any brackets or subsequent quotes are still escaped.",
        "Find that the feature allows specifying a remote document portion to insert.",
        "Remove the 'noscript' tag."
    ],
    "Exploiting Code and Logic Flaws": [
        "Derive a proof-of-concept (PoC) to brute-force a character of the flag by exploiting the observed behavior",
        "Observe that the violation can be detected through a 'securitypolicyviolation' event listener",
        "Build the asmbb engine source code using the Fresh IDE with Linux as the target OS",
        "Analyze the AsmBB source's render2.asm file",
        "Inspect the functionality of the 'minimag' command",
        "Inspect the functionality of the 'bbcode' command",
        "Familiarize with TranslateBBCode routine",
        "TranslateBBCode routine is in bbcode.asm file part of FreshLib",
        "TranslateBBCode routine processes BBCode tags",
        "The HTML encoding process of individual characters is done in the loop function",
        "Discover an edge case where not closing a BBCode tag results in an unencoded content being reflected",
        "The unencoded content being reflected leads to an alert in the browser",
        "Identify two other POST-based XSS vectors",
        "Determine that a setting called 'Pipe the emails through' uses the 'smtp_exec' variable",
        "The 'smtp_exec' variable is used as an argument to the Exec2 routine",
        "Modify the 'Pipe the emails through' command",
        "Send the flag to an external server using the '/readflag>/dev/tcp' command",
        "Identify prototype pollution vulnerability",
        "Vulnerability found in `utils.merge()` method",
        "Identify off-by-one error in `background.js` font validation",
        "Manipulate `utils.FONTS[10]` using the off-by-one error"
    ],
    "Web Server and Request Handling": [
        "Understand that ATS processes LF as line endings.",
        "Understand that Waitress allows LF in chunked extensions.",
        "Note how ATS processes the LF as the end-of-line.",
        "Note how the second request is encapsulated in the chunked content of the first request.",
        "Exploited a difference in how ATS and Waitress process end-of-line symbols.",
        "Discover RCE vulnerability through pre-installed 'pearcmd.php'.",
        "Construct PHP payload.",
        "Include '/tmp/pwn.php' using LFI.",
        "Understand that the challenge focuses on exploiting dynamic renderers",
        "Understand that Prerender is used to render sensitive endpoints",
        "Take note of the Nginx configuration",
        "Acknowledge the implementation of extra checks",
        "Understand that XSS within the Chromium renderer is necessary",
        "Take notice of the 'validateUrls' mechanism",
        "Understand that the mechanism can be bypassed using 'username:password@hostname' URL format",
        "Recognize the naive 'script remover'",
        "Understand that script tags can be bypassed using 'onload' event handlers"
    ],
    "Code Execution and Output Manipulation": [
        "Configured the server to give two different responses.",
        "Notice that 'mootools' JavaScript library is used.",
        "Execute Prototype pollution attack.",
        "Notice that a 'note' is 'found' if it starts with 'request.search'.",
        "Verify if a substring exists in the flag.",
        "Identify the suspicious logic of the JavaScript.",
        "Notice that the 'name' variable is not declared in this case."
    ]
}