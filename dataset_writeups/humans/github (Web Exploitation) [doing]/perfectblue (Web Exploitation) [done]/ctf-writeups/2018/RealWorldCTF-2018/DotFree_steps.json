{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Opened the provided URL which returned a page that accepts another URL and submits it."
            },
            {
                "StepNumber": 2,
                "StepString": "Observed possibility of XSS attack from bot's lens when it visits the URL provided on the page."
            },
            {
                "StepNumber": 3,
                "StepString": "Analyzed the source code of the page and identified JavaScript functions that handle creation of iframe or appending script source, and a message event listener that conducts some checks on iframe data from URL."
            },
            {
                "StepNumber": 4,
                "StepString": "Understood that the challenge is to pass checks where there should not be any dots, double slashes or non-ascii dot in the iframe value in the url."
            },
            {
                "StepNumber": 5,
                "StepString": "Noticed a flaw in check condition where it checks if iframe is not an object instead of checking if iframe value is not an object."
            },
            {
                "StepNumber": 6,
                "StepString": "Created a payload that doesn't have dots or double slashes. This is done using data URI in the form 'data:text/html;base64,<base64 data>'."
            },
            {
                "StepNumber": 7,
                "StepString": "The base64 data encodes an XMLHttpRequest which retrieves document's cookie and sends to a specified server."
            },
            {
                "StepNumber": 8,
                "StepString": "Payload is structured in JSON and added to the URL after first  '?' character."
            },
            {
                "StepNumber": 9,
                "StepString": "Submitted the URL so that it is visited by the bot."
            },
            {
                "StepNumber": 10,
                "StepString": "Received the flag in server logs as a cookie in the HTTP GET request."
            }
        ]
    }
}