{
    "SQL Injection": [
        "Learn that the SQLite code can be injected into the vulnerable order_by() function"
    ],
    "Payload Identification and Manipulation": [
        "Identify the payload",
        "If the character matches 5, set the LIMIT to 1",
        "If the character does not match 5, set the LIMIT to 2"
    ],
    "Python Scripting": [
        "Create a Python script"
    ],
    "Response Header Analysis": [
        "Check the 'Content-length' response header",
        "Compare the response header with the chosen character",
        "Identify if the chosen character is correct based on the response header",
        "Check if no character in the alphabet is causing a change in content length",
        "Break the script if no character is causing a change in content length"
    ],
    "HTML Injection Vulnerability": [
        "Discovered that HTML injection is possible"
    ],
    "User Agent Identification": [
        "Identified that the user agent is 'wkhtmltoimage'"
    ],
    "XSS Vulnerability Identification": [
        "Identify XSS vulnerability in the feedback feature of the site.",
        "Analyzed the JavaScript source.",
        "Identified the use of a message event handler."
    ],
    "Loophole Identification": [
        "Identified a loophole in the 'search' feature.",
        "Recognized that 'this.noteData' remained the same after sanitization.",
        "Noted the absence of 'window.enable_experimental_features'."
    ],
    "DOM Clobbering": [
        "Utilized DOM clobbering.",
        "Overrode the 'window.enable_experimental_features' property.",
        "Demonstrated DOM clobbering."
    ],
    "Lazy Loading Property Exploitation": [
        "Unintended solution using 'Lazy-loading' property."
    ],
    "PerformanceLongTaskTiming API Exploitation": [
        "Different intended solution using 'PerformanceLongTaskTiming API'.",
        "Wrote a script using 'setTimeout' function."
    ],
    "JavaScript Source Examination": [
        "Examined the site's JavaScript script 'script.js'.",
        "Identified the message event handler added to the window."
    ],
    "CNAME File Manipulation": [
        "Confirmed the possibility of creating a new repository with a CNAME file containing 'asdf.jsapi.tech'."
    ],
    "Note Saving Mechanism Analysis": [
        "Examined the code to understand the note saving mechanism.",
        "Identified the addition of note contents to the 'data-last' attribute of the '#note-text-area' element.",
        "Noted the usage of DOMPurify v2.3.0 tool for sanitizing the note.",
        "Verified that 'link' and 'style' tags are explicitly permitted during sanitization."
    ],
    "Content-Security-Policy Analysis": [
        "Examined the Content-Security-Policy (CSP) of the site."
    ],
    "CSS Rule Identification": [
        "Observed the usage of 'asdf<link rel='stylesheet' href='...'>'.",
        "Identified the CSS rule with 'background' property."
    ],
    "CSS Script Manipulation": [
        "Examined the Python script used for the attack.",
        "Noted the usage of the Python script to generate CSS.",
        "Updated the CSS in the redeployed page."
    ],
    "Jinja2 Template Injection": [
        "Identify that it was a Jinja2 Template Injection challenge.",
        "Work on bypassing '{{' by using an if-else statement.",
        "Work on bypassing '}}' by using an if-else statement.",
        "Find a workaround for using '.' by employing the 'attr' filter.",
        "Utilize 'first' to get the first item of a list.",
        "Utilize 'last' to get the last item of a list.",
        "Bypass '_' by constructing a string",
        "Bypass '\\' by constructing a string"
    ]
}