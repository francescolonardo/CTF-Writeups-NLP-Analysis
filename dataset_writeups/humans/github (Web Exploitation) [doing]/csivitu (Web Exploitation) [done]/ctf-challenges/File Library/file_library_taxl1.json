{
    "AttackModel": {
        "Steps": [
            {
                "StepNumber": 1,
                "StepString": "Read the challenge description and requirements, the vulnerability lies in Express query parsing",
                "Substeps": [
                    {
                        "SubstepNumber": 1.1,
                        "SubstepString": "Read the challenge description and requirements",
                        "Taxonomy": "Reconnaissance"
                    },
                    {
                        "SubstepNumber": 1.2,
                        "SubstepString": "Identify that the vulnerability lies in Express query parsing",
                        "Taxonomy": "Analysis"
                    }
                ]
            },
            {
                "StepNumber": 2,
                "StepString": "Study source files, specifically server.js",
                "Substeps": [
                    {
                        "SubstepNumber": 2.1,
                        "SubstepString": "Study server.js",
                        "Taxonomy": "Analysis"
                    }
                ]
            },
            {
                "StepNumber": 3,
                "StepString": "Identify that files retrieved need to pass certain conditions: no spaces or slashes in filename, filename length five or less, and only js, ts, cpp, c files allowed",
                "Substeps": [
                    {
                        "SubstepNumber": 3.1,
                        "SubstepString": "Identify the conditions for file retrieval",
                        "Taxonomy": "Analysis"
                    },
                    {
                        "SubstepNumber": 3.2,
                        "SubstepString": "Note that spaces or slashes in the filename are not allowed",
                        "Taxonomy": "Analysis"
                    },
                    {
                        "SubstepNumber": 3.3,
                        "SubstepString": "Note that filename length must be five or less",
                        "Taxonomy": "Analysis"
                    },
                    {
                        "SubstepNumber": 3.4,
                        "SubstepString": "Note that only js, ts, cpp, c files are allowed",
                        "Taxonomy": "Analysis"
                    }
                ]
            },
            {
                "StepNumber": 4,
                "StepString": "Infer that the flag is inside a `flag.txt`, needing to bypass filename restrictions to get it",
                "Substeps": [
                    {
                        "SubstepNumber": 4.1,
                        "SubstepString": "Infer that the flag is inside a `flag.txt`",
                        "Taxonomy": "Analysis"
                    },
                    {
                        "SubstepNumber": 4.2,
                        "SubstepString": "Note that filename restrictions need to be bypassed to get the flag",
                        "Taxonomy": "Analysis"
                    }
                ]
            },
            {
                "StepNumber": 5,
                "StepString": "Note that when an array is passed in 'file' GET parameter, it gets converted and concatenated into a string with comma separation for each element. This also passes the filename restrictions",
                "Substeps": [
                    {
                        "SubstepNumber": 5.1,
                        "SubstepString": "Note that an array passed in 'file' GET parameter gets converted and concatenated into a string",
                        "Taxonomy": "Analysis"
                    },
                    {
                        "SubstepNumber": 5.2,
                        "SubstepString": "Note that comma separation is added between each element of the array in the string format",
                        "Taxonomy": "Analysis"
                    },
                    {
                        "SubstepNumber": 5.3,
                        "SubstepString": "Note that this method of passing an array satisfies the filename restrictions",
                        "Taxonomy": "Analysis"
                    }
                ]
            },
            {
                "StepNumber": 6,
                "StepString": "Note that '.' and 'js' have to be the last two elements of the array to pass the file type check",
                "Substeps": [
                    {
                        "SubstepNumber": 6.1,
                        "SubstepString": "Note that '.' and 'js' need to be the last two elements of the array",
                        "Taxonomy": "Analysis"
                    },
                    {
                        "SubstepNumber": 6.2,
                        "SubstepString": "Note that this arrangement is necessary to pass the file type check",
                        "Taxonomy": "Analysis"
                    }
                ]
            },
            {
                "StepNumber": 7,
                "StepString": "Construct a parameter that both meets the conditions and requests the flag file. `['a', 'b', 'c', 'd', '/../flag.txt', '.', 'js']` is passed in an array via the GET parameter so that only the first five elements are used to create the file name, which then resolves to `flag.txt` after the process",
                "Substeps": [
                    {
                        "SubstepNumber": 7.1,
                        "SubstepString": "Construct a parameter that meets the conditions and requests the flag file",
                        "Taxonomy": "Exploitation"
                    },
                    {
                        "SubstepNumber": 7.2,
                        "SubstepString": "Pass `['a', 'b', 'c', 'd', '/../flag.txt', '.', 'js']` as an array via the GET parameter",
                        "Taxonomy": "Exploitation"
                    },
                    {
                        "SubstepNumber": 7.3,
                        "SubstepString": "Use only the first five elements of the array to create the file name",
                        "Taxonomy": "Exploitation"
                    },
                    {
                        "SubstepNumber": 7.4,
                        "SubstepString": "The file name resolves to `flag.txt` after the process",
                        "Taxonomy": "Exploitation"
                    }
                ]
            },
            {
                "StepNumber": 8,
                "StepString": "Send the GET request `/getFile?file[]=a&file[]=b&file[]=c&file[]=d&file[]=/../flag.txt&file[]=.&file[]=js` to the server",
                "Substeps": [
                    {
                        "SubstepNumber": 8.1,
                        "SubstepString": "Send a GET request to the server",
                        "Taxonomy": "Exploitation"
                    },
                    {
                        "SubstepNumber": 8.2,
                        "SubstepString": "Include the parameter `/getFile?file[]=a&file[]=b&file[]=c&file[]=d&file[]=/../flag.txt&file[]=.&file[]=js` in the request",
                        "Taxonomy": "Exploitation"
                    }
                ]
            },
            {
                "StepNumber": 9,
                "StepString": "Retrieve the flag from the server response: `csictf{5h0uld_5tr1ng1fy_th3_p4r4ms}`",
                "Substeps": [
                    {
                        "SubstepNumber": 9.1,
                        "SubstepString": "Retrieve the flag from the server response",
                        "Taxonomy": "Exploitation"
                    },
                    {
                        "SubstepNumber": 9.2,
                        "SubstepString": "The flag is `csictf{5h0uld_5tr1ng1fy_th3_p4r4ms}`",
                        "Taxonomy": "Exploitation"
                    }
                ]
            }
        ]
    }
}